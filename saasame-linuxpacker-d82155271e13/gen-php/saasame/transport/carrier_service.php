<?php
namespace saasame\transport;
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface carrier_serviceIf extends \saasame\transport\common_connection_serviceIf {
  /**
   * @param string $session_id
   * @param \saasame\transport\create_image_info $image
   * @return string
   * @throws \saasame\transport\invalid_operation
   */
  public function create($session_id, \saasame\transport\CreateImageInfo $image);
  /**
   * @param string $session_id
   * @param string[] $connection_ids
   * @param string $base_name
   * @param string $name
   * @param int $size
   * @param int $block_size
   * @param string $parent
   * @param bool $checksum_verify
   * @return string
   * @throws \saasame\transport\invalid_operation
   */
  public function create_ex($session_id, array $connection_ids, $base_name, $name, $size, $block_size, $parent, $checksum_verify);
  /**
   * @param string $session_id
   * @param string[] $connection_ids
   * @param string $base_name
   * @param string $name
   * @return string
   * @throws \saasame\transport\invalid_operation
   */
  public function open($session_id, array $connection_ids, $base_name, $name);
  /**
   * @param string $session_id
   * @param string $image_id
   * @param int $start
   * @param int $number_of_bytes_to_read
   * @return string
   * @throws \saasame\transport\invalid_operation
   */
  public function read($session_id, $image_id, $start, $number_of_bytes_to_read);
  /**
   * @param string $session_id
   * @param string $image_id
   * @param int $start
   * @param string $buffer
   * @param int $number_of_bytes_to_write
   * @return int
   * @throws \saasame\transport\invalid_operation
   */
  public function write($session_id, $image_id, $start, $buffer, $number_of_bytes_to_write);
  /**
   * @param string $session_id
   * @param string $image_id
   * @param int $start
   * @param string $buffer
   * @param int $number_of_bytes_to_write
   * @param bool $is_compressed
   * @return int
   * @throws \saasame\transport\invalid_operation
   */
  public function write_ex($session_id, $image_id, $start, $buffer, $number_of_bytes_to_write, $is_compressed);
  /**
   * @param string $session_id
   * @param string $image_id
   * @param bool $is_cancel
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function close($session_id, $image_id, $is_cancel);
  /**
   * @param string $session_id
   * @param string[] $base_images
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function remove_base_image($session_id, array $base_images);
  /**
   * @param string $session_id
   * @param array $images
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function remove_snapshot_image($session_id, array $images);
  /**
   * @param string $management
   * @param int $port
   * @param bool $is_ssl
   * @return bool
   */
  public function verify_management($management, $port, $is_ssl);
  /**
   * @param string $session_id
   * @param int $size
   * @return bool
   */
  public function set_buffer_size($session_id, $size);
  /**
   * @param string $session_id
   * @param string $image_id
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function is_buffer_free($session_id, $image_id);
  /**
   * @param string $session_id
   * @param string[] $connection_ids
   * @param string $image_name
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function is_image_replicated($session_id, array $connection_ids, $image_name);
}


class carrier_serviceClient extends \saasame\transport\common_connection_serviceClient implements \saasame\transport\carrier_serviceIf {
  public function __construct($input, $output=null) {
    parent::__construct($input, $output);
  }

  public function create($session_id, \saasame\transport\CreateImageInfo $image)
  {
    $this->send_create($session_id, $image);
    return $this->recv_create();
  }

  public function send_create($session_id, \saasame\transport\CreateImageInfo $image)
  {
    $args = new \saasame\transport\carrier_service_create_args();
    $args->session_id = $session_id;
    $args->image = $image;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'create', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('create', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_create()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\carrier_service_create_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\carrier_service_create_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("create failed: unknown result");
  }

  public function create_ex($session_id, array $connection_ids, $base_name, $name, $size, $block_size, $parent, $checksum_verify)
  {
    $this->send_create_ex($session_id, $connection_ids, $base_name, $name, $size, $block_size, $parent, $checksum_verify);
    return $this->recv_create_ex();
  }

  public function send_create_ex($session_id, array $connection_ids, $base_name, $name, $size, $block_size, $parent, $checksum_verify)
  {
    $args = new \saasame\transport\carrier_service_create_ex_args();
    $args->session_id = $session_id;
    $args->connection_ids = $connection_ids;
    $args->base_name = $base_name;
    $args->name = $name;
    $args->size = $size;
    $args->block_size = $block_size;
    $args->parent = $parent;
    $args->checksum_verify = $checksum_verify;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'create_ex', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('create_ex', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_create_ex()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\carrier_service_create_ex_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\carrier_service_create_ex_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("create_ex failed: unknown result");
  }

  public function open($session_id, array $connection_ids, $base_name, $name)
  {
    $this->send_open($session_id, $connection_ids, $base_name, $name);
    return $this->recv_open();
  }

  public function send_open($session_id, array $connection_ids, $base_name, $name)
  {
    $args = new \saasame\transport\carrier_service_open_args();
    $args->session_id = $session_id;
    $args->connection_ids = $connection_ids;
    $args->base_name = $base_name;
    $args->name = $name;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'open', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('open', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_open()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\carrier_service_open_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\carrier_service_open_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("open failed: unknown result");
  }

  public function read($session_id, $image_id, $start, $number_of_bytes_to_read)
  {
    $this->send_read($session_id, $image_id, $start, $number_of_bytes_to_read);
    return $this->recv_read();
  }

  public function send_read($session_id, $image_id, $start, $number_of_bytes_to_read)
  {
    $args = new \saasame\transport\carrier_service_read_args();
    $args->session_id = $session_id;
    $args->image_id = $image_id;
    $args->start = $start;
    $args->number_of_bytes_to_read = $number_of_bytes_to_read;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'read', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('read', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_read()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\carrier_service_read_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\carrier_service_read_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("read failed: unknown result");
  }

  public function write($session_id, $image_id, $start, $buffer, $number_of_bytes_to_write)
  {
    $this->send_write($session_id, $image_id, $start, $buffer, $number_of_bytes_to_write);
    return $this->recv_write();
  }

  public function send_write($session_id, $image_id, $start, $buffer, $number_of_bytes_to_write)
  {
    $args = new \saasame\transport\carrier_service_write_args();
    $args->session_id = $session_id;
    $args->image_id = $image_id;
    $args->start = $start;
    $args->buffer = $buffer;
    $args->number_of_bytes_to_write = $number_of_bytes_to_write;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'write', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('write', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_write()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\carrier_service_write_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\carrier_service_write_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("write failed: unknown result");
  }

  public function write_ex($session_id, $image_id, $start, $buffer, $number_of_bytes_to_write, $is_compressed)
  {
    $this->send_write_ex($session_id, $image_id, $start, $buffer, $number_of_bytes_to_write, $is_compressed);
    return $this->recv_write_ex();
  }

  public function send_write_ex($session_id, $image_id, $start, $buffer, $number_of_bytes_to_write, $is_compressed)
  {
    $args = new \saasame\transport\carrier_service_write_ex_args();
    $args->session_id = $session_id;
    $args->image_id = $image_id;
    $args->start = $start;
    $args->buffer = $buffer;
    $args->number_of_bytes_to_write = $number_of_bytes_to_write;
    $args->is_compressed = $is_compressed;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'write_ex', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('write_ex', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_write_ex()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\carrier_service_write_ex_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\carrier_service_write_ex_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("write_ex failed: unknown result");
  }

  public function close($session_id, $image_id, $is_cancel)
  {
    $this->send_close($session_id, $image_id, $is_cancel);
    return $this->recv_close();
  }

  public function send_close($session_id, $image_id, $is_cancel)
  {
    $args = new \saasame\transport\carrier_service_close_args();
    $args->session_id = $session_id;
    $args->image_id = $image_id;
    $args->is_cancel = $is_cancel;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'close', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('close', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_close()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\carrier_service_close_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\carrier_service_close_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("close failed: unknown result");
  }

  public function remove_base_image($session_id, array $base_images)
  {
    $this->send_remove_base_image($session_id, $base_images);
    return $this->recv_remove_base_image();
  }

  public function send_remove_base_image($session_id, array $base_images)
  {
    $args = new \saasame\transport\carrier_service_remove_base_image_args();
    $args->session_id = $session_id;
    $args->base_images = $base_images;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'remove_base_image', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('remove_base_image', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_remove_base_image()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\carrier_service_remove_base_image_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\carrier_service_remove_base_image_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("remove_base_image failed: unknown result");
  }

  public function remove_snapshot_image($session_id, array $images)
  {
    $this->send_remove_snapshot_image($session_id, $images);
    return $this->recv_remove_snapshot_image();
  }

  public function send_remove_snapshot_image($session_id, array $images)
  {
    $args = new \saasame\transport\carrier_service_remove_snapshot_image_args();
    $args->session_id = $session_id;
    $args->images = $images;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'remove_snapshot_image', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('remove_snapshot_image', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_remove_snapshot_image()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\carrier_service_remove_snapshot_image_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\carrier_service_remove_snapshot_image_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("remove_snapshot_image failed: unknown result");
  }

  public function verify_management($management, $port, $is_ssl)
  {
    $this->send_verify_management($management, $port, $is_ssl);
    return $this->recv_verify_management();
  }

  public function send_verify_management($management, $port, $is_ssl)
  {
    $args = new \saasame\transport\carrier_service_verify_management_args();
    $args->management = $management;
    $args->port = $port;
    $args->is_ssl = $is_ssl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verify_management', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verify_management', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verify_management()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\carrier_service_verify_management_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\carrier_service_verify_management_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("verify_management failed: unknown result");
  }

  public function set_buffer_size($session_id, $size)
  {
    $this->send_set_buffer_size($session_id, $size);
    return $this->recv_set_buffer_size();
  }

  public function send_set_buffer_size($session_id, $size)
  {
    $args = new \saasame\transport\carrier_service_set_buffer_size_args();
    $args->session_id = $session_id;
    $args->size = $size;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'set_buffer_size', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('set_buffer_size', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_set_buffer_size()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\carrier_service_set_buffer_size_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\carrier_service_set_buffer_size_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("set_buffer_size failed: unknown result");
  }

  public function is_buffer_free($session_id, $image_id)
  {
    $this->send_is_buffer_free($session_id, $image_id);
    return $this->recv_is_buffer_free();
  }

  public function send_is_buffer_free($session_id, $image_id)
  {
    $args = new \saasame\transport\carrier_service_is_buffer_free_args();
    $args->session_id = $session_id;
    $args->image_id = $image_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'is_buffer_free', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('is_buffer_free', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_is_buffer_free()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\carrier_service_is_buffer_free_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\carrier_service_is_buffer_free_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("is_buffer_free failed: unknown result");
  }

  public function is_image_replicated($session_id, array $connection_ids, $image_name)
  {
    $this->send_is_image_replicated($session_id, $connection_ids, $image_name);
    return $this->recv_is_image_replicated();
  }

  public function send_is_image_replicated($session_id, array $connection_ids, $image_name)
  {
    $args = new \saasame\transport\carrier_service_is_image_replicated_args();
    $args->session_id = $session_id;
    $args->connection_ids = $connection_ids;
    $args->image_name = $image_name;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'is_image_replicated', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('is_image_replicated', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_is_image_replicated()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\carrier_service_is_image_replicated_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\carrier_service_is_image_replicated_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("is_image_replicated failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class carrier_service_create_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var \saasame\transport\create_image_info
   */
  public $image = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'image',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\create_image_info',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['image'])) {
        $this->image = $vals['image'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_create_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->image = new \saasame\transport\create_image_info();
            $xfer += $this->image->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_create_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->image !== null) {
      if (!is_object($this->image)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('image', TType::STRUCT, 2);
      $xfer += $this->image->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_create_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_create_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_create_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_create_ex_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string[]
   */
  public $connection_ids = null;
  /**
   * @var string
   */
  public $base_name = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $size = null;
  /**
   * @var int
   */
  public $block_size = null;
  /**
   * @var string
   */
  public $parent = null;
  /**
   * @var bool
   */
  public $checksum_verify = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'connection_ids',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'base_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'size',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'block_size',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'parent',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'checksum_verify',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['connection_ids'])) {
        $this->connection_ids = $vals['connection_ids'];
      }
      if (isset($vals['base_name'])) {
        $this->base_name = $vals['base_name'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
      if (isset($vals['block_size'])) {
        $this->block_size = $vals['block_size'];
      }
      if (isset($vals['parent'])) {
        $this->parent = $vals['parent'];
      }
      if (isset($vals['checksum_verify'])) {
        $this->checksum_verify = $vals['checksum_verify'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_create_ex_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::SET) {
            $this->connection_ids = array();
            $_size1127 = 0;
            $_etype1130 = 0;
            $xfer += $input->readSetBegin($_etype1130, $_size1127);
            for ($_i1131 = 0; $_i1131 < $_size1127; ++$_i1131)
            {
              $elem1132 = null;
              $xfer += $input->readString($elem1132);
              if (is_scalar($elem1132)) {
                $this->connection_ids[$elem1132] = true;
              } else {
                $this->connection_ids []= $elem1132;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->base_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->block_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->checksum_verify);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_create_ex_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->connection_ids !== null) {
      if (!is_array($this->connection_ids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('connection_ids', TType::SET, 2);
      {
        $output->writeSetBegin(TType::STRING, count($this->connection_ids));
        {
          foreach ($this->connection_ids as $iter1133 => $iter1134)
          {
            if (is_scalar($iter1134)) {
            $xfer += $output->writeString($iter1133);
            } else {
            $xfer += $output->writeString($iter1134);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->base_name !== null) {
      $xfer += $output->writeFieldBegin('base_name', TType::STRING, 3);
      $xfer += $output->writeString($this->base_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I64, 5);
      $xfer += $output->writeI64($this->size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->block_size !== null) {
      $xfer += $output->writeFieldBegin('block_size', TType::I32, 6);
      $xfer += $output->writeI32($this->block_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parent !== null) {
      $xfer += $output->writeFieldBegin('parent', TType::STRING, 7);
      $xfer += $output->writeString($this->parent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->checksum_verify !== null) {
      $xfer += $output->writeFieldBegin('checksum_verify', TType::BOOL, 8);
      $xfer += $output->writeBool($this->checksum_verify);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_create_ex_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_create_ex_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_create_ex_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_open_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string[]
   */
  public $connection_ids = null;
  /**
   * @var string
   */
  public $base_name = null;
  /**
   * @var string
   */
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'connection_ids',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'base_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['connection_ids'])) {
        $this->connection_ids = $vals['connection_ids'];
      }
      if (isset($vals['base_name'])) {
        $this->base_name = $vals['base_name'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_open_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::SET) {
            $this->connection_ids = array();
            $_size1135 = 0;
            $_etype1138 = 0;
            $xfer += $input->readSetBegin($_etype1138, $_size1135);
            for ($_i1139 = 0; $_i1139 < $_size1135; ++$_i1139)
            {
              $elem1140 = null;
              $xfer += $input->readString($elem1140);
              if (is_scalar($elem1140)) {
                $this->connection_ids[$elem1140] = true;
              } else {
                $this->connection_ids []= $elem1140;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->base_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_open_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->connection_ids !== null) {
      if (!is_array($this->connection_ids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('connection_ids', TType::SET, 2);
      {
        $output->writeSetBegin(TType::STRING, count($this->connection_ids));
        {
          foreach ($this->connection_ids as $iter1141 => $iter1142)
          {
            if (is_scalar($iter1142)) {
            $xfer += $output->writeString($iter1141);
            } else {
            $xfer += $output->writeString($iter1142);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->base_name !== null) {
      $xfer += $output->writeFieldBegin('base_name', TType::STRING, 3);
      $xfer += $output->writeString($this->base_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_open_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_open_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_open_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_read_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $image_id = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $number_of_bytes_to_read = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'image_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'number_of_bytes_to_read',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['image_id'])) {
        $this->image_id = $vals['image_id'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['number_of_bytes_to_read'])) {
        $this->number_of_bytes_to_read = $vals['number_of_bytes_to_read'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_read_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->image_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->number_of_bytes_to_read);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_read_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->image_id !== null) {
      $xfer += $output->writeFieldBegin('image_id', TType::STRING, 2);
      $xfer += $output->writeString($this->image_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number_of_bytes_to_read !== null) {
      $xfer += $output->writeFieldBegin('number_of_bytes_to_read', TType::I32, 4);
      $xfer += $output->writeI32($this->number_of_bytes_to_read);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_read_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_read_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_read_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_write_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $image_id = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var string
   */
  public $buffer = null;
  /**
   * @var int
   */
  public $number_of_bytes_to_write = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'image_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'buffer',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'number_of_bytes_to_write',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['image_id'])) {
        $this->image_id = $vals['image_id'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['buffer'])) {
        $this->buffer = $vals['buffer'];
      }
      if (isset($vals['number_of_bytes_to_write'])) {
        $this->number_of_bytes_to_write = $vals['number_of_bytes_to_write'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_write_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->image_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->buffer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->number_of_bytes_to_write);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_write_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->image_id !== null) {
      $xfer += $output->writeFieldBegin('image_id', TType::STRING, 2);
      $xfer += $output->writeString($this->image_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buffer !== null) {
      $xfer += $output->writeFieldBegin('buffer', TType::STRING, 4);
      $xfer += $output->writeString($this->buffer);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number_of_bytes_to_write !== null) {
      $xfer += $output->writeFieldBegin('number_of_bytes_to_write', TType::I32, 5);
      $xfer += $output->writeI32($this->number_of_bytes_to_write);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_write_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_write_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_write_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_write_ex_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $image_id = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var string
   */
  public $buffer = null;
  /**
   * @var int
   */
  public $number_of_bytes_to_write = null;
  /**
   * @var bool
   */
  public $is_compressed = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'image_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'buffer',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'number_of_bytes_to_write',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'is_compressed',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['image_id'])) {
        $this->image_id = $vals['image_id'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['buffer'])) {
        $this->buffer = $vals['buffer'];
      }
      if (isset($vals['number_of_bytes_to_write'])) {
        $this->number_of_bytes_to_write = $vals['number_of_bytes_to_write'];
      }
      if (isset($vals['is_compressed'])) {
        $this->is_compressed = $vals['is_compressed'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_write_ex_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->image_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->buffer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->number_of_bytes_to_write);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_compressed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_write_ex_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->image_id !== null) {
      $xfer += $output->writeFieldBegin('image_id', TType::STRING, 2);
      $xfer += $output->writeString($this->image_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buffer !== null) {
      $xfer += $output->writeFieldBegin('buffer', TType::STRING, 4);
      $xfer += $output->writeString($this->buffer);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number_of_bytes_to_write !== null) {
      $xfer += $output->writeFieldBegin('number_of_bytes_to_write', TType::I32, 5);
      $xfer += $output->writeI32($this->number_of_bytes_to_write);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_compressed !== null) {
      $xfer += $output->writeFieldBegin('is_compressed', TType::BOOL, 6);
      $xfer += $output->writeBool($this->is_compressed);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_write_ex_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_write_ex_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_write_ex_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_close_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $image_id = null;
  /**
   * @var bool
   */
  public $is_cancel = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'image_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'is_cancel',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['image_id'])) {
        $this->image_id = $vals['image_id'];
      }
      if (isset($vals['is_cancel'])) {
        $this->is_cancel = $vals['is_cancel'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_close_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->image_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_cancel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_close_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->image_id !== null) {
      $xfer += $output->writeFieldBegin('image_id', TType::STRING, 2);
      $xfer += $output->writeString($this->image_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_cancel !== null) {
      $xfer += $output->writeFieldBegin('is_cancel', TType::BOOL, 3);
      $xfer += $output->writeBool($this->is_cancel);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_close_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_close_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_close_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_remove_base_image_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string[]
   */
  public $base_images = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'base_images',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['base_images'])) {
        $this->base_images = $vals['base_images'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_remove_base_image_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::SET) {
            $this->base_images = array();
            $_size1143 = 0;
            $_etype1146 = 0;
            $xfer += $input->readSetBegin($_etype1146, $_size1143);
            for ($_i1147 = 0; $_i1147 < $_size1143; ++$_i1147)
            {
              $elem1148 = null;
              $xfer += $input->readString($elem1148);
              if (is_scalar($elem1148)) {
                $this->base_images[$elem1148] = true;
              } else {
                $this->base_images []= $elem1148;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_remove_base_image_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->base_images !== null) {
      if (!is_array($this->base_images)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('base_images', TType::SET, 2);
      {
        $output->writeSetBegin(TType::STRING, count($this->base_images));
        {
          foreach ($this->base_images as $iter1149 => $iter1150)
          {
            if (is_scalar($iter1150)) {
            $xfer += $output->writeString($iter1149);
            } else {
            $xfer += $output->writeString($iter1150);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_remove_base_image_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_remove_base_image_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_remove_base_image_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_remove_snapshot_image_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var array
   */
  public $images = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'images',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\image_map_info',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['images'])) {
        $this->images = $vals['images'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_remove_snapshot_image_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->images = array();
            $_size1151 = 0;
            $_ktype1152 = 0;
            $_vtype1153 = 0;
            $xfer += $input->readMapBegin($_ktype1152, $_vtype1153, $_size1151);
            for ($_i1155 = 0; $_i1155 < $_size1151; ++$_i1155)
            {
              $key1156 = '';
              $val1157 = new \saasame\transport\image_map_info();
              $xfer += $input->readString($key1156);
              $val1157 = new \saasame\transport\image_map_info();
              $xfer += $val1157->read($input);
              $this->images[$key1156] = $val1157;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_remove_snapshot_image_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->images !== null) {
      if (!is_array($this->images)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('images', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->images));
        {
          foreach ($this->images as $kiter1158 => $viter1159)
          {
            $xfer += $output->writeString($kiter1158);
            $xfer += $viter1159->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_remove_snapshot_image_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_remove_snapshot_image_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_remove_snapshot_image_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_verify_management_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $management = null;
  /**
   * @var int
   */
  public $port = null;
  /**
   * @var bool
   */
  public $is_ssl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'management',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'port',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'is_ssl',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['management'])) {
        $this->management = $vals['management'];
      }
      if (isset($vals['port'])) {
        $this->port = $vals['port'];
      }
      if (isset($vals['is_ssl'])) {
        $this->is_ssl = $vals['is_ssl'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_verify_management_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->management);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->port);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_ssl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_verify_management_args');
    if ($this->management !== null) {
      $xfer += $output->writeFieldBegin('management', TType::STRING, 1);
      $xfer += $output->writeString($this->management);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->port !== null) {
      $xfer += $output->writeFieldBegin('port', TType::I32, 2);
      $xfer += $output->writeI32($this->port);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_ssl !== null) {
      $xfer += $output->writeFieldBegin('is_ssl', TType::BOOL, 3);
      $xfer += $output->writeBool($this->is_ssl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_verify_management_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_verify_management_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_verify_management_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_set_buffer_size_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var int
   */
  public $size = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'size',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_set_buffer_size_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_set_buffer_size_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I32, 2);
      $xfer += $output->writeI32($this->size);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_set_buffer_size_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_set_buffer_size_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_set_buffer_size_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_is_buffer_free_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $image_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'image_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['image_id'])) {
        $this->image_id = $vals['image_id'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_is_buffer_free_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->image_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_is_buffer_free_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->image_id !== null) {
      $xfer += $output->writeFieldBegin('image_id', TType::STRING, 2);
      $xfer += $output->writeString($this->image_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_is_buffer_free_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_is_buffer_free_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_is_buffer_free_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_is_image_replicated_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string[]
   */
  public $connection_ids = null;
  /**
   * @var string
   */
  public $image_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'connection_ids',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'image_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['connection_ids'])) {
        $this->connection_ids = $vals['connection_ids'];
      }
      if (isset($vals['image_name'])) {
        $this->image_name = $vals['image_name'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_is_image_replicated_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::SET) {
            $this->connection_ids = array();
            $_size1160 = 0;
            $_etype1163 = 0;
            $xfer += $input->readSetBegin($_etype1163, $_size1160);
            for ($_i1164 = 0; $_i1164 < $_size1160; ++$_i1164)
            {
              $elem1165 = null;
              $xfer += $input->readString($elem1165);
              if (is_scalar($elem1165)) {
                $this->connection_ids[$elem1165] = true;
              } else {
                $this->connection_ids []= $elem1165;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->image_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_is_image_replicated_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->connection_ids !== null) {
      if (!is_array($this->connection_ids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('connection_ids', TType::SET, 2);
      {
        $output->writeSetBegin(TType::STRING, count($this->connection_ids));
        {
          foreach ($this->connection_ids as $iter1166 => $iter1167)
          {
            if (is_scalar($iter1167)) {
            $xfer += $output->writeString($iter1166);
            } else {
            $xfer += $output->writeString($iter1167);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->image_name !== null) {
      $xfer += $output->writeFieldBegin('image_name', TType::STRING, 3);
      $xfer += $output->writeString($this->image_name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_service_is_image_replicated_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'carrier_service_is_image_replicated_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('carrier_service_is_image_replicated_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class carrier_serviceProcessor extends \saasame\transport\common_connection_serviceProcessor {
  public function __construct($handler) {
    parent::__construct($handler);
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_create($seqid, $input, $output) {
    $args = new \saasame\transport\carrier_service_create_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\carrier_service_create_result();
    try {
      $result->success = $this->handler_->create($args->session_id, $args->image);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'create', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('create', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_create_ex($seqid, $input, $output) {
    $args = new \saasame\transport\carrier_service_create_ex_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\carrier_service_create_ex_result();
    try {
      $result->success = $this->handler_->create_ex($args->session_id, $args->connection_ids, $args->base_name, $args->name, $args->size, $args->block_size, $args->parent, $args->checksum_verify);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'create_ex', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('create_ex', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_open($seqid, $input, $output) {
    $args = new \saasame\transport\carrier_service_open_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\carrier_service_open_result();
    try {
      $result->success = $this->handler_->open($args->session_id, $args->connection_ids, $args->base_name, $args->name);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'open', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('open', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_read($seqid, $input, $output) {
    $args = new \saasame\transport\carrier_service_read_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\carrier_service_read_result();
    try {
      $result->success = $this->handler_->read($args->session_id, $args->image_id, $args->start, $args->number_of_bytes_to_read);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'read', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('read', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_write($seqid, $input, $output) {
    $args = new \saasame\transport\carrier_service_write_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\carrier_service_write_result();
    try {
      $result->success = $this->handler_->write($args->session_id, $args->image_id, $args->start, $args->buffer, $args->number_of_bytes_to_write);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'write', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('write', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_write_ex($seqid, $input, $output) {
    $args = new \saasame\transport\carrier_service_write_ex_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\carrier_service_write_ex_result();
    try {
      $result->success = $this->handler_->write_ex($args->session_id, $args->image_id, $args->start, $args->buffer, $args->number_of_bytes_to_write, $args->is_compressed);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'write_ex', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('write_ex', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_close($seqid, $input, $output) {
    $args = new \saasame\transport\carrier_service_close_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\carrier_service_close_result();
    try {
      $result->success = $this->handler_->close($args->session_id, $args->image_id, $args->is_cancel);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'close', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('close', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_remove_base_image($seqid, $input, $output) {
    $args = new \saasame\transport\carrier_service_remove_base_image_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\carrier_service_remove_base_image_result();
    try {
      $result->success = $this->handler_->remove_base_image($args->session_id, $args->base_images);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'remove_base_image', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('remove_base_image', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_remove_snapshot_image($seqid, $input, $output) {
    $args = new \saasame\transport\carrier_service_remove_snapshot_image_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\carrier_service_remove_snapshot_image_result();
    try {
      $result->success = $this->handler_->remove_snapshot_image($args->session_id, $args->images);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'remove_snapshot_image', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('remove_snapshot_image', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_verify_management($seqid, $input, $output) {
    $args = new \saasame\transport\carrier_service_verify_management_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\carrier_service_verify_management_result();
    $result->success = $this->handler_->verify_management($args->management, $args->port, $args->is_ssl);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'verify_management', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('verify_management', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_set_buffer_size($seqid, $input, $output) {
    $args = new \saasame\transport\carrier_service_set_buffer_size_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\carrier_service_set_buffer_size_result();
    $result->success = $this->handler_->set_buffer_size($args->session_id, $args->size);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'set_buffer_size', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('set_buffer_size', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_is_buffer_free($seqid, $input, $output) {
    $args = new \saasame\transport\carrier_service_is_buffer_free_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\carrier_service_is_buffer_free_result();
    try {
      $result->success = $this->handler_->is_buffer_free($args->session_id, $args->image_id);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'is_buffer_free', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('is_buffer_free', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_is_image_replicated($seqid, $input, $output) {
    $args = new \saasame\transport\carrier_service_is_image_replicated_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\carrier_service_is_image_replicated_result();
    try {
      $result->success = $this->handler_->is_image_replicated($args->session_id, $args->connection_ids, $args->image_name);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'is_image_replicated', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('is_image_replicated', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
}


