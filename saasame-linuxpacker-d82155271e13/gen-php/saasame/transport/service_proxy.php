<?php
namespace saasame\transport;
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface service_proxyIf extends \saasame\transport\physical_packer_service_proxyIf {
  /**
   * @param string $session_id
   * @param string $job_id
   * @param \saasame\transport\create_job_detail $create_job
   * @param string $service_type
   * @return \saasame\transport\job_detail
   * @throws \saasame\transport\invalid_operation
   */
  public function create_job_ex_p($session_id, $job_id, \saasame\transport\create_job_detail $create_job, $service_type);
  /**
   * @param string $session_id
   * @param string $job_id
   * @param string $service_type
   * @return \saasame\transport\job_detail
   * @throws \saasame\transport\invalid_operation
   */
  public function get_job_p($session_id, $job_id, $service_type);
  /**
   * @param string $session_id
   * @param string $job_id
   * @param string $service_type
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function interrupt_job_p($session_id, $job_id, $service_type);
  /**
   * @param string $session_id
   * @param string $job_id
   * @param string $service_type
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function resume_job_p($session_id, $job_id, $service_type);
  /**
   * @param string $session_id
   * @param string $job_id
   * @param string $service_type
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function remove_job_p($session_id, $job_id, $service_type);
  /**
   * @param string $session_id
   * @param string $job_id
   * @param string $service_type
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function running_job_p($session_id, $job_id, $service_type);
  /**
   * @param string $session_id
   * @param string $job_id
   * @param \saasame\transport\create_job_detail $create_job
   * @param string $service_type
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function update_job_p($session_id, $job_id, \saasame\transport\create_job_detail $create_job, $service_type);
  /**
   * @param string $session_id
   * @param array $images
   * @param string $service_type
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function remove_snapshot_image_p($session_id, array $images, $service_type);
  /**
   * @param string $session_id
   * @param \saasame\transport\connection $conn
   * @param string $service_type
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function test_connection_p($session_id, \saasame\transport\Connection $conn, $service_type);
  /**
   * @param string $session_id
   * @param \saasame\transport\connection $conn
   * @param string $service_type
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function add_connection_p($session_id, \saasame\transport\Connection $conn, $service_type);
  /**
   * @param string $session_id
   * @param string $connection_id
   * @param string $service_type
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function remove_connection_p($session_id, $connection_id, $service_type);
  /**
   * @param string $session_id
   * @param \saasame\transport\connection $conn
   * @param string $service_type
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function modify_connection_p($session_id, \saasame\transport\Connection $conn, $service_type);
  /**
   * @param string $session_id
   * @param string $service_type
   * @return \saasame\transport\connection[]
   * @throws \saasame\transport\invalid_operation
   */
  public function enumerate_connections_p($session_id, $service_type);
  /**
   * @param string $session_id
   * @param string $connection_id
   * @param string $service_type
   * @return \saasame\transport\connection
   * @throws \saasame\transport\invalid_operation
   */
  public function get_connection_p($session_id, $connection_id, $service_type);
  /**
   * @param string $session_id
   * @param string $host
   * @param string $username
   * @param string $password
   * @return \saasame\transport\virtual_host
   * @throws \saasame\transport\invalid_operation
   */
  public function get_virtual_host_info_p($session_id, $host, $username, $password);
  /**
   * @param string $session_id
   * @param string $host
   * @param string $username
   * @param string $password
   * @param string $machine_id
   * @return \saasame\transport\virtual_machine
   * @throws \saasame\transport\invalid_operation
   */
  public function get_virtual_machine_detail_p($session_id, $host, $username, $password, $machine_id);
  /**
   * @param string $session_id
   * @param string $host
   * @param int $filter
   * @return \saasame\transport\physical_machine_info
   * @throws \saasame\transport\invalid_operation
   */
  public function get_physical_machine_detail_p($session_id, $host, $filter);
  /**
   * @param string $packer
   * @param string $carrier
   * @param int $port
   * @param bool $is_ssl
   * @return bool
   */
  public function verify_packer_to_carrier_p($packer, $carrier, $port, $is_ssl);
  /**
   * @param string $session_id
   * @param string $host
   * @return string
   * @throws \saasame\transport\invalid_operation
   */
  public function take_packer_xray_p($session_id, $host);
  /**
   * @param string $session_id
   * @param string $host
   * @return \saasame\transport\service_info
   * @throws \saasame\transport\invalid_operation
   */
  public function get_packer_service_info_p($session_id, $host);
  /**
   * @param string $session_id
   * @param string $disk_addr
   * @param string $disk_id
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function set_customized_id_p($session_id, $disk_addr, $disk_id);
}


class service_proxyClient extends \saasame\transport\physical_packer_service_proxyClient implements \saasame\transport\service_proxyIf {
  public function __construct($input, $output=null) {
    parent::__construct($input, $output);
  }

  public function create_job_ex_p($session_id, $job_id, \saasame\transport\create_job_detail $create_job, $service_type)
  {
    $this->send_create_job_ex_p($session_id, $job_id, $create_job, $service_type);
    return $this->recv_create_job_ex_p();
  }

  public function send_create_job_ex_p($session_id, $job_id, \saasame\transport\create_job_detail $create_job, $service_type)
  {
    $args = new \saasame\transport\service_proxy_create_job_ex_p_args();
    $args->session_id = $session_id;
    $args->job_id = $job_id;
    $args->create_job = $create_job;
    $args->service_type = $service_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'create_job_ex_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('create_job_ex_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_create_job_ex_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\service_proxy_create_job_ex_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\service_proxy_create_job_ex_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("create_job_ex_p failed: unknown result");
  }

  public function get_job_p($session_id, $job_id, $service_type)
  {
    $this->send_get_job_p($session_id, $job_id, $service_type);
    return $this->recv_get_job_p();
  }

  public function send_get_job_p($session_id, $job_id, $service_type)
  {
    $args = new \saasame\transport\service_proxy_get_job_p_args();
    $args->session_id = $session_id;
    $args->job_id = $job_id;
    $args->service_type = $service_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_job_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_job_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_job_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\service_proxy_get_job_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\service_proxy_get_job_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("get_job_p failed: unknown result");
  }

  public function interrupt_job_p($session_id, $job_id, $service_type)
  {
    $this->send_interrupt_job_p($session_id, $job_id, $service_type);
    return $this->recv_interrupt_job_p();
  }

  public function send_interrupt_job_p($session_id, $job_id, $service_type)
  {
    $args = new \saasame\transport\service_proxy_interrupt_job_p_args();
    $args->session_id = $session_id;
    $args->job_id = $job_id;
    $args->service_type = $service_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'interrupt_job_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('interrupt_job_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_interrupt_job_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\service_proxy_interrupt_job_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\service_proxy_interrupt_job_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("interrupt_job_p failed: unknown result");
  }

  public function resume_job_p($session_id, $job_id, $service_type)
  {
    $this->send_resume_job_p($session_id, $job_id, $service_type);
    return $this->recv_resume_job_p();
  }

  public function send_resume_job_p($session_id, $job_id, $service_type)
  {
    $args = new \saasame\transport\service_proxy_resume_job_p_args();
    $args->session_id = $session_id;
    $args->job_id = $job_id;
    $args->service_type = $service_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'resume_job_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('resume_job_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_resume_job_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\service_proxy_resume_job_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\service_proxy_resume_job_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("resume_job_p failed: unknown result");
  }

  public function remove_job_p($session_id, $job_id, $service_type)
  {
    $this->send_remove_job_p($session_id, $job_id, $service_type);
    return $this->recv_remove_job_p();
  }

  public function send_remove_job_p($session_id, $job_id, $service_type)
  {
    $args = new \saasame\transport\service_proxy_remove_job_p_args();
    $args->session_id = $session_id;
    $args->job_id = $job_id;
    $args->service_type = $service_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'remove_job_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('remove_job_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_remove_job_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\service_proxy_remove_job_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\service_proxy_remove_job_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("remove_job_p failed: unknown result");
  }

  public function running_job_p($session_id, $job_id, $service_type)
  {
    $this->send_running_job_p($session_id, $job_id, $service_type);
    return $this->recv_running_job_p();
  }

  public function send_running_job_p($session_id, $job_id, $service_type)
  {
    $args = new \saasame\transport\service_proxy_running_job_p_args();
    $args->session_id = $session_id;
    $args->job_id = $job_id;
    $args->service_type = $service_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'running_job_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('running_job_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_running_job_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\service_proxy_running_job_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\service_proxy_running_job_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("running_job_p failed: unknown result");
  }

  public function update_job_p($session_id, $job_id, \saasame\transport\create_job_detail $create_job, $service_type)
  {
    $this->send_update_job_p($session_id, $job_id, $create_job, $service_type);
    return $this->recv_update_job_p();
  }

  public function send_update_job_p($session_id, $job_id, \saasame\transport\create_job_detail $create_job, $service_type)
  {
    $args = new \saasame\transport\service_proxy_update_job_p_args();
    $args->session_id = $session_id;
    $args->job_id = $job_id;
    $args->create_job = $create_job;
    $args->service_type = $service_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update_job_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update_job_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update_job_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\service_proxy_update_job_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\service_proxy_update_job_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("update_job_p failed: unknown result");
  }

  public function remove_snapshot_image_p($session_id, array $images, $service_type)
  {
    $this->send_remove_snapshot_image_p($session_id, $images, $service_type);
    return $this->recv_remove_snapshot_image_p();
  }

  public function send_remove_snapshot_image_p($session_id, array $images, $service_type)
  {
    $args = new \saasame\transport\service_proxy_remove_snapshot_image_p_args();
    $args->session_id = $session_id;
    $args->images = $images;
    $args->service_type = $service_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'remove_snapshot_image_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('remove_snapshot_image_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_remove_snapshot_image_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\service_proxy_remove_snapshot_image_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\service_proxy_remove_snapshot_image_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("remove_snapshot_image_p failed: unknown result");
  }

  public function test_connection_p($session_id, \saasame\transport\Connection $conn, $service_type)
  {
    $this->send_test_connection_p($session_id, $conn, $service_type);
    return $this->recv_test_connection_p();
  }

  public function send_test_connection_p($session_id, \saasame\transport\Connection $conn, $service_type)
  {
    $args = new \saasame\transport\service_proxy_test_connection_p_args();
    $args->session_id = $session_id;
    $args->conn = $conn;
    $args->service_type = $service_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'test_connection_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('test_connection_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_test_connection_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\service_proxy_test_connection_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\service_proxy_test_connection_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("test_connection_p failed: unknown result");
  }

  public function add_connection_p($session_id, \saasame\transport\Connection $conn, $service_type)
  {
    $this->send_add_connection_p($session_id, $conn, $service_type);
    return $this->recv_add_connection_p();
  }

  public function send_add_connection_p($session_id, \saasame\transport\Connection $conn, $service_type)
  {
    $args = new \saasame\transport\service_proxy_add_connection_p_args();
    $args->session_id = $session_id;
    $args->conn = $conn;
    $args->service_type = $service_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'add_connection_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('add_connection_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_add_connection_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\service_proxy_add_connection_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\service_proxy_add_connection_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("add_connection_p failed: unknown result");
  }

  public function remove_connection_p($session_id, $connection_id, $service_type)
  {
    $this->send_remove_connection_p($session_id, $connection_id, $service_type);
    return $this->recv_remove_connection_p();
  }

  public function send_remove_connection_p($session_id, $connection_id, $service_type)
  {
    $args = new \saasame\transport\service_proxy_remove_connection_p_args();
    $args->session_id = $session_id;
    $args->connection_id = $connection_id;
    $args->service_type = $service_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'remove_connection_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('remove_connection_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_remove_connection_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\service_proxy_remove_connection_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\service_proxy_remove_connection_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("remove_connection_p failed: unknown result");
  }

  public function modify_connection_p($session_id, \saasame\transport\Connection $conn, $service_type)
  {
    $this->send_modify_connection_p($session_id, $conn, $service_type);
    return $this->recv_modify_connection_p();
  }

  public function send_modify_connection_p($session_id, \saasame\transport\Connection $conn, $service_type)
  {
    $args = new \saasame\transport\service_proxy_modify_connection_p_args();
    $args->session_id = $session_id;
    $args->conn = $conn;
    $args->service_type = $service_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'modify_connection_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('modify_connection_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_modify_connection_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\service_proxy_modify_connection_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\service_proxy_modify_connection_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("modify_connection_p failed: unknown result");
  }

  public function enumerate_connections_p($session_id, $service_type)
  {
    $this->send_enumerate_connections_p($session_id, $service_type);
    return $this->recv_enumerate_connections_p();
  }

  public function send_enumerate_connections_p($session_id, $service_type)
  {
    $args = new \saasame\transport\service_proxy_enumerate_connections_p_args();
    $args->session_id = $session_id;
    $args->service_type = $service_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'enumerate_connections_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('enumerate_connections_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_enumerate_connections_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\service_proxy_enumerate_connections_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\service_proxy_enumerate_connections_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("enumerate_connections_p failed: unknown result");
  }

  public function get_connection_p($session_id, $connection_id, $service_type)
  {
    $this->send_get_connection_p($session_id, $connection_id, $service_type);
    return $this->recv_get_connection_p();
  }

  public function send_get_connection_p($session_id, $connection_id, $service_type)
  {
    $args = new \saasame\transport\service_proxy_get_connection_p_args();
    $args->session_id = $session_id;
    $args->connection_id = $connection_id;
    $args->service_type = $service_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_connection_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_connection_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_connection_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\service_proxy_get_connection_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\service_proxy_get_connection_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("get_connection_p failed: unknown result");
  }

  public function get_virtual_host_info_p($session_id, $host, $username, $password)
  {
    $this->send_get_virtual_host_info_p($session_id, $host, $username, $password);
    return $this->recv_get_virtual_host_info_p();
  }

  public function send_get_virtual_host_info_p($session_id, $host, $username, $password)
  {
    $args = new \saasame\transport\service_proxy_get_virtual_host_info_p_args();
    $args->session_id = $session_id;
    $args->host = $host;
    $args->username = $username;
    $args->password = $password;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_virtual_host_info_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_virtual_host_info_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_virtual_host_info_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\service_proxy_get_virtual_host_info_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\service_proxy_get_virtual_host_info_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("get_virtual_host_info_p failed: unknown result");
  }

  public function get_virtual_machine_detail_p($session_id, $host, $username, $password, $machine_id)
  {
    $this->send_get_virtual_machine_detail_p($session_id, $host, $username, $password, $machine_id);
    return $this->recv_get_virtual_machine_detail_p();
  }

  public function send_get_virtual_machine_detail_p($session_id, $host, $username, $password, $machine_id)
  {
    $args = new \saasame\transport\service_proxy_get_virtual_machine_detail_p_args();
    $args->session_id = $session_id;
    $args->host = $host;
    $args->username = $username;
    $args->password = $password;
    $args->machine_id = $machine_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_virtual_machine_detail_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_virtual_machine_detail_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_virtual_machine_detail_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\service_proxy_get_virtual_machine_detail_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\service_proxy_get_virtual_machine_detail_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("get_virtual_machine_detail_p failed: unknown result");
  }

  public function get_physical_machine_detail_p($session_id, $host, $filter)
  {
    $this->send_get_physical_machine_detail_p($session_id, $host, $filter);
    return $this->recv_get_physical_machine_detail_p();
  }

  public function send_get_physical_machine_detail_p($session_id, $host, $filter)
  {
    $args = new \saasame\transport\service_proxy_get_physical_machine_detail_p_args();
    $args->session_id = $session_id;
    $args->host = $host;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_physical_machine_detail_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_physical_machine_detail_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_physical_machine_detail_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\service_proxy_get_physical_machine_detail_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\service_proxy_get_physical_machine_detail_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("get_physical_machine_detail_p failed: unknown result");
  }

  public function verify_packer_to_carrier_p($packer, $carrier, $port, $is_ssl)
  {
    $this->send_verify_packer_to_carrier_p($packer, $carrier, $port, $is_ssl);
    return $this->recv_verify_packer_to_carrier_p();
  }

  public function send_verify_packer_to_carrier_p($packer, $carrier, $port, $is_ssl)
  {
    $args = new \saasame\transport\service_proxy_verify_packer_to_carrier_p_args();
    $args->packer = $packer;
    $args->carrier = $carrier;
    $args->port = $port;
    $args->is_ssl = $is_ssl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verify_packer_to_carrier_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verify_packer_to_carrier_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verify_packer_to_carrier_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\service_proxy_verify_packer_to_carrier_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\service_proxy_verify_packer_to_carrier_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("verify_packer_to_carrier_p failed: unknown result");
  }

  public function take_packer_xray_p($session_id, $host)
  {
    $this->send_take_packer_xray_p($session_id, $host);
    return $this->recv_take_packer_xray_p();
  }

  public function send_take_packer_xray_p($session_id, $host)
  {
    $args = new \saasame\transport\service_proxy_take_packer_xray_p_args();
    $args->session_id = $session_id;
    $args->host = $host;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'take_packer_xray_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('take_packer_xray_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_take_packer_xray_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\service_proxy_take_packer_xray_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\service_proxy_take_packer_xray_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("take_packer_xray_p failed: unknown result");
  }

  public function get_packer_service_info_p($session_id, $host)
  {
    $this->send_get_packer_service_info_p($session_id, $host);
    return $this->recv_get_packer_service_info_p();
  }

  public function send_get_packer_service_info_p($session_id, $host)
  {
    $args = new \saasame\transport\service_proxy_get_packer_service_info_p_args();
    $args->session_id = $session_id;
    $args->host = $host;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_packer_service_info_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_packer_service_info_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_packer_service_info_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\service_proxy_get_packer_service_info_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\service_proxy_get_packer_service_info_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("get_packer_service_info_p failed: unknown result");
  }

  public function set_customized_id_p($session_id, $disk_addr, $disk_id)
  {
    $this->send_set_customized_id_p($session_id, $disk_addr, $disk_id);
    return $this->recv_set_customized_id_p();
  }

  public function send_set_customized_id_p($session_id, $disk_addr, $disk_id)
  {
    $args = new \saasame\transport\service_proxy_set_customized_id_p_args();
    $args->session_id = $session_id;
    $args->disk_addr = $disk_addr;
    $args->disk_id = $disk_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'set_customized_id_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('set_customized_id_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_set_customized_id_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\service_proxy_set_customized_id_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\service_proxy_set_customized_id_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("set_customized_id_p failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class service_proxy_create_job_ex_p_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $job_id = null;
  /**
   * @var \saasame\transport\create_job_detail
   */
  public $create_job = null;
  /**
   * @var string
   */
  public $service_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'job_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'create_job',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\create_job_detail',
          ),
        4 => array(
          'var' => 'service_type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['job_id'])) {
        $this->job_id = $vals['job_id'];
      }
      if (isset($vals['create_job'])) {
        $this->create_job = $vals['create_job'];
      }
      if (isset($vals['service_type'])) {
        $this->service_type = $vals['service_type'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_create_job_ex_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->job_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->create_job = new \saasame\transport\create_job_detail();
            $xfer += $this->create_job->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->service_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_create_job_ex_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->job_id !== null) {
      $xfer += $output->writeFieldBegin('job_id', TType::STRING, 2);
      $xfer += $output->writeString($this->job_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_job !== null) {
      if (!is_object($this->create_job)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('create_job', TType::STRUCT, 3);
      $xfer += $this->create_job->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->service_type !== null) {
      $xfer += $output->writeFieldBegin('service_type', TType::STRING, 4);
      $xfer += $output->writeString($this->service_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_create_job_ex_p_result {
  static $_TSPEC;

  /**
   * @var \saasame\transport\job_detail
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\job_detail',
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_create_job_ex_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \saasame\transport\job_detail();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_create_job_ex_p_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_get_job_p_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $job_id = null;
  /**
   * @var string
   */
  public $service_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'job_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'service_type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['job_id'])) {
        $this->job_id = $vals['job_id'];
      }
      if (isset($vals['service_type'])) {
        $this->service_type = $vals['service_type'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_get_job_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->job_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->service_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_get_job_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->job_id !== null) {
      $xfer += $output->writeFieldBegin('job_id', TType::STRING, 2);
      $xfer += $output->writeString($this->job_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->service_type !== null) {
      $xfer += $output->writeFieldBegin('service_type', TType::STRING, 3);
      $xfer += $output->writeString($this->service_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_get_job_p_result {
  static $_TSPEC;

  /**
   * @var \saasame\transport\job_detail
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\job_detail',
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_get_job_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \saasame\transport\job_detail();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_get_job_p_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_interrupt_job_p_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $job_id = null;
  /**
   * @var string
   */
  public $service_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'job_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'service_type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['job_id'])) {
        $this->job_id = $vals['job_id'];
      }
      if (isset($vals['service_type'])) {
        $this->service_type = $vals['service_type'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_interrupt_job_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->job_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->service_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_interrupt_job_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->job_id !== null) {
      $xfer += $output->writeFieldBegin('job_id', TType::STRING, 2);
      $xfer += $output->writeString($this->job_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->service_type !== null) {
      $xfer += $output->writeFieldBegin('service_type', TType::STRING, 3);
      $xfer += $output->writeString($this->service_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_interrupt_job_p_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_interrupt_job_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_interrupt_job_p_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_resume_job_p_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $job_id = null;
  /**
   * @var string
   */
  public $service_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'job_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'service_type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['job_id'])) {
        $this->job_id = $vals['job_id'];
      }
      if (isset($vals['service_type'])) {
        $this->service_type = $vals['service_type'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_resume_job_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->job_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->service_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_resume_job_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->job_id !== null) {
      $xfer += $output->writeFieldBegin('job_id', TType::STRING, 2);
      $xfer += $output->writeString($this->job_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->service_type !== null) {
      $xfer += $output->writeFieldBegin('service_type', TType::STRING, 3);
      $xfer += $output->writeString($this->service_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_resume_job_p_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_resume_job_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_resume_job_p_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_remove_job_p_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $job_id = null;
  /**
   * @var string
   */
  public $service_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'job_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'service_type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['job_id'])) {
        $this->job_id = $vals['job_id'];
      }
      if (isset($vals['service_type'])) {
        $this->service_type = $vals['service_type'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_remove_job_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->job_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->service_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_remove_job_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->job_id !== null) {
      $xfer += $output->writeFieldBegin('job_id', TType::STRING, 2);
      $xfer += $output->writeString($this->job_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->service_type !== null) {
      $xfer += $output->writeFieldBegin('service_type', TType::STRING, 3);
      $xfer += $output->writeString($this->service_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_remove_job_p_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_remove_job_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_remove_job_p_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_running_job_p_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $job_id = null;
  /**
   * @var string
   */
  public $service_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'job_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'service_type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['job_id'])) {
        $this->job_id = $vals['job_id'];
      }
      if (isset($vals['service_type'])) {
        $this->service_type = $vals['service_type'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_running_job_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->job_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->service_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_running_job_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->job_id !== null) {
      $xfer += $output->writeFieldBegin('job_id', TType::STRING, 2);
      $xfer += $output->writeString($this->job_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->service_type !== null) {
      $xfer += $output->writeFieldBegin('service_type', TType::STRING, 3);
      $xfer += $output->writeString($this->service_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_running_job_p_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_running_job_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_running_job_p_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_update_job_p_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $job_id = null;
  /**
   * @var \saasame\transport\create_job_detail
   */
  public $create_job = null;
  /**
   * @var string
   */
  public $service_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'job_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'create_job',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\create_job_detail',
          ),
        4 => array(
          'var' => 'service_type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['job_id'])) {
        $this->job_id = $vals['job_id'];
      }
      if (isset($vals['create_job'])) {
        $this->create_job = $vals['create_job'];
      }
      if (isset($vals['service_type'])) {
        $this->service_type = $vals['service_type'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_update_job_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->job_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->create_job = new \saasame\transport\create_job_detail();
            $xfer += $this->create_job->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->service_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_update_job_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->job_id !== null) {
      $xfer += $output->writeFieldBegin('job_id', TType::STRING, 2);
      $xfer += $output->writeString($this->job_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_job !== null) {
      if (!is_object($this->create_job)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('create_job', TType::STRUCT, 3);
      $xfer += $this->create_job->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->service_type !== null) {
      $xfer += $output->writeFieldBegin('service_type', TType::STRING, 4);
      $xfer += $output->writeString($this->service_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_update_job_p_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_update_job_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_update_job_p_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_remove_snapshot_image_p_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var array
   */
  public $images = null;
  /**
   * @var string
   */
  public $service_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'images',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\image_map_info',
            ),
          ),
        3 => array(
          'var' => 'service_type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['images'])) {
        $this->images = $vals['images'];
      }
      if (isset($vals['service_type'])) {
        $this->service_type = $vals['service_type'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_remove_snapshot_image_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->images = array();
            $_size1245 = 0;
            $_ktype1246 = 0;
            $_vtype1247 = 0;
            $xfer += $input->readMapBegin($_ktype1246, $_vtype1247, $_size1245);
            for ($_i1249 = 0; $_i1249 < $_size1245; ++$_i1249)
            {
              $key1250 = '';
              $val1251 = new \saasame\transport\image_map_info();
              $xfer += $input->readString($key1250);
              $val1251 = new \saasame\transport\image_map_info();
              $xfer += $val1251->read($input);
              $this->images[$key1250] = $val1251;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->service_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_remove_snapshot_image_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->images !== null) {
      if (!is_array($this->images)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('images', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->images));
        {
          foreach ($this->images as $kiter1252 => $viter1253)
          {
            $xfer += $output->writeString($kiter1252);
            $xfer += $viter1253->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->service_type !== null) {
      $xfer += $output->writeFieldBegin('service_type', TType::STRING, 3);
      $xfer += $output->writeString($this->service_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_remove_snapshot_image_p_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_remove_snapshot_image_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_remove_snapshot_image_p_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_test_connection_p_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var \saasame\transport\connection
   */
  public $conn = null;
  /**
   * @var string
   */
  public $service_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'conn',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\connection',
          ),
        3 => array(
          'var' => 'service_type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['conn'])) {
        $this->conn = $vals['conn'];
      }
      if (isset($vals['service_type'])) {
        $this->service_type = $vals['service_type'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_test_connection_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->conn = new \saasame\transport\connection();
            $xfer += $this->conn->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->service_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_test_connection_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->conn !== null) {
      if (!is_object($this->conn)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('conn', TType::STRUCT, 2);
      $xfer += $this->conn->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->service_type !== null) {
      $xfer += $output->writeFieldBegin('service_type', TType::STRING, 3);
      $xfer += $output->writeString($this->service_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_test_connection_p_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_test_connection_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_test_connection_p_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_add_connection_p_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var \saasame\transport\connection
   */
  public $conn = null;
  /**
   * @var string
   */
  public $service_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'conn',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\connection',
          ),
        3 => array(
          'var' => 'service_type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['conn'])) {
        $this->conn = $vals['conn'];
      }
      if (isset($vals['service_type'])) {
        $this->service_type = $vals['service_type'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_add_connection_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->conn = new \saasame\transport\connection();
            $xfer += $this->conn->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->service_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_add_connection_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->conn !== null) {
      if (!is_object($this->conn)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('conn', TType::STRUCT, 2);
      $xfer += $this->conn->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->service_type !== null) {
      $xfer += $output->writeFieldBegin('service_type', TType::STRING, 3);
      $xfer += $output->writeString($this->service_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_add_connection_p_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_add_connection_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_add_connection_p_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_remove_connection_p_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $connection_id = null;
  /**
   * @var string
   */
  public $service_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'connection_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'service_type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['connection_id'])) {
        $this->connection_id = $vals['connection_id'];
      }
      if (isset($vals['service_type'])) {
        $this->service_type = $vals['service_type'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_remove_connection_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->connection_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->service_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_remove_connection_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->connection_id !== null) {
      $xfer += $output->writeFieldBegin('connection_id', TType::STRING, 2);
      $xfer += $output->writeString($this->connection_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->service_type !== null) {
      $xfer += $output->writeFieldBegin('service_type', TType::STRING, 3);
      $xfer += $output->writeString($this->service_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_remove_connection_p_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_remove_connection_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_remove_connection_p_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_modify_connection_p_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var \saasame\transport\connection
   */
  public $conn = null;
  /**
   * @var string
   */
  public $service_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'conn',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\connection',
          ),
        3 => array(
          'var' => 'service_type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['conn'])) {
        $this->conn = $vals['conn'];
      }
      if (isset($vals['service_type'])) {
        $this->service_type = $vals['service_type'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_modify_connection_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->conn = new \saasame\transport\connection();
            $xfer += $this->conn->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->service_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_modify_connection_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->conn !== null) {
      if (!is_object($this->conn)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('conn', TType::STRUCT, 2);
      $xfer += $this->conn->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->service_type !== null) {
      $xfer += $output->writeFieldBegin('service_type', TType::STRING, 3);
      $xfer += $output->writeString($this->service_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_modify_connection_p_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_modify_connection_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_modify_connection_p_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_enumerate_connections_p_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $service_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'service_type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['service_type'])) {
        $this->service_type = $vals['service_type'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_enumerate_connections_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->service_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_enumerate_connections_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->service_type !== null) {
      $xfer += $output->writeFieldBegin('service_type', TType::STRING, 2);
      $xfer += $output->writeString($this->service_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_enumerate_connections_p_result {
  static $_TSPEC;

  /**
   * @var \saasame\transport\connection[]
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\connection',
            ),
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_enumerate_connections_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1254 = 0;
            $_etype1257 = 0;
            $xfer += $input->readListBegin($_etype1257, $_size1254);
            for ($_i1258 = 0; $_i1258 < $_size1254; ++$_i1258)
            {
              $elem1259 = null;
              $elem1259 = new \saasame\transport\connection();
              $xfer += $elem1259->read($input);
              $this->success []= $elem1259;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_enumerate_connections_p_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1260)
          {
            $xfer += $iter1260->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_get_connection_p_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $connection_id = null;
  /**
   * @var string
   */
  public $service_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'connection_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'service_type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['connection_id'])) {
        $this->connection_id = $vals['connection_id'];
      }
      if (isset($vals['service_type'])) {
        $this->service_type = $vals['service_type'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_get_connection_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->connection_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->service_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_get_connection_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->connection_id !== null) {
      $xfer += $output->writeFieldBegin('connection_id', TType::STRING, 2);
      $xfer += $output->writeString($this->connection_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->service_type !== null) {
      $xfer += $output->writeFieldBegin('service_type', TType::STRING, 3);
      $xfer += $output->writeString($this->service_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_get_connection_p_result {
  static $_TSPEC;

  /**
   * @var \saasame\transport\connection
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\connection',
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_get_connection_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \saasame\transport\connection();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_get_connection_p_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_get_virtual_host_info_p_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $host = null;
  /**
   * @var string
   */
  public $username = null;
  /**
   * @var string
   */
  public $password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'host',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_get_virtual_host_info_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_get_virtual_host_info_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host !== null) {
      $xfer += $output->writeFieldBegin('host', TType::STRING, 2);
      $xfer += $output->writeString($this->host);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 3);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 4);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_get_virtual_host_info_p_result {
  static $_TSPEC;

  /**
   * @var \saasame\transport\virtual_host
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\virtual_host',
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_get_virtual_host_info_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \saasame\transport\virtual_host();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_get_virtual_host_info_p_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_get_virtual_machine_detail_p_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $host = null;
  /**
   * @var string
   */
  public $username = null;
  /**
   * @var string
   */
  public $password = null;
  /**
   * @var string
   */
  public $machine_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'host',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'machine_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['machine_id'])) {
        $this->machine_id = $vals['machine_id'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_get_virtual_machine_detail_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->machine_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_get_virtual_machine_detail_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host !== null) {
      $xfer += $output->writeFieldBegin('host', TType::STRING, 2);
      $xfer += $output->writeString($this->host);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 3);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 4);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->machine_id !== null) {
      $xfer += $output->writeFieldBegin('machine_id', TType::STRING, 5);
      $xfer += $output->writeString($this->machine_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_get_virtual_machine_detail_p_result {
  static $_TSPEC;

  /**
   * @var \saasame\transport\virtual_machine
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\virtual_machine',
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_get_virtual_machine_detail_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \saasame\transport\virtual_machine();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_get_virtual_machine_detail_p_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_get_physical_machine_detail_p_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $host = null;
  /**
   * @var int
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'host',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_get_physical_machine_detail_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->filter);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_get_physical_machine_detail_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host !== null) {
      $xfer += $output->writeFieldBegin('host', TType::STRING, 2);
      $xfer += $output->writeString($this->host);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      $xfer += $output->writeFieldBegin('filter', TType::I32, 3);
      $xfer += $output->writeI32($this->filter);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_get_physical_machine_detail_p_result {
  static $_TSPEC;

  /**
   * @var \saasame\transport\physical_machine_info
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\physical_machine_info',
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_get_physical_machine_detail_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \saasame\transport\physical_machine_info();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_get_physical_machine_detail_p_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_verify_packer_to_carrier_p_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $packer = null;
  /**
   * @var string
   */
  public $carrier = null;
  /**
   * @var int
   */
  public $port = null;
  /**
   * @var bool
   */
  public $is_ssl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packer',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'carrier',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'port',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'is_ssl',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packer'])) {
        $this->packer = $vals['packer'];
      }
      if (isset($vals['carrier'])) {
        $this->carrier = $vals['carrier'];
      }
      if (isset($vals['port'])) {
        $this->port = $vals['port'];
      }
      if (isset($vals['is_ssl'])) {
        $this->is_ssl = $vals['is_ssl'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_verify_packer_to_carrier_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->carrier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->port);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_ssl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_verify_packer_to_carrier_p_args');
    if ($this->packer !== null) {
      $xfer += $output->writeFieldBegin('packer', TType::STRING, 1);
      $xfer += $output->writeString($this->packer);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->carrier !== null) {
      $xfer += $output->writeFieldBegin('carrier', TType::STRING, 2);
      $xfer += $output->writeString($this->carrier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->port !== null) {
      $xfer += $output->writeFieldBegin('port', TType::I32, 3);
      $xfer += $output->writeI32($this->port);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_ssl !== null) {
      $xfer += $output->writeFieldBegin('is_ssl', TType::BOOL, 4);
      $xfer += $output->writeBool($this->is_ssl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_verify_packer_to_carrier_p_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_verify_packer_to_carrier_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_verify_packer_to_carrier_p_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_take_packer_xray_p_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $host = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'host',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_take_packer_xray_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_take_packer_xray_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host !== null) {
      $xfer += $output->writeFieldBegin('host', TType::STRING, 2);
      $xfer += $output->writeString($this->host);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_take_packer_xray_p_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_take_packer_xray_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_take_packer_xray_p_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_get_packer_service_info_p_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $host = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'host',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_get_packer_service_info_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_get_packer_service_info_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host !== null) {
      $xfer += $output->writeFieldBegin('host', TType::STRING, 2);
      $xfer += $output->writeString($this->host);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_get_packer_service_info_p_result {
  static $_TSPEC;

  /**
   * @var \saasame\transport\service_info
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\service_info',
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_get_packer_service_info_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \saasame\transport\service_info();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_get_packer_service_info_p_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_set_customized_id_p_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $disk_addr = null;
  /**
   * @var string
   */
  public $disk_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'disk_addr',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'disk_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['disk_addr'])) {
        $this->disk_addr = $vals['disk_addr'];
      }
      if (isset($vals['disk_id'])) {
        $this->disk_id = $vals['disk_id'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_set_customized_id_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->disk_addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->disk_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_set_customized_id_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disk_addr !== null) {
      $xfer += $output->writeFieldBegin('disk_addr', TType::STRING, 2);
      $xfer += $output->writeString($this->disk_addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disk_id !== null) {
      $xfer += $output->writeFieldBegin('disk_id', TType::STRING, 3);
      $xfer += $output->writeString($this->disk_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxy_set_customized_id_p_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\invalid_operation',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'service_proxy_set_customized_id_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_proxy_set_customized_id_p_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_proxyProcessor extends \saasame\transport\physical_packer_service_proxyProcessor {
  public function __construct($handler) {
    parent::__construct($handler);
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_create_job_ex_p($seqid, $input, $output) {
    $args = new \saasame\transport\service_proxy_create_job_ex_p_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\service_proxy_create_job_ex_p_result();
    try {
      $result->success = $this->handler_->create_job_ex_p($args->session_id, $args->job_id, $args->create_job, $args->service_type);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'create_job_ex_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('create_job_ex_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_job_p($seqid, $input, $output) {
    $args = new \saasame\transport\service_proxy_get_job_p_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\service_proxy_get_job_p_result();
    try {
      $result->success = $this->handler_->get_job_p($args->session_id, $args->job_id, $args->service_type);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_job_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_job_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_interrupt_job_p($seqid, $input, $output) {
    $args = new \saasame\transport\service_proxy_interrupt_job_p_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\service_proxy_interrupt_job_p_result();
    try {
      $result->success = $this->handler_->interrupt_job_p($args->session_id, $args->job_id, $args->service_type);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'interrupt_job_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('interrupt_job_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_resume_job_p($seqid, $input, $output) {
    $args = new \saasame\transport\service_proxy_resume_job_p_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\service_proxy_resume_job_p_result();
    try {
      $result->success = $this->handler_->resume_job_p($args->session_id, $args->job_id, $args->service_type);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'resume_job_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('resume_job_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_remove_job_p($seqid, $input, $output) {
    $args = new \saasame\transport\service_proxy_remove_job_p_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\service_proxy_remove_job_p_result();
    try {
      $result->success = $this->handler_->remove_job_p($args->session_id, $args->job_id, $args->service_type);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'remove_job_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('remove_job_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_running_job_p($seqid, $input, $output) {
    $args = new \saasame\transport\service_proxy_running_job_p_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\service_proxy_running_job_p_result();
    try {
      $result->success = $this->handler_->running_job_p($args->session_id, $args->job_id, $args->service_type);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'running_job_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('running_job_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_update_job_p($seqid, $input, $output) {
    $args = new \saasame\transport\service_proxy_update_job_p_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\service_proxy_update_job_p_result();
    try {
      $result->success = $this->handler_->update_job_p($args->session_id, $args->job_id, $args->create_job, $args->service_type);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'update_job_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('update_job_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_remove_snapshot_image_p($seqid, $input, $output) {
    $args = new \saasame\transport\service_proxy_remove_snapshot_image_p_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\service_proxy_remove_snapshot_image_p_result();
    try {
      $result->success = $this->handler_->remove_snapshot_image_p($args->session_id, $args->images, $args->service_type);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'remove_snapshot_image_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('remove_snapshot_image_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_test_connection_p($seqid, $input, $output) {
    $args = new \saasame\transport\service_proxy_test_connection_p_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\service_proxy_test_connection_p_result();
    try {
      $result->success = $this->handler_->test_connection_p($args->session_id, $args->conn, $args->service_type);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'test_connection_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('test_connection_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_add_connection_p($seqid, $input, $output) {
    $args = new \saasame\transport\service_proxy_add_connection_p_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\service_proxy_add_connection_p_result();
    try {
      $result->success = $this->handler_->add_connection_p($args->session_id, $args->conn, $args->service_type);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'add_connection_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('add_connection_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_remove_connection_p($seqid, $input, $output) {
    $args = new \saasame\transport\service_proxy_remove_connection_p_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\service_proxy_remove_connection_p_result();
    try {
      $result->success = $this->handler_->remove_connection_p($args->session_id, $args->connection_id, $args->service_type);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'remove_connection_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('remove_connection_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_modify_connection_p($seqid, $input, $output) {
    $args = new \saasame\transport\service_proxy_modify_connection_p_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\service_proxy_modify_connection_p_result();
    try {
      $result->success = $this->handler_->modify_connection_p($args->session_id, $args->conn, $args->service_type);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'modify_connection_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('modify_connection_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_enumerate_connections_p($seqid, $input, $output) {
    $args = new \saasame\transport\service_proxy_enumerate_connections_p_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\service_proxy_enumerate_connections_p_result();
    try {
      $result->success = $this->handler_->enumerate_connections_p($args->session_id, $args->service_type);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'enumerate_connections_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('enumerate_connections_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_connection_p($seqid, $input, $output) {
    $args = new \saasame\transport\service_proxy_get_connection_p_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\service_proxy_get_connection_p_result();
    try {
      $result->success = $this->handler_->get_connection_p($args->session_id, $args->connection_id, $args->service_type);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_connection_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_connection_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_virtual_host_info_p($seqid, $input, $output) {
    $args = new \saasame\transport\service_proxy_get_virtual_host_info_p_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\service_proxy_get_virtual_host_info_p_result();
    try {
      $result->success = $this->handler_->get_virtual_host_info_p($args->session_id, $args->host, $args->username, $args->password);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_virtual_host_info_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_virtual_host_info_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_virtual_machine_detail_p($seqid, $input, $output) {
    $args = new \saasame\transport\service_proxy_get_virtual_machine_detail_p_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\service_proxy_get_virtual_machine_detail_p_result();
    try {
      $result->success = $this->handler_->get_virtual_machine_detail_p($args->session_id, $args->host, $args->username, $args->password, $args->machine_id);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_virtual_machine_detail_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_virtual_machine_detail_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_physical_machine_detail_p($seqid, $input, $output) {
    $args = new \saasame\transport\service_proxy_get_physical_machine_detail_p_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\service_proxy_get_physical_machine_detail_p_result();
    try {
      $result->success = $this->handler_->get_physical_machine_detail_p($args->session_id, $args->host, $args->filter);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_physical_machine_detail_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_physical_machine_detail_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_verify_packer_to_carrier_p($seqid, $input, $output) {
    $args = new \saasame\transport\service_proxy_verify_packer_to_carrier_p_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\service_proxy_verify_packer_to_carrier_p_result();
    $result->success = $this->handler_->verify_packer_to_carrier_p($args->packer, $args->carrier, $args->port, $args->is_ssl);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'verify_packer_to_carrier_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('verify_packer_to_carrier_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_take_packer_xray_p($seqid, $input, $output) {
    $args = new \saasame\transport\service_proxy_take_packer_xray_p_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\service_proxy_take_packer_xray_p_result();
    try {
      $result->success = $this->handler_->take_packer_xray_p($args->session_id, $args->host);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'take_packer_xray_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('take_packer_xray_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_packer_service_info_p($seqid, $input, $output) {
    $args = new \saasame\transport\service_proxy_get_packer_service_info_p_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\service_proxy_get_packer_service_info_p_result();
    try {
      $result->success = $this->handler_->get_packer_service_info_p($args->session_id, $args->host);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_packer_service_info_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_packer_service_info_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_set_customized_id_p($seqid, $input, $output) {
    $args = new \saasame\transport\service_proxy_set_customized_id_p_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \saasame\transport\service_proxy_set_customized_id_p_result();
    try {
      $result->success = $this->handler_->set_customized_id_p($args->session_id, $args->disk_addr, $args->disk_id);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'set_customized_id_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('set_customized_id_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
}


