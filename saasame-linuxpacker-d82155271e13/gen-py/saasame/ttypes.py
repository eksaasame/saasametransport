#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class enumerate_disk_filter_style(object):
    ALL_DISK = 0
    UNINITIALIZED_DISK = 1

    _VALUES_TO_NAMES = {
        0: "ALL_DISK",
        1: "UNINITIALIZED_DISK",
    }

    _NAMES_TO_VALUES = {
        "ALL_DISK": 0,
        "UNINITIALIZED_DISK": 1,
    }


class machine_detail_filter(object):
    FULL = 0
    SIMPLE = 1

    _VALUES_TO_NAMES = {
        0: "FULL",
        1: "SIMPLE",
    }

    _NAMES_TO_VALUES = {
        "FULL": 0,
        "SIMPLE": 1,
    }


class partition_style(object):
    PARTITION_UNKNOWN = 0
    PARTITION_MBR = 1
    PARTITION_GPT = 2

    _VALUES_TO_NAMES = {
        0: "PARTITION_UNKNOWN",
        1: "PARTITION_MBR",
        2: "PARTITION_GPT",
    }

    _NAMES_TO_VALUES = {
        "PARTITION_UNKNOWN": 0,
        "PARTITION_MBR": 1,
        "PARTITION_GPT": 2,
    }


class drive_type(object):
    DT_UNKNOWN = 0
    DT_NO_ROOT_PATH = 1
    DT_REMOVABLE = 2
    DT_FIXED = 3
    DT_REMOTE = 4
    DT_CDROM = 5
    DT_RAMDISK = 6

    _VALUES_TO_NAMES = {
        0: "DT_UNKNOWN",
        1: "DT_NO_ROOT_PATH",
        2: "DT_REMOVABLE",
        3: "DT_FIXED",
        4: "DT_REMOTE",
        5: "DT_CDROM",
        6: "DT_RAMDISK",
    }

    _NAMES_TO_VALUES = {
        "DT_UNKNOWN": 0,
        "DT_NO_ROOT_PATH": 1,
        "DT_REMOVABLE": 2,
        "DT_FIXED": 3,
        "DT_REMOTE": 4,
        "DT_CDROM": 5,
        "DT_RAMDISK": 6,
    }


class bus_type(object):
    Unknown = 0
    SCSI = 1
    ATAPI = 2
    ATA = 3
    IEEE_1394 = 4
    SSA = 5
    Fibre_Channel = 6
    USB = 7
    RAID = 8
    iSCSI = 9
    SAS = 10
    SATA = 11
    SD = 12
    MMC = 13
    Virtual = 14
    File_Backed_Virtual = 15
    Storage_Spaces = 16
    NVMe = 17

    _VALUES_TO_NAMES = {
        0: "Unknown",
        1: "SCSI",
        2: "ATAPI",
        3: "ATA",
        4: "IEEE_1394",
        5: "SSA",
        6: "Fibre_Channel",
        7: "USB",
        8: "RAID",
        9: "iSCSI",
        10: "SAS",
        11: "SATA",
        12: "SD",
        13: "MMC",
        14: "Virtual",
        15: "File_Backed_Virtual",
        16: "Storage_Spaces",
        17: "NVMe",
    }

    _NAMES_TO_VALUES = {
        "Unknown": 0,
        "SCSI": 1,
        "ATAPI": 2,
        "ATA": 3,
        "IEEE_1394": 4,
        "SSA": 5,
        "Fibre_Channel": 6,
        "USB": 7,
        "RAID": 8,
        "iSCSI": 9,
        "SAS": 10,
        "SATA": 11,
        "SD": 12,
        "MMC": 13,
        "Virtual": 14,
        "File_Backed_Virtual": 15,
        "Storage_Spaces": 16,
        "NVMe": 17,
    }


class hv_vm_tools_status(object):
    HV_VMTOOLS_UNKNOWN = 0
    HV_VMTOOLS_OK = 1
    HV_VMTOOLS_NOTINSTALLED = 2
    HV_VMTOOLS_OLD = 3
    HV_VMTOOLS_NOTRUNNING = 4
    HV_VMTOOLS_NEEDUPGRADE = 5
    HV_VMTOOLS_UNMANAGED = 6
    HV_VMTOOLS_NEW = 7
    HV_VMTOOLS_BLACKLISTED = 8

    _VALUES_TO_NAMES = {
        0: "HV_VMTOOLS_UNKNOWN",
        1: "HV_VMTOOLS_OK",
        2: "HV_VMTOOLS_NOTINSTALLED",
        3: "HV_VMTOOLS_OLD",
        4: "HV_VMTOOLS_NOTRUNNING",
        5: "HV_VMTOOLS_NEEDUPGRADE",
        6: "HV_VMTOOLS_UNMANAGED",
        7: "HV_VMTOOLS_NEW",
        8: "HV_VMTOOLS_BLACKLISTED",
    }

    _NAMES_TO_VALUES = {
        "HV_VMTOOLS_UNKNOWN": 0,
        "HV_VMTOOLS_OK": 1,
        "HV_VMTOOLS_NOTINSTALLED": 2,
        "HV_VMTOOLS_OLD": 3,
        "HV_VMTOOLS_NOTRUNNING": 4,
        "HV_VMTOOLS_NEEDUPGRADE": 5,
        "HV_VMTOOLS_UNMANAGED": 6,
        "HV_VMTOOLS_NEW": 7,
        "HV_VMTOOLS_BLACKLISTED": 8,
    }


class hv_vm_power_state(object):
    HV_VMPOWER_UNKNOWN = 0
    HV_VMPOWER_ON = 1
    HV_VMPOWER_OFF = 2
    HV_VMPOWER_SUSPENDED = 3

    _VALUES_TO_NAMES = {
        0: "HV_VMPOWER_UNKNOWN",
        1: "HV_VMPOWER_ON",
        2: "HV_VMPOWER_OFF",
        3: "HV_VMPOWER_SUSPENDED",
    }

    _NAMES_TO_VALUES = {
        "HV_VMPOWER_UNKNOWN": 0,
        "HV_VMPOWER_ON": 1,
        "HV_VMPOWER_OFF": 2,
        "HV_VMPOWER_SUSPENDED": 3,
    }


class hv_vm_connection_state(object):
    HV_VMCONNECT_UNKNOWN = 0
    HV_VMCONNECT_CONNECTED = 1
    HV_VMCONNECT_DISCONNECTED = 2
    HV_VMCONNECT_INACCESSIBLE = 3
    HV_VMCONNECT_INVALID = 4
    HV_VMCONNECT_ORPHANED = 5

    _VALUES_TO_NAMES = {
        0: "HV_VMCONNECT_UNKNOWN",
        1: "HV_VMCONNECT_CONNECTED",
        2: "HV_VMCONNECT_DISCONNECTED",
        3: "HV_VMCONNECT_INACCESSIBLE",
        4: "HV_VMCONNECT_INVALID",
        5: "HV_VMCONNECT_ORPHANED",
    }

    _NAMES_TO_VALUES = {
        "HV_VMCONNECT_UNKNOWN": 0,
        "HV_VMCONNECT_CONNECTED": 1,
        "HV_VMCONNECT_DISCONNECTED": 2,
        "HV_VMCONNECT_INACCESSIBLE": 3,
        "HV_VMCONNECT_INVALID": 4,
        "HV_VMCONNECT_ORPHANED": 5,
    }


class hv_host_power_state(object):
    HV_HOSTPOWER_UNKNOWN = 0
    HV_HOSTPOWER_ON = 1
    HV_HOSTPOWER_OFF = 2
    HV_HOSTPOWER_STANDBY = 3

    _VALUES_TO_NAMES = {
        0: "HV_HOSTPOWER_UNKNOWN",
        1: "HV_HOSTPOWER_ON",
        2: "HV_HOSTPOWER_OFF",
        3: "HV_HOSTPOWER_STANDBY",
    }

    _NAMES_TO_VALUES = {
        "HV_HOSTPOWER_UNKNOWN": 0,
        "HV_HOSTPOWER_ON": 1,
        "HV_HOSTPOWER_OFF": 2,
        "HV_HOSTPOWER_STANDBY": 3,
    }


class hv_connection_type(object):
    HV_CONNECTION_TYPE_UNKNOWN = 0
    HV_CONNECTION_TYPE_VCENTER = 1
    HV_CONNECTION_TYPE_HOST = 2

    _VALUES_TO_NAMES = {
        0: "HV_CONNECTION_TYPE_UNKNOWN",
        1: "HV_CONNECTION_TYPE_VCENTER",
        2: "HV_CONNECTION_TYPE_HOST",
    }

    _NAMES_TO_VALUES = {
        "HV_CONNECTION_TYPE_UNKNOWN": 0,
        "HV_CONNECTION_TYPE_VCENTER": 1,
        "HV_CONNECTION_TYPE_HOST": 2,
    }


class hv_guest_os_type(object):
    HV_OS_UNKNOWN = 0
    HV_OS_WINDOWS = 1
    HV_OS_LINUX = 2

    _VALUES_TO_NAMES = {
        0: "HV_OS_UNKNOWN",
        1: "HV_OS_WINDOWS",
        2: "HV_OS_LINUX",
    }

    _NAMES_TO_VALUES = {
        "HV_OS_UNKNOWN": 0,
        "HV_OS_WINDOWS": 1,
        "HV_OS_LINUX": 2,
    }


class hv_vm_firmware(object):
    HV_VM_FIRMWARE_BIOS = 0
    HV_VM_FIRMWARE_EFI = 1

    _VALUES_TO_NAMES = {
        0: "HV_VM_FIRMWARE_BIOS",
        1: "HV_VM_FIRMWARE_EFI",
    }

    _NAMES_TO_VALUES = {
        "HV_VM_FIRMWARE_BIOS": 0,
        "HV_VM_FIRMWARE_EFI": 1,
    }


class job_type(object):
    physical_packer_job_type = 1
    virtual_packer_job_type = 2
    physical_transport_type = 3
    virtual_transport_type = 4
    loader_job_type = 5
    launcher_job_type = 6
    winpe_packer_job_type = 7
    winpe_transport_job_type = 8

    _VALUES_TO_NAMES = {
        1: "physical_packer_job_type",
        2: "virtual_packer_job_type",
        3: "physical_transport_type",
        4: "virtual_transport_type",
        5: "loader_job_type",
        6: "launcher_job_type",
        7: "winpe_packer_job_type",
        8: "winpe_transport_job_type",
    }

    _NAMES_TO_VALUES = {
        "physical_packer_job_type": 1,
        "virtual_packer_job_type": 2,
        "physical_transport_type": 3,
        "virtual_transport_type": 4,
        "loader_job_type": 5,
        "launcher_job_type": 6,
        "winpe_packer_job_type": 7,
        "winpe_transport_job_type": 8,
    }


class job_trigger_type(object):
    runonce_trigger = 0
    interval_trigger = 1

    _VALUES_TO_NAMES = {
        0: "runonce_trigger",
        1: "interval_trigger",
    }

    _NAMES_TO_VALUES = {
        "runonce_trigger": 0,
        "interval_trigger": 1,
    }


class job_state(object):
    job_state_none = 1
    job_state_initialed = 2
    job_state_replicating = 4
    job_state_replicated = 8
    job_state_converting = 16
    job_state_finished = 32
    job_state_sche_completed = 64
    job_state_recover = 128
    job_state_resizing = 256
    job_state_uploading = 512
    job_state_upload_completed = 1024
    job_state_discard = 1073741824

    _VALUES_TO_NAMES = {
        1: "job_state_none",
        2: "job_state_initialed",
        4: "job_state_replicating",
        8: "job_state_replicated",
        16: "job_state_converting",
        32: "job_state_finished",
        64: "job_state_sche_completed",
        128: "job_state_recover",
        256: "job_state_resizing",
        512: "job_state_uploading",
        1024: "job_state_upload_completed",
        1073741824: "job_state_discard",
    }

    _NAMES_TO_VALUES = {
        "job_state_none": 1,
        "job_state_initialed": 2,
        "job_state_replicating": 4,
        "job_state_replicated": 8,
        "job_state_converting": 16,
        "job_state_finished": 32,
        "job_state_sche_completed": 64,
        "job_state_recover": 128,
        "job_state_resizing": 256,
        "job_state_uploading": 512,
        "job_state_upload_completed": 1024,
        "job_state_discard": 1073741824,
    }


class error_codes(object):
    SAASAME_S_OK = 0
    SAASAME_NOERROR = 0
    SAASAME_E_FAIL = 4096
    SAASAME_E_INITIAL_FAIL = 4097
    SAASAME_E_DISK_FULL = 4098
    SAASAME_E_INVALID_ARG = 4099
    SAASAME_E_INVALID_AUTHENTICATION = 4100
    SAASAME_E_INTERNAL_FAIL = 4101
    SAASAME_E_CANNOT_CONNECT_TO_HOST = 4102
    SAASAME_E_QUEUE_FULL = 4103
    SAASAME_E_INVALID_LICENSE_KEY = 4104
    SAASAME_E_INVALID_LICENSE = 4105
    SAASAME_E_JOB_CREATE_FAIL = 12288
    SAASAME_E_JOB_REMOVE_FAIL = 12289
    SAASAME_E_JOB_NOTFOUND = 12290
    SAASAME_E_JOB_CONFIG_NOTFOUND = 12291
    SAASAME_E_JOB_STATUS_NOTFOUND = 12292
    SAASAME_E_JOB_CANCELLED = 12293
    SAASAME_E_JOB_CONVERT_FAIL = 12294
    SAASAME_E_JOB_REPLICATE_FAIL = 12295
    SAASAME_E_JOB_ID_DUPLICATED = 12296
    SAASAME_E_JOB_INTERRUPTED = 12297
    SAASAME_E_JOB_RUNNING = 12298
    SAASAME_E_JOB_RESPONSE = 12299
    SAASAME_E_PHYSICAL_CONFIG_FAILED = 16384
    SAASAME_E_VIRTUAL_VM_NOTFOUND = 20480
    SAASAME_E_IMAGE_NOTFOUND = 24576
    SAASAME_E_IMAGE_CREATE_FAIL = 24577
    SAASAME_E_IMAGE_OPEN_FAIL = 24578
    SAASAME_E_IMAGE_READ = 24579
    SAASAME_E_IMAGE_WRITE = 24580
    SAASAME_E_IMAGE_OUTOFRANGE = 24581
    SAASAME_E_IMAGE_ATTACH_FAIL = 24582
    SAASAME_E_IMAGE_DETACH_FAIL = 24583
    SAASAME_E_IMAGE_PROPERTY_FAIL = 24584
    SAASAME_E_SNAPSHOT_CREATE_FAIL = 28672
    SAASAME_E_SNAPSHOT_REMOVE_FAIL = 28673
    SAASAME_E_SNAPSHOT_NOTFOUND = 28674
    SAASAME_E_SNAPSHOT_INVALID = 28675

    _VALUES_TO_NAMES = {
        0: "SAASAME_S_OK",
        0: "SAASAME_NOERROR",
        4096: "SAASAME_E_FAIL",
        4097: "SAASAME_E_INITIAL_FAIL",
        4098: "SAASAME_E_DISK_FULL",
        4099: "SAASAME_E_INVALID_ARG",
        4100: "SAASAME_E_INVALID_AUTHENTICATION",
        4101: "SAASAME_E_INTERNAL_FAIL",
        4102: "SAASAME_E_CANNOT_CONNECT_TO_HOST",
        4103: "SAASAME_E_QUEUE_FULL",
        4104: "SAASAME_E_INVALID_LICENSE_KEY",
        4105: "SAASAME_E_INVALID_LICENSE",
        12288: "SAASAME_E_JOB_CREATE_FAIL",
        12289: "SAASAME_E_JOB_REMOVE_FAIL",
        12290: "SAASAME_E_JOB_NOTFOUND",
        12291: "SAASAME_E_JOB_CONFIG_NOTFOUND",
        12292: "SAASAME_E_JOB_STATUS_NOTFOUND",
        12293: "SAASAME_E_JOB_CANCELLED",
        12294: "SAASAME_E_JOB_CONVERT_FAIL",
        12295: "SAASAME_E_JOB_REPLICATE_FAIL",
        12296: "SAASAME_E_JOB_ID_DUPLICATED",
        12297: "SAASAME_E_JOB_INTERRUPTED",
        12298: "SAASAME_E_JOB_RUNNING",
        12299: "SAASAME_E_JOB_RESPONSE",
        16384: "SAASAME_E_PHYSICAL_CONFIG_FAILED",
        20480: "SAASAME_E_VIRTUAL_VM_NOTFOUND",
        24576: "SAASAME_E_IMAGE_NOTFOUND",
        24577: "SAASAME_E_IMAGE_CREATE_FAIL",
        24578: "SAASAME_E_IMAGE_OPEN_FAIL",
        24579: "SAASAME_E_IMAGE_READ",
        24580: "SAASAME_E_IMAGE_WRITE",
        24581: "SAASAME_E_IMAGE_OUTOFRANGE",
        24582: "SAASAME_E_IMAGE_ATTACH_FAIL",
        24583: "SAASAME_E_IMAGE_DETACH_FAIL",
        24584: "SAASAME_E_IMAGE_PROPERTY_FAIL",
        28672: "SAASAME_E_SNAPSHOT_CREATE_FAIL",
        28673: "SAASAME_E_SNAPSHOT_REMOVE_FAIL",
        28674: "SAASAME_E_SNAPSHOT_NOTFOUND",
        28675: "SAASAME_E_SNAPSHOT_INVALID",
    }

    _NAMES_TO_VALUES = {
        "SAASAME_S_OK": 0,
        "SAASAME_NOERROR": 0,
        "SAASAME_E_FAIL": 4096,
        "SAASAME_E_INITIAL_FAIL": 4097,
        "SAASAME_E_DISK_FULL": 4098,
        "SAASAME_E_INVALID_ARG": 4099,
        "SAASAME_E_INVALID_AUTHENTICATION": 4100,
        "SAASAME_E_INTERNAL_FAIL": 4101,
        "SAASAME_E_CANNOT_CONNECT_TO_HOST": 4102,
        "SAASAME_E_QUEUE_FULL": 4103,
        "SAASAME_E_INVALID_LICENSE_KEY": 4104,
        "SAASAME_E_INVALID_LICENSE": 4105,
        "SAASAME_E_JOB_CREATE_FAIL": 12288,
        "SAASAME_E_JOB_REMOVE_FAIL": 12289,
        "SAASAME_E_JOB_NOTFOUND": 12290,
        "SAASAME_E_JOB_CONFIG_NOTFOUND": 12291,
        "SAASAME_E_JOB_STATUS_NOTFOUND": 12292,
        "SAASAME_E_JOB_CANCELLED": 12293,
        "SAASAME_E_JOB_CONVERT_FAIL": 12294,
        "SAASAME_E_JOB_REPLICATE_FAIL": 12295,
        "SAASAME_E_JOB_ID_DUPLICATED": 12296,
        "SAASAME_E_JOB_INTERRUPTED": 12297,
        "SAASAME_E_JOB_RUNNING": 12298,
        "SAASAME_E_JOB_RESPONSE": 12299,
        "SAASAME_E_PHYSICAL_CONFIG_FAILED": 16384,
        "SAASAME_E_VIRTUAL_VM_NOTFOUND": 20480,
        "SAASAME_E_IMAGE_NOTFOUND": 24576,
        "SAASAME_E_IMAGE_CREATE_FAIL": 24577,
        "SAASAME_E_IMAGE_OPEN_FAIL": 24578,
        "SAASAME_E_IMAGE_READ": 24579,
        "SAASAME_E_IMAGE_WRITE": 24580,
        "SAASAME_E_IMAGE_OUTOFRANGE": 24581,
        "SAASAME_E_IMAGE_ATTACH_FAIL": 24582,
        "SAASAME_E_IMAGE_DETACH_FAIL": 24583,
        "SAASAME_E_IMAGE_PROPERTY_FAIL": 24584,
        "SAASAME_E_SNAPSHOT_CREATE_FAIL": 28672,
        "SAASAME_E_SNAPSHOT_REMOVE_FAIL": 28673,
        "SAASAME_E_SNAPSHOT_NOTFOUND": 28674,
        "SAASAME_E_SNAPSHOT_INVALID": 28675,
    }


class connection_type(object):
    LOCAL_FOLDER = 0
    NFS_FOLDER = 1
    CIFS_FOLDER = 1
    WEBDAV = 1
    S3_BUCKET = 2
    WEBDAV_WITH_SSL = 3
    WEBDAV_EX = 4
    S3_BUCKET_EX = 5
    LOCAL_FOLDER_EX = 6

    _VALUES_TO_NAMES = {
        0: "LOCAL_FOLDER",
        1: "NFS_FOLDER",
        1: "CIFS_FOLDER",
        1: "WEBDAV",
        2: "S3_BUCKET",
        3: "WEBDAV_WITH_SSL",
        4: "WEBDAV_EX",
        5: "S3_BUCKET_EX",
        6: "LOCAL_FOLDER_EX",
    }

    _NAMES_TO_VALUES = {
        "LOCAL_FOLDER": 0,
        "NFS_FOLDER": 1,
        "CIFS_FOLDER": 1,
        "WEBDAV": 1,
        "S3_BUCKET": 2,
        "WEBDAV_WITH_SSL": 3,
        "WEBDAV_EX": 4,
        "S3_BUCKET_EX": 5,
        "LOCAL_FOLDER_EX": 6,
    }


class aws_region(object):
    US_EAST_1 = 0
    US_WEST_1 = 1
    US_WEST_2 = 2
    EU_WEST_1 = 3
    EU_CENTRAL_1 = 4
    AP_SOUTHEAST_1 = 5
    AP_SOUTHEAST_2 = 6
    AP_NORTHEAST_1 = 7
    AP_NORTHEAST_2 = 8
    SA_EAST_1 = 9

    _VALUES_TO_NAMES = {
        0: "US_EAST_1",
        1: "US_WEST_1",
        2: "US_WEST_2",
        3: "EU_WEST_1",
        4: "EU_CENTRAL_1",
        5: "AP_SOUTHEAST_1",
        6: "AP_SOUTHEAST_2",
        7: "AP_NORTHEAST_1",
        8: "AP_NORTHEAST_2",
        9: "SA_EAST_1",
    }

    _NAMES_TO_VALUES = {
        "US_EAST_1": 0,
        "US_WEST_1": 1,
        "US_WEST_2": 2,
        "EU_WEST_1": 3,
        "EU_CENTRAL_1": 4,
        "AP_SOUTHEAST_1": 5,
        "AP_SOUTHEAST_2": 6,
        "AP_NORTHEAST_1": 7,
        "AP_NORTHEAST_2": 8,
        "SA_EAST_1": 9,
    }


class create_image_option(object):
    VERSION_1 = 0
    VERSION_2 = 1

    _VALUES_TO_NAMES = {
        0: "VERSION_1",
        1: "VERSION_2",
    }

    _NAMES_TO_VALUES = {
        "VERSION_1": 0,
        "VERSION_2": 1,
    }


class disk_detect_type(object):
    SCSI_ADDRESS = 0
    LINUX_DEVICE_PATH = 0
    SERIAL_NUMBER = 1
    EXPORT_IMAGE = 2
    UNIQUE_ID = 3
    CUSTOMIZED_ID = 4
    AZURE_BLOB = 5

    _VALUES_TO_NAMES = {
        0: "SCSI_ADDRESS",
        0: "LINUX_DEVICE_PATH",
        1: "SERIAL_NUMBER",
        2: "EXPORT_IMAGE",
        3: "UNIQUE_ID",
        4: "CUSTOMIZED_ID",
        5: "AZURE_BLOB",
    }

    _NAMES_TO_VALUES = {
        "SCSI_ADDRESS": 0,
        "LINUX_DEVICE_PATH": 0,
        "SERIAL_NUMBER": 1,
        "EXPORT_IMAGE": 2,
        "UNIQUE_ID": 3,
        "CUSTOMIZED_ID": 4,
        "AZURE_BLOB": 5,
    }


class virtual_disk_type(object):
    VHD = 0
    VHDX = 1

    _VALUES_TO_NAMES = {
        0: "VHD",
        1: "VHDX",
    }

    _NAMES_TO_VALUES = {
        "VHD": 0,
        "VHDX": 1,
    }


class conversion_type(object):
    ANY_TO_ANY = 0
    OPENSTACK = 1
    XEN = 2
    VMWARE = 3
    HYPERV = 4
    AUTO = -1

    _VALUES_TO_NAMES = {
        0: "ANY_TO_ANY",
        1: "OPENSTACK",
        2: "XEN",
        3: "VMWARE",
        4: "HYPERV",
        -1: "AUTO",
    }

    _NAMES_TO_VALUES = {
        "ANY_TO_ANY": 0,
        "OPENSTACK": 1,
        "XEN": 2,
        "VMWARE": 3,
        "HYPERV": 4,
        "AUTO": -1,
    }


class extra_options_type(object):
    UNKNOWN = 0
    ALIYUN = 1
    TENCENT = 2

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "ALIYUN",
        2: "TENCENT",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "ALIYUN": 1,
        "TENCENT": 2,
    }


class disk_info(object):
    """
    Attributes:
     - boot_from_disk
     - bus_type
     - cluster_owner
     - cylinders
     - friendly_name
     - guid
     - tracks_per_cylinder
     - is_boot
     - is_clustered
     - is_offline
     - is_readonly
     - is_snapshot
     - is_system
     - location
     - logical_sector_size
     - manufacturer
     - model
     - number
     - number_of_partitions
     - offline_reason
     - partition_style
     - path
     - physical_sector_size
     - sectors_per_track
     - serial_number
     - signature
     - size
     - uri
     - scsi_bus
     - scsi_logical_unit
     - scsi_port
     - scsi_target_id
     - unique_id
     - unique_id_format
     - customized_id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.BOOL, 'boot_from_disk', None, False, ),  # 1
        (2, TType.I32, 'bus_type', None, 0, ),  # 2
        (3, TType.STRING, 'cluster_owner', 'UTF8', "", ),  # 3
        (4, TType.I64, 'cylinders', None, 0, ),  # 4
        (5, TType.STRING, 'friendly_name', 'UTF8', "", ),  # 5
        (6, TType.STRING, 'guid', 'UTF8', "", ),  # 6
        (7, TType.I32, 'tracks_per_cylinder', None, 0, ),  # 7
        (8, TType.BOOL, 'is_boot', None, False, ),  # 8
        (9, TType.BOOL, 'is_clustered', None, False, ),  # 9
        (10, TType.BOOL, 'is_offline', None, False, ),  # 10
        (11, TType.BOOL, 'is_readonly', None, False, ),  # 11
        (12, TType.BOOL, 'is_snapshot', None, False, ),  # 12
        (13, TType.BOOL, 'is_system', None, False, ),  # 13
        (14, TType.STRING, 'location', 'UTF8', "", ),  # 14
        (15, TType.I32, 'logical_sector_size', None, 0, ),  # 15
        (16, TType.STRING, 'manufacturer', 'UTF8', "", ),  # 16
        (17, TType.STRING, 'model', 'UTF8', "", ),  # 17
        (18, TType.I32, 'number', None, -1, ),  # 18
        (19, TType.I32, 'number_of_partitions', None, -1, ),  # 19
        (20, TType.I16, 'offline_reason', None, 0, ),  # 20
        (21, TType.I32, 'partition_style', None, 0, ),  # 21
        (22, TType.STRING, 'path', 'UTF8', "", ),  # 22
        (23, TType.I32, 'physical_sector_size', None, 0, ),  # 23
        (24, TType.I32, 'sectors_per_track', None, 0, ),  # 24
        (25, TType.STRING, 'serial_number', 'UTF8', "", ),  # 25
        (26, TType.I32, 'signature', None, 0, ),  # 26
        (27, TType.I64, 'size', None, 0, ),  # 27
        (28, TType.STRING, 'uri', 'UTF8', "", ),  # 28
        (29, TType.I32, 'scsi_bus', None, 0, ),  # 29
        (30, TType.I16, 'scsi_logical_unit', None, 0, ),  # 30
        (31, TType.I16, 'scsi_port', None, 0, ),  # 31
        (32, TType.I16, 'scsi_target_id', None, 0, ),  # 32
        (33, TType.STRING, 'unique_id', 'UTF8', "", ),  # 33
        (34, TType.I16, 'unique_id_format', None, 0, ),  # 34
        (35, TType.STRING, 'customized_id', 'UTF8', "", ),  # 35
    )

    def __init__(self, boot_from_disk=thrift_spec[1][4], bus_type=thrift_spec[2][4], cluster_owner=thrift_spec[3][4], cylinders=thrift_spec[4][4], friendly_name=thrift_spec[5][4], guid=thrift_spec[6][4], tracks_per_cylinder=thrift_spec[7][4], is_boot=thrift_spec[8][4], is_clustered=thrift_spec[9][4], is_offline=thrift_spec[10][4], is_readonly=thrift_spec[11][4], is_snapshot=thrift_spec[12][4], is_system=thrift_spec[13][4], location=thrift_spec[14][4], logical_sector_size=thrift_spec[15][4], manufacturer=thrift_spec[16][4], model=thrift_spec[17][4], number=thrift_spec[18][4], number_of_partitions=thrift_spec[19][4], offline_reason=thrift_spec[20][4], partition_style=thrift_spec[21][4], path=thrift_spec[22][4], physical_sector_size=thrift_spec[23][4], sectors_per_track=thrift_spec[24][4], serial_number=thrift_spec[25][4], signature=thrift_spec[26][4], size=thrift_spec[27][4], uri=thrift_spec[28][4], scsi_bus=thrift_spec[29][4], scsi_logical_unit=thrift_spec[30][4], scsi_port=thrift_spec[31][4], scsi_target_id=thrift_spec[32][4], unique_id=thrift_spec[33][4], unique_id_format=thrift_spec[34][4], customized_id=thrift_spec[35][4],):
        self.boot_from_disk = boot_from_disk
        self.bus_type = bus_type
        self.cluster_owner = cluster_owner
        self.cylinders = cylinders
        self.friendly_name = friendly_name
        self.guid = guid
        self.tracks_per_cylinder = tracks_per_cylinder
        self.is_boot = is_boot
        self.is_clustered = is_clustered
        self.is_offline = is_offline
        self.is_readonly = is_readonly
        self.is_snapshot = is_snapshot
        self.is_system = is_system
        self.location = location
        self.logical_sector_size = logical_sector_size
        self.manufacturer = manufacturer
        self.model = model
        self.number = number
        self.number_of_partitions = number_of_partitions
        self.offline_reason = offline_reason
        self.partition_style = partition_style
        self.path = path
        self.physical_sector_size = physical_sector_size
        self.sectors_per_track = sectors_per_track
        self.serial_number = serial_number
        self.signature = signature
        self.size = size
        self.uri = uri
        self.scsi_bus = scsi_bus
        self.scsi_logical_unit = scsi_logical_unit
        self.scsi_port = scsi_port
        self.scsi_target_id = scsi_target_id
        self.unique_id = unique_id
        self.unique_id_format = unique_id_format
        self.customized_id = customized_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.boot_from_disk = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.bus_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cluster_owner = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.cylinders = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.friendly_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.guid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.tracks_per_cylinder = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.is_boot = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.is_clustered = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.is_offline = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.is_readonly = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.is_snapshot = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.is_system = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.location = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.logical_sector_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.manufacturer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.model = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I32:
                    self.number_of_partitions = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I16:
                    self.offline_reason = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.partition_style = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.I32:
                    self.physical_sector_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.I32:
                    self.sectors_per_track = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRING:
                    self.serial_number = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.I32:
                    self.signature = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.STRING:
                    self.uri = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.I32:
                    self.scsi_bus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.I16:
                    self.scsi_logical_unit = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.I16:
                    self.scsi_port = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.I16:
                    self.scsi_target_id = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRING:
                    self.unique_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.I16:
                    self.unique_id_format = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.STRING:
                    self.customized_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('disk_info')
        if self.boot_from_disk is not None:
            oprot.writeFieldBegin('boot_from_disk', TType.BOOL, 1)
            oprot.writeBool(self.boot_from_disk)
            oprot.writeFieldEnd()
        if self.bus_type is not None:
            oprot.writeFieldBegin('bus_type', TType.I32, 2)
            oprot.writeI32(self.bus_type)
            oprot.writeFieldEnd()
        if self.cluster_owner is not None:
            oprot.writeFieldBegin('cluster_owner', TType.STRING, 3)
            oprot.writeString(self.cluster_owner.encode('utf-8') if sys.version_info[0] == 2 else self.cluster_owner)
            oprot.writeFieldEnd()
        if self.cylinders is not None:
            oprot.writeFieldBegin('cylinders', TType.I64, 4)
            oprot.writeI64(self.cylinders)
            oprot.writeFieldEnd()
        if self.friendly_name is not None:
            oprot.writeFieldBegin('friendly_name', TType.STRING, 5)
            oprot.writeString(self.friendly_name.encode('utf-8') if sys.version_info[0] == 2 else self.friendly_name)
            oprot.writeFieldEnd()
        if self.guid is not None:
            oprot.writeFieldBegin('guid', TType.STRING, 6)
            oprot.writeString(self.guid.encode('utf-8') if sys.version_info[0] == 2 else self.guid)
            oprot.writeFieldEnd()
        if self.tracks_per_cylinder is not None:
            oprot.writeFieldBegin('tracks_per_cylinder', TType.I32, 7)
            oprot.writeI32(self.tracks_per_cylinder)
            oprot.writeFieldEnd()
        if self.is_boot is not None:
            oprot.writeFieldBegin('is_boot', TType.BOOL, 8)
            oprot.writeBool(self.is_boot)
            oprot.writeFieldEnd()
        if self.is_clustered is not None:
            oprot.writeFieldBegin('is_clustered', TType.BOOL, 9)
            oprot.writeBool(self.is_clustered)
            oprot.writeFieldEnd()
        if self.is_offline is not None:
            oprot.writeFieldBegin('is_offline', TType.BOOL, 10)
            oprot.writeBool(self.is_offline)
            oprot.writeFieldEnd()
        if self.is_readonly is not None:
            oprot.writeFieldBegin('is_readonly', TType.BOOL, 11)
            oprot.writeBool(self.is_readonly)
            oprot.writeFieldEnd()
        if self.is_snapshot is not None:
            oprot.writeFieldBegin('is_snapshot', TType.BOOL, 12)
            oprot.writeBool(self.is_snapshot)
            oprot.writeFieldEnd()
        if self.is_system is not None:
            oprot.writeFieldBegin('is_system', TType.BOOL, 13)
            oprot.writeBool(self.is_system)
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRING, 14)
            oprot.writeString(self.location.encode('utf-8') if sys.version_info[0] == 2 else self.location)
            oprot.writeFieldEnd()
        if self.logical_sector_size is not None:
            oprot.writeFieldBegin('logical_sector_size', TType.I32, 15)
            oprot.writeI32(self.logical_sector_size)
            oprot.writeFieldEnd()
        if self.manufacturer is not None:
            oprot.writeFieldBegin('manufacturer', TType.STRING, 16)
            oprot.writeString(self.manufacturer.encode('utf-8') if sys.version_info[0] == 2 else self.manufacturer)
            oprot.writeFieldEnd()
        if self.model is not None:
            oprot.writeFieldBegin('model', TType.STRING, 17)
            oprot.writeString(self.model.encode('utf-8') if sys.version_info[0] == 2 else self.model)
            oprot.writeFieldEnd()
        if self.number is not None:
            oprot.writeFieldBegin('number', TType.I32, 18)
            oprot.writeI32(self.number)
            oprot.writeFieldEnd()
        if self.number_of_partitions is not None:
            oprot.writeFieldBegin('number_of_partitions', TType.I32, 19)
            oprot.writeI32(self.number_of_partitions)
            oprot.writeFieldEnd()
        if self.offline_reason is not None:
            oprot.writeFieldBegin('offline_reason', TType.I16, 20)
            oprot.writeI16(self.offline_reason)
            oprot.writeFieldEnd()
        if self.partition_style is not None:
            oprot.writeFieldBegin('partition_style', TType.I32, 21)
            oprot.writeI32(self.partition_style)
            oprot.writeFieldEnd()
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 22)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.physical_sector_size is not None:
            oprot.writeFieldBegin('physical_sector_size', TType.I32, 23)
            oprot.writeI32(self.physical_sector_size)
            oprot.writeFieldEnd()
        if self.sectors_per_track is not None:
            oprot.writeFieldBegin('sectors_per_track', TType.I32, 24)
            oprot.writeI32(self.sectors_per_track)
            oprot.writeFieldEnd()
        if self.serial_number is not None:
            oprot.writeFieldBegin('serial_number', TType.STRING, 25)
            oprot.writeString(self.serial_number.encode('utf-8') if sys.version_info[0] == 2 else self.serial_number)
            oprot.writeFieldEnd()
        if self.signature is not None:
            oprot.writeFieldBegin('signature', TType.I32, 26)
            oprot.writeI32(self.signature)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 27)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        if self.uri is not None:
            oprot.writeFieldBegin('uri', TType.STRING, 28)
            oprot.writeString(self.uri.encode('utf-8') if sys.version_info[0] == 2 else self.uri)
            oprot.writeFieldEnd()
        if self.scsi_bus is not None:
            oprot.writeFieldBegin('scsi_bus', TType.I32, 29)
            oprot.writeI32(self.scsi_bus)
            oprot.writeFieldEnd()
        if self.scsi_logical_unit is not None:
            oprot.writeFieldBegin('scsi_logical_unit', TType.I16, 30)
            oprot.writeI16(self.scsi_logical_unit)
            oprot.writeFieldEnd()
        if self.scsi_port is not None:
            oprot.writeFieldBegin('scsi_port', TType.I16, 31)
            oprot.writeI16(self.scsi_port)
            oprot.writeFieldEnd()
        if self.scsi_target_id is not None:
            oprot.writeFieldBegin('scsi_target_id', TType.I16, 32)
            oprot.writeI16(self.scsi_target_id)
            oprot.writeFieldEnd()
        if self.unique_id is not None:
            oprot.writeFieldBegin('unique_id', TType.STRING, 33)
            oprot.writeString(self.unique_id.encode('utf-8') if sys.version_info[0] == 2 else self.unique_id)
            oprot.writeFieldEnd()
        if self.unique_id_format is not None:
            oprot.writeFieldBegin('unique_id_format', TType.I16, 34)
            oprot.writeI16(self.unique_id_format)
            oprot.writeFieldEnd()
        if self.customized_id is not None:
            oprot.writeFieldBegin('customized_id', TType.STRING, 35)
            oprot.writeString(self.customized_id.encode('utf-8') if sys.version_info[0] == 2 else self.customized_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class partition_info(object):
    """
    Attributes:
     - access_paths
     - disk_number
     - drive_letter
     - gpt_type
     - guid
     - is_active
     - is_boot
     - is_hidden
     - is_offline
     - is_readonly
     - is_shadowcopy
     - is_system
     - mbr_type
     - offset
     - partition_number
     - size
    """

    thrift_spec = (
        None,  # 0
        (1, TType.SET, 'access_paths', (TType.STRING, 'UTF8', False), None, ),  # 1
        (2, TType.I32, 'disk_number', None, -1, ),  # 2
        (3, TType.STRING, 'drive_letter', 'UTF8', "", ),  # 3
        (4, TType.STRING, 'gpt_type', 'UTF8', "", ),  # 4
        (5, TType.STRING, 'guid', 'UTF8', "", ),  # 5
        (6, TType.BOOL, 'is_active', None, False, ),  # 6
        (7, TType.BOOL, 'is_boot', None, False, ),  # 7
        (8, TType.BOOL, 'is_hidden', None, False, ),  # 8
        (9, TType.BOOL, 'is_offline', None, False, ),  # 9
        (10, TType.BOOL, 'is_readonly', None, False, ),  # 10
        (11, TType.BOOL, 'is_shadowcopy', None, False, ),  # 11
        (12, TType.BOOL, 'is_system', None, False, ),  # 12
        (13, TType.I16, 'mbr_type', None, 0, ),  # 13
        (14, TType.I64, 'offset', None, 0, ),  # 14
        (15, TType.I32, 'partition_number', None, -1, ),  # 15
        (16, TType.I64, 'size', None, 0, ),  # 16
    )

    def __init__(self, access_paths=None, disk_number=thrift_spec[2][4], drive_letter=thrift_spec[3][4], gpt_type=thrift_spec[4][4], guid=thrift_spec[5][4], is_active=thrift_spec[6][4], is_boot=thrift_spec[7][4], is_hidden=thrift_spec[8][4], is_offline=thrift_spec[9][4], is_readonly=thrift_spec[10][4], is_shadowcopy=thrift_spec[11][4], is_system=thrift_spec[12][4], mbr_type=thrift_spec[13][4], offset=thrift_spec[14][4], partition_number=thrift_spec[15][4], size=thrift_spec[16][4],):
        self.access_paths = access_paths
        self.disk_number = disk_number
        self.drive_letter = drive_letter
        self.gpt_type = gpt_type
        self.guid = guid
        self.is_active = is_active
        self.is_boot = is_boot
        self.is_hidden = is_hidden
        self.is_offline = is_offline
        self.is_readonly = is_readonly
        self.is_shadowcopy = is_shadowcopy
        self.is_system = is_system
        self.mbr_type = mbr_type
        self.offset = offset
        self.partition_number = partition_number
        self.size = size

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.SET:
                    self.access_paths = set()
                    (_etype3, _size0) = iprot.readSetBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.access_paths.add(_elem5)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.disk_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.drive_letter = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.gpt_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.guid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.is_active = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.is_boot = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.is_hidden = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.is_offline = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.is_readonly = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.is_shadowcopy = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.is_system = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I16:
                    self.mbr_type = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I64:
                    self.offset = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.partition_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('partition_info')
        if self.access_paths is not None:
            oprot.writeFieldBegin('access_paths', TType.SET, 1)
            oprot.writeSetBegin(TType.STRING, len(self.access_paths))
            for iter6 in self.access_paths:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.disk_number is not None:
            oprot.writeFieldBegin('disk_number', TType.I32, 2)
            oprot.writeI32(self.disk_number)
            oprot.writeFieldEnd()
        if self.drive_letter is not None:
            oprot.writeFieldBegin('drive_letter', TType.STRING, 3)
            oprot.writeString(self.drive_letter.encode('utf-8') if sys.version_info[0] == 2 else self.drive_letter)
            oprot.writeFieldEnd()
        if self.gpt_type is not None:
            oprot.writeFieldBegin('gpt_type', TType.STRING, 4)
            oprot.writeString(self.gpt_type.encode('utf-8') if sys.version_info[0] == 2 else self.gpt_type)
            oprot.writeFieldEnd()
        if self.guid is not None:
            oprot.writeFieldBegin('guid', TType.STRING, 5)
            oprot.writeString(self.guid.encode('utf-8') if sys.version_info[0] == 2 else self.guid)
            oprot.writeFieldEnd()
        if self.is_active is not None:
            oprot.writeFieldBegin('is_active', TType.BOOL, 6)
            oprot.writeBool(self.is_active)
            oprot.writeFieldEnd()
        if self.is_boot is not None:
            oprot.writeFieldBegin('is_boot', TType.BOOL, 7)
            oprot.writeBool(self.is_boot)
            oprot.writeFieldEnd()
        if self.is_hidden is not None:
            oprot.writeFieldBegin('is_hidden', TType.BOOL, 8)
            oprot.writeBool(self.is_hidden)
            oprot.writeFieldEnd()
        if self.is_offline is not None:
            oprot.writeFieldBegin('is_offline', TType.BOOL, 9)
            oprot.writeBool(self.is_offline)
            oprot.writeFieldEnd()
        if self.is_readonly is not None:
            oprot.writeFieldBegin('is_readonly', TType.BOOL, 10)
            oprot.writeBool(self.is_readonly)
            oprot.writeFieldEnd()
        if self.is_shadowcopy is not None:
            oprot.writeFieldBegin('is_shadowcopy', TType.BOOL, 11)
            oprot.writeBool(self.is_shadowcopy)
            oprot.writeFieldEnd()
        if self.is_system is not None:
            oprot.writeFieldBegin('is_system', TType.BOOL, 12)
            oprot.writeBool(self.is_system)
            oprot.writeFieldEnd()
        if self.mbr_type is not None:
            oprot.writeFieldBegin('mbr_type', TType.I16, 13)
            oprot.writeI16(self.mbr_type)
            oprot.writeFieldEnd()
        if self.offset is not None:
            oprot.writeFieldBegin('offset', TType.I64, 14)
            oprot.writeI64(self.offset)
            oprot.writeFieldEnd()
        if self.partition_number is not None:
            oprot.writeFieldBegin('partition_number', TType.I32, 15)
            oprot.writeI32(self.partition_number)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 16)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class volume_info(object):
    """
    Attributes:
     - access_paths
     - cluster_access_path
     - drive_letter
     - drive_type
     - file_system
     - file_system_catalogid
     - file_system_label
     - object_id
     - path
     - size
     - size_remaining
    """

    thrift_spec = (
        None,  # 0
        (1, TType.SET, 'access_paths', (TType.STRING, 'UTF8', False), None, ),  # 1
        (2, TType.STRING, 'cluster_access_path', 'UTF8', "", ),  # 2
        (3, TType.STRING, 'drive_letter', 'UTF8', "", ),  # 3
        (4, TType.I32, 'drive_type', None, 0, ),  # 4
        (5, TType.STRING, 'file_system', 'UTF8', "", ),  # 5
        (6, TType.STRING, 'file_system_catalogid', 'UTF8', "", ),  # 6
        (7, TType.STRING, 'file_system_label', 'UTF8', "", ),  # 7
        (8, TType.STRING, 'object_id', 'UTF8', "", ),  # 8
        (9, TType.STRING, 'path', 'UTF8', "", ),  # 9
        (10, TType.I64, 'size', None, 0, ),  # 10
        (11, TType.I64, 'size_remaining', None, 0, ),  # 11
    )

    def __init__(self, access_paths=None, cluster_access_path=thrift_spec[2][4], drive_letter=thrift_spec[3][4], drive_type=thrift_spec[4][4], file_system=thrift_spec[5][4], file_system_catalogid=thrift_spec[6][4], file_system_label=thrift_spec[7][4], object_id=thrift_spec[8][4], path=thrift_spec[9][4], size=thrift_spec[10][4], size_remaining=thrift_spec[11][4],):
        self.access_paths = access_paths
        self.cluster_access_path = cluster_access_path
        self.drive_letter = drive_letter
        self.drive_type = drive_type
        self.file_system = file_system
        self.file_system_catalogid = file_system_catalogid
        self.file_system_label = file_system_label
        self.object_id = object_id
        self.path = path
        self.size = size
        self.size_remaining = size_remaining

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.SET:
                    self.access_paths = set()
                    (_etype10, _size7) = iprot.readSetBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.access_paths.add(_elem12)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cluster_access_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.drive_letter = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.drive_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.file_system = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.file_system_catalogid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.file_system_label = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.object_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.size_remaining = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('volume_info')
        if self.access_paths is not None:
            oprot.writeFieldBegin('access_paths', TType.SET, 1)
            oprot.writeSetBegin(TType.STRING, len(self.access_paths))
            for iter13 in self.access_paths:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.cluster_access_path is not None:
            oprot.writeFieldBegin('cluster_access_path', TType.STRING, 2)
            oprot.writeString(self.cluster_access_path.encode('utf-8') if sys.version_info[0] == 2 else self.cluster_access_path)
            oprot.writeFieldEnd()
        if self.drive_letter is not None:
            oprot.writeFieldBegin('drive_letter', TType.STRING, 3)
            oprot.writeString(self.drive_letter.encode('utf-8') if sys.version_info[0] == 2 else self.drive_letter)
            oprot.writeFieldEnd()
        if self.drive_type is not None:
            oprot.writeFieldBegin('drive_type', TType.I32, 4)
            oprot.writeI32(self.drive_type)
            oprot.writeFieldEnd()
        if self.file_system is not None:
            oprot.writeFieldBegin('file_system', TType.STRING, 5)
            oprot.writeString(self.file_system.encode('utf-8') if sys.version_info[0] == 2 else self.file_system)
            oprot.writeFieldEnd()
        if self.file_system_catalogid is not None:
            oprot.writeFieldBegin('file_system_catalogid', TType.STRING, 6)
            oprot.writeString(self.file_system_catalogid.encode('utf-8') if sys.version_info[0] == 2 else self.file_system_catalogid)
            oprot.writeFieldEnd()
        if self.file_system_label is not None:
            oprot.writeFieldBegin('file_system_label', TType.STRING, 7)
            oprot.writeString(self.file_system_label.encode('utf-8') if sys.version_info[0] == 2 else self.file_system_label)
            oprot.writeFieldEnd()
        if self.object_id is not None:
            oprot.writeFieldBegin('object_id', TType.STRING, 8)
            oprot.writeString(self.object_id.encode('utf-8') if sys.version_info[0] == 2 else self.object_id)
            oprot.writeFieldEnd()
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 9)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 10)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        if self.size_remaining is not None:
            oprot.writeFieldBegin('size_remaining', TType.I64, 11)
            oprot.writeI64(self.size_remaining)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class network_info(object):
    """
    Attributes:
     - adapter_name
     - description
     - dnss
     - gateways
     - ip_addresses
     - is_dhcp_v4
     - is_dhcp_v6
     - mac_address
     - subnet_masks
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'adapter_name', 'UTF8', "", ),  # 1
        (2, TType.STRING, 'description', 'UTF8', "", ),  # 2
        (3, TType.LIST, 'dnss', (TType.STRING, 'UTF8', False), None, ),  # 3
        (4, TType.LIST, 'gateways', (TType.STRING, 'UTF8', False), None, ),  # 4
        (5, TType.LIST, 'ip_addresses', (TType.STRING, 'UTF8', False), None, ),  # 5
        (6, TType.BOOL, 'is_dhcp_v4', None, False, ),  # 6
        (7, TType.BOOL, 'is_dhcp_v6', None, False, ),  # 7
        (8, TType.STRING, 'mac_address', 'UTF8', "", ),  # 8
        (9, TType.LIST, 'subnet_masks', (TType.STRING, 'UTF8', False), None, ),  # 9
    )

    def __init__(self, adapter_name=thrift_spec[1][4], description=thrift_spec[2][4], dnss=None, gateways=None, ip_addresses=None, is_dhcp_v4=thrift_spec[6][4], is_dhcp_v6=thrift_spec[7][4], mac_address=thrift_spec[8][4], subnet_masks=None,):
        self.adapter_name = adapter_name
        self.description = description
        self.dnss = dnss
        self.gateways = gateways
        self.ip_addresses = ip_addresses
        self.is_dhcp_v4 = is_dhcp_v4
        self.is_dhcp_v6 = is_dhcp_v6
        self.mac_address = mac_address
        self.subnet_masks = subnet_masks

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.adapter_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.dnss = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.dnss.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.gateways = []
                    (_etype23, _size20) = iprot.readListBegin()
                    for _i24 in range(_size20):
                        _elem25 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.gateways.append(_elem25)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.ip_addresses = []
                    (_etype29, _size26) = iprot.readListBegin()
                    for _i30 in range(_size26):
                        _elem31 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.ip_addresses.append(_elem31)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.is_dhcp_v4 = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.is_dhcp_v6 = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.mac_address = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.subnet_masks = []
                    (_etype35, _size32) = iprot.readListBegin()
                    for _i36 in range(_size32):
                        _elem37 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.subnet_masks.append(_elem37)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('network_info')
        if self.adapter_name is not None:
            oprot.writeFieldBegin('adapter_name', TType.STRING, 1)
            oprot.writeString(self.adapter_name.encode('utf-8') if sys.version_info[0] == 2 else self.adapter_name)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 2)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.dnss is not None:
            oprot.writeFieldBegin('dnss', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.dnss))
            for iter38 in self.dnss:
                oprot.writeString(iter38.encode('utf-8') if sys.version_info[0] == 2 else iter38)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gateways is not None:
            oprot.writeFieldBegin('gateways', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.gateways))
            for iter39 in self.gateways:
                oprot.writeString(iter39.encode('utf-8') if sys.version_info[0] == 2 else iter39)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ip_addresses is not None:
            oprot.writeFieldBegin('ip_addresses', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.ip_addresses))
            for iter40 in self.ip_addresses:
                oprot.writeString(iter40.encode('utf-8') if sys.version_info[0] == 2 else iter40)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.is_dhcp_v4 is not None:
            oprot.writeFieldBegin('is_dhcp_v4', TType.BOOL, 6)
            oprot.writeBool(self.is_dhcp_v4)
            oprot.writeFieldEnd()
        if self.is_dhcp_v6 is not None:
            oprot.writeFieldBegin('is_dhcp_v6', TType.BOOL, 7)
            oprot.writeBool(self.is_dhcp_v6)
            oprot.writeFieldEnd()
        if self.mac_address is not None:
            oprot.writeFieldBegin('mac_address', TType.STRING, 8)
            oprot.writeString(self.mac_address.encode('utf-8') if sys.version_info[0] == 2 else self.mac_address)
            oprot.writeFieldEnd()
        if self.subnet_masks is not None:
            oprot.writeFieldBegin('subnet_masks', TType.LIST, 9)
            oprot.writeListBegin(TType.STRING, len(self.subnet_masks))
            for iter41 in self.subnet_masks:
                oprot.writeString(iter41.encode('utf-8') if sys.version_info[0] == 2 else iter41)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class cluster_network(object):
    """
    Attributes:
     - cluster_network_name
     - cluster_network_id
     - cluster_network_address
     - cluster_network_address_mask
     - network_infos
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'cluster_network_name', 'UTF8', "", ),  # 1
        (2, TType.STRING, 'cluster_network_id', 'UTF8', "", ),  # 2
        (3, TType.STRING, 'cluster_network_address', 'UTF8', "", ),  # 3
        (4, TType.STRING, 'cluster_network_address_mask', 'UTF8', "", ),  # 4
        (5, TType.SET, 'network_infos', (TType.STRUCT, (network_info, network_info.thrift_spec), False), None, ),  # 5
    )

    def __init__(self, cluster_network_name=thrift_spec[1][4], cluster_network_id=thrift_spec[2][4], cluster_network_address=thrift_spec[3][4], cluster_network_address_mask=thrift_spec[4][4], network_infos=None,):
        self.cluster_network_name = cluster_network_name
        self.cluster_network_id = cluster_network_id
        self.cluster_network_address = cluster_network_address
        self.cluster_network_address_mask = cluster_network_address_mask
        self.network_infos = network_infos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.cluster_network_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cluster_network_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cluster_network_address = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.cluster_network_address_mask = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.SET:
                    self.network_infos = set()
                    (_etype45, _size42) = iprot.readSetBegin()
                    for _i46 in range(_size42):
                        _elem47 = network_info()
                        _elem47.read(iprot)
                        self.network_infos.add(_elem47)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('cluster_network')
        if self.cluster_network_name is not None:
            oprot.writeFieldBegin('cluster_network_name', TType.STRING, 1)
            oprot.writeString(self.cluster_network_name.encode('utf-8') if sys.version_info[0] == 2 else self.cluster_network_name)
            oprot.writeFieldEnd()
        if self.cluster_network_id is not None:
            oprot.writeFieldBegin('cluster_network_id', TType.STRING, 2)
            oprot.writeString(self.cluster_network_id.encode('utf-8') if sys.version_info[0] == 2 else self.cluster_network_id)
            oprot.writeFieldEnd()
        if self.cluster_network_address is not None:
            oprot.writeFieldBegin('cluster_network_address', TType.STRING, 3)
            oprot.writeString(self.cluster_network_address.encode('utf-8') if sys.version_info[0] == 2 else self.cluster_network_address)
            oprot.writeFieldEnd()
        if self.cluster_network_address_mask is not None:
            oprot.writeFieldBegin('cluster_network_address_mask', TType.STRING, 4)
            oprot.writeString(self.cluster_network_address_mask.encode('utf-8') if sys.version_info[0] == 2 else self.cluster_network_address_mask)
            oprot.writeFieldEnd()
        if self.network_infos is not None:
            oprot.writeFieldBegin('network_infos', TType.SET, 5)
            oprot.writeSetBegin(TType.STRUCT, len(self.network_infos))
            for iter48 in self.network_infos:
                iter48.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class cluster_group(object):
    """
    Attributes:
     - group_id
     - group_name
     - group_owner
     - cluster_disks
     - cluster_partitions
     - cluster_network_infos
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'group_id', 'UTF8', "", ),  # 1
        (2, TType.STRING, 'group_name', 'UTF8', "", ),  # 2
        (3, TType.STRING, 'group_owner', 'UTF8', "", ),  # 3
        (4, TType.SET, 'cluster_disks', (TType.STRUCT, (disk_info, disk_info.thrift_spec), False), None, ),  # 4
        (5, TType.SET, 'cluster_partitions', (TType.STRUCT, (volume_info, volume_info.thrift_spec), False), None, ),  # 5
        (6, TType.SET, 'cluster_network_infos', (TType.STRUCT, (cluster_network, cluster_network.thrift_spec), False), None, ),  # 6
    )

    def __init__(self, group_id=thrift_spec[1][4], group_name=thrift_spec[2][4], group_owner=thrift_spec[3][4], cluster_disks=None, cluster_partitions=None, cluster_network_infos=None,):
        self.group_id = group_id
        self.group_name = group_name
        self.group_owner = group_owner
        self.cluster_disks = cluster_disks
        self.cluster_partitions = cluster_partitions
        self.cluster_network_infos = cluster_network_infos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.group_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.group_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.group_owner = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.SET:
                    self.cluster_disks = set()
                    (_etype52, _size49) = iprot.readSetBegin()
                    for _i53 in range(_size49):
                        _elem54 = disk_info()
                        _elem54.read(iprot)
                        self.cluster_disks.add(_elem54)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.SET:
                    self.cluster_partitions = set()
                    (_etype58, _size55) = iprot.readSetBegin()
                    for _i59 in range(_size55):
                        _elem60 = volume_info()
                        _elem60.read(iprot)
                        self.cluster_partitions.add(_elem60)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.SET:
                    self.cluster_network_infos = set()
                    (_etype64, _size61) = iprot.readSetBegin()
                    for _i65 in range(_size61):
                        _elem66 = cluster_network()
                        _elem66.read(iprot)
                        self.cluster_network_infos.add(_elem66)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('cluster_group')
        if self.group_id is not None:
            oprot.writeFieldBegin('group_id', TType.STRING, 1)
            oprot.writeString(self.group_id.encode('utf-8') if sys.version_info[0] == 2 else self.group_id)
            oprot.writeFieldEnd()
        if self.group_name is not None:
            oprot.writeFieldBegin('group_name', TType.STRING, 2)
            oprot.writeString(self.group_name.encode('utf-8') if sys.version_info[0] == 2 else self.group_name)
            oprot.writeFieldEnd()
        if self.group_owner is not None:
            oprot.writeFieldBegin('group_owner', TType.STRING, 3)
            oprot.writeString(self.group_owner.encode('utf-8') if sys.version_info[0] == 2 else self.group_owner)
            oprot.writeFieldEnd()
        if self.cluster_disks is not None:
            oprot.writeFieldBegin('cluster_disks', TType.SET, 4)
            oprot.writeSetBegin(TType.STRUCT, len(self.cluster_disks))
            for iter67 in self.cluster_disks:
                iter67.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.cluster_partitions is not None:
            oprot.writeFieldBegin('cluster_partitions', TType.SET, 5)
            oprot.writeSetBegin(TType.STRUCT, len(self.cluster_partitions))
            for iter68 in self.cluster_partitions:
                iter68.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.cluster_network_infos is not None:
            oprot.writeFieldBegin('cluster_network_infos', TType.SET, 6)
            oprot.writeSetBegin(TType.STRUCT, len(self.cluster_network_infos))
            for iter69 in self.cluster_network_infos:
                iter69.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class cluster_info(object):
    """
    Attributes:
     - cluster_name
     - quorum_disk
     - cluster_nodes
     - client_ids
     - machine_ids
     - cluster_network_infos
     - cluster_groups
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'cluster_name', 'UTF8', "", ),  # 1
        (2, TType.STRUCT, 'quorum_disk', (disk_info, disk_info.thrift_spec), None, ),  # 2
        (3, TType.SET, 'cluster_nodes', (TType.STRING, 'UTF8', False), None, ),  # 3
        (4, TType.SET, 'client_ids', (TType.STRING, 'UTF8', False), None, ),  # 4
        (5, TType.SET, 'machine_ids', (TType.STRING, 'UTF8', False), None, ),  # 5
        (6, TType.SET, 'cluster_network_infos', (TType.STRUCT, (cluster_network, cluster_network.thrift_spec), False), None, ),  # 6
        (7, TType.SET, 'cluster_groups', (TType.STRUCT, (cluster_group, cluster_group.thrift_spec), False), None, ),  # 7
    )

    def __init__(self, cluster_name=thrift_spec[1][4], quorum_disk=None, cluster_nodes=None, client_ids=None, machine_ids=None, cluster_network_infos=None, cluster_groups=None,):
        self.cluster_name = cluster_name
        self.quorum_disk = quorum_disk
        self.cluster_nodes = cluster_nodes
        self.client_ids = client_ids
        self.machine_ids = machine_ids
        self.cluster_network_infos = cluster_network_infos
        self.cluster_groups = cluster_groups

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.cluster_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.quorum_disk = disk_info()
                    self.quorum_disk.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.cluster_nodes = set()
                    (_etype73, _size70) = iprot.readSetBegin()
                    for _i74 in range(_size70):
                        _elem75 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.cluster_nodes.add(_elem75)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.SET:
                    self.client_ids = set()
                    (_etype79, _size76) = iprot.readSetBegin()
                    for _i80 in range(_size76):
                        _elem81 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.client_ids.add(_elem81)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.SET:
                    self.machine_ids = set()
                    (_etype85, _size82) = iprot.readSetBegin()
                    for _i86 in range(_size82):
                        _elem87 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.machine_ids.add(_elem87)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.SET:
                    self.cluster_network_infos = set()
                    (_etype91, _size88) = iprot.readSetBegin()
                    for _i92 in range(_size88):
                        _elem93 = cluster_network()
                        _elem93.read(iprot)
                        self.cluster_network_infos.add(_elem93)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.SET:
                    self.cluster_groups = set()
                    (_etype97, _size94) = iprot.readSetBegin()
                    for _i98 in range(_size94):
                        _elem99 = cluster_group()
                        _elem99.read(iprot)
                        self.cluster_groups.add(_elem99)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('cluster_info')
        if self.cluster_name is not None:
            oprot.writeFieldBegin('cluster_name', TType.STRING, 1)
            oprot.writeString(self.cluster_name.encode('utf-8') if sys.version_info[0] == 2 else self.cluster_name)
            oprot.writeFieldEnd()
        if self.quorum_disk is not None:
            oprot.writeFieldBegin('quorum_disk', TType.STRUCT, 2)
            self.quorum_disk.write(oprot)
            oprot.writeFieldEnd()
        if self.cluster_nodes is not None:
            oprot.writeFieldBegin('cluster_nodes', TType.SET, 3)
            oprot.writeSetBegin(TType.STRING, len(self.cluster_nodes))
            for iter100 in self.cluster_nodes:
                oprot.writeString(iter100.encode('utf-8') if sys.version_info[0] == 2 else iter100)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.client_ids is not None:
            oprot.writeFieldBegin('client_ids', TType.SET, 4)
            oprot.writeSetBegin(TType.STRING, len(self.client_ids))
            for iter101 in self.client_ids:
                oprot.writeString(iter101.encode('utf-8') if sys.version_info[0] == 2 else iter101)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.machine_ids is not None:
            oprot.writeFieldBegin('machine_ids', TType.SET, 5)
            oprot.writeSetBegin(TType.STRING, len(self.machine_ids))
            for iter102 in self.machine_ids:
                oprot.writeString(iter102.encode('utf-8') if sys.version_info[0] == 2 else iter102)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.cluster_network_infos is not None:
            oprot.writeFieldBegin('cluster_network_infos', TType.SET, 6)
            oprot.writeSetBegin(TType.STRUCT, len(self.cluster_network_infos))
            for iter103 in self.cluster_network_infos:
                iter103.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.cluster_groups is not None:
            oprot.writeFieldBegin('cluster_groups', TType.SET, 7)
            oprot.writeSetBegin(TType.STRUCT, len(self.cluster_groups))
            for iter104 in self.cluster_groups:
                iter104.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class os_version_info(object):
    """
    Attributes:
     - csd_version
     - build_number
     - major_version
     - minor_version
     - platform_id
     - product_type
     - servicepack_major
     - servicepack_minor
     - suite_mask
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'csd_version', 'UTF8', "", ),  # 1
        (2, TType.I32, 'build_number', None, -1, ),  # 2
        (3, TType.I32, 'major_version', None, -1, ),  # 3
        (4, TType.I32, 'minor_version', None, -1, ),  # 4
        (5, TType.I32, 'platform_id', None, -1, ),  # 5
        (6, TType.I16, 'product_type', None, -1, ),  # 6
        (7, TType.I32, 'servicepack_major', None, -1, ),  # 7
        (8, TType.I32, 'servicepack_minor', None, -1, ),  # 8
        (9, TType.I32, 'suite_mask', None, -1, ),  # 9
    )

    def __init__(self, csd_version=thrift_spec[1][4], build_number=thrift_spec[2][4], major_version=thrift_spec[3][4], minor_version=thrift_spec[4][4], platform_id=thrift_spec[5][4], product_type=thrift_spec[6][4], servicepack_major=thrift_spec[7][4], servicepack_minor=thrift_spec[8][4], suite_mask=thrift_spec[9][4],):
        self.csd_version = csd_version
        self.build_number = build_number
        self.major_version = major_version
        self.minor_version = minor_version
        self.platform_id = platform_id
        self.product_type = product_type
        self.servicepack_major = servicepack_major
        self.servicepack_minor = servicepack_minor
        self.suite_mask = suite_mask

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.csd_version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.build_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.major_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.minor_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.platform_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I16:
                    self.product_type = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.servicepack_major = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.servicepack_minor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.suite_mask = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('os_version_info')
        if self.csd_version is not None:
            oprot.writeFieldBegin('csd_version', TType.STRING, 1)
            oprot.writeString(self.csd_version.encode('utf-8') if sys.version_info[0] == 2 else self.csd_version)
            oprot.writeFieldEnd()
        if self.build_number is not None:
            oprot.writeFieldBegin('build_number', TType.I32, 2)
            oprot.writeI32(self.build_number)
            oprot.writeFieldEnd()
        if self.major_version is not None:
            oprot.writeFieldBegin('major_version', TType.I32, 3)
            oprot.writeI32(self.major_version)
            oprot.writeFieldEnd()
        if self.minor_version is not None:
            oprot.writeFieldBegin('minor_version', TType.I32, 4)
            oprot.writeI32(self.minor_version)
            oprot.writeFieldEnd()
        if self.platform_id is not None:
            oprot.writeFieldBegin('platform_id', TType.I32, 5)
            oprot.writeI32(self.platform_id)
            oprot.writeFieldEnd()
        if self.product_type is not None:
            oprot.writeFieldBegin('product_type', TType.I16, 6)
            oprot.writeI16(self.product_type)
            oprot.writeFieldEnd()
        if self.servicepack_major is not None:
            oprot.writeFieldBegin('servicepack_major', TType.I32, 7)
            oprot.writeI32(self.servicepack_major)
            oprot.writeFieldEnd()
        if self.servicepack_minor is not None:
            oprot.writeFieldBegin('servicepack_minor', TType.I32, 8)
            oprot.writeI32(self.servicepack_minor)
            oprot.writeFieldEnd()
        if self.suite_mask is not None:
            oprot.writeFieldBegin('suite_mask', TType.I32, 9)
            oprot.writeI32(self.suite_mask)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class snapshot(object):
    """
    Attributes:
     - snapshot_set_id
     - snapshot_id
     - original_volume_name
     - snapshot_device_object
     - creation_time_stamp
     - snapshots_count
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'snapshot_set_id', 'UTF8', "", ),  # 1
        (2, TType.STRING, 'snapshot_id', 'UTF8', "", ),  # 2
        (3, TType.STRING, 'original_volume_name', 'UTF8', "", ),  # 3
        (4, TType.STRING, 'snapshot_device_object', 'UTF8', "", ),  # 4
        (5, TType.STRING, 'creation_time_stamp', 'UTF8', "", ),  # 5
        (6, TType.I32, 'snapshots_count', None, 0, ),  # 6
    )

    def __init__(self, snapshot_set_id=thrift_spec[1][4], snapshot_id=thrift_spec[2][4], original_volume_name=thrift_spec[3][4], snapshot_device_object=thrift_spec[4][4], creation_time_stamp=thrift_spec[5][4], snapshots_count=thrift_spec[6][4],):
        self.snapshot_set_id = snapshot_set_id
        self.snapshot_id = snapshot_id
        self.original_volume_name = original_volume_name
        self.snapshot_device_object = snapshot_device_object
        self.creation_time_stamp = creation_time_stamp
        self.snapshots_count = snapshots_count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.snapshot_set_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.snapshot_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.original_volume_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.snapshot_device_object = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.creation_time_stamp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.snapshots_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('snapshot')
        if self.snapshot_set_id is not None:
            oprot.writeFieldBegin('snapshot_set_id', TType.STRING, 1)
            oprot.writeString(self.snapshot_set_id.encode('utf-8') if sys.version_info[0] == 2 else self.snapshot_set_id)
            oprot.writeFieldEnd()
        if self.snapshot_id is not None:
            oprot.writeFieldBegin('snapshot_id', TType.STRING, 2)
            oprot.writeString(self.snapshot_id.encode('utf-8') if sys.version_info[0] == 2 else self.snapshot_id)
            oprot.writeFieldEnd()
        if self.original_volume_name is not None:
            oprot.writeFieldBegin('original_volume_name', TType.STRING, 3)
            oprot.writeString(self.original_volume_name.encode('utf-8') if sys.version_info[0] == 2 else self.original_volume_name)
            oprot.writeFieldEnd()
        if self.snapshot_device_object is not None:
            oprot.writeFieldBegin('snapshot_device_object', TType.STRING, 4)
            oprot.writeString(self.snapshot_device_object.encode('utf-8') if sys.version_info[0] == 2 else self.snapshot_device_object)
            oprot.writeFieldEnd()
        if self.creation_time_stamp is not None:
            oprot.writeFieldBegin('creation_time_stamp', TType.STRING, 5)
            oprot.writeString(self.creation_time_stamp.encode('utf-8') if sys.version_info[0] == 2 else self.creation_time_stamp)
            oprot.writeFieldEnd()
        if self.snapshots_count is not None:
            oprot.writeFieldBegin('snapshots_count', TType.I32, 6)
            oprot.writeI32(self.snapshots_count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class snapshot_result(object):
    """
    Attributes:
     - snapshots
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'snapshots', (TType.STRUCT, (snapshot, snapshot.thrift_spec), False), None, ),  # 1
    )

    def __init__(self, snapshots=None,):
        self.snapshots = snapshots

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.snapshots = []
                    (_etype108, _size105) = iprot.readListBegin()
                    for _i109 in range(_size105):
                        _elem110 = snapshot()
                        _elem110.read(iprot)
                        self.snapshots.append(_elem110)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('snapshot_result')
        if self.snapshots is not None:
            oprot.writeFieldBegin('snapshots', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.snapshots))
            for iter111 in self.snapshots:
                iter111.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class volume_bit_map(object):
    """
    Attributes:
     - cluster_size
     - starting_lcn
     - total_number_of_clusters
     - bit_map
     - compressed
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'cluster_size', None, 0, ),  # 1
        (2, TType.I64, 'starting_lcn', None, 0, ),  # 2
        (3, TType.I64, 'total_number_of_clusters', None, 0, ),  # 3
        (4, TType.STRING, 'bit_map', 'BINARY', "", ),  # 4
        (5, TType.BOOL, 'compressed', None, False, ),  # 5
    )

    def __init__(self, cluster_size=thrift_spec[1][4], starting_lcn=thrift_spec[2][4], total_number_of_clusters=thrift_spec[3][4], bit_map=thrift_spec[4][4], compressed=thrift_spec[5][4],):
        self.cluster_size = cluster_size
        self.starting_lcn = starting_lcn
        self.total_number_of_clusters = total_number_of_clusters
        self.bit_map = bit_map
        self.compressed = compressed

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.cluster_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.starting_lcn = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.total_number_of_clusters = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.bit_map = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.compressed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('volume_bit_map')
        if self.cluster_size is not None:
            oprot.writeFieldBegin('cluster_size', TType.I32, 1)
            oprot.writeI32(self.cluster_size)
            oprot.writeFieldEnd()
        if self.starting_lcn is not None:
            oprot.writeFieldBegin('starting_lcn', TType.I64, 2)
            oprot.writeI64(self.starting_lcn)
            oprot.writeFieldEnd()
        if self.total_number_of_clusters is not None:
            oprot.writeFieldBegin('total_number_of_clusters', TType.I64, 3)
            oprot.writeI64(self.total_number_of_clusters)
            oprot.writeFieldEnd()
        if self.bit_map is not None:
            oprot.writeFieldBegin('bit_map', TType.STRING, 4)
            oprot.writeBinary(self.bit_map)
            oprot.writeFieldEnd()
        if self.compressed is not None:
            oprot.writeFieldBegin('compressed', TType.BOOL, 5)
            oprot.writeBool(self.compressed)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class replication_result(object):
    """
    Attributes:
     - result
     - compressed
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'result', 'BINARY', "", ),  # 1
        (2, TType.BOOL, 'compressed', None, False, ),  # 2
    )

    def __init__(self, result=thrift_spec[1][4], compressed=thrift_spec[2][4],):
        self.result = result
        self.compressed = compressed

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.result = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.compressed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('replication_result')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRING, 1)
            oprot.writeBinary(self.result)
            oprot.writeFieldEnd()
        if self.compressed is not None:
            oprot.writeFieldBegin('compressed', TType.BOOL, 2)
            oprot.writeBool(self.compressed)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class delete_snapshot_result(object):
    """
    Attributes:
     - code
     - deleted_snapshots
     - non_deleted_snapshot_id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'code', None, 0, ),  # 1
        (2, TType.I32, 'deleted_snapshots', None, 0, ),  # 2
        (3, TType.STRING, 'non_deleted_snapshot_id', 'UTF8', None, ),  # 3
    )

    def __init__(self, code=thrift_spec[1][4], deleted_snapshots=thrift_spec[2][4], non_deleted_snapshot_id=None,):
        self.code = code
        self.deleted_snapshots = deleted_snapshots
        self.non_deleted_snapshot_id = non_deleted_snapshot_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.deleted_snapshots = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.non_deleted_snapshot_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('delete_snapshot_result')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.deleted_snapshots is not None:
            oprot.writeFieldBegin('deleted_snapshots', TType.I32, 2)
            oprot.writeI32(self.deleted_snapshots)
            oprot.writeFieldEnd()
        if self.non_deleted_snapshot_id is not None:
            oprot.writeFieldBegin('non_deleted_snapshot_id', TType.STRING, 3)
            oprot.writeString(self.non_deleted_snapshot_id.encode('utf-8') if sys.version_info[0] == 2 else self.non_deleted_snapshot_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class physical_machine_info(object):
    """
    Attributes:
     - architecture
     - client_id
     - client_name
     - domain
     - hal
     - initiator_name
     - is_oem
     - logical_processors
     - machine_id
     - manufacturer
     - os_name
     - os_type
     - os_system_info
     - physical_memory
     - processors
     - role
     - system_model
     - system_root
     - workgroup
     - os_version
     - cluster_infos
     - disk_infos
     - network_infos
     - partition_infos
     - volume_infos
     - is_vcbt_driver_installed
     - is_vcbt_enabled
     - current_vcbt_version
     - installed_vcbt_version
     - is_winpe
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'architecture', 'UTF8', "", ),  # 1
        (2, TType.STRING, 'client_id', 'UTF8', "", ),  # 2
        (3, TType.STRING, 'client_name', 'UTF8', "", ),  # 3
        (4, TType.STRING, 'domain', 'UTF8', "", ),  # 4
        (5, TType.STRING, 'hal', 'UTF8', "", ),  # 5
        (6, TType.STRING, 'initiator_name', 'UTF8', "", ),  # 6
        (7, TType.BOOL, 'is_oem', None, False, ),  # 7
        (8, TType.I16, 'logical_processors', None, 0, ),  # 8
        (9, TType.STRING, 'machine_id', 'UTF8', "", ),  # 9
        (10, TType.STRING, 'manufacturer', 'UTF8', "", ),  # 10
        (11, TType.STRING, 'os_name', 'UTF8', "", ),  # 11
        (12, TType.I32, 'os_type', None, 0, ),  # 12
        (13, TType.STRING, 'os_system_info', 'UTF8', None, ),  # 13
        (14, TType.I64, 'physical_memory', None, 0, ),  # 14
        (15, TType.I16, 'processors', None, 0, ),  # 15
        (16, TType.I32, 'role', None, 0, ),  # 16
        (17, TType.STRING, 'system_model', 'UTF8', "", ),  # 17
        (18, TType.STRING, 'system_root', 'UTF8', "", ),  # 18
        (19, TType.STRING, 'workgroup', 'UTF8', "", ),  # 19
        (20, TType.STRUCT, 'os_version', (os_version_info, os_version_info.thrift_spec), None, ),  # 20
        (21, TType.SET, 'cluster_infos', (TType.STRUCT, (cluster_info, cluster_info.thrift_spec), False), None, ),  # 21
        (22, TType.SET, 'disk_infos', (TType.STRUCT, (disk_info, disk_info.thrift_spec), False), None, ),  # 22
        (23, TType.SET, 'network_infos', (TType.STRUCT, (network_info, network_info.thrift_spec), False), None, ),  # 23
        (24, TType.SET, 'partition_infos', (TType.STRUCT, (partition_info, partition_info.thrift_spec), False), None, ),  # 24
        (25, TType.SET, 'volume_infos', (TType.STRUCT, (volume_info, volume_info.thrift_spec), False), None, ),  # 25
        (26, TType.BOOL, 'is_vcbt_driver_installed', None, False, ),  # 26
        (27, TType.BOOL, 'is_vcbt_enabled', None, False, ),  # 27
        (28, TType.STRING, 'current_vcbt_version', 'UTF8', None, ),  # 28
        (29, TType.STRING, 'installed_vcbt_version', 'UTF8', None, ),  # 29
        (30, TType.BOOL, 'is_winpe', None, False, ),  # 30
    )

    def __init__(self, architecture=thrift_spec[1][4], client_id=thrift_spec[2][4], client_name=thrift_spec[3][4], domain=thrift_spec[4][4], hal=thrift_spec[5][4], initiator_name=thrift_spec[6][4], is_oem=thrift_spec[7][4], logical_processors=thrift_spec[8][4], machine_id=thrift_spec[9][4], manufacturer=thrift_spec[10][4], os_name=thrift_spec[11][4], os_type=thrift_spec[12][4], os_system_info=None, physical_memory=thrift_spec[14][4], processors=thrift_spec[15][4], role=thrift_spec[16][4], system_model=thrift_spec[17][4], system_root=thrift_spec[18][4], workgroup=thrift_spec[19][4], os_version=None, cluster_infos=None, disk_infos=None, network_infos=None, partition_infos=None, volume_infos=None, is_vcbt_driver_installed=thrift_spec[26][4], is_vcbt_enabled=thrift_spec[27][4], current_vcbt_version=None, installed_vcbt_version=None, is_winpe=thrift_spec[30][4],):
        self.architecture = architecture
        self.client_id = client_id
        self.client_name = client_name
        self.domain = domain
        self.hal = hal
        self.initiator_name = initiator_name
        self.is_oem = is_oem
        self.logical_processors = logical_processors
        self.machine_id = machine_id
        self.manufacturer = manufacturer
        self.os_name = os_name
        self.os_type = os_type
        self.os_system_info = os_system_info
        self.physical_memory = physical_memory
        self.processors = processors
        self.role = role
        self.system_model = system_model
        self.system_root = system_root
        self.workgroup = workgroup
        self.os_version = os_version
        self.cluster_infos = cluster_infos
        self.disk_infos = disk_infos
        self.network_infos = network_infos
        self.partition_infos = partition_infos
        self.volume_infos = volume_infos
        self.is_vcbt_driver_installed = is_vcbt_driver_installed
        self.is_vcbt_enabled = is_vcbt_enabled
        self.current_vcbt_version = current_vcbt_version
        self.installed_vcbt_version = installed_vcbt_version
        self.is_winpe = is_winpe

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.architecture = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.client_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.client_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.domain = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.hal = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.initiator_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.is_oem = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I16:
                    self.logical_processors = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.machine_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.manufacturer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.os_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.os_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.os_system_info = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I64:
                    self.physical_memory = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I16:
                    self.processors = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.role = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.system_model = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.system_root = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.workgroup = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRUCT:
                    self.os_version = os_version_info()
                    self.os_version.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.SET:
                    self.cluster_infos = set()
                    (_etype115, _size112) = iprot.readSetBegin()
                    for _i116 in range(_size112):
                        _elem117 = cluster_info()
                        _elem117.read(iprot)
                        self.cluster_infos.add(_elem117)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.SET:
                    self.disk_infos = set()
                    (_etype121, _size118) = iprot.readSetBegin()
                    for _i122 in range(_size118):
                        _elem123 = disk_info()
                        _elem123.read(iprot)
                        self.disk_infos.add(_elem123)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.SET:
                    self.network_infos = set()
                    (_etype127, _size124) = iprot.readSetBegin()
                    for _i128 in range(_size124):
                        _elem129 = network_info()
                        _elem129.read(iprot)
                        self.network_infos.add(_elem129)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.SET:
                    self.partition_infos = set()
                    (_etype133, _size130) = iprot.readSetBegin()
                    for _i134 in range(_size130):
                        _elem135 = partition_info()
                        _elem135.read(iprot)
                        self.partition_infos.add(_elem135)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.SET:
                    self.volume_infos = set()
                    (_etype139, _size136) = iprot.readSetBegin()
                    for _i140 in range(_size136):
                        _elem141 = volume_info()
                        _elem141.read(iprot)
                        self.volume_infos.add(_elem141)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.BOOL:
                    self.is_vcbt_driver_installed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.BOOL:
                    self.is_vcbt_enabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.STRING:
                    self.current_vcbt_version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.STRING:
                    self.installed_vcbt_version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.BOOL:
                    self.is_winpe = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('physical_machine_info')
        if self.architecture is not None:
            oprot.writeFieldBegin('architecture', TType.STRING, 1)
            oprot.writeString(self.architecture.encode('utf-8') if sys.version_info[0] == 2 else self.architecture)
            oprot.writeFieldEnd()
        if self.client_id is not None:
            oprot.writeFieldBegin('client_id', TType.STRING, 2)
            oprot.writeString(self.client_id.encode('utf-8') if sys.version_info[0] == 2 else self.client_id)
            oprot.writeFieldEnd()
        if self.client_name is not None:
            oprot.writeFieldBegin('client_name', TType.STRING, 3)
            oprot.writeString(self.client_name.encode('utf-8') if sys.version_info[0] == 2 else self.client_name)
            oprot.writeFieldEnd()
        if self.domain is not None:
            oprot.writeFieldBegin('domain', TType.STRING, 4)
            oprot.writeString(self.domain.encode('utf-8') if sys.version_info[0] == 2 else self.domain)
            oprot.writeFieldEnd()
        if self.hal is not None:
            oprot.writeFieldBegin('hal', TType.STRING, 5)
            oprot.writeString(self.hal.encode('utf-8') if sys.version_info[0] == 2 else self.hal)
            oprot.writeFieldEnd()
        if self.initiator_name is not None:
            oprot.writeFieldBegin('initiator_name', TType.STRING, 6)
            oprot.writeString(self.initiator_name.encode('utf-8') if sys.version_info[0] == 2 else self.initiator_name)
            oprot.writeFieldEnd()
        if self.is_oem is not None:
            oprot.writeFieldBegin('is_oem', TType.BOOL, 7)
            oprot.writeBool(self.is_oem)
            oprot.writeFieldEnd()
        if self.logical_processors is not None:
            oprot.writeFieldBegin('logical_processors', TType.I16, 8)
            oprot.writeI16(self.logical_processors)
            oprot.writeFieldEnd()
        if self.machine_id is not None:
            oprot.writeFieldBegin('machine_id', TType.STRING, 9)
            oprot.writeString(self.machine_id.encode('utf-8') if sys.version_info[0] == 2 else self.machine_id)
            oprot.writeFieldEnd()
        if self.manufacturer is not None:
            oprot.writeFieldBegin('manufacturer', TType.STRING, 10)
            oprot.writeString(self.manufacturer.encode('utf-8') if sys.version_info[0] == 2 else self.manufacturer)
            oprot.writeFieldEnd()
        if self.os_name is not None:
            oprot.writeFieldBegin('os_name', TType.STRING, 11)
            oprot.writeString(self.os_name.encode('utf-8') if sys.version_info[0] == 2 else self.os_name)
            oprot.writeFieldEnd()
        if self.os_type is not None:
            oprot.writeFieldBegin('os_type', TType.I32, 12)
            oprot.writeI32(self.os_type)
            oprot.writeFieldEnd()
        if self.os_system_info is not None:
            oprot.writeFieldBegin('os_system_info', TType.STRING, 13)
            oprot.writeString(self.os_system_info.encode('utf-8') if sys.version_info[0] == 2 else self.os_system_info)
            oprot.writeFieldEnd()
        if self.physical_memory is not None:
            oprot.writeFieldBegin('physical_memory', TType.I64, 14)
            oprot.writeI64(self.physical_memory)
            oprot.writeFieldEnd()
        if self.processors is not None:
            oprot.writeFieldBegin('processors', TType.I16, 15)
            oprot.writeI16(self.processors)
            oprot.writeFieldEnd()
        if self.role is not None:
            oprot.writeFieldBegin('role', TType.I32, 16)
            oprot.writeI32(self.role)
            oprot.writeFieldEnd()
        if self.system_model is not None:
            oprot.writeFieldBegin('system_model', TType.STRING, 17)
            oprot.writeString(self.system_model.encode('utf-8') if sys.version_info[0] == 2 else self.system_model)
            oprot.writeFieldEnd()
        if self.system_root is not None:
            oprot.writeFieldBegin('system_root', TType.STRING, 18)
            oprot.writeString(self.system_root.encode('utf-8') if sys.version_info[0] == 2 else self.system_root)
            oprot.writeFieldEnd()
        if self.workgroup is not None:
            oprot.writeFieldBegin('workgroup', TType.STRING, 19)
            oprot.writeString(self.workgroup.encode('utf-8') if sys.version_info[0] == 2 else self.workgroup)
            oprot.writeFieldEnd()
        if self.os_version is not None:
            oprot.writeFieldBegin('os_version', TType.STRUCT, 20)
            self.os_version.write(oprot)
            oprot.writeFieldEnd()
        if self.cluster_infos is not None:
            oprot.writeFieldBegin('cluster_infos', TType.SET, 21)
            oprot.writeSetBegin(TType.STRUCT, len(self.cluster_infos))
            for iter142 in self.cluster_infos:
                iter142.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.disk_infos is not None:
            oprot.writeFieldBegin('disk_infos', TType.SET, 22)
            oprot.writeSetBegin(TType.STRUCT, len(self.disk_infos))
            for iter143 in self.disk_infos:
                iter143.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.network_infos is not None:
            oprot.writeFieldBegin('network_infos', TType.SET, 23)
            oprot.writeSetBegin(TType.STRUCT, len(self.network_infos))
            for iter144 in self.network_infos:
                iter144.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.partition_infos is not None:
            oprot.writeFieldBegin('partition_infos', TType.SET, 24)
            oprot.writeSetBegin(TType.STRUCT, len(self.partition_infos))
            for iter145 in self.partition_infos:
                iter145.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.volume_infos is not None:
            oprot.writeFieldBegin('volume_infos', TType.SET, 25)
            oprot.writeSetBegin(TType.STRUCT, len(self.volume_infos))
            for iter146 in self.volume_infos:
                iter146.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.is_vcbt_driver_installed is not None:
            oprot.writeFieldBegin('is_vcbt_driver_installed', TType.BOOL, 26)
            oprot.writeBool(self.is_vcbt_driver_installed)
            oprot.writeFieldEnd()
        if self.is_vcbt_enabled is not None:
            oprot.writeFieldBegin('is_vcbt_enabled', TType.BOOL, 27)
            oprot.writeBool(self.is_vcbt_enabled)
            oprot.writeFieldEnd()
        if self.current_vcbt_version is not None:
            oprot.writeFieldBegin('current_vcbt_version', TType.STRING, 28)
            oprot.writeString(self.current_vcbt_version.encode('utf-8') if sys.version_info[0] == 2 else self.current_vcbt_version)
            oprot.writeFieldEnd()
        if self.installed_vcbt_version is not None:
            oprot.writeFieldBegin('installed_vcbt_version', TType.STRING, 29)
            oprot.writeString(self.installed_vcbt_version.encode('utf-8') if sys.version_info[0] == 2 else self.installed_vcbt_version)
            oprot.writeFieldEnd()
        if self.is_winpe is not None:
            oprot.writeFieldBegin('is_winpe', TType.BOOL, 30)
            oprot.writeBool(self.is_winpe)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class virtual_host(object):
    """
    Attributes:
     - name_ref
     - name
     - ip_addresses
     - ip_address
     - product_name
     - version
     - power_state
     - state
     - in_maintenance_mode
     - vms
     - datastores
     - networks
     - datacenter_name
     - domain_name
     - cluster_key
     - full_name
     - lic_features
     - name_list
     - domain_name_list
     - connection_type
     - virtual_center_name
     - virtual_center_version
     - uuid
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'name_ref', 'UTF8', "", ),  # 1
        (2, TType.STRING, 'name', 'UTF8', "", ),  # 2
        (3, TType.LIST, 'ip_addresses', (TType.STRING, 'UTF8', False), None, ),  # 3
        (4, TType.STRING, 'ip_address', 'UTF8', "", ),  # 4
        (5, TType.STRING, 'product_name', 'UTF8', "", ),  # 5
        (6, TType.STRING, 'version', 'UTF8', "", ),  # 6
        (7, TType.I32, 'power_state', None, 0, ),  # 7
        (8, TType.STRING, 'state', 'UTF8', "", ),  # 8
        (9, TType.BOOL, 'in_maintenance_mode', None, False, ),  # 9
        (10, TType.MAP, 'vms', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 10
        (11, TType.MAP, 'datastores', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 11
        (12, TType.MAP, 'networks', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 12
        (13, TType.STRING, 'datacenter_name', 'UTF8', "", ),  # 13
        (14, TType.STRING, 'domain_name', 'UTF8', "", ),  # 14
        (15, TType.STRING, 'cluster_key', 'UTF8', "", ),  # 15
        (16, TType.STRING, 'full_name', 'UTF8', "", ),  # 16
        (17, TType.MAP, 'lic_features', (TType.STRING, 'UTF8', TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 17
        (18, TType.LIST, 'name_list', (TType.STRING, 'UTF8', False), None, ),  # 18
        (19, TType.LIST, 'domain_name_list', (TType.STRING, 'UTF8', False), None, ),  # 19
        (20, TType.I32, 'connection_type', None, 0, ),  # 20
        (21, TType.STRING, 'virtual_center_name', 'UTF8', None, ),  # 21
        (22, TType.STRING, 'virtual_center_version', 'UTF8', None, ),  # 22
        (23, TType.STRING, 'uuid', 'UTF8', None, ),  # 23
    )

    def __init__(self, name_ref=thrift_spec[1][4], name=thrift_spec[2][4], ip_addresses=None, ip_address=thrift_spec[4][4], product_name=thrift_spec[5][4], version=thrift_spec[6][4], power_state=thrift_spec[7][4], state=thrift_spec[8][4], in_maintenance_mode=thrift_spec[9][4], vms=None, datastores=None, networks=None, datacenter_name=thrift_spec[13][4], domain_name=thrift_spec[14][4], cluster_key=thrift_spec[15][4], full_name=thrift_spec[16][4], lic_features=None, name_list=None, domain_name_list=None, connection_type=thrift_spec[20][4], virtual_center_name=None, virtual_center_version=None, uuid=None,):
        self.name_ref = name_ref
        self.name = name
        self.ip_addresses = ip_addresses
        self.ip_address = ip_address
        self.product_name = product_name
        self.version = version
        self.power_state = power_state
        self.state = state
        self.in_maintenance_mode = in_maintenance_mode
        self.vms = vms
        self.datastores = datastores
        self.networks = networks
        self.datacenter_name = datacenter_name
        self.domain_name = domain_name
        self.cluster_key = cluster_key
        self.full_name = full_name
        self.lic_features = lic_features
        self.name_list = name_list
        self.domain_name_list = domain_name_list
        self.connection_type = connection_type
        self.virtual_center_name = virtual_center_name
        self.virtual_center_version = virtual_center_version
        self.uuid = uuid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name_ref = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.ip_addresses = []
                    (_etype150, _size147) = iprot.readListBegin()
                    for _i151 in range(_size147):
                        _elem152 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.ip_addresses.append(_elem152)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.ip_address = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.product_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.power_state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.state = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.in_maintenance_mode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.MAP:
                    self.vms = {}
                    (_ktype154, _vtype155, _size153) = iprot.readMapBegin()
                    for _i157 in range(_size153):
                        _key158 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val159 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.vms[_key158] = _val159
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.MAP:
                    self.datastores = {}
                    (_ktype161, _vtype162, _size160) = iprot.readMapBegin()
                    for _i164 in range(_size160):
                        _key165 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val166 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.datastores[_key165] = _val166
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.MAP:
                    self.networks = {}
                    (_ktype168, _vtype169, _size167) = iprot.readMapBegin()
                    for _i171 in range(_size167):
                        _key172 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val173 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.networks[_key172] = _val173
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.datacenter_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.domain_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.cluster_key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.full_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.MAP:
                    self.lic_features = {}
                    (_ktype175, _vtype176, _size174) = iprot.readMapBegin()
                    for _i178 in range(_size174):
                        _key179 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val180 = []
                        (_etype184, _size181) = iprot.readListBegin()
                        for _i185 in range(_size181):
                            _elem186 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val180.append(_elem186)
                        iprot.readListEnd()
                        self.lic_features[_key179] = _val180
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.LIST:
                    self.name_list = []
                    (_etype190, _size187) = iprot.readListBegin()
                    for _i191 in range(_size187):
                        _elem192 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.name_list.append(_elem192)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.LIST:
                    self.domain_name_list = []
                    (_etype196, _size193) = iprot.readListBegin()
                    for _i197 in range(_size193):
                        _elem198 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.domain_name_list.append(_elem198)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.connection_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.virtual_center_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.virtual_center_version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('virtual_host')
        if self.name_ref is not None:
            oprot.writeFieldBegin('name_ref', TType.STRING, 1)
            oprot.writeString(self.name_ref.encode('utf-8') if sys.version_info[0] == 2 else self.name_ref)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.ip_addresses is not None:
            oprot.writeFieldBegin('ip_addresses', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.ip_addresses))
            for iter199 in self.ip_addresses:
                oprot.writeString(iter199.encode('utf-8') if sys.version_info[0] == 2 else iter199)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ip_address is not None:
            oprot.writeFieldBegin('ip_address', TType.STRING, 4)
            oprot.writeString(self.ip_address.encode('utf-8') if sys.version_info[0] == 2 else self.ip_address)
            oprot.writeFieldEnd()
        if self.product_name is not None:
            oprot.writeFieldBegin('product_name', TType.STRING, 5)
            oprot.writeString(self.product_name.encode('utf-8') if sys.version_info[0] == 2 else self.product_name)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 6)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.power_state is not None:
            oprot.writeFieldBegin('power_state', TType.I32, 7)
            oprot.writeI32(self.power_state)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.STRING, 8)
            oprot.writeString(self.state.encode('utf-8') if sys.version_info[0] == 2 else self.state)
            oprot.writeFieldEnd()
        if self.in_maintenance_mode is not None:
            oprot.writeFieldBegin('in_maintenance_mode', TType.BOOL, 9)
            oprot.writeBool(self.in_maintenance_mode)
            oprot.writeFieldEnd()
        if self.vms is not None:
            oprot.writeFieldBegin('vms', TType.MAP, 10)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.vms))
            for kiter200, viter201 in self.vms.items():
                oprot.writeString(kiter200.encode('utf-8') if sys.version_info[0] == 2 else kiter200)
                oprot.writeString(viter201.encode('utf-8') if sys.version_info[0] == 2 else viter201)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.datastores is not None:
            oprot.writeFieldBegin('datastores', TType.MAP, 11)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.datastores))
            for kiter202, viter203 in self.datastores.items():
                oprot.writeString(kiter202.encode('utf-8') if sys.version_info[0] == 2 else kiter202)
                oprot.writeString(viter203.encode('utf-8') if sys.version_info[0] == 2 else viter203)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.networks is not None:
            oprot.writeFieldBegin('networks', TType.MAP, 12)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.networks))
            for kiter204, viter205 in self.networks.items():
                oprot.writeString(kiter204.encode('utf-8') if sys.version_info[0] == 2 else kiter204)
                oprot.writeString(viter205.encode('utf-8') if sys.version_info[0] == 2 else viter205)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.datacenter_name is not None:
            oprot.writeFieldBegin('datacenter_name', TType.STRING, 13)
            oprot.writeString(self.datacenter_name.encode('utf-8') if sys.version_info[0] == 2 else self.datacenter_name)
            oprot.writeFieldEnd()
        if self.domain_name is not None:
            oprot.writeFieldBegin('domain_name', TType.STRING, 14)
            oprot.writeString(self.domain_name.encode('utf-8') if sys.version_info[0] == 2 else self.domain_name)
            oprot.writeFieldEnd()
        if self.cluster_key is not None:
            oprot.writeFieldBegin('cluster_key', TType.STRING, 15)
            oprot.writeString(self.cluster_key.encode('utf-8') if sys.version_info[0] == 2 else self.cluster_key)
            oprot.writeFieldEnd()
        if self.full_name is not None:
            oprot.writeFieldBegin('full_name', TType.STRING, 16)
            oprot.writeString(self.full_name.encode('utf-8') if sys.version_info[0] == 2 else self.full_name)
            oprot.writeFieldEnd()
        if self.lic_features is not None:
            oprot.writeFieldBegin('lic_features', TType.MAP, 17)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.lic_features))
            for kiter206, viter207 in self.lic_features.items():
                oprot.writeString(kiter206.encode('utf-8') if sys.version_info[0] == 2 else kiter206)
                oprot.writeListBegin(TType.STRING, len(viter207))
                for iter208 in viter207:
                    oprot.writeString(iter208.encode('utf-8') if sys.version_info[0] == 2 else iter208)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.name_list is not None:
            oprot.writeFieldBegin('name_list', TType.LIST, 18)
            oprot.writeListBegin(TType.STRING, len(self.name_list))
            for iter209 in self.name_list:
                oprot.writeString(iter209.encode('utf-8') if sys.version_info[0] == 2 else iter209)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.domain_name_list is not None:
            oprot.writeFieldBegin('domain_name_list', TType.LIST, 19)
            oprot.writeListBegin(TType.STRING, len(self.domain_name_list))
            for iter210 in self.domain_name_list:
                oprot.writeString(iter210.encode('utf-8') if sys.version_info[0] == 2 else iter210)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.connection_type is not None:
            oprot.writeFieldBegin('connection_type', TType.I32, 20)
            oprot.writeI32(self.connection_type)
            oprot.writeFieldEnd()
        if self.virtual_center_name is not None:
            oprot.writeFieldBegin('virtual_center_name', TType.STRING, 21)
            oprot.writeString(self.virtual_center_name.encode('utf-8') if sys.version_info[0] == 2 else self.virtual_center_name)
            oprot.writeFieldEnd()
        if self.virtual_center_version is not None:
            oprot.writeFieldBegin('virtual_center_version', TType.STRING, 22)
            oprot.writeString(self.virtual_center_version.encode('utf-8') if sys.version_info[0] == 2 else self.virtual_center_version)
            oprot.writeFieldEnd()
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 23)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class virtual_network_adapter(object):
    """
    Attributes:
     - key
     - name
     - mac_address
     - network
     - port_group
     - type
     - is_connected
     - is_start_connected
     - is_allow_guest_control
     - address_type
     - ip_addresses
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'key', None, 0, ),  # 1
        (2, TType.STRING, 'name', 'UTF8', "", ),  # 2
        (3, TType.STRING, 'mac_address', 'UTF8', "", ),  # 3
        (4, TType.STRING, 'network', 'UTF8', "", ),  # 4
        (5, TType.STRING, 'port_group', 'UTF8', "", ),  # 5
        (6, TType.STRING, 'type', 'UTF8', "", ),  # 6
        (7, TType.BOOL, 'is_connected', None, False, ),  # 7
        (8, TType.BOOL, 'is_start_connected', None, False, ),  # 8
        (9, TType.BOOL, 'is_allow_guest_control', None, False, ),  # 9
        (10, TType.STRING, 'address_type', 'UTF8', "", ),  # 10
        (11, TType.LIST, 'ip_addresses', (TType.STRING, 'UTF8', False), None, ),  # 11
    )

    def __init__(self, key=thrift_spec[1][4], name=thrift_spec[2][4], mac_address=thrift_spec[3][4], network=thrift_spec[4][4], port_group=thrift_spec[5][4], type=thrift_spec[6][4], is_connected=thrift_spec[7][4], is_start_connected=thrift_spec[8][4], is_allow_guest_control=thrift_spec[9][4], address_type=thrift_spec[10][4], ip_addresses=None,):
        self.key = key
        self.name = name
        self.mac_address = mac_address
        self.network = network
        self.port_group = port_group
        self.type = type
        self.is_connected = is_connected
        self.is_start_connected = is_start_connected
        self.is_allow_guest_control = is_allow_guest_control
        self.address_type = address_type
        self.ip_addresses = ip_addresses

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.key = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.mac_address = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.network = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.port_group = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.is_connected = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.is_start_connected = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.is_allow_guest_control = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.address_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.ip_addresses = []
                    (_etype214, _size211) = iprot.readListBegin()
                    for _i215 in range(_size211):
                        _elem216 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.ip_addresses.append(_elem216)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('virtual_network_adapter')
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.I32, 1)
            oprot.writeI32(self.key)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.mac_address is not None:
            oprot.writeFieldBegin('mac_address', TType.STRING, 3)
            oprot.writeString(self.mac_address.encode('utf-8') if sys.version_info[0] == 2 else self.mac_address)
            oprot.writeFieldEnd()
        if self.network is not None:
            oprot.writeFieldBegin('network', TType.STRING, 4)
            oprot.writeString(self.network.encode('utf-8') if sys.version_info[0] == 2 else self.network)
            oprot.writeFieldEnd()
        if self.port_group is not None:
            oprot.writeFieldBegin('port_group', TType.STRING, 5)
            oprot.writeString(self.port_group.encode('utf-8') if sys.version_info[0] == 2 else self.port_group)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 6)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.is_connected is not None:
            oprot.writeFieldBegin('is_connected', TType.BOOL, 7)
            oprot.writeBool(self.is_connected)
            oprot.writeFieldEnd()
        if self.is_start_connected is not None:
            oprot.writeFieldBegin('is_start_connected', TType.BOOL, 8)
            oprot.writeBool(self.is_start_connected)
            oprot.writeFieldEnd()
        if self.is_allow_guest_control is not None:
            oprot.writeFieldBegin('is_allow_guest_control', TType.BOOL, 9)
            oprot.writeBool(self.is_allow_guest_control)
            oprot.writeFieldEnd()
        if self.address_type is not None:
            oprot.writeFieldBegin('address_type', TType.STRING, 10)
            oprot.writeString(self.address_type.encode('utf-8') if sys.version_info[0] == 2 else self.address_type)
            oprot.writeFieldEnd()
        if self.ip_addresses is not None:
            oprot.writeFieldBegin('ip_addresses', TType.LIST, 11)
            oprot.writeListBegin(TType.STRING, len(self.ip_addresses))
            for iter217 in self.ip_addresses:
                oprot.writeString(iter217.encode('utf-8') if sys.version_info[0] == 2 else iter217)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class virtual_machine_snapshots(object):
    """
    Attributes:
     - name
     - description
     - create_time
     - quiesced
     - id
     - backup_manifest
     - replay_supported
     - child_snapshot_list
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'name', 'UTF8', "", ),  # 1
        (2, TType.STRING, 'description', 'UTF8', "", ),  # 2
        (3, TType.STRING, 'create_time', 'UTF8', "", ),  # 3
        (4, TType.BOOL, 'quiesced', None, False, ),  # 4
        (5, TType.I32, 'id', None, -1, ),  # 5
        (6, TType.STRING, 'backup_manifest', 'UTF8', "", ),  # 6
        (7, TType.BOOL, 'replay_supported', None, False, ),  # 7
        (8, TType.LIST, 'child_snapshot_list', (TType.STRUCT, (virtual_machine_snapshots, virtual_machine_snapshots.thrift_spec), False), None, ),  # 8
    )

    def __init__(self, name=thrift_spec[1][4], description=thrift_spec[2][4], create_time=thrift_spec[3][4], quiesced=thrift_spec[4][4], id=thrift_spec[5][4], backup_manifest=thrift_spec[6][4], replay_supported=thrift_spec[7][4], child_snapshot_list=None,):
        self.name = name
        self.description = description
        self.create_time = create_time
        self.quiesced = quiesced
        self.id = id
        self.backup_manifest = backup_manifest
        self.replay_supported = replay_supported
        self.child_snapshot_list = child_snapshot_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.create_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.quiesced = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.backup_manifest = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.replay_supported = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.child_snapshot_list = []
                    (_etype221, _size218) = iprot.readListBegin()
                    for _i222 in range(_size218):
                        _elem223 = virtual_machine_snapshots()
                        _elem223.read(iprot)
                        self.child_snapshot_list.append(_elem223)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('virtual_machine_snapshots')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 2)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.create_time is not None:
            oprot.writeFieldBegin('create_time', TType.STRING, 3)
            oprot.writeString(self.create_time.encode('utf-8') if sys.version_info[0] == 2 else self.create_time)
            oprot.writeFieldEnd()
        if self.quiesced is not None:
            oprot.writeFieldBegin('quiesced', TType.BOOL, 4)
            oprot.writeBool(self.quiesced)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 5)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.backup_manifest is not None:
            oprot.writeFieldBegin('backup_manifest', TType.STRING, 6)
            oprot.writeString(self.backup_manifest.encode('utf-8') if sys.version_info[0] == 2 else self.backup_manifest)
            oprot.writeFieldEnd()
        if self.replay_supported is not None:
            oprot.writeFieldBegin('replay_supported', TType.BOOL, 7)
            oprot.writeBool(self.replay_supported)
            oprot.writeFieldEnd()
        if self.child_snapshot_list is not None:
            oprot.writeFieldBegin('child_snapshot_list', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.child_snapshot_list))
            for iter224 in self.child_snapshot_list:
                iter224.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class virtual_disk_info(object):
    """
    Attributes:
     - key
     - name
     - id
     - size_kb
     - size
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'key', 'UTF8', "", ),  # 1
        (2, TType.STRING, 'name', 'UTF8', "", ),  # 2
        (3, TType.STRING, 'id', 'UTF8', "", ),  # 3
        (4, TType.I64, 'size_kb', None, 0, ),  # 4
        (5, TType.I64, 'size', None, 0, ),  # 5
    )

    def __init__(self, key=thrift_spec[1][4], name=thrift_spec[2][4], id=thrift_spec[3][4], size_kb=thrift_spec[4][4], size=thrift_spec[5][4],):
        self.key = key
        self.name = name
        self.id = id
        self.size_kb = size_kb
        self.size = size

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.size_kb = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('virtual_disk_info')
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRING, 1)
            oprot.writeString(self.key.encode('utf-8') if sys.version_info[0] == 2 else self.key)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 3)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.size_kb is not None:
            oprot.writeFieldBegin('size_kb', TType.I64, 4)
            oprot.writeI64(self.size_kb)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 5)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class virtual_machine(object):
    """
    Attributes:
     - uuid
     - name
     - host_key
     - host_ip
     - host_name
     - cluster_key
     - cluster_name
     - annotation
     - is_cpu_hot_add
     - is_cpu_hot_remove
     - memory_mb
     - number_of_cpu
     - is_template
     - config_path
     - config_path_file
     - version
     - power_state
     - connection_state
     - tools_status
     - firmware
     - guest_os_type
     - guest_id
     - guest_os_name
     - is_disk_uuid_enabled
     - folder_path
     - resource_pool_path
     - disks
     - networks
     - datacenter_name
     - network_adapters
     - root_snapshot_list
     - guest_host_name
     - guest_ip
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'uuid', 'UTF8', "", ),  # 1
        (2, TType.STRING, 'name', 'UTF8', "", ),  # 2
        (3, TType.STRING, 'host_key', 'UTF8', "", ),  # 3
        (4, TType.STRING, 'host_ip', 'UTF8', "", ),  # 4
        (5, TType.STRING, 'host_name', 'UTF8', "", ),  # 5
        (6, TType.STRING, 'cluster_key', 'UTF8', "", ),  # 6
        (7, TType.STRING, 'cluster_name', 'UTF8', "", ),  # 7
        (8, TType.STRING, 'annotation', 'UTF8', "", ),  # 8
        (9, TType.BOOL, 'is_cpu_hot_add', None, False, ),  # 9
        (10, TType.BOOL, 'is_cpu_hot_remove', None, False, ),  # 10
        (11, TType.I32, 'memory_mb', None, 0, ),  # 11
        (12, TType.I32, 'number_of_cpu', None, 0, ),  # 12
        (13, TType.BOOL, 'is_template', None, False, ),  # 13
        (14, TType.STRING, 'config_path', 'UTF8', "", ),  # 14
        (15, TType.STRING, 'config_path_file', 'UTF8', "", ),  # 15
        (16, TType.I32, 'version', None, 0, ),  # 16
        (17, TType.I32, 'power_state', None, 0, ),  # 17
        (18, TType.I32, 'connection_state', None, 0, ),  # 18
        (19, TType.I32, 'tools_status', None, 0, ),  # 19
        (20, TType.I32, 'firmware', None, 0, ),  # 20
        (21, TType.I32, 'guest_os_type', None, 0, ),  # 21
        (22, TType.STRING, 'guest_id', 'UTF8', "", ),  # 22
        (23, TType.STRING, 'guest_os_name', 'UTF8', "", ),  # 23
        (24, TType.BOOL, 'is_disk_uuid_enabled', None, False, ),  # 24
        (25, TType.STRING, 'folder_path', 'UTF8', "", ),  # 25
        (26, TType.STRING, 'resource_pool_path', 'UTF8', "", ),  # 26
        (27, TType.LIST, 'disks', (TType.STRUCT, (virtual_disk_info, virtual_disk_info.thrift_spec), False), None, ),  # 27
        (28, TType.MAP, 'networks', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 28
        (29, TType.STRING, 'datacenter_name', 'UTF8', "", ),  # 29
        (30, TType.LIST, 'network_adapters', (TType.STRUCT, (virtual_network_adapter, virtual_network_adapter.thrift_spec), False), None, ),  # 30
        (31, TType.LIST, 'root_snapshot_list', (TType.STRUCT, (virtual_machine_snapshots, virtual_machine_snapshots.thrift_spec), False), None, ),  # 31
        (32, TType.STRING, 'guest_host_name', 'UTF8', "", ),  # 32
        (33, TType.STRING, 'guest_ip', 'UTF8', "", ),  # 33
    )

    def __init__(self, uuid=thrift_spec[1][4], name=thrift_spec[2][4], host_key=thrift_spec[3][4], host_ip=thrift_spec[4][4], host_name=thrift_spec[5][4], cluster_key=thrift_spec[6][4], cluster_name=thrift_spec[7][4], annotation=thrift_spec[8][4], is_cpu_hot_add=thrift_spec[9][4], is_cpu_hot_remove=thrift_spec[10][4], memory_mb=thrift_spec[11][4], number_of_cpu=thrift_spec[12][4], is_template=thrift_spec[13][4], config_path=thrift_spec[14][4], config_path_file=thrift_spec[15][4], version=thrift_spec[16][4], power_state=thrift_spec[17][4], connection_state=thrift_spec[18][4], tools_status=thrift_spec[19][4], firmware=thrift_spec[20][4], guest_os_type=thrift_spec[21][4], guest_id=thrift_spec[22][4], guest_os_name=thrift_spec[23][4], is_disk_uuid_enabled=thrift_spec[24][4], folder_path=thrift_spec[25][4], resource_pool_path=thrift_spec[26][4], disks=None, networks=None, datacenter_name=thrift_spec[29][4], network_adapters=None, root_snapshot_list=None, guest_host_name=thrift_spec[32][4], guest_ip=thrift_spec[33][4],):
        self.uuid = uuid
        self.name = name
        self.host_key = host_key
        self.host_ip = host_ip
        self.host_name = host_name
        self.cluster_key = cluster_key
        self.cluster_name = cluster_name
        self.annotation = annotation
        self.is_cpu_hot_add = is_cpu_hot_add
        self.is_cpu_hot_remove = is_cpu_hot_remove
        self.memory_mb = memory_mb
        self.number_of_cpu = number_of_cpu
        self.is_template = is_template
        self.config_path = config_path
        self.config_path_file = config_path_file
        self.version = version
        self.power_state = power_state
        self.connection_state = connection_state
        self.tools_status = tools_status
        self.firmware = firmware
        self.guest_os_type = guest_os_type
        self.guest_id = guest_id
        self.guest_os_name = guest_os_name
        self.is_disk_uuid_enabled = is_disk_uuid_enabled
        self.folder_path = folder_path
        self.resource_pool_path = resource_pool_path
        self.disks = disks
        self.networks = networks
        self.datacenter_name = datacenter_name
        self.network_adapters = network_adapters
        self.root_snapshot_list = root_snapshot_list
        self.guest_host_name = guest_host_name
        self.guest_ip = guest_ip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.host_key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.host_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.host_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.cluster_key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.cluster_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.annotation = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.is_cpu_hot_add = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.is_cpu_hot_remove = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.memory_mb = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.number_of_cpu = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.is_template = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.config_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.config_path_file = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.power_state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.connection_state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I32:
                    self.tools_status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.firmware = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.guest_os_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.guest_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.guest_os_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.BOOL:
                    self.is_disk_uuid_enabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRING:
                    self.folder_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRING:
                    self.resource_pool_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.LIST:
                    self.disks = []
                    (_etype228, _size225) = iprot.readListBegin()
                    for _i229 in range(_size225):
                        _elem230 = virtual_disk_info()
                        _elem230.read(iprot)
                        self.disks.append(_elem230)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.MAP:
                    self.networks = {}
                    (_ktype232, _vtype233, _size231) = iprot.readMapBegin()
                    for _i235 in range(_size231):
                        _key236 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val237 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.networks[_key236] = _val237
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.STRING:
                    self.datacenter_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.LIST:
                    self.network_adapters = []
                    (_etype241, _size238) = iprot.readListBegin()
                    for _i242 in range(_size238):
                        _elem243 = virtual_network_adapter()
                        _elem243.read(iprot)
                        self.network_adapters.append(_elem243)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.LIST:
                    self.root_snapshot_list = []
                    (_etype247, _size244) = iprot.readListBegin()
                    for _i248 in range(_size244):
                        _elem249 = virtual_machine_snapshots()
                        _elem249.read(iprot)
                        self.root_snapshot_list.append(_elem249)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.STRING:
                    self.guest_host_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRING:
                    self.guest_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('virtual_machine')
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 1)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.host_key is not None:
            oprot.writeFieldBegin('host_key', TType.STRING, 3)
            oprot.writeString(self.host_key.encode('utf-8') if sys.version_info[0] == 2 else self.host_key)
            oprot.writeFieldEnd()
        if self.host_ip is not None:
            oprot.writeFieldBegin('host_ip', TType.STRING, 4)
            oprot.writeString(self.host_ip.encode('utf-8') if sys.version_info[0] == 2 else self.host_ip)
            oprot.writeFieldEnd()
        if self.host_name is not None:
            oprot.writeFieldBegin('host_name', TType.STRING, 5)
            oprot.writeString(self.host_name.encode('utf-8') if sys.version_info[0] == 2 else self.host_name)
            oprot.writeFieldEnd()
        if self.cluster_key is not None:
            oprot.writeFieldBegin('cluster_key', TType.STRING, 6)
            oprot.writeString(self.cluster_key.encode('utf-8') if sys.version_info[0] == 2 else self.cluster_key)
            oprot.writeFieldEnd()
        if self.cluster_name is not None:
            oprot.writeFieldBegin('cluster_name', TType.STRING, 7)
            oprot.writeString(self.cluster_name.encode('utf-8') if sys.version_info[0] == 2 else self.cluster_name)
            oprot.writeFieldEnd()
        if self.annotation is not None:
            oprot.writeFieldBegin('annotation', TType.STRING, 8)
            oprot.writeString(self.annotation.encode('utf-8') if sys.version_info[0] == 2 else self.annotation)
            oprot.writeFieldEnd()
        if self.is_cpu_hot_add is not None:
            oprot.writeFieldBegin('is_cpu_hot_add', TType.BOOL, 9)
            oprot.writeBool(self.is_cpu_hot_add)
            oprot.writeFieldEnd()
        if self.is_cpu_hot_remove is not None:
            oprot.writeFieldBegin('is_cpu_hot_remove', TType.BOOL, 10)
            oprot.writeBool(self.is_cpu_hot_remove)
            oprot.writeFieldEnd()
        if self.memory_mb is not None:
            oprot.writeFieldBegin('memory_mb', TType.I32, 11)
            oprot.writeI32(self.memory_mb)
            oprot.writeFieldEnd()
        if self.number_of_cpu is not None:
            oprot.writeFieldBegin('number_of_cpu', TType.I32, 12)
            oprot.writeI32(self.number_of_cpu)
            oprot.writeFieldEnd()
        if self.is_template is not None:
            oprot.writeFieldBegin('is_template', TType.BOOL, 13)
            oprot.writeBool(self.is_template)
            oprot.writeFieldEnd()
        if self.config_path is not None:
            oprot.writeFieldBegin('config_path', TType.STRING, 14)
            oprot.writeString(self.config_path.encode('utf-8') if sys.version_info[0] == 2 else self.config_path)
            oprot.writeFieldEnd()
        if self.config_path_file is not None:
            oprot.writeFieldBegin('config_path_file', TType.STRING, 15)
            oprot.writeString(self.config_path_file.encode('utf-8') if sys.version_info[0] == 2 else self.config_path_file)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.I32, 16)
            oprot.writeI32(self.version)
            oprot.writeFieldEnd()
        if self.power_state is not None:
            oprot.writeFieldBegin('power_state', TType.I32, 17)
            oprot.writeI32(self.power_state)
            oprot.writeFieldEnd()
        if self.connection_state is not None:
            oprot.writeFieldBegin('connection_state', TType.I32, 18)
            oprot.writeI32(self.connection_state)
            oprot.writeFieldEnd()
        if self.tools_status is not None:
            oprot.writeFieldBegin('tools_status', TType.I32, 19)
            oprot.writeI32(self.tools_status)
            oprot.writeFieldEnd()
        if self.firmware is not None:
            oprot.writeFieldBegin('firmware', TType.I32, 20)
            oprot.writeI32(self.firmware)
            oprot.writeFieldEnd()
        if self.guest_os_type is not None:
            oprot.writeFieldBegin('guest_os_type', TType.I32, 21)
            oprot.writeI32(self.guest_os_type)
            oprot.writeFieldEnd()
        if self.guest_id is not None:
            oprot.writeFieldBegin('guest_id', TType.STRING, 22)
            oprot.writeString(self.guest_id.encode('utf-8') if sys.version_info[0] == 2 else self.guest_id)
            oprot.writeFieldEnd()
        if self.guest_os_name is not None:
            oprot.writeFieldBegin('guest_os_name', TType.STRING, 23)
            oprot.writeString(self.guest_os_name.encode('utf-8') if sys.version_info[0] == 2 else self.guest_os_name)
            oprot.writeFieldEnd()
        if self.is_disk_uuid_enabled is not None:
            oprot.writeFieldBegin('is_disk_uuid_enabled', TType.BOOL, 24)
            oprot.writeBool(self.is_disk_uuid_enabled)
            oprot.writeFieldEnd()
        if self.folder_path is not None:
            oprot.writeFieldBegin('folder_path', TType.STRING, 25)
            oprot.writeString(self.folder_path.encode('utf-8') if sys.version_info[0] == 2 else self.folder_path)
            oprot.writeFieldEnd()
        if self.resource_pool_path is not None:
            oprot.writeFieldBegin('resource_pool_path', TType.STRING, 26)
            oprot.writeString(self.resource_pool_path.encode('utf-8') if sys.version_info[0] == 2 else self.resource_pool_path)
            oprot.writeFieldEnd()
        if self.disks is not None:
            oprot.writeFieldBegin('disks', TType.LIST, 27)
            oprot.writeListBegin(TType.STRUCT, len(self.disks))
            for iter250 in self.disks:
                iter250.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.networks is not None:
            oprot.writeFieldBegin('networks', TType.MAP, 28)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.networks))
            for kiter251, viter252 in self.networks.items():
                oprot.writeString(kiter251.encode('utf-8') if sys.version_info[0] == 2 else kiter251)
                oprot.writeString(viter252.encode('utf-8') if sys.version_info[0] == 2 else viter252)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.datacenter_name is not None:
            oprot.writeFieldBegin('datacenter_name', TType.STRING, 29)
            oprot.writeString(self.datacenter_name.encode('utf-8') if sys.version_info[0] == 2 else self.datacenter_name)
            oprot.writeFieldEnd()
        if self.network_adapters is not None:
            oprot.writeFieldBegin('network_adapters', TType.LIST, 30)
            oprot.writeListBegin(TType.STRUCT, len(self.network_adapters))
            for iter253 in self.network_adapters:
                iter253.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.root_snapshot_list is not None:
            oprot.writeFieldBegin('root_snapshot_list', TType.LIST, 31)
            oprot.writeListBegin(TType.STRUCT, len(self.root_snapshot_list))
            for iter254 in self.root_snapshot_list:
                iter254.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.guest_host_name is not None:
            oprot.writeFieldBegin('guest_host_name', TType.STRING, 32)
            oprot.writeString(self.guest_host_name.encode('utf-8') if sys.version_info[0] == 2 else self.guest_host_name)
            oprot.writeFieldEnd()
        if self.guest_ip is not None:
            oprot.writeFieldBegin('guest_ip', TType.STRING, 33)
            oprot.writeString(self.guest_ip.encode('utf-8') if sys.version_info[0] == 2 else self.guest_ip)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class invalid_operation(TException):
    """
    Attributes:
     - what_op
     - why
     - format
     - arguments
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'what_op', None, None, ),  # 1
        (2, TType.STRING, 'why', 'UTF8', None, ),  # 2
        None,  # 3
        None,  # 4
        (5, TType.STRING, 'format', 'UTF8', "", ),  # 5
        (6, TType.LIST, 'arguments', (TType.STRING, 'UTF8', False), None, ),  # 6
    )

    def __init__(self, what_op=None, why=None, format=thrift_spec[5][4], arguments=None,):
        self.what_op = what_op
        self.why = why
        self.format = format
        self.arguments = arguments

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.what_op = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.why = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.format = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.arguments = []
                    (_etype258, _size255) = iprot.readListBegin()
                    for _i259 in range(_size255):
                        _elem260 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.arguments.append(_elem260)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('invalid_operation')
        if self.what_op is not None:
            oprot.writeFieldBegin('what_op', TType.I32, 1)
            oprot.writeI32(self.what_op)
            oprot.writeFieldEnd()
        if self.why is not None:
            oprot.writeFieldBegin('why', TType.STRING, 2)
            oprot.writeString(self.why.encode('utf-8') if sys.version_info[0] == 2 else self.why)
            oprot.writeFieldEnd()
        if self.format is not None:
            oprot.writeFieldBegin('format', TType.STRING, 5)
            oprot.writeString(self.format.encode('utf-8') if sys.version_info[0] == 2 else self.format)
            oprot.writeFieldEnd()
        if self.arguments is not None:
            oprot.writeFieldBegin('arguments', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.arguments))
            for iter261 in self.arguments:
                oprot.writeString(iter261.encode('utf-8') if sys.version_info[0] == 2 else iter261)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class job_trigger(object):
    """
    Attributes:
     - type
     - start
     - finish
     - interval
     - id
     - duration
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'type', None, 1, ),  # 1
        (2, TType.STRING, 'start', 'UTF8', "", ),  # 2
        (3, TType.STRING, 'finish', 'UTF8', "", ),  # 3
        (4, TType.I32, 'interval', None, 15, ),  # 4
        (5, TType.STRING, 'id', 'UTF8', "", ),  # 5
        (6, TType.I32, 'duration', None, 0, ),  # 6
    )

    def __init__(self, type=thrift_spec[1][4], start=thrift_spec[2][4], finish=thrift_spec[3][4], interval=thrift_spec[4][4], id=thrift_spec[5][4], duration=thrift_spec[6][4],):
        self.type = type
        self.start = start
        self.finish = finish
        self.interval = interval
        self.id = id
        self.duration = duration

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.start = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.finish = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.interval = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.duration = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('job_trigger')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.start is not None:
            oprot.writeFieldBegin('start', TType.STRING, 2)
            oprot.writeString(self.start.encode('utf-8') if sys.version_info[0] == 2 else self.start)
            oprot.writeFieldEnd()
        if self.finish is not None:
            oprot.writeFieldBegin('finish', TType.STRING, 3)
            oprot.writeString(self.finish.encode('utf-8') if sys.version_info[0] == 2 else self.finish)
            oprot.writeFieldEnd()
        if self.interval is not None:
            oprot.writeFieldBegin('interval', TType.I32, 4)
            oprot.writeI32(self.interval)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 5)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.duration is not None:
            oprot.writeFieldBegin('duration', TType.I32, 6)
            oprot.writeI32(self.duration)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class job_history(object):
    """
    Attributes:
     - time
     - state
     - error
     - description
     - format
     - arguments
     - is_display
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'time', 'UTF8', "", ),  # 1
        (2, TType.I32, 'state', None, 1, ),  # 2
        (3, TType.I32, 'error', None, 0, ),  # 3
        (4, TType.STRING, 'description', 'UTF8', "", ),  # 4
        None,  # 5
        None,  # 6
        (7, TType.STRING, 'format', 'UTF8', "", ),  # 7
        (8, TType.LIST, 'arguments', (TType.STRING, 'UTF8', False), None, ),  # 8
        (9, TType.BOOL, 'is_display', None, True, ),  # 9
    )

    def __init__(self, time=thrift_spec[1][4], state=thrift_spec[2][4], error=thrift_spec[3][4], description=thrift_spec[4][4], format=thrift_spec[7][4], arguments=None, is_display=thrift_spec[9][4],):
        self.time = time
        self.state = state
        self.error = error
        self.description = description
        self.format = format
        self.arguments = arguments
        self.is_display = is_display

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.error = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.format = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.arguments = []
                    (_etype265, _size262) = iprot.readListBegin()
                    for _i266 in range(_size262):
                        _elem267 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.arguments.append(_elem267)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.is_display = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('job_history')
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.STRING, 1)
            oprot.writeString(self.time.encode('utf-8') if sys.version_info[0] == 2 else self.time)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 2)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.I32, 3)
            oprot.writeI32(self.error)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 4)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.format is not None:
            oprot.writeFieldBegin('format', TType.STRING, 7)
            oprot.writeString(self.format.encode('utf-8') if sys.version_info[0] == 2 else self.format)
            oprot.writeFieldEnd()
        if self.arguments is not None:
            oprot.writeFieldBegin('arguments', TType.LIST, 8)
            oprot.writeListBegin(TType.STRING, len(self.arguments))
            for iter268 in self.arguments:
                oprot.writeString(iter268.encode('utf-8') if sys.version_info[0] == 2 else iter268)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.is_display is not None:
            oprot.writeFieldBegin('is_display', TType.BOOL, 9)
            oprot.writeBool(self.is_display)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class create_job_detail(object):
    """
    Attributes:
     - type
     - triggers
     - management_id
     - mgmt_addr
     - mgmt_port
     - is_ssl
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'type', None, 1, ),  # 1
        (2, TType.LIST, 'triggers', (TType.STRUCT, (job_trigger, job_trigger.thrift_spec), False), None, ),  # 2
        (3, TType.STRING, 'management_id', 'UTF8', "", ),  # 3
        (4, TType.SET, 'mgmt_addr', (TType.STRING, 'UTF8', False), None, ),  # 4
        (5, TType.I32, 'mgmt_port', None, 80, ),  # 5
        (6, TType.BOOL, 'is_ssl', None, False, ),  # 6
    )

    def __init__(self, type=thrift_spec[1][4], triggers=None, management_id=thrift_spec[3][4], mgmt_addr=None, mgmt_port=thrift_spec[5][4], is_ssl=thrift_spec[6][4],):
        self.type = type
        self.triggers = triggers
        self.management_id = management_id
        self.mgmt_addr = mgmt_addr
        self.mgmt_port = mgmt_port
        self.is_ssl = is_ssl

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.triggers = []
                    (_etype272, _size269) = iprot.readListBegin()
                    for _i273 in range(_size269):
                        _elem274 = job_trigger()
                        _elem274.read(iprot)
                        self.triggers.append(_elem274)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.management_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.SET:
                    self.mgmt_addr = set()
                    (_etype278, _size275) = iprot.readSetBegin()
                    for _i279 in range(_size275):
                        _elem280 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.mgmt_addr.add(_elem280)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.mgmt_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.is_ssl = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('create_job_detail')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.triggers is not None:
            oprot.writeFieldBegin('triggers', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.triggers))
            for iter281 in self.triggers:
                iter281.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.management_id is not None:
            oprot.writeFieldBegin('management_id', TType.STRING, 3)
            oprot.writeString(self.management_id.encode('utf-8') if sys.version_info[0] == 2 else self.management_id)
            oprot.writeFieldEnd()
        if self.mgmt_addr is not None:
            oprot.writeFieldBegin('mgmt_addr', TType.SET, 4)
            oprot.writeSetBegin(TType.STRING, len(self.mgmt_addr))
            for iter282 in self.mgmt_addr:
                oprot.writeString(iter282.encode('utf-8') if sys.version_info[0] == 2 else iter282)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.mgmt_port is not None:
            oprot.writeFieldBegin('mgmt_port', TType.I32, 5)
            oprot.writeI32(self.mgmt_port)
            oprot.writeFieldEnd()
        if self.is_ssl is not None:
            oprot.writeFieldBegin('is_ssl', TType.BOOL, 6)
            oprot.writeBool(self.is_ssl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class packer_disk_image(object):
    """
    Attributes:
     - name
     - parent
     - base
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'name', 'UTF8', "", ),  # 1
        (2, TType.STRING, 'parent', 'UTF8', "", ),  # 2
        (3, TType.STRING, 'base', 'UTF8', "", ),  # 3
    )

    def __init__(self, name=thrift_spec[1][4], parent=thrift_spec[2][4], base=thrift_spec[3][4],):
        self.name = name
        self.parent = parent
        self.base = base

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.parent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.base = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('packer_disk_image')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.parent is not None:
            oprot.writeFieldBegin('parent', TType.STRING, 2)
            oprot.writeString(self.parent.encode('utf-8') if sys.version_info[0] == 2 else self.parent)
            oprot.writeFieldEnd()
        if self.base is not None:
            oprot.writeFieldBegin('base', TType.STRING, 3)
            oprot.writeString(self.base.encode('utf-8') if sys.version_info[0] == 2 else self.base)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class virtual_create_packer_job_detail(object):
    """
    Attributes:
     - disks
     - host
     - addr
     - username
     - password
     - virtual_machine_id
     - snapshot
     - images
     - backup_size
     - backup_progress
     - backup_image_offset
     - previous_change_ids
     - completed_blocks
    """

    thrift_spec = (
        None,  # 0
        (1, TType.SET, 'disks', (TType.STRING, 'UTF8', False), None, ),  # 1
        (2, TType.STRING, 'host', 'UTF8', "", ),  # 2
        (3, TType.SET, 'addr', (TType.STRING, 'UTF8', False), None, ),  # 3
        (4, TType.STRING, 'username', 'UTF8', "", ),  # 4
        (5, TType.STRING, 'password', 'UTF8', "", ),  # 5
        (6, TType.STRING, 'virtual_machine_id', 'UTF8', "", ),  # 6
        None,  # 7
        None,  # 8
        (9, TType.STRING, 'snapshot', 'UTF8', "", ),  # 9
        (10, TType.MAP, 'images', (TType.STRING, 'UTF8', TType.STRUCT, (packer_disk_image, packer_disk_image.thrift_spec), False), None, ),  # 10
        None,  # 11
        None,  # 12
        None,  # 13
        (14, TType.MAP, 'backup_size', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 14
        (15, TType.MAP, 'backup_progress', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 15
        (16, TType.MAP, 'backup_image_offset', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 16
        (17, TType.MAP, 'previous_change_ids', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 17
        (18, TType.MAP, 'completed_blocks', (TType.STRING, 'UTF8', TType.LIST, (TType.STRUCT, (io_changed_range, io_changed_range.thrift_spec), False), False), None, ),  # 18
    )

    def __init__(self, disks=None, host=thrift_spec[2][4], addr=None, username=thrift_spec[4][4], password=thrift_spec[5][4], virtual_machine_id=thrift_spec[6][4], snapshot=thrift_spec[9][4], images=None, backup_size=None, backup_progress=None, backup_image_offset=None, previous_change_ids=None, completed_blocks=None,):
        self.disks = disks
        self.host = host
        self.addr = addr
        self.username = username
        self.password = password
        self.virtual_machine_id = virtual_machine_id
        self.snapshot = snapshot
        self.images = images
        self.backup_size = backup_size
        self.backup_progress = backup_progress
        self.backup_image_offset = backup_image_offset
        self.previous_change_ids = previous_change_ids
        self.completed_blocks = completed_blocks

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.SET:
                    self.disks = set()
                    (_etype286, _size283) = iprot.readSetBegin()
                    for _i287 in range(_size283):
                        _elem288 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.disks.add(_elem288)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.host = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.addr = set()
                    (_etype292, _size289) = iprot.readSetBegin()
                    for _i293 in range(_size289):
                        _elem294 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.addr.add(_elem294)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.virtual_machine_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.snapshot = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.MAP:
                    self.images = {}
                    (_ktype296, _vtype297, _size295) = iprot.readMapBegin()
                    for _i299 in range(_size295):
                        _key300 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val301 = packer_disk_image()
                        _val301.read(iprot)
                        self.images[_key300] = _val301
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.MAP:
                    self.backup_size = {}
                    (_ktype303, _vtype304, _size302) = iprot.readMapBegin()
                    for _i306 in range(_size302):
                        _key307 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val308 = iprot.readI64()
                        self.backup_size[_key307] = _val308
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.MAP:
                    self.backup_progress = {}
                    (_ktype310, _vtype311, _size309) = iprot.readMapBegin()
                    for _i313 in range(_size309):
                        _key314 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val315 = iprot.readI64()
                        self.backup_progress[_key314] = _val315
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.MAP:
                    self.backup_image_offset = {}
                    (_ktype317, _vtype318, _size316) = iprot.readMapBegin()
                    for _i320 in range(_size316):
                        _key321 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val322 = iprot.readI64()
                        self.backup_image_offset[_key321] = _val322
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.MAP:
                    self.previous_change_ids = {}
                    (_ktype324, _vtype325, _size323) = iprot.readMapBegin()
                    for _i327 in range(_size323):
                        _key328 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val329 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.previous_change_ids[_key328] = _val329
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.MAP:
                    self.completed_blocks = {}
                    (_ktype331, _vtype332, _size330) = iprot.readMapBegin()
                    for _i334 in range(_size330):
                        _key335 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val336 = []
                        (_etype340, _size337) = iprot.readListBegin()
                        for _i341 in range(_size337):
                            _elem342 = io_changed_range()
                            _elem342.read(iprot)
                            _val336.append(_elem342)
                        iprot.readListEnd()
                        self.completed_blocks[_key335] = _val336
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('virtual_create_packer_job_detail')
        if self.disks is not None:
            oprot.writeFieldBegin('disks', TType.SET, 1)
            oprot.writeSetBegin(TType.STRING, len(self.disks))
            for iter343 in self.disks:
                oprot.writeString(iter343.encode('utf-8') if sys.version_info[0] == 2 else iter343)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 2)
            oprot.writeString(self.host.encode('utf-8') if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.SET, 3)
            oprot.writeSetBegin(TType.STRING, len(self.addr))
            for iter344 in self.addr:
                oprot.writeString(iter344.encode('utf-8') if sys.version_info[0] == 2 else iter344)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 4)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 5)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.virtual_machine_id is not None:
            oprot.writeFieldBegin('virtual_machine_id', TType.STRING, 6)
            oprot.writeString(self.virtual_machine_id.encode('utf-8') if sys.version_info[0] == 2 else self.virtual_machine_id)
            oprot.writeFieldEnd()
        if self.snapshot is not None:
            oprot.writeFieldBegin('snapshot', TType.STRING, 9)
            oprot.writeString(self.snapshot.encode('utf-8') if sys.version_info[0] == 2 else self.snapshot)
            oprot.writeFieldEnd()
        if self.images is not None:
            oprot.writeFieldBegin('images', TType.MAP, 10)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.images))
            for kiter345, viter346 in self.images.items():
                oprot.writeString(kiter345.encode('utf-8') if sys.version_info[0] == 2 else kiter345)
                viter346.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.backup_size is not None:
            oprot.writeFieldBegin('backup_size', TType.MAP, 14)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.backup_size))
            for kiter347, viter348 in self.backup_size.items():
                oprot.writeString(kiter347.encode('utf-8') if sys.version_info[0] == 2 else kiter347)
                oprot.writeI64(viter348)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.backup_progress is not None:
            oprot.writeFieldBegin('backup_progress', TType.MAP, 15)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.backup_progress))
            for kiter349, viter350 in self.backup_progress.items():
                oprot.writeString(kiter349.encode('utf-8') if sys.version_info[0] == 2 else kiter349)
                oprot.writeI64(viter350)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.backup_image_offset is not None:
            oprot.writeFieldBegin('backup_image_offset', TType.MAP, 16)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.backup_image_offset))
            for kiter351, viter352 in self.backup_image_offset.items():
                oprot.writeString(kiter351.encode('utf-8') if sys.version_info[0] == 2 else kiter351)
                oprot.writeI64(viter352)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.previous_change_ids is not None:
            oprot.writeFieldBegin('previous_change_ids', TType.MAP, 17)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.previous_change_ids))
            for kiter353, viter354 in self.previous_change_ids.items():
                oprot.writeString(kiter353.encode('utf-8') if sys.version_info[0] == 2 else kiter353)
                oprot.writeString(viter354.encode('utf-8') if sys.version_info[0] == 2 else viter354)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.completed_blocks is not None:
            oprot.writeFieldBegin('completed_blocks', TType.MAP, 18)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.completed_blocks))
            for kiter355, viter356 in self.completed_blocks.items():
                oprot.writeString(kiter355.encode('utf-8') if sys.version_info[0] == 2 else kiter355)
                oprot.writeListBegin(TType.STRUCT, len(viter356))
                for iter357 in viter356:
                    iter357.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class physical_vcbt_journal(object):
    """
    Attributes:
     - id
     - first_key
     - latest_key
     - lowest_valid_key
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I64, 'id', None, 0, ),  # 1
        (2, TType.I64, 'first_key', None, 0, ),  # 2
        (3, TType.I64, 'latest_key', None, 0, ),  # 3
        (4, TType.I64, 'lowest_valid_key', None, 0, ),  # 4
    )

    def __init__(self, id=thrift_spec[1][4], first_key=thrift_spec[2][4], latest_key=thrift_spec[3][4], lowest_valid_key=thrift_spec[4][4],):
        self.id = id
        self.first_key = first_key
        self.latest_key = latest_key
        self.lowest_valid_key = lowest_valid_key

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.first_key = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.latest_key = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.lowest_valid_key = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('physical_vcbt_journal')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.first_key is not None:
            oprot.writeFieldBegin('first_key', TType.I64, 2)
            oprot.writeI64(self.first_key)
            oprot.writeFieldEnd()
        if self.latest_key is not None:
            oprot.writeFieldBegin('latest_key', TType.I64, 3)
            oprot.writeI64(self.latest_key)
            oprot.writeFieldEnd()
        if self.lowest_valid_key is not None:
            oprot.writeFieldBegin('lowest_valid_key', TType.I64, 4)
            oprot.writeI64(self.lowest_valid_key)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class io_changed_range(object):
    """
    Attributes:
     - offset
     - start
     - length
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I64, 'offset', None, 0, ),  # 1
        (2, TType.I64, 'start', None, 0, ),  # 2
        (3, TType.I64, 'length', None, 0, ),  # 3
    )

    def __init__(self, offset=thrift_spec[1][4], start=thrift_spec[2][4], length=thrift_spec[3][4],):
        self.offset = offset
        self.start = start
        self.length = length

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.offset = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.start = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.length = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('io_changed_range')
        if self.offset is not None:
            oprot.writeFieldBegin('offset', TType.I64, 1)
            oprot.writeI64(self.offset)
            oprot.writeFieldEnd()
        if self.start is not None:
            oprot.writeFieldBegin('start', TType.I64, 2)
            oprot.writeI64(self.start)
            oprot.writeFieldEnd()
        if self.length is not None:
            oprot.writeFieldBegin('length', TType.I64, 3)
            oprot.writeI64(self.length)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class physical_create_packer_job_detail(object):
    """
    Attributes:
     - disks
     - snapshots
     - previous_journals
     - images
     - backup_size
     - backup_progress
     - backup_image_offset
     - cdr_journals
     - cdr_changed_ranges
     - completed_blocks
    """

    thrift_spec = (
        None,  # 0
        (1, TType.SET, 'disks', (TType.STRING, 'UTF8', False), None, ),  # 1
        (2, TType.LIST, 'snapshots', (TType.STRUCT, (snapshot, snapshot.thrift_spec), False), None, ),  # 2
        (3, TType.MAP, 'previous_journals', (TType.I64, None, TType.STRUCT, (physical_vcbt_journal, physical_vcbt_journal.thrift_spec), False), None, ),  # 3
        (4, TType.MAP, 'images', (TType.STRING, 'UTF8', TType.STRUCT, (packer_disk_image, packer_disk_image.thrift_spec), False), None, ),  # 4
        (5, TType.MAP, 'backup_size', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 5
        (6, TType.MAP, 'backup_progress', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 6
        (7, TType.MAP, 'backup_image_offset', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 7
        (8, TType.MAP, 'cdr_journals', (TType.I64, None, TType.STRUCT, (physical_vcbt_journal, physical_vcbt_journal.thrift_spec), False), None, ),  # 8
        (9, TType.MAP, 'cdr_changed_ranges', (TType.STRING, 'UTF8', TType.LIST, (TType.STRUCT, (io_changed_range, io_changed_range.thrift_spec), False), False), None, ),  # 9
        (10, TType.MAP, 'completed_blocks', (TType.STRING, 'UTF8', TType.LIST, (TType.STRUCT, (io_changed_range, io_changed_range.thrift_spec), False), False), None, ),  # 10
    )

    def __init__(self, disks=None, snapshots=None, previous_journals=None, images=None, backup_size=None, backup_progress=None, backup_image_offset=None, cdr_journals=None, cdr_changed_ranges=None, completed_blocks=None,):
        self.disks = disks
        self.snapshots = snapshots
        self.previous_journals = previous_journals
        self.images = images
        self.backup_size = backup_size
        self.backup_progress = backup_progress
        self.backup_image_offset = backup_image_offset
        self.cdr_journals = cdr_journals
        self.cdr_changed_ranges = cdr_changed_ranges
        self.completed_blocks = completed_blocks

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.SET:
                    self.disks = set()
                    (_etype361, _size358) = iprot.readSetBegin()
                    for _i362 in range(_size358):
                        _elem363 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.disks.add(_elem363)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.snapshots = []
                    (_etype367, _size364) = iprot.readListBegin()
                    for _i368 in range(_size364):
                        _elem369 = snapshot()
                        _elem369.read(iprot)
                        self.snapshots.append(_elem369)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.previous_journals = {}
                    (_ktype371, _vtype372, _size370) = iprot.readMapBegin()
                    for _i374 in range(_size370):
                        _key375 = iprot.readI64()
                        _val376 = physical_vcbt_journal()
                        _val376.read(iprot)
                        self.previous_journals[_key375] = _val376
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.images = {}
                    (_ktype378, _vtype379, _size377) = iprot.readMapBegin()
                    for _i381 in range(_size377):
                        _key382 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val383 = packer_disk_image()
                        _val383.read(iprot)
                        self.images[_key382] = _val383
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.backup_size = {}
                    (_ktype385, _vtype386, _size384) = iprot.readMapBegin()
                    for _i388 in range(_size384):
                        _key389 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val390 = iprot.readI64()
                        self.backup_size[_key389] = _val390
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.backup_progress = {}
                    (_ktype392, _vtype393, _size391) = iprot.readMapBegin()
                    for _i395 in range(_size391):
                        _key396 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val397 = iprot.readI64()
                        self.backup_progress[_key396] = _val397
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.MAP:
                    self.backup_image_offset = {}
                    (_ktype399, _vtype400, _size398) = iprot.readMapBegin()
                    for _i402 in range(_size398):
                        _key403 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val404 = iprot.readI64()
                        self.backup_image_offset[_key403] = _val404
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.MAP:
                    self.cdr_journals = {}
                    (_ktype406, _vtype407, _size405) = iprot.readMapBegin()
                    for _i409 in range(_size405):
                        _key410 = iprot.readI64()
                        _val411 = physical_vcbt_journal()
                        _val411.read(iprot)
                        self.cdr_journals[_key410] = _val411
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.MAP:
                    self.cdr_changed_ranges = {}
                    (_ktype413, _vtype414, _size412) = iprot.readMapBegin()
                    for _i416 in range(_size412):
                        _key417 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val418 = []
                        (_etype422, _size419) = iprot.readListBegin()
                        for _i423 in range(_size419):
                            _elem424 = io_changed_range()
                            _elem424.read(iprot)
                            _val418.append(_elem424)
                        iprot.readListEnd()
                        self.cdr_changed_ranges[_key417] = _val418
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.MAP:
                    self.completed_blocks = {}
                    (_ktype426, _vtype427, _size425) = iprot.readMapBegin()
                    for _i429 in range(_size425):
                        _key430 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val431 = []
                        (_etype435, _size432) = iprot.readListBegin()
                        for _i436 in range(_size432):
                            _elem437 = io_changed_range()
                            _elem437.read(iprot)
                            _val431.append(_elem437)
                        iprot.readListEnd()
                        self.completed_blocks[_key430] = _val431
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('physical_create_packer_job_detail')
        if self.disks is not None:
            oprot.writeFieldBegin('disks', TType.SET, 1)
            oprot.writeSetBegin(TType.STRING, len(self.disks))
            for iter438 in self.disks:
                oprot.writeString(iter438.encode('utf-8') if sys.version_info[0] == 2 else iter438)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.snapshots is not None:
            oprot.writeFieldBegin('snapshots', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.snapshots))
            for iter439 in self.snapshots:
                iter439.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.previous_journals is not None:
            oprot.writeFieldBegin('previous_journals', TType.MAP, 3)
            oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.previous_journals))
            for kiter440, viter441 in self.previous_journals.items():
                oprot.writeI64(kiter440)
                viter441.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.images is not None:
            oprot.writeFieldBegin('images', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.images))
            for kiter442, viter443 in self.images.items():
                oprot.writeString(kiter442.encode('utf-8') if sys.version_info[0] == 2 else kiter442)
                viter443.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.backup_size is not None:
            oprot.writeFieldBegin('backup_size', TType.MAP, 5)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.backup_size))
            for kiter444, viter445 in self.backup_size.items():
                oprot.writeString(kiter444.encode('utf-8') if sys.version_info[0] == 2 else kiter444)
                oprot.writeI64(viter445)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.backup_progress is not None:
            oprot.writeFieldBegin('backup_progress', TType.MAP, 6)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.backup_progress))
            for kiter446, viter447 in self.backup_progress.items():
                oprot.writeString(kiter446.encode('utf-8') if sys.version_info[0] == 2 else kiter446)
                oprot.writeI64(viter447)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.backup_image_offset is not None:
            oprot.writeFieldBegin('backup_image_offset', TType.MAP, 7)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.backup_image_offset))
            for kiter448, viter449 in self.backup_image_offset.items():
                oprot.writeString(kiter448.encode('utf-8') if sys.version_info[0] == 2 else kiter448)
                oprot.writeI64(viter449)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.cdr_journals is not None:
            oprot.writeFieldBegin('cdr_journals', TType.MAP, 8)
            oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.cdr_journals))
            for kiter450, viter451 in self.cdr_journals.items():
                oprot.writeI64(kiter450)
                viter451.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.cdr_changed_ranges is not None:
            oprot.writeFieldBegin('cdr_changed_ranges', TType.MAP, 9)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.cdr_changed_ranges))
            for kiter452, viter453 in self.cdr_changed_ranges.items():
                oprot.writeString(kiter452.encode('utf-8') if sys.version_info[0] == 2 else kiter452)
                oprot.writeListBegin(TType.STRUCT, len(viter453))
                for iter454 in viter453:
                    iter454.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.completed_blocks is not None:
            oprot.writeFieldBegin('completed_blocks', TType.MAP, 10)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.completed_blocks))
            for kiter455, viter456 in self.completed_blocks.items():
                oprot.writeString(kiter455.encode('utf-8') if sys.version_info[0] == 2 else kiter455)
                oprot.writeListBegin(TType.STRUCT, len(viter456))
                for iter457 in viter456:
                    iter457.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class _create_packer_job_detail(object):
    """
    Attributes:
     - p
     - v
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'p', (physical_create_packer_job_detail, physical_create_packer_job_detail.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'v', (virtual_create_packer_job_detail, virtual_create_packer_job_detail.thrift_spec), None, ),  # 2
    )

    def __init__(self, p=None, v=None,):
        self.p = p
        self.v = v

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.p = physical_create_packer_job_detail()
                    self.p.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.v = virtual_create_packer_job_detail()
                    self.v.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('_create_packer_job_detail')
        if self.p is not None:
            oprot.writeFieldBegin('p', TType.STRUCT, 1)
            self.p.write(oprot)
            oprot.writeFieldEnd()
        if self.v is not None:
            oprot.writeFieldBegin('v', TType.STRUCT, 2)
            self.v.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class create_packer_job_detail(object):
    """
    Attributes:
     - type
     - connection_ids
     - carriers
     - detail
     - checksum_verify
     - timeout
     - is_encrypted
     - worker_thread_number
     - file_system_filter_enable
     - min_transport_size
     - full_min_transport_size
     - is_compressed
     - is_checksum
     - priority_carrier
     - is_only_single_system_disk
     - is_compressed_by_packer
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'type', None, None, ),  # 1
        (2, TType.SET, 'connection_ids', (TType.STRING, 'UTF8', False), None, ),  # 2
        (3, TType.MAP, 'carriers', (TType.STRING, 'UTF8', TType.SET, (TType.STRING, 'UTF8', False), False), None, ),  # 3
        (4, TType.STRUCT, 'detail', (_create_packer_job_detail, _create_packer_job_detail.thrift_spec), None, ),  # 4
        (5, TType.BOOL, 'checksum_verify', None, True, ),  # 5
        (6, TType.I32, 'timeout', None, 300, ),  # 6
        (7, TType.BOOL, 'is_encrypted', None, False, ),  # 7
        (8, TType.I32, 'worker_thread_number', None, 0, ),  # 8
        (9, TType.BOOL, 'file_system_filter_enable', None, True, ),  # 9
        (10, TType.I32, 'min_transport_size', None, 0, ),  # 10
        (11, TType.I32, 'full_min_transport_size', None, 0, ),  # 11
        (12, TType.BOOL, 'is_compressed', None, True, ),  # 12
        (13, TType.BOOL, 'is_checksum', None, False, ),  # 13
        (14, TType.MAP, 'priority_carrier', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 14
        (15, TType.BOOL, 'is_only_single_system_disk', None, False, ),  # 15
        (16, TType.BOOL, 'is_compressed_by_packer', None, False, ),  # 16
    )

    def __init__(self, type=None, connection_ids=None, carriers=None, detail=None, checksum_verify=thrift_spec[5][4], timeout=thrift_spec[6][4], is_encrypted=thrift_spec[7][4], worker_thread_number=thrift_spec[8][4], file_system_filter_enable=thrift_spec[9][4], min_transport_size=thrift_spec[10][4], full_min_transport_size=thrift_spec[11][4], is_compressed=thrift_spec[12][4], is_checksum=thrift_spec[13][4], priority_carrier=None, is_only_single_system_disk=thrift_spec[15][4], is_compressed_by_packer=thrift_spec[16][4],):
        self.type = type
        self.connection_ids = connection_ids
        self.carriers = carriers
        self.detail = detail
        self.checksum_verify = checksum_verify
        self.timeout = timeout
        self.is_encrypted = is_encrypted
        self.worker_thread_number = worker_thread_number
        self.file_system_filter_enable = file_system_filter_enable
        self.min_transport_size = min_transport_size
        self.full_min_transport_size = full_min_transport_size
        self.is_compressed = is_compressed
        self.is_checksum = is_checksum
        self.priority_carrier = priority_carrier
        self.is_only_single_system_disk = is_only_single_system_disk
        self.is_compressed_by_packer = is_compressed_by_packer

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.SET:
                    self.connection_ids = set()
                    (_etype461, _size458) = iprot.readSetBegin()
                    for _i462 in range(_size458):
                        _elem463 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.connection_ids.add(_elem463)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.carriers = {}
                    (_ktype465, _vtype466, _size464) = iprot.readMapBegin()
                    for _i468 in range(_size464):
                        _key469 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val470 = set()
                        (_etype474, _size471) = iprot.readSetBegin()
                        for _i475 in range(_size471):
                            _elem476 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val470.add(_elem476)
                        iprot.readSetEnd()
                        self.carriers[_key469] = _val470
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.detail = _create_packer_job_detail()
                    self.detail.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.checksum_verify = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.timeout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.is_encrypted = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.worker_thread_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.file_system_filter_enable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.min_transport_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.full_min_transport_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.is_compressed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.is_checksum = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.MAP:
                    self.priority_carrier = {}
                    (_ktype478, _vtype479, _size477) = iprot.readMapBegin()
                    for _i481 in range(_size477):
                        _key482 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val483 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.priority_carrier[_key482] = _val483
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.BOOL:
                    self.is_only_single_system_disk = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.BOOL:
                    self.is_compressed_by_packer = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('create_packer_job_detail')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.connection_ids is not None:
            oprot.writeFieldBegin('connection_ids', TType.SET, 2)
            oprot.writeSetBegin(TType.STRING, len(self.connection_ids))
            for iter484 in self.connection_ids:
                oprot.writeString(iter484.encode('utf-8') if sys.version_info[0] == 2 else iter484)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.carriers is not None:
            oprot.writeFieldBegin('carriers', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.SET, len(self.carriers))
            for kiter485, viter486 in self.carriers.items():
                oprot.writeString(kiter485.encode('utf-8') if sys.version_info[0] == 2 else kiter485)
                oprot.writeSetBegin(TType.STRING, len(viter486))
                for iter487 in viter486:
                    oprot.writeString(iter487.encode('utf-8') if sys.version_info[0] == 2 else iter487)
                oprot.writeSetEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.detail is not None:
            oprot.writeFieldBegin('detail', TType.STRUCT, 4)
            self.detail.write(oprot)
            oprot.writeFieldEnd()
        if self.checksum_verify is not None:
            oprot.writeFieldBegin('checksum_verify', TType.BOOL, 5)
            oprot.writeBool(self.checksum_verify)
            oprot.writeFieldEnd()
        if self.timeout is not None:
            oprot.writeFieldBegin('timeout', TType.I32, 6)
            oprot.writeI32(self.timeout)
            oprot.writeFieldEnd()
        if self.is_encrypted is not None:
            oprot.writeFieldBegin('is_encrypted', TType.BOOL, 7)
            oprot.writeBool(self.is_encrypted)
            oprot.writeFieldEnd()
        if self.worker_thread_number is not None:
            oprot.writeFieldBegin('worker_thread_number', TType.I32, 8)
            oprot.writeI32(self.worker_thread_number)
            oprot.writeFieldEnd()
        if self.file_system_filter_enable is not None:
            oprot.writeFieldBegin('file_system_filter_enable', TType.BOOL, 9)
            oprot.writeBool(self.file_system_filter_enable)
            oprot.writeFieldEnd()
        if self.min_transport_size is not None:
            oprot.writeFieldBegin('min_transport_size', TType.I32, 10)
            oprot.writeI32(self.min_transport_size)
            oprot.writeFieldEnd()
        if self.full_min_transport_size is not None:
            oprot.writeFieldBegin('full_min_transport_size', TType.I32, 11)
            oprot.writeI32(self.full_min_transport_size)
            oprot.writeFieldEnd()
        if self.is_compressed is not None:
            oprot.writeFieldBegin('is_compressed', TType.BOOL, 12)
            oprot.writeBool(self.is_compressed)
            oprot.writeFieldEnd()
        if self.is_checksum is not None:
            oprot.writeFieldBegin('is_checksum', TType.BOOL, 13)
            oprot.writeBool(self.is_checksum)
            oprot.writeFieldEnd()
        if self.priority_carrier is not None:
            oprot.writeFieldBegin('priority_carrier', TType.MAP, 14)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.priority_carrier))
            for kiter488, viter489 in self.priority_carrier.items():
                oprot.writeString(kiter488.encode('utf-8') if sys.version_info[0] == 2 else kiter488)
                oprot.writeString(viter489.encode('utf-8') if sys.version_info[0] == 2 else viter489)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.is_only_single_system_disk is not None:
            oprot.writeFieldBegin('is_only_single_system_disk', TType.BOOL, 15)
            oprot.writeBool(self.is_only_single_system_disk)
            oprot.writeFieldEnd()
        if self.is_compressed_by_packer is not None:
            oprot.writeFieldBegin('is_compressed_by_packer', TType.BOOL, 16)
            oprot.writeBool(self.is_compressed_by_packer)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class virtual_packer_job_detail(object):
    """
    Attributes:
     - original_size
     - backup_size
     - backup_progress
     - backup_image_offset
     - change_ids
     - guest_os_type
     - completed_blocks
    """

    thrift_spec = (
        None,  # 0
        (1, TType.MAP, 'original_size', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 1
        (2, TType.MAP, 'backup_size', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 2
        (3, TType.MAP, 'backup_progress', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 3
        (4, TType.MAP, 'backup_image_offset', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 4
        (5, TType.MAP, 'change_ids', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 5
        (6, TType.I32, 'guest_os_type', None, 0, ),  # 6
        (7, TType.MAP, 'completed_blocks', (TType.STRING, 'UTF8', TType.LIST, (TType.STRUCT, (io_changed_range, io_changed_range.thrift_spec), False), False), None, ),  # 7
    )

    def __init__(self, original_size=None, backup_size=None, backup_progress=None, backup_image_offset=None, change_ids=None, guest_os_type=thrift_spec[6][4], completed_blocks=None,):
        self.original_size = original_size
        self.backup_size = backup_size
        self.backup_progress = backup_progress
        self.backup_image_offset = backup_image_offset
        self.change_ids = change_ids
        self.guest_os_type = guest_os_type
        self.completed_blocks = completed_blocks

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.original_size = {}
                    (_ktype491, _vtype492, _size490) = iprot.readMapBegin()
                    for _i494 in range(_size490):
                        _key495 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val496 = iprot.readI64()
                        self.original_size[_key495] = _val496
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.backup_size = {}
                    (_ktype498, _vtype499, _size497) = iprot.readMapBegin()
                    for _i501 in range(_size497):
                        _key502 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val503 = iprot.readI64()
                        self.backup_size[_key502] = _val503
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.backup_progress = {}
                    (_ktype505, _vtype506, _size504) = iprot.readMapBegin()
                    for _i508 in range(_size504):
                        _key509 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val510 = iprot.readI64()
                        self.backup_progress[_key509] = _val510
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.backup_image_offset = {}
                    (_ktype512, _vtype513, _size511) = iprot.readMapBegin()
                    for _i515 in range(_size511):
                        _key516 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val517 = iprot.readI64()
                        self.backup_image_offset[_key516] = _val517
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.change_ids = {}
                    (_ktype519, _vtype520, _size518) = iprot.readMapBegin()
                    for _i522 in range(_size518):
                        _key523 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val524 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.change_ids[_key523] = _val524
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.guest_os_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.MAP:
                    self.completed_blocks = {}
                    (_ktype526, _vtype527, _size525) = iprot.readMapBegin()
                    for _i529 in range(_size525):
                        _key530 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val531 = []
                        (_etype535, _size532) = iprot.readListBegin()
                        for _i536 in range(_size532):
                            _elem537 = io_changed_range()
                            _elem537.read(iprot)
                            _val531.append(_elem537)
                        iprot.readListEnd()
                        self.completed_blocks[_key530] = _val531
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('virtual_packer_job_detail')
        if self.original_size is not None:
            oprot.writeFieldBegin('original_size', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.original_size))
            for kiter538, viter539 in self.original_size.items():
                oprot.writeString(kiter538.encode('utf-8') if sys.version_info[0] == 2 else kiter538)
                oprot.writeI64(viter539)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.backup_size is not None:
            oprot.writeFieldBegin('backup_size', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.backup_size))
            for kiter540, viter541 in self.backup_size.items():
                oprot.writeString(kiter540.encode('utf-8') if sys.version_info[0] == 2 else kiter540)
                oprot.writeI64(viter541)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.backup_progress is not None:
            oprot.writeFieldBegin('backup_progress', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.backup_progress))
            for kiter542, viter543 in self.backup_progress.items():
                oprot.writeString(kiter542.encode('utf-8') if sys.version_info[0] == 2 else kiter542)
                oprot.writeI64(viter543)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.backup_image_offset is not None:
            oprot.writeFieldBegin('backup_image_offset', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.backup_image_offset))
            for kiter544, viter545 in self.backup_image_offset.items():
                oprot.writeString(kiter544.encode('utf-8') if sys.version_info[0] == 2 else kiter544)
                oprot.writeI64(viter545)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.change_ids is not None:
            oprot.writeFieldBegin('change_ids', TType.MAP, 5)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.change_ids))
            for kiter546, viter547 in self.change_ids.items():
                oprot.writeString(kiter546.encode('utf-8') if sys.version_info[0] == 2 else kiter546)
                oprot.writeString(viter547.encode('utf-8') if sys.version_info[0] == 2 else viter547)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.guest_os_type is not None:
            oprot.writeFieldBegin('guest_os_type', TType.I32, 6)
            oprot.writeI32(self.guest_os_type)
            oprot.writeFieldEnd()
        if self.completed_blocks is not None:
            oprot.writeFieldBegin('completed_blocks', TType.MAP, 7)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.completed_blocks))
            for kiter548, viter549 in self.completed_blocks.items():
                oprot.writeString(kiter548.encode('utf-8') if sys.version_info[0] == 2 else kiter548)
                oprot.writeListBegin(TType.STRUCT, len(viter549))
                for iter550 in viter549:
                    iter550.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class physical_packer_job_detail(object):
    """
    Attributes:
     - original_size
     - backup_size
     - backup_progress
     - backup_image_offset
     - vcbt_journals
     - guest_os_type
     - cdr_changed_ranges
     - completed_blocks
    """

    thrift_spec = (
        None,  # 0
        (1, TType.MAP, 'original_size', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 1
        (2, TType.MAP, 'backup_size', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 2
        (3, TType.MAP, 'backup_progress', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 3
        (4, TType.MAP, 'backup_image_offset', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 4
        (5, TType.MAP, 'vcbt_journals', (TType.I64, None, TType.STRUCT, (physical_vcbt_journal, physical_vcbt_journal.thrift_spec), False), None, ),  # 5
        (6, TType.I32, 'guest_os_type', None, 1, ),  # 6
        (7, TType.MAP, 'cdr_changed_ranges', (TType.STRING, 'UTF8', TType.LIST, (TType.STRUCT, (io_changed_range, io_changed_range.thrift_spec), False), False), None, ),  # 7
        (8, TType.MAP, 'completed_blocks', (TType.STRING, 'UTF8', TType.LIST, (TType.STRUCT, (io_changed_range, io_changed_range.thrift_spec), False), False), None, ),  # 8
    )

    def __init__(self, original_size=None, backup_size=None, backup_progress=None, backup_image_offset=None, vcbt_journals=None, guest_os_type=thrift_spec[6][4], cdr_changed_ranges=None, completed_blocks=None,):
        self.original_size = original_size
        self.backup_size = backup_size
        self.backup_progress = backup_progress
        self.backup_image_offset = backup_image_offset
        self.vcbt_journals = vcbt_journals
        self.guest_os_type = guest_os_type
        self.cdr_changed_ranges = cdr_changed_ranges
        self.completed_blocks = completed_blocks

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.original_size = {}
                    (_ktype552, _vtype553, _size551) = iprot.readMapBegin()
                    for _i555 in range(_size551):
                        _key556 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val557 = iprot.readI64()
                        self.original_size[_key556] = _val557
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.backup_size = {}
                    (_ktype559, _vtype560, _size558) = iprot.readMapBegin()
                    for _i562 in range(_size558):
                        _key563 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val564 = iprot.readI64()
                        self.backup_size[_key563] = _val564
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.backup_progress = {}
                    (_ktype566, _vtype567, _size565) = iprot.readMapBegin()
                    for _i569 in range(_size565):
                        _key570 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val571 = iprot.readI64()
                        self.backup_progress[_key570] = _val571
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.backup_image_offset = {}
                    (_ktype573, _vtype574, _size572) = iprot.readMapBegin()
                    for _i576 in range(_size572):
                        _key577 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val578 = iprot.readI64()
                        self.backup_image_offset[_key577] = _val578
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.vcbt_journals = {}
                    (_ktype580, _vtype581, _size579) = iprot.readMapBegin()
                    for _i583 in range(_size579):
                        _key584 = iprot.readI64()
                        _val585 = physical_vcbt_journal()
                        _val585.read(iprot)
                        self.vcbt_journals[_key584] = _val585
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.guest_os_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.MAP:
                    self.cdr_changed_ranges = {}
                    (_ktype587, _vtype588, _size586) = iprot.readMapBegin()
                    for _i590 in range(_size586):
                        _key591 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val592 = []
                        (_etype596, _size593) = iprot.readListBegin()
                        for _i597 in range(_size593):
                            _elem598 = io_changed_range()
                            _elem598.read(iprot)
                            _val592.append(_elem598)
                        iprot.readListEnd()
                        self.cdr_changed_ranges[_key591] = _val592
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.MAP:
                    self.completed_blocks = {}
                    (_ktype600, _vtype601, _size599) = iprot.readMapBegin()
                    for _i603 in range(_size599):
                        _key604 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val605 = []
                        (_etype609, _size606) = iprot.readListBegin()
                        for _i610 in range(_size606):
                            _elem611 = io_changed_range()
                            _elem611.read(iprot)
                            _val605.append(_elem611)
                        iprot.readListEnd()
                        self.completed_blocks[_key604] = _val605
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('physical_packer_job_detail')
        if self.original_size is not None:
            oprot.writeFieldBegin('original_size', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.original_size))
            for kiter612, viter613 in self.original_size.items():
                oprot.writeString(kiter612.encode('utf-8') if sys.version_info[0] == 2 else kiter612)
                oprot.writeI64(viter613)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.backup_size is not None:
            oprot.writeFieldBegin('backup_size', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.backup_size))
            for kiter614, viter615 in self.backup_size.items():
                oprot.writeString(kiter614.encode('utf-8') if sys.version_info[0] == 2 else kiter614)
                oprot.writeI64(viter615)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.backup_progress is not None:
            oprot.writeFieldBegin('backup_progress', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.backup_progress))
            for kiter616, viter617 in self.backup_progress.items():
                oprot.writeString(kiter616.encode('utf-8') if sys.version_info[0] == 2 else kiter616)
                oprot.writeI64(viter617)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.backup_image_offset is not None:
            oprot.writeFieldBegin('backup_image_offset', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.backup_image_offset))
            for kiter618, viter619 in self.backup_image_offset.items():
                oprot.writeString(kiter618.encode('utf-8') if sys.version_info[0] == 2 else kiter618)
                oprot.writeI64(viter619)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.vcbt_journals is not None:
            oprot.writeFieldBegin('vcbt_journals', TType.MAP, 5)
            oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.vcbt_journals))
            for kiter620, viter621 in self.vcbt_journals.items():
                oprot.writeI64(kiter620)
                viter621.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.guest_os_type is not None:
            oprot.writeFieldBegin('guest_os_type', TType.I32, 6)
            oprot.writeI32(self.guest_os_type)
            oprot.writeFieldEnd()
        if self.cdr_changed_ranges is not None:
            oprot.writeFieldBegin('cdr_changed_ranges', TType.MAP, 7)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.cdr_changed_ranges))
            for kiter622, viter623 in self.cdr_changed_ranges.items():
                oprot.writeString(kiter622.encode('utf-8') if sys.version_info[0] == 2 else kiter622)
                oprot.writeListBegin(TType.STRUCT, len(viter623))
                for iter624 in viter623:
                    iter624.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.completed_blocks is not None:
            oprot.writeFieldBegin('completed_blocks', TType.MAP, 8)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.completed_blocks))
            for kiter625, viter626 in self.completed_blocks.items():
                oprot.writeString(kiter625.encode('utf-8') if sys.version_info[0] == 2 else kiter625)
                oprot.writeListBegin(TType.STRUCT, len(viter626))
                for iter627 in viter626:
                    iter627.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class _packer_job_detail(object):
    """
    Attributes:
     - p
     - v
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'p', (physical_packer_job_detail, physical_packer_job_detail.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'v', (virtual_packer_job_detail, virtual_packer_job_detail.thrift_spec), None, ),  # 2
    )

    def __init__(self, p=None, v=None,):
        self.p = p
        self.v = v

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.p = physical_packer_job_detail()
                    self.p.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.v = virtual_packer_job_detail()
                    self.v.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('_packer_job_detail')
        if self.p is not None:
            oprot.writeFieldBegin('p', TType.STRUCT, 1)
            self.p.write(oprot)
            oprot.writeFieldEnd()
        if self.v is not None:
            oprot.writeFieldBegin('v', TType.STRUCT, 2)
            self.v.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class packer_job_detail(object):
    """
    Attributes:
     - id
     - type
     - state
     - created_time
     - updated_time
     - histories
     - detail
     - is_error
     - boot_disk
     - system_disks
     - completed_blocks
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'id', 'UTF8', "", ),  # 1
        (2, TType.I32, 'type', None, None, ),  # 2
        (3, TType.I32, 'state', None, 1, ),  # 3
        (4, TType.STRING, 'created_time', 'UTF8', "", ),  # 4
        (5, TType.STRING, 'updated_time', 'UTF8', "", ),  # 5
        (6, TType.LIST, 'histories', (TType.STRUCT, (job_history, job_history.thrift_spec), False), None, ),  # 6
        (7, TType.STRUCT, 'detail', (_packer_job_detail, _packer_job_detail.thrift_spec), None, ),  # 7
        (8, TType.BOOL, 'is_error', None, False, ),  # 8
        (9, TType.STRING, 'boot_disk', 'UTF8', "", ),  # 9
        (10, TType.LIST, 'system_disks', (TType.STRING, 'UTF8', False), None, ),  # 10
        (11, TType.MAP, 'completed_blocks', (TType.STRING, 'UTF8', TType.LIST, (TType.STRUCT, (io_changed_range, io_changed_range.thrift_spec), False), False), None, ),  # 11
    )

    def __init__(self, id=thrift_spec[1][4], type=None, state=thrift_spec[3][4], created_time=thrift_spec[4][4], updated_time=thrift_spec[5][4], histories=None, detail=None, is_error=thrift_spec[8][4], boot_disk=thrift_spec[9][4], system_disks=None, completed_blocks=None,):
        self.id = id
        self.type = type
        self.state = state
        self.created_time = created_time
        self.updated_time = updated_time
        self.histories = histories
        self.detail = detail
        self.is_error = is_error
        self.boot_disk = boot_disk
        self.system_disks = system_disks
        self.completed_blocks = completed_blocks

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.created_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.updated_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.histories = []
                    (_etype631, _size628) = iprot.readListBegin()
                    for _i632 in range(_size628):
                        _elem633 = job_history()
                        _elem633.read(iprot)
                        self.histories.append(_elem633)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.detail = _packer_job_detail()
                    self.detail.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.is_error = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.boot_disk = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.system_disks = []
                    (_etype637, _size634) = iprot.readListBegin()
                    for _i638 in range(_size634):
                        _elem639 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.system_disks.append(_elem639)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.MAP:
                    self.completed_blocks = {}
                    (_ktype641, _vtype642, _size640) = iprot.readMapBegin()
                    for _i644 in range(_size640):
                        _key645 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val646 = []
                        (_etype650, _size647) = iprot.readListBegin()
                        for _i651 in range(_size647):
                            _elem652 = io_changed_range()
                            _elem652.read(iprot)
                            _val646.append(_elem652)
                        iprot.readListEnd()
                        self.completed_blocks[_key645] = _val646
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('packer_job_detail')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 3)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.created_time is not None:
            oprot.writeFieldBegin('created_time', TType.STRING, 4)
            oprot.writeString(self.created_time.encode('utf-8') if sys.version_info[0] == 2 else self.created_time)
            oprot.writeFieldEnd()
        if self.updated_time is not None:
            oprot.writeFieldBegin('updated_time', TType.STRING, 5)
            oprot.writeString(self.updated_time.encode('utf-8') if sys.version_info[0] == 2 else self.updated_time)
            oprot.writeFieldEnd()
        if self.histories is not None:
            oprot.writeFieldBegin('histories', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.histories))
            for iter653 in self.histories:
                iter653.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.detail is not None:
            oprot.writeFieldBegin('detail', TType.STRUCT, 7)
            self.detail.write(oprot)
            oprot.writeFieldEnd()
        if self.is_error is not None:
            oprot.writeFieldBegin('is_error', TType.BOOL, 8)
            oprot.writeBool(self.is_error)
            oprot.writeFieldEnd()
        if self.boot_disk is not None:
            oprot.writeFieldBegin('boot_disk', TType.STRING, 9)
            oprot.writeString(self.boot_disk.encode('utf-8') if sys.version_info[0] == 2 else self.boot_disk)
            oprot.writeFieldEnd()
        if self.system_disks is not None:
            oprot.writeFieldBegin('system_disks', TType.LIST, 10)
            oprot.writeListBegin(TType.STRING, len(self.system_disks))
            for iter654 in self.system_disks:
                oprot.writeString(iter654.encode('utf-8') if sys.version_info[0] == 2 else iter654)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.completed_blocks is not None:
            oprot.writeFieldBegin('completed_blocks', TType.MAP, 11)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.completed_blocks))
            for kiter655, viter656 in self.completed_blocks.items():
                oprot.writeString(kiter655.encode('utf-8') if sys.version_info[0] == 2 else kiter655)
                oprot.writeListBegin(TType.STRUCT, len(viter656))
                for iter657 in viter656:
                    iter657.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class replica_job_detail(object):
    """
    Attributes:
     - replica_id
     - host
     - id
     - type
     - state
     - is_error
     - created_time
     - updated_time
     - virtual_machine_id
     - disks
     - connection_id
     - original_size
     - backup_progress
     - snapshot_mapping
     - backup_size
     - backup_image_offset
     - cbt_info
     - histories
     - snapshot_time
     - snapshot_info
     - boot_disk
     - system_disks
     - is_pending_rerun
     - is_cdr
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'replica_id', 'UTF8', "", ),  # 1
        (2, TType.STRING, 'host', 'UTF8', "", ),  # 2
        (3, TType.STRING, 'id', 'UTF8', "", ),  # 3
        (4, TType.I32, 'type', None, None, ),  # 4
        (5, TType.I32, 'state', None, 1, ),  # 5
        (6, TType.BOOL, 'is_error', None, False, ),  # 6
        (7, TType.STRING, 'created_time', 'UTF8', "", ),  # 7
        (8, TType.STRING, 'updated_time', 'UTF8', "", ),  # 8
        (9, TType.STRING, 'virtual_machine_id', 'UTF8', "", ),  # 9
        (10, TType.SET, 'disks', (TType.STRING, 'UTF8', False), None, ),  # 10
        (11, TType.STRING, 'connection_id', 'UTF8', None, ),  # 11
        (12, TType.MAP, 'original_size', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 12
        (13, TType.MAP, 'backup_progress', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 13
        (14, TType.MAP, 'snapshot_mapping', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 14
        (15, TType.MAP, 'backup_size', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 15
        (16, TType.MAP, 'backup_image_offset', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 16
        (17, TType.STRING, 'cbt_info', 'UTF8', "", ),  # 17
        (18, TType.LIST, 'histories', (TType.STRUCT, (job_history, job_history.thrift_spec), False), None, ),  # 18
        (19, TType.STRING, 'snapshot_time', 'UTF8', "", ),  # 19
        (20, TType.STRING, 'snapshot_info', 'UTF8', "", ),  # 20
        (21, TType.STRING, 'boot_disk', 'UTF8', "", ),  # 21
        (22, TType.LIST, 'system_disks', (TType.STRING, 'UTF8', False), None, ),  # 22
        (23, TType.BOOL, 'is_pending_rerun', None, False, ),  # 23
        (24, TType.BOOL, 'is_cdr', None, False, ),  # 24
    )

    def __init__(self, replica_id=thrift_spec[1][4], host=thrift_spec[2][4], id=thrift_spec[3][4], type=None, state=thrift_spec[5][4], is_error=thrift_spec[6][4], created_time=thrift_spec[7][4], updated_time=thrift_spec[8][4], virtual_machine_id=thrift_spec[9][4], disks=None, connection_id=None, original_size=None, backup_progress=None, snapshot_mapping=None, backup_size=None, backup_image_offset=None, cbt_info=thrift_spec[17][4], histories=None, snapshot_time=thrift_spec[19][4], snapshot_info=thrift_spec[20][4], boot_disk=thrift_spec[21][4], system_disks=None, is_pending_rerun=thrift_spec[23][4], is_cdr=thrift_spec[24][4],):
        self.replica_id = replica_id
        self.host = host
        self.id = id
        self.type = type
        self.state = state
        self.is_error = is_error
        self.created_time = created_time
        self.updated_time = updated_time
        self.virtual_machine_id = virtual_machine_id
        self.disks = disks
        self.connection_id = connection_id
        self.original_size = original_size
        self.backup_progress = backup_progress
        self.snapshot_mapping = snapshot_mapping
        self.backup_size = backup_size
        self.backup_image_offset = backup_image_offset
        self.cbt_info = cbt_info
        self.histories = histories
        self.snapshot_time = snapshot_time
        self.snapshot_info = snapshot_info
        self.boot_disk = boot_disk
        self.system_disks = system_disks
        self.is_pending_rerun = is_pending_rerun
        self.is_cdr = is_cdr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.replica_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.host = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.is_error = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.created_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.updated_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.virtual_machine_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.SET:
                    self.disks = set()
                    (_etype661, _size658) = iprot.readSetBegin()
                    for _i662 in range(_size658):
                        _elem663 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.disks.add(_elem663)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.connection_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.MAP:
                    self.original_size = {}
                    (_ktype665, _vtype666, _size664) = iprot.readMapBegin()
                    for _i668 in range(_size664):
                        _key669 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val670 = iprot.readI64()
                        self.original_size[_key669] = _val670
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.MAP:
                    self.backup_progress = {}
                    (_ktype672, _vtype673, _size671) = iprot.readMapBegin()
                    for _i675 in range(_size671):
                        _key676 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val677 = iprot.readI64()
                        self.backup_progress[_key676] = _val677
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.MAP:
                    self.snapshot_mapping = {}
                    (_ktype679, _vtype680, _size678) = iprot.readMapBegin()
                    for _i682 in range(_size678):
                        _key683 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val684 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.snapshot_mapping[_key683] = _val684
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.MAP:
                    self.backup_size = {}
                    (_ktype686, _vtype687, _size685) = iprot.readMapBegin()
                    for _i689 in range(_size685):
                        _key690 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val691 = iprot.readI64()
                        self.backup_size[_key690] = _val691
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.MAP:
                    self.backup_image_offset = {}
                    (_ktype693, _vtype694, _size692) = iprot.readMapBegin()
                    for _i696 in range(_size692):
                        _key697 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val698 = iprot.readI64()
                        self.backup_image_offset[_key697] = _val698
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.cbt_info = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.LIST:
                    self.histories = []
                    (_etype702, _size699) = iprot.readListBegin()
                    for _i703 in range(_size699):
                        _elem704 = job_history()
                        _elem704.read(iprot)
                        self.histories.append(_elem704)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.snapshot_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.snapshot_info = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.boot_disk = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.LIST:
                    self.system_disks = []
                    (_etype708, _size705) = iprot.readListBegin()
                    for _i709 in range(_size705):
                        _elem710 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.system_disks.append(_elem710)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.BOOL:
                    self.is_pending_rerun = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.BOOL:
                    self.is_cdr = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('replica_job_detail')
        if self.replica_id is not None:
            oprot.writeFieldBegin('replica_id', TType.STRING, 1)
            oprot.writeString(self.replica_id.encode('utf-8') if sys.version_info[0] == 2 else self.replica_id)
            oprot.writeFieldEnd()
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 2)
            oprot.writeString(self.host.encode('utf-8') if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 3)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 4)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 5)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.is_error is not None:
            oprot.writeFieldBegin('is_error', TType.BOOL, 6)
            oprot.writeBool(self.is_error)
            oprot.writeFieldEnd()
        if self.created_time is not None:
            oprot.writeFieldBegin('created_time', TType.STRING, 7)
            oprot.writeString(self.created_time.encode('utf-8') if sys.version_info[0] == 2 else self.created_time)
            oprot.writeFieldEnd()
        if self.updated_time is not None:
            oprot.writeFieldBegin('updated_time', TType.STRING, 8)
            oprot.writeString(self.updated_time.encode('utf-8') if sys.version_info[0] == 2 else self.updated_time)
            oprot.writeFieldEnd()
        if self.virtual_machine_id is not None:
            oprot.writeFieldBegin('virtual_machine_id', TType.STRING, 9)
            oprot.writeString(self.virtual_machine_id.encode('utf-8') if sys.version_info[0] == 2 else self.virtual_machine_id)
            oprot.writeFieldEnd()
        if self.disks is not None:
            oprot.writeFieldBegin('disks', TType.SET, 10)
            oprot.writeSetBegin(TType.STRING, len(self.disks))
            for iter711 in self.disks:
                oprot.writeString(iter711.encode('utf-8') if sys.version_info[0] == 2 else iter711)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.connection_id is not None:
            oprot.writeFieldBegin('connection_id', TType.STRING, 11)
            oprot.writeString(self.connection_id.encode('utf-8') if sys.version_info[0] == 2 else self.connection_id)
            oprot.writeFieldEnd()
        if self.original_size is not None:
            oprot.writeFieldBegin('original_size', TType.MAP, 12)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.original_size))
            for kiter712, viter713 in self.original_size.items():
                oprot.writeString(kiter712.encode('utf-8') if sys.version_info[0] == 2 else kiter712)
                oprot.writeI64(viter713)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.backup_progress is not None:
            oprot.writeFieldBegin('backup_progress', TType.MAP, 13)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.backup_progress))
            for kiter714, viter715 in self.backup_progress.items():
                oprot.writeString(kiter714.encode('utf-8') if sys.version_info[0] == 2 else kiter714)
                oprot.writeI64(viter715)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.snapshot_mapping is not None:
            oprot.writeFieldBegin('snapshot_mapping', TType.MAP, 14)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.snapshot_mapping))
            for kiter716, viter717 in self.snapshot_mapping.items():
                oprot.writeString(kiter716.encode('utf-8') if sys.version_info[0] == 2 else kiter716)
                oprot.writeString(viter717.encode('utf-8') if sys.version_info[0] == 2 else viter717)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.backup_size is not None:
            oprot.writeFieldBegin('backup_size', TType.MAP, 15)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.backup_size))
            for kiter718, viter719 in self.backup_size.items():
                oprot.writeString(kiter718.encode('utf-8') if sys.version_info[0] == 2 else kiter718)
                oprot.writeI64(viter719)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.backup_image_offset is not None:
            oprot.writeFieldBegin('backup_image_offset', TType.MAP, 16)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.backup_image_offset))
            for kiter720, viter721 in self.backup_image_offset.items():
                oprot.writeString(kiter720.encode('utf-8') if sys.version_info[0] == 2 else kiter720)
                oprot.writeI64(viter721)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.cbt_info is not None:
            oprot.writeFieldBegin('cbt_info', TType.STRING, 17)
            oprot.writeString(self.cbt_info.encode('utf-8') if sys.version_info[0] == 2 else self.cbt_info)
            oprot.writeFieldEnd()
        if self.histories is not None:
            oprot.writeFieldBegin('histories', TType.LIST, 18)
            oprot.writeListBegin(TType.STRUCT, len(self.histories))
            for iter722 in self.histories:
                iter722.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.snapshot_time is not None:
            oprot.writeFieldBegin('snapshot_time', TType.STRING, 19)
            oprot.writeString(self.snapshot_time.encode('utf-8') if sys.version_info[0] == 2 else self.snapshot_time)
            oprot.writeFieldEnd()
        if self.snapshot_info is not None:
            oprot.writeFieldBegin('snapshot_info', TType.STRING, 20)
            oprot.writeString(self.snapshot_info.encode('utf-8') if sys.version_info[0] == 2 else self.snapshot_info)
            oprot.writeFieldEnd()
        if self.boot_disk is not None:
            oprot.writeFieldBegin('boot_disk', TType.STRING, 21)
            oprot.writeString(self.boot_disk.encode('utf-8') if sys.version_info[0] == 2 else self.boot_disk)
            oprot.writeFieldEnd()
        if self.system_disks is not None:
            oprot.writeFieldBegin('system_disks', TType.LIST, 22)
            oprot.writeListBegin(TType.STRING, len(self.system_disks))
            for iter723 in self.system_disks:
                oprot.writeString(iter723.encode('utf-8') if sys.version_info[0] == 2 else iter723)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.is_pending_rerun is not None:
            oprot.writeFieldBegin('is_pending_rerun', TType.BOOL, 23)
            oprot.writeBool(self.is_pending_rerun)
            oprot.writeFieldEnd()
        if self.is_cdr is not None:
            oprot.writeFieldBegin('is_cdr', TType.BOOL, 24)
            oprot.writeBool(self.is_cdr)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class service_info(object):
    """
    Attributes:
     - id
     - version
     - path
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'version', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'path', 'UTF8', None, ),  # 3
    )

    def __init__(self, id=None, version=None, path=None,):
        self.id = id
        self.version = version
        self.path = path

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('service_info')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 2)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 3)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class local_folder(object):
    """
    Attributes:
     - path
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'path', 'UTF8', "", ),  # 1
    )

    def __init__(self, path=thrift_spec[1][4],):
        self.path = path

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('local_folder')
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 1)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class network_folder(object):
    """
    Attributes:
     - path
     - username
     - password
     - port
     - proxy_host
     - proxy_port
     - proxy_username
     - proxy_password
     - s3_region
     - timeout
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'path', 'UTF8', "", ),  # 1
        (2, TType.STRING, 'username', 'UTF8', "", ),  # 2
        (3, TType.STRING, 'password', 'UTF8', "", ),  # 3
        (4, TType.I32, 'port', None, 0, ),  # 4
        (5, TType.STRING, 'proxy_host', 'UTF8', "", ),  # 5
        (6, TType.I32, 'proxy_port', None, 0, ),  # 6
        (7, TType.STRING, 'proxy_username', 'UTF8', "", ),  # 7
        (8, TType.STRING, 'proxy_password', 'UTF8', "", ),  # 8
        (9, TType.I32, 's3_region', None, 0, ),  # 9
        (10, TType.I32, 'timeout', None, 300, ),  # 10
    )

    def __init__(self, path=thrift_spec[1][4], username=thrift_spec[2][4], password=thrift_spec[3][4], port=thrift_spec[4][4], proxy_host=thrift_spec[5][4], proxy_port=thrift_spec[6][4], proxy_username=thrift_spec[7][4], proxy_password=thrift_spec[8][4], s3_region=thrift_spec[9][4], timeout=thrift_spec[10][4],):
        self.path = path
        self.username = username
        self.password = password
        self.port = port
        self.proxy_host = proxy_host
        self.proxy_port = proxy_port
        self.proxy_username = proxy_username
        self.proxy_password = proxy_password
        self.s3_region = s3_region
        self.timeout = timeout

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.proxy_host = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.proxy_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.proxy_username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.proxy_password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.s3_region = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.timeout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('network_folder')
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 1)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 2)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 3)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 4)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.proxy_host is not None:
            oprot.writeFieldBegin('proxy_host', TType.STRING, 5)
            oprot.writeString(self.proxy_host.encode('utf-8') if sys.version_info[0] == 2 else self.proxy_host)
            oprot.writeFieldEnd()
        if self.proxy_port is not None:
            oprot.writeFieldBegin('proxy_port', TType.I32, 6)
            oprot.writeI32(self.proxy_port)
            oprot.writeFieldEnd()
        if self.proxy_username is not None:
            oprot.writeFieldBegin('proxy_username', TType.STRING, 7)
            oprot.writeString(self.proxy_username.encode('utf-8') if sys.version_info[0] == 2 else self.proxy_username)
            oprot.writeFieldEnd()
        if self.proxy_password is not None:
            oprot.writeFieldBegin('proxy_password', TType.STRING, 8)
            oprot.writeString(self.proxy_password.encode('utf-8') if sys.version_info[0] == 2 else self.proxy_password)
            oprot.writeFieldEnd()
        if self.s3_region is not None:
            oprot.writeFieldBegin('s3_region', TType.I32, 9)
            oprot.writeI32(self.s3_region)
            oprot.writeFieldEnd()
        if self.timeout is not None:
            oprot.writeFieldBegin('timeout', TType.I32, 10)
            oprot.writeI32(self.timeout)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class _detail(object):
    """
    Attributes:
     - local
     - remote
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'local', (local_folder, local_folder.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'remote', (network_folder, network_folder.thrift_spec), None, ),  # 2
    )

    def __init__(self, local=None, remote=None,):
        self.local = local
        self.remote = remote

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.local = local_folder()
                    self.local.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.remote = network_folder()
                    self.remote.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('_detail')
        if self.local is not None:
            oprot.writeFieldBegin('local', TType.STRUCT, 1)
            self.local.write(oprot)
            oprot.writeFieldEnd()
        if self.remote is not None:
            oprot.writeFieldBegin('remote', TType.STRUCT, 2)
            self.remote.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class connection(object):
    """
    Attributes:
     - type
     - id
     - options
     - compressed
     - checksum
     - encrypted
     - detail
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'type', None, 0, ),  # 1
        (2, TType.STRING, 'id', 'UTF8', "", ),  # 2
        (3, TType.MAP, 'options', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 3
        (4, TType.BOOL, 'compressed', None, True, ),  # 4
        (5, TType.BOOL, 'checksum', None, False, ),  # 5
        (6, TType.BOOL, 'encrypted', None, False, ),  # 6
        (7, TType.STRUCT, 'detail', (_detail, _detail.thrift_spec), None, ),  # 7
    )

    def __init__(self, type=thrift_spec[1][4], id=thrift_spec[2][4], options=None, compressed=thrift_spec[4][4], checksum=thrift_spec[5][4], encrypted=thrift_spec[6][4], detail=None,):
        self.type = type
        self.id = id
        self.options = options
        self.compressed = compressed
        self.checksum = checksum
        self.encrypted = encrypted
        self.detail = detail

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.options = {}
                    (_ktype725, _vtype726, _size724) = iprot.readMapBegin()
                    for _i728 in range(_size724):
                        _key729 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val730 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.options[_key729] = _val730
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.compressed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.checksum = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.encrypted = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.detail = _detail()
                    self.detail.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('connection')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.options is not None:
            oprot.writeFieldBegin('options', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.options))
            for kiter731, viter732 in self.options.items():
                oprot.writeString(kiter731.encode('utf-8') if sys.version_info[0] == 2 else kiter731)
                oprot.writeString(viter732.encode('utf-8') if sys.version_info[0] == 2 else viter732)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.compressed is not None:
            oprot.writeFieldBegin('compressed', TType.BOOL, 4)
            oprot.writeBool(self.compressed)
            oprot.writeFieldEnd()
        if self.checksum is not None:
            oprot.writeFieldBegin('checksum', TType.BOOL, 5)
            oprot.writeBool(self.checksum)
            oprot.writeFieldEnd()
        if self.encrypted is not None:
            oprot.writeFieldBegin('encrypted', TType.BOOL, 6)
            oprot.writeBool(self.encrypted)
            oprot.writeFieldEnd()
        if self.detail is not None:
            oprot.writeFieldBegin('detail', TType.STRUCT, 7)
            self.detail.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class image_map_info(object):
    """
    Attributes:
     - image
     - base_image
     - connection_ids
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'image', 'UTF8', "", ),  # 1
        (2, TType.STRING, 'base_image', 'UTF8', "", ),  # 2
        (3, TType.SET, 'connection_ids', (TType.STRING, 'UTF8', False), None, ),  # 3
    )

    def __init__(self, image=thrift_spec[1][4], base_image=thrift_spec[2][4], connection_ids=None,):
        self.image = image
        self.base_image = base_image
        self.connection_ids = connection_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.image = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.base_image = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.connection_ids = set()
                    (_etype736, _size733) = iprot.readSetBegin()
                    for _i737 in range(_size733):
                        _elem738 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.connection_ids.add(_elem738)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('image_map_info')
        if self.image is not None:
            oprot.writeFieldBegin('image', TType.STRING, 1)
            oprot.writeString(self.image.encode('utf-8') if sys.version_info[0] == 2 else self.image)
            oprot.writeFieldEnd()
        if self.base_image is not None:
            oprot.writeFieldBegin('base_image', TType.STRING, 2)
            oprot.writeString(self.base_image.encode('utf-8') if sys.version_info[0] == 2 else self.base_image)
            oprot.writeFieldEnd()
        if self.connection_ids is not None:
            oprot.writeFieldBegin('connection_ids', TType.SET, 3)
            oprot.writeSetBegin(TType.STRING, len(self.connection_ids))
            for iter739 in self.connection_ids:
                oprot.writeString(iter739.encode('utf-8') if sys.version_info[0] == 2 else iter739)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class create_image_info(object):
    """
    Attributes:
     - name
     - base
     - parent
     - connection_ids
     - size
     - block_size
     - checksum_verify
     - comment
     - version
     - compressed
     - checksum
     - cdr
     - mode
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'name', 'UTF8', "", ),  # 1
        (2, TType.STRING, 'base', 'UTF8', "", ),  # 2
        (3, TType.STRING, 'parent', 'UTF8', "", ),  # 3
        (4, TType.SET, 'connection_ids', (TType.STRING, 'UTF8', False), None, ),  # 4
        (5, TType.I64, 'size', None, 0, ),  # 5
        (6, TType.I32, 'block_size', None, 0, ),  # 6
        (7, TType.BOOL, 'checksum_verify', None, True, ),  # 7
        (8, TType.STRING, 'comment', 'UTF8', "", ),  # 8
        (9, TType.I32, 'version', None, 0, ),  # 9
        (10, TType.BOOL, 'compressed', None, True, ),  # 10
        (11, TType.BOOL, 'checksum', None, False, ),  # 11
        (12, TType.BOOL, 'cdr', None, False, ),  # 12
        (13, TType.BYTE, 'mode', None, 2, ),  # 13
    )

    def __init__(self, name=thrift_spec[1][4], base=thrift_spec[2][4], parent=thrift_spec[3][4], connection_ids=None, size=thrift_spec[5][4], block_size=thrift_spec[6][4], checksum_verify=thrift_spec[7][4], comment=thrift_spec[8][4], version=thrift_spec[9][4], compressed=thrift_spec[10][4], checksum=thrift_spec[11][4], cdr=thrift_spec[12][4], mode=thrift_spec[13][4],):
        self.name = name
        self.base = base
        self.parent = parent
        self.connection_ids = connection_ids
        self.size = size
        self.block_size = block_size
        self.checksum_verify = checksum_verify
        self.comment = comment
        self.version = version
        self.compressed = compressed
        self.checksum = checksum
        self.cdr = cdr
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.base = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.parent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.SET:
                    self.connection_ids = set()
                    (_etype743, _size740) = iprot.readSetBegin()
                    for _i744 in range(_size740):
                        _elem745 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.connection_ids.add(_elem745)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.block_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.checksum_verify = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.comment = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.compressed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.checksum = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.cdr = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BYTE:
                    self.mode = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('create_image_info')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.base is not None:
            oprot.writeFieldBegin('base', TType.STRING, 2)
            oprot.writeString(self.base.encode('utf-8') if sys.version_info[0] == 2 else self.base)
            oprot.writeFieldEnd()
        if self.parent is not None:
            oprot.writeFieldBegin('parent', TType.STRING, 3)
            oprot.writeString(self.parent.encode('utf-8') if sys.version_info[0] == 2 else self.parent)
            oprot.writeFieldEnd()
        if self.connection_ids is not None:
            oprot.writeFieldBegin('connection_ids', TType.SET, 4)
            oprot.writeSetBegin(TType.STRING, len(self.connection_ids))
            for iter746 in self.connection_ids:
                oprot.writeString(iter746.encode('utf-8') if sys.version_info[0] == 2 else iter746)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 5)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        if self.block_size is not None:
            oprot.writeFieldBegin('block_size', TType.I32, 6)
            oprot.writeI32(self.block_size)
            oprot.writeFieldEnd()
        if self.checksum_verify is not None:
            oprot.writeFieldBegin('checksum_verify', TType.BOOL, 7)
            oprot.writeBool(self.checksum_verify)
            oprot.writeFieldEnd()
        if self.comment is not None:
            oprot.writeFieldBegin('comment', TType.STRING, 8)
            oprot.writeString(self.comment.encode('utf-8') if sys.version_info[0] == 2 else self.comment)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.I32, 9)
            oprot.writeI32(self.version)
            oprot.writeFieldEnd()
        if self.compressed is not None:
            oprot.writeFieldBegin('compressed', TType.BOOL, 10)
            oprot.writeBool(self.compressed)
            oprot.writeFieldEnd()
        if self.checksum is not None:
            oprot.writeFieldBegin('checksum', TType.BOOL, 11)
            oprot.writeBool(self.checksum)
            oprot.writeFieldEnd()
        if self.cdr is not None:
            oprot.writeFieldBegin('cdr', TType.BOOL, 12)
            oprot.writeBool(self.cdr)
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.BYTE, 13)
            oprot.writeByte(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class loader_job_detail(object):
    """
    Attributes:
     - replica_id
     - id
     - state
     - created_time
     - updated_time
     - progress
     - histories
     - connection_id
     - data
     - snapshot_id
     - duplicated_data
     - transport_data
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'replica_id', 'UTF8', "", ),  # 1
        (2, TType.STRING, 'id', 'UTF8', "", ),  # 2
        (3, TType.I32, 'state', None, 1, ),  # 3
        (4, TType.STRING, 'created_time', 'UTF8', "", ),  # 4
        (5, TType.STRING, 'updated_time', 'UTF8', "", ),  # 5
        (6, TType.MAP, 'progress', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 6
        (7, TType.LIST, 'histories', (TType.STRUCT, (job_history, job_history.thrift_spec), False), None, ),  # 7
        (8, TType.STRING, 'connection_id', 'UTF8', None, ),  # 8
        (9, TType.MAP, 'data', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 9
        (10, TType.STRING, 'snapshot_id', 'UTF8', "", ),  # 10
        (11, TType.MAP, 'duplicated_data', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 11
        (12, TType.MAP, 'transport_data', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 12
    )

    def __init__(self, replica_id=thrift_spec[1][4], id=thrift_spec[2][4], state=thrift_spec[3][4], created_time=thrift_spec[4][4], updated_time=thrift_spec[5][4], progress=None, histories=None, connection_id=None, data=None, snapshot_id=thrift_spec[10][4], duplicated_data=None, transport_data=None,):
        self.replica_id = replica_id
        self.id = id
        self.state = state
        self.created_time = created_time
        self.updated_time = updated_time
        self.progress = progress
        self.histories = histories
        self.connection_id = connection_id
        self.data = data
        self.snapshot_id = snapshot_id
        self.duplicated_data = duplicated_data
        self.transport_data = transport_data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.replica_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.created_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.updated_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.progress = {}
                    (_ktype748, _vtype749, _size747) = iprot.readMapBegin()
                    for _i751 in range(_size747):
                        _key752 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val753 = iprot.readI64()
                        self.progress[_key752] = _val753
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.histories = []
                    (_etype757, _size754) = iprot.readListBegin()
                    for _i758 in range(_size754):
                        _elem759 = job_history()
                        _elem759.read(iprot)
                        self.histories.append(_elem759)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.connection_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.MAP:
                    self.data = {}
                    (_ktype761, _vtype762, _size760) = iprot.readMapBegin()
                    for _i764 in range(_size760):
                        _key765 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val766 = iprot.readI64()
                        self.data[_key765] = _val766
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.snapshot_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.MAP:
                    self.duplicated_data = {}
                    (_ktype768, _vtype769, _size767) = iprot.readMapBegin()
                    for _i771 in range(_size767):
                        _key772 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val773 = iprot.readI64()
                        self.duplicated_data[_key772] = _val773
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.MAP:
                    self.transport_data = {}
                    (_ktype775, _vtype776, _size774) = iprot.readMapBegin()
                    for _i778 in range(_size774):
                        _key779 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val780 = iprot.readI64()
                        self.transport_data[_key779] = _val780
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('loader_job_detail')
        if self.replica_id is not None:
            oprot.writeFieldBegin('replica_id', TType.STRING, 1)
            oprot.writeString(self.replica_id.encode('utf-8') if sys.version_info[0] == 2 else self.replica_id)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 3)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.created_time is not None:
            oprot.writeFieldBegin('created_time', TType.STRING, 4)
            oprot.writeString(self.created_time.encode('utf-8') if sys.version_info[0] == 2 else self.created_time)
            oprot.writeFieldEnd()
        if self.updated_time is not None:
            oprot.writeFieldBegin('updated_time', TType.STRING, 5)
            oprot.writeString(self.updated_time.encode('utf-8') if sys.version_info[0] == 2 else self.updated_time)
            oprot.writeFieldEnd()
        if self.progress is not None:
            oprot.writeFieldBegin('progress', TType.MAP, 6)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.progress))
            for kiter781, viter782 in self.progress.items():
                oprot.writeString(kiter781.encode('utf-8') if sys.version_info[0] == 2 else kiter781)
                oprot.writeI64(viter782)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.histories is not None:
            oprot.writeFieldBegin('histories', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.histories))
            for iter783 in self.histories:
                iter783.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.connection_id is not None:
            oprot.writeFieldBegin('connection_id', TType.STRING, 8)
            oprot.writeString(self.connection_id.encode('utf-8') if sys.version_info[0] == 2 else self.connection_id)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.MAP, 9)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.data))
            for kiter784, viter785 in self.data.items():
                oprot.writeString(kiter784.encode('utf-8') if sys.version_info[0] == 2 else kiter784)
                oprot.writeI64(viter785)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.snapshot_id is not None:
            oprot.writeFieldBegin('snapshot_id', TType.STRING, 10)
            oprot.writeString(self.snapshot_id.encode('utf-8') if sys.version_info[0] == 2 else self.snapshot_id)
            oprot.writeFieldEnd()
        if self.duplicated_data is not None:
            oprot.writeFieldBegin('duplicated_data', TType.MAP, 11)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.duplicated_data))
            for kiter786, viter787 in self.duplicated_data.items():
                oprot.writeString(kiter786.encode('utf-8') if sys.version_info[0] == 2 else kiter786)
                oprot.writeI64(viter787)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.transport_data is not None:
            oprot.writeFieldBegin('transport_data', TType.MAP, 12)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.transport_data))
            for kiter788, viter789 in self.transport_data.items():
                oprot.writeString(kiter788.encode('utf-8') if sys.version_info[0] == 2 else kiter788)
                oprot.writeI64(viter789)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class upload_progress(object):
    """
    Attributes:
     - size
     - progress
     - vhd_size
     - upload_id
     - completed
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I64, 'size', None, 0, ),  # 1
        (2, TType.I64, 'progress', None, 0, ),  # 2
        (3, TType.I64, 'vhd_size', None, 0, ),  # 3
        (4, TType.STRING, 'upload_id', 'UTF8', "", ),  # 4
        (5, TType.BOOL, 'completed', None, False, ),  # 5
    )

    def __init__(self, size=thrift_spec[1][4], progress=thrift_spec[2][4], vhd_size=thrift_spec[3][4], upload_id=thrift_spec[4][4], completed=thrift_spec[5][4],):
        self.size = size
        self.progress = progress
        self.vhd_size = vhd_size
        self.upload_id = upload_id
        self.completed = completed

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.progress = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.vhd_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.upload_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.completed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('upload_progress')
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 1)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        if self.progress is not None:
            oprot.writeFieldBegin('progress', TType.I64, 2)
            oprot.writeI64(self.progress)
            oprot.writeFieldEnd()
        if self.vhd_size is not None:
            oprot.writeFieldBegin('vhd_size', TType.I64, 3)
            oprot.writeI64(self.vhd_size)
            oprot.writeFieldEnd()
        if self.upload_id is not None:
            oprot.writeFieldBegin('upload_id', TType.STRING, 4)
            oprot.writeString(self.upload_id.encode('utf-8') if sys.version_info[0] == 2 else self.upload_id)
            oprot.writeFieldEnd()
        if self.completed is not None:
            oprot.writeFieldBegin('completed', TType.BOOL, 5)
            oprot.writeBool(self.completed)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class launcher_job_detail(object):
    """
    Attributes:
     - replica_id
     - id
     - state
     - created_time
     - updated_time
     - boot_disk
     - histories
     - is_error
     - is_windows_update
     - platform
     - architecture
     - size
     - progress
     - vhd_size
     - upload_id
     - host_name
     - vhd_upload_progress
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'replica_id', 'UTF8', "", ),  # 1
        (2, TType.STRING, 'id', 'UTF8', "", ),  # 2
        (3, TType.I32, 'state', None, 1, ),  # 3
        (4, TType.STRING, 'created_time', 'UTF8', "", ),  # 4
        (5, TType.STRING, 'updated_time', 'UTF8', "", ),  # 5
        (6, TType.STRING, 'boot_disk', 'UTF8', "", ),  # 6
        (7, TType.LIST, 'histories', (TType.STRUCT, (job_history, job_history.thrift_spec), False), None, ),  # 7
        (8, TType.BOOL, 'is_error', None, False, ),  # 8
        (9, TType.BOOL, 'is_windows_update', None, False, ),  # 9
        (10, TType.STRING, 'platform', 'UTF8', "", ),  # 10
        (11, TType.STRING, 'architecture', 'UTF8', "", ),  # 11
        (12, TType.I64, 'size', None, 0, ),  # 12
        (13, TType.I64, 'progress', None, 0, ),  # 13
        (14, TType.I64, 'vhd_size', None, 0, ),  # 14
        (15, TType.STRING, 'upload_id', 'UTF8', "", ),  # 15
        (16, TType.STRING, 'host_name', 'UTF8', None, ),  # 16
        (17, TType.MAP, 'vhd_upload_progress', (TType.STRING, 'UTF8', TType.STRUCT, (upload_progress, upload_progress.thrift_spec), False), None, ),  # 17
    )

    def __init__(self, replica_id=thrift_spec[1][4], id=thrift_spec[2][4], state=thrift_spec[3][4], created_time=thrift_spec[4][4], updated_time=thrift_spec[5][4], boot_disk=thrift_spec[6][4], histories=None, is_error=thrift_spec[8][4], is_windows_update=thrift_spec[9][4], platform=thrift_spec[10][4], architecture=thrift_spec[11][4], size=thrift_spec[12][4], progress=thrift_spec[13][4], vhd_size=thrift_spec[14][4], upload_id=thrift_spec[15][4], host_name=None, vhd_upload_progress=None,):
        self.replica_id = replica_id
        self.id = id
        self.state = state
        self.created_time = created_time
        self.updated_time = updated_time
        self.boot_disk = boot_disk
        self.histories = histories
        self.is_error = is_error
        self.is_windows_update = is_windows_update
        self.platform = platform
        self.architecture = architecture
        self.size = size
        self.progress = progress
        self.vhd_size = vhd_size
        self.upload_id = upload_id
        self.host_name = host_name
        self.vhd_upload_progress = vhd_upload_progress

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.replica_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.created_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.updated_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.boot_disk = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.histories = []
                    (_etype793, _size790) = iprot.readListBegin()
                    for _i794 in range(_size790):
                        _elem795 = job_history()
                        _elem795.read(iprot)
                        self.histories.append(_elem795)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.is_error = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.is_windows_update = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.platform = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.architecture = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I64:
                    self.progress = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I64:
                    self.vhd_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.upload_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.host_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.MAP:
                    self.vhd_upload_progress = {}
                    (_ktype797, _vtype798, _size796) = iprot.readMapBegin()
                    for _i800 in range(_size796):
                        _key801 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val802 = upload_progress()
                        _val802.read(iprot)
                        self.vhd_upload_progress[_key801] = _val802
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('launcher_job_detail')
        if self.replica_id is not None:
            oprot.writeFieldBegin('replica_id', TType.STRING, 1)
            oprot.writeString(self.replica_id.encode('utf-8') if sys.version_info[0] == 2 else self.replica_id)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 3)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.created_time is not None:
            oprot.writeFieldBegin('created_time', TType.STRING, 4)
            oprot.writeString(self.created_time.encode('utf-8') if sys.version_info[0] == 2 else self.created_time)
            oprot.writeFieldEnd()
        if self.updated_time is not None:
            oprot.writeFieldBegin('updated_time', TType.STRING, 5)
            oprot.writeString(self.updated_time.encode('utf-8') if sys.version_info[0] == 2 else self.updated_time)
            oprot.writeFieldEnd()
        if self.boot_disk is not None:
            oprot.writeFieldBegin('boot_disk', TType.STRING, 6)
            oprot.writeString(self.boot_disk.encode('utf-8') if sys.version_info[0] == 2 else self.boot_disk)
            oprot.writeFieldEnd()
        if self.histories is not None:
            oprot.writeFieldBegin('histories', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.histories))
            for iter803 in self.histories:
                iter803.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.is_error is not None:
            oprot.writeFieldBegin('is_error', TType.BOOL, 8)
            oprot.writeBool(self.is_error)
            oprot.writeFieldEnd()
        if self.is_windows_update is not None:
            oprot.writeFieldBegin('is_windows_update', TType.BOOL, 9)
            oprot.writeBool(self.is_windows_update)
            oprot.writeFieldEnd()
        if self.platform is not None:
            oprot.writeFieldBegin('platform', TType.STRING, 10)
            oprot.writeString(self.platform.encode('utf-8') if sys.version_info[0] == 2 else self.platform)
            oprot.writeFieldEnd()
        if self.architecture is not None:
            oprot.writeFieldBegin('architecture', TType.STRING, 11)
            oprot.writeString(self.architecture.encode('utf-8') if sys.version_info[0] == 2 else self.architecture)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 12)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        if self.progress is not None:
            oprot.writeFieldBegin('progress', TType.I64, 13)
            oprot.writeI64(self.progress)
            oprot.writeFieldEnd()
        if self.vhd_size is not None:
            oprot.writeFieldBegin('vhd_size', TType.I64, 14)
            oprot.writeI64(self.vhd_size)
            oprot.writeFieldEnd()
        if self.upload_id is not None:
            oprot.writeFieldBegin('upload_id', TType.STRING, 15)
            oprot.writeString(self.upload_id.encode('utf-8') if sys.version_info[0] == 2 else self.upload_id)
            oprot.writeFieldEnd()
        if self.host_name is not None:
            oprot.writeFieldBegin('host_name', TType.STRING, 16)
            oprot.writeString(self.host_name.encode('utf-8') if sys.version_info[0] == 2 else self.host_name)
            oprot.writeFieldEnd()
        if self.vhd_upload_progress is not None:
            oprot.writeFieldBegin('vhd_upload_progress', TType.MAP, 17)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.vhd_upload_progress))
            for kiter804, viter805 in self.vhd_upload_progress.items():
                oprot.writeString(kiter804.encode('utf-8') if sys.version_info[0] == 2 else kiter804)
                viter805.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class job_detail(object):
    """
    Attributes:
     - scheduler
     - launcher
     - loader
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'scheduler', (replica_job_detail, replica_job_detail.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'launcher', (launcher_job_detail, launcher_job_detail.thrift_spec), None, ),  # 2
        (3, TType.STRUCT, 'loader', (loader_job_detail, loader_job_detail.thrift_spec), None, ),  # 3
    )

    def __init__(self, scheduler=None, launcher=None, loader=None,):
        self.scheduler = scheduler
        self.launcher = launcher
        self.loader = loader

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.scheduler = replica_job_detail()
                    self.scheduler.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.launcher = launcher_job_detail()
                    self.launcher.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.loader = loader_job_detail()
                    self.loader.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('job_detail')
        if self.scheduler is not None:
            oprot.writeFieldBegin('scheduler', TType.STRUCT, 1)
            self.scheduler.write(oprot)
            oprot.writeFieldEnd()
        if self.launcher is not None:
            oprot.writeFieldBegin('launcher', TType.STRUCT, 2)
            self.launcher.write(oprot)
            oprot.writeFieldEnd()
        if self.loader is not None:
            oprot.writeFieldBegin('loader', TType.STRUCT, 3)
            self.loader.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class replica_job_create_detail(object):
    """
    Attributes:
     - host
     - addr
     - username
     - password
     - type
     - virtual_machine_id
     - disks
     - targets
     - carriers
     - full_replicas
     - disk_ids
     - cbt_info
     - snapshot_info
     - checksum_verify
     - always_retry
     - timeout
     - is_encrypted
     - is_paused
     - worker_thread_number
     - block_mode_enable
     - file_system_filter_enable
     - min_transport_size
     - full_min_transport_size
     - is_full_replica
     - buffer_size
     - is_compressed
     - is_checksum
     - time
     - priority_carrier
     - is_only_single_system_disk
     - is_continuous_data_replication
     - pre_snapshot_script
     - post_snapshot_script
     - is_compressed_by_packer
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'host', 'UTF8', "", ),  # 1
        (2, TType.SET, 'addr', (TType.STRING, 'UTF8', False), None, ),  # 2
        (3, TType.STRING, 'username', 'UTF8', "", ),  # 3
        (4, TType.STRING, 'password', 'UTF8', "", ),  # 4
        (5, TType.I32, 'type', None, None, ),  # 5
        (6, TType.STRING, 'virtual_machine_id', 'UTF8', "", ),  # 6
        (7, TType.SET, 'disks', (TType.STRING, 'UTF8', False), None, ),  # 7
        (8, TType.MAP, 'targets', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 8
        (9, TType.MAP, 'carriers', (TType.STRING, 'UTF8', TType.SET, (TType.STRING, 'UTF8', False), False), None, ),  # 9
        (10, TType.SET, 'full_replicas', (TType.STRING, 'UTF8', False), None, ),  # 10
        (11, TType.MAP, 'disk_ids', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 11
        (12, TType.STRING, 'cbt_info', 'UTF8', "", ),  # 12
        (13, TType.STRING, 'snapshot_info', 'UTF8', "", ),  # 13
        (14, TType.BOOL, 'checksum_verify', None, True, ),  # 14
        (15, TType.BOOL, 'always_retry', None, False, ),  # 15
        (16, TType.I32, 'timeout', None, 300, ),  # 16
        (17, TType.BOOL, 'is_encrypted', None, False, ),  # 17
        (18, TType.BOOL, 'is_paused', None, False, ),  # 18
        (19, TType.I32, 'worker_thread_number', None, 0, ),  # 19
        (20, TType.BOOL, 'block_mode_enable', None, False, ),  # 20
        (21, TType.BOOL, 'file_system_filter_enable', None, True, ),  # 21
        (22, TType.I32, 'min_transport_size', None, 0, ),  # 22
        (23, TType.I32, 'full_min_transport_size', None, 0, ),  # 23
        (24, TType.BOOL, 'is_full_replica', None, False, ),  # 24
        (25, TType.I32, 'buffer_size', None, 0, ),  # 25
        (26, TType.BOOL, 'is_compressed', None, True, ),  # 26
        (27, TType.BOOL, 'is_checksum', None, False, ),  # 27
        (28, TType.STRING, 'time', 'UTF8', "", ),  # 28
        (29, TType.MAP, 'priority_carrier', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 29
        (30, TType.BOOL, 'is_only_single_system_disk', None, False, ),  # 30
        (31, TType.BOOL, 'is_continuous_data_replication', None, False, ),  # 31
        (32, TType.STRING, 'pre_snapshot_script', 'UTF8', None, ),  # 32
        (33, TType.STRING, 'post_snapshot_script', 'UTF8', None, ),  # 33
        (34, TType.BOOL, 'is_compressed_by_packer', None, False, ),  # 34
    )

    def __init__(self, host=thrift_spec[1][4], addr=None, username=thrift_spec[3][4], password=thrift_spec[4][4], type=None, virtual_machine_id=thrift_spec[6][4], disks=None, targets=None, carriers=None, full_replicas=None, disk_ids=None, cbt_info=thrift_spec[12][4], snapshot_info=thrift_spec[13][4], checksum_verify=thrift_spec[14][4], always_retry=thrift_spec[15][4], timeout=thrift_spec[16][4], is_encrypted=thrift_spec[17][4], is_paused=thrift_spec[18][4], worker_thread_number=thrift_spec[19][4], block_mode_enable=thrift_spec[20][4], file_system_filter_enable=thrift_spec[21][4], min_transport_size=thrift_spec[22][4], full_min_transport_size=thrift_spec[23][4], is_full_replica=thrift_spec[24][4], buffer_size=thrift_spec[25][4], is_compressed=thrift_spec[26][4], is_checksum=thrift_spec[27][4], time=thrift_spec[28][4], priority_carrier=None, is_only_single_system_disk=thrift_spec[30][4], is_continuous_data_replication=thrift_spec[31][4], pre_snapshot_script=None, post_snapshot_script=None, is_compressed_by_packer=thrift_spec[34][4],):
        self.host = host
        self.addr = addr
        self.username = username
        self.password = password
        self.type = type
        self.virtual_machine_id = virtual_machine_id
        self.disks = disks
        self.targets = targets
        self.carriers = carriers
        self.full_replicas = full_replicas
        self.disk_ids = disk_ids
        self.cbt_info = cbt_info
        self.snapshot_info = snapshot_info
        self.checksum_verify = checksum_verify
        self.always_retry = always_retry
        self.timeout = timeout
        self.is_encrypted = is_encrypted
        self.is_paused = is_paused
        self.worker_thread_number = worker_thread_number
        self.block_mode_enable = block_mode_enable
        self.file_system_filter_enable = file_system_filter_enable
        self.min_transport_size = min_transport_size
        self.full_min_transport_size = full_min_transport_size
        self.is_full_replica = is_full_replica
        self.buffer_size = buffer_size
        self.is_compressed = is_compressed
        self.is_checksum = is_checksum
        self.time = time
        self.priority_carrier = priority_carrier
        self.is_only_single_system_disk = is_only_single_system_disk
        self.is_continuous_data_replication = is_continuous_data_replication
        self.pre_snapshot_script = pre_snapshot_script
        self.post_snapshot_script = post_snapshot_script
        self.is_compressed_by_packer = is_compressed_by_packer

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.host = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.SET:
                    self.addr = set()
                    (_etype809, _size806) = iprot.readSetBegin()
                    for _i810 in range(_size806):
                        _elem811 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.addr.add(_elem811)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.virtual_machine_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.SET:
                    self.disks = set()
                    (_etype815, _size812) = iprot.readSetBegin()
                    for _i816 in range(_size812):
                        _elem817 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.disks.add(_elem817)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.MAP:
                    self.targets = {}
                    (_ktype819, _vtype820, _size818) = iprot.readMapBegin()
                    for _i822 in range(_size818):
                        _key823 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val824 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.targets[_key823] = _val824
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.MAP:
                    self.carriers = {}
                    (_ktype826, _vtype827, _size825) = iprot.readMapBegin()
                    for _i829 in range(_size825):
                        _key830 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val831 = set()
                        (_etype835, _size832) = iprot.readSetBegin()
                        for _i836 in range(_size832):
                            _elem837 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val831.add(_elem837)
                        iprot.readSetEnd()
                        self.carriers[_key830] = _val831
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.SET:
                    self.full_replicas = set()
                    (_etype841, _size838) = iprot.readSetBegin()
                    for _i842 in range(_size838):
                        _elem843 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.full_replicas.add(_elem843)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.MAP:
                    self.disk_ids = {}
                    (_ktype845, _vtype846, _size844) = iprot.readMapBegin()
                    for _i848 in range(_size844):
                        _key849 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val850 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.disk_ids[_key849] = _val850
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.cbt_info = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.snapshot_info = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BOOL:
                    self.checksum_verify = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.BOOL:
                    self.always_retry = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.timeout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.BOOL:
                    self.is_encrypted = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.BOOL:
                    self.is_paused = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I32:
                    self.worker_thread_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.BOOL:
                    self.block_mode_enable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.BOOL:
                    self.file_system_filter_enable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.min_transport_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.I32:
                    self.full_min_transport_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.BOOL:
                    self.is_full_replica = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.I32:
                    self.buffer_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.BOOL:
                    self.is_compressed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.BOOL:
                    self.is_checksum = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.STRING:
                    self.time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.MAP:
                    self.priority_carrier = {}
                    (_ktype852, _vtype853, _size851) = iprot.readMapBegin()
                    for _i855 in range(_size851):
                        _key856 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val857 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.priority_carrier[_key856] = _val857
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.BOOL:
                    self.is_only_single_system_disk = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.BOOL:
                    self.is_continuous_data_replication = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.STRING:
                    self.pre_snapshot_script = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRING:
                    self.post_snapshot_script = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.BOOL:
                    self.is_compressed_by_packer = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('replica_job_create_detail')
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 1)
            oprot.writeString(self.host.encode('utf-8') if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.SET, 2)
            oprot.writeSetBegin(TType.STRING, len(self.addr))
            for iter858 in self.addr:
                oprot.writeString(iter858.encode('utf-8') if sys.version_info[0] == 2 else iter858)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 3)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 4)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 5)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.virtual_machine_id is not None:
            oprot.writeFieldBegin('virtual_machine_id', TType.STRING, 6)
            oprot.writeString(self.virtual_machine_id.encode('utf-8') if sys.version_info[0] == 2 else self.virtual_machine_id)
            oprot.writeFieldEnd()
        if self.disks is not None:
            oprot.writeFieldBegin('disks', TType.SET, 7)
            oprot.writeSetBegin(TType.STRING, len(self.disks))
            for iter859 in self.disks:
                oprot.writeString(iter859.encode('utf-8') if sys.version_info[0] == 2 else iter859)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.targets is not None:
            oprot.writeFieldBegin('targets', TType.MAP, 8)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.targets))
            for kiter860, viter861 in self.targets.items():
                oprot.writeString(kiter860.encode('utf-8') if sys.version_info[0] == 2 else kiter860)
                oprot.writeString(viter861.encode('utf-8') if sys.version_info[0] == 2 else viter861)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.carriers is not None:
            oprot.writeFieldBegin('carriers', TType.MAP, 9)
            oprot.writeMapBegin(TType.STRING, TType.SET, len(self.carriers))
            for kiter862, viter863 in self.carriers.items():
                oprot.writeString(kiter862.encode('utf-8') if sys.version_info[0] == 2 else kiter862)
                oprot.writeSetBegin(TType.STRING, len(viter863))
                for iter864 in viter863:
                    oprot.writeString(iter864.encode('utf-8') if sys.version_info[0] == 2 else iter864)
                oprot.writeSetEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.full_replicas is not None:
            oprot.writeFieldBegin('full_replicas', TType.SET, 10)
            oprot.writeSetBegin(TType.STRING, len(self.full_replicas))
            for iter865 in self.full_replicas:
                oprot.writeString(iter865.encode('utf-8') if sys.version_info[0] == 2 else iter865)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.disk_ids is not None:
            oprot.writeFieldBegin('disk_ids', TType.MAP, 11)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.disk_ids))
            for kiter866, viter867 in self.disk_ids.items():
                oprot.writeString(kiter866.encode('utf-8') if sys.version_info[0] == 2 else kiter866)
                oprot.writeString(viter867.encode('utf-8') if sys.version_info[0] == 2 else viter867)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.cbt_info is not None:
            oprot.writeFieldBegin('cbt_info', TType.STRING, 12)
            oprot.writeString(self.cbt_info.encode('utf-8') if sys.version_info[0] == 2 else self.cbt_info)
            oprot.writeFieldEnd()
        if self.snapshot_info is not None:
            oprot.writeFieldBegin('snapshot_info', TType.STRING, 13)
            oprot.writeString(self.snapshot_info.encode('utf-8') if sys.version_info[0] == 2 else self.snapshot_info)
            oprot.writeFieldEnd()
        if self.checksum_verify is not None:
            oprot.writeFieldBegin('checksum_verify', TType.BOOL, 14)
            oprot.writeBool(self.checksum_verify)
            oprot.writeFieldEnd()
        if self.always_retry is not None:
            oprot.writeFieldBegin('always_retry', TType.BOOL, 15)
            oprot.writeBool(self.always_retry)
            oprot.writeFieldEnd()
        if self.timeout is not None:
            oprot.writeFieldBegin('timeout', TType.I32, 16)
            oprot.writeI32(self.timeout)
            oprot.writeFieldEnd()
        if self.is_encrypted is not None:
            oprot.writeFieldBegin('is_encrypted', TType.BOOL, 17)
            oprot.writeBool(self.is_encrypted)
            oprot.writeFieldEnd()
        if self.is_paused is not None:
            oprot.writeFieldBegin('is_paused', TType.BOOL, 18)
            oprot.writeBool(self.is_paused)
            oprot.writeFieldEnd()
        if self.worker_thread_number is not None:
            oprot.writeFieldBegin('worker_thread_number', TType.I32, 19)
            oprot.writeI32(self.worker_thread_number)
            oprot.writeFieldEnd()
        if self.block_mode_enable is not None:
            oprot.writeFieldBegin('block_mode_enable', TType.BOOL, 20)
            oprot.writeBool(self.block_mode_enable)
            oprot.writeFieldEnd()
        if self.file_system_filter_enable is not None:
            oprot.writeFieldBegin('file_system_filter_enable', TType.BOOL, 21)
            oprot.writeBool(self.file_system_filter_enable)
            oprot.writeFieldEnd()
        if self.min_transport_size is not None:
            oprot.writeFieldBegin('min_transport_size', TType.I32, 22)
            oprot.writeI32(self.min_transport_size)
            oprot.writeFieldEnd()
        if self.full_min_transport_size is not None:
            oprot.writeFieldBegin('full_min_transport_size', TType.I32, 23)
            oprot.writeI32(self.full_min_transport_size)
            oprot.writeFieldEnd()
        if self.is_full_replica is not None:
            oprot.writeFieldBegin('is_full_replica', TType.BOOL, 24)
            oprot.writeBool(self.is_full_replica)
            oprot.writeFieldEnd()
        if self.buffer_size is not None:
            oprot.writeFieldBegin('buffer_size', TType.I32, 25)
            oprot.writeI32(self.buffer_size)
            oprot.writeFieldEnd()
        if self.is_compressed is not None:
            oprot.writeFieldBegin('is_compressed', TType.BOOL, 26)
            oprot.writeBool(self.is_compressed)
            oprot.writeFieldEnd()
        if self.is_checksum is not None:
            oprot.writeFieldBegin('is_checksum', TType.BOOL, 27)
            oprot.writeBool(self.is_checksum)
            oprot.writeFieldEnd()
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.STRING, 28)
            oprot.writeString(self.time.encode('utf-8') if sys.version_info[0] == 2 else self.time)
            oprot.writeFieldEnd()
        if self.priority_carrier is not None:
            oprot.writeFieldBegin('priority_carrier', TType.MAP, 29)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.priority_carrier))
            for kiter868, viter869 in self.priority_carrier.items():
                oprot.writeString(kiter868.encode('utf-8') if sys.version_info[0] == 2 else kiter868)
                oprot.writeString(viter869.encode('utf-8') if sys.version_info[0] == 2 else viter869)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.is_only_single_system_disk is not None:
            oprot.writeFieldBegin('is_only_single_system_disk', TType.BOOL, 30)
            oprot.writeBool(self.is_only_single_system_disk)
            oprot.writeFieldEnd()
        if self.is_continuous_data_replication is not None:
            oprot.writeFieldBegin('is_continuous_data_replication', TType.BOOL, 31)
            oprot.writeBool(self.is_continuous_data_replication)
            oprot.writeFieldEnd()
        if self.pre_snapshot_script is not None:
            oprot.writeFieldBegin('pre_snapshot_script', TType.STRING, 32)
            oprot.writeString(self.pre_snapshot_script.encode('utf-8') if sys.version_info[0] == 2 else self.pre_snapshot_script)
            oprot.writeFieldEnd()
        if self.post_snapshot_script is not None:
            oprot.writeFieldBegin('post_snapshot_script', TType.STRING, 33)
            oprot.writeString(self.post_snapshot_script.encode('utf-8') if sys.version_info[0] == 2 else self.post_snapshot_script)
            oprot.writeFieldEnd()
        if self.is_compressed_by_packer is not None:
            oprot.writeFieldBegin('is_compressed_by_packer', TType.BOOL, 34)
            oprot.writeBool(self.is_compressed_by_packer)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class aliyun_options(object):
    """
    Attributes:
     - access_key
     - secret_key
     - objectname
     - bucketname
     - region
     - max_size
     - file_system_filter_enable
     - number_of_upload_threads
     - disks_object_name_mapping
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'access_key', 'UTF8', "", ),  # 1
        (2, TType.STRING, 'secret_key', 'UTF8', "", ),  # 2
        (3, TType.STRING, 'objectname', 'UTF8', "", ),  # 3
        (4, TType.STRING, 'bucketname', 'UTF8', "", ),  # 4
        (5, TType.STRING, 'region', 'UTF8', "", ),  # 5
        (6, TType.I32, 'max_size', None, 500, ),  # 6
        (7, TType.BOOL, 'file_system_filter_enable', None, True, ),  # 7
        (8, TType.I16, 'number_of_upload_threads', None, 0, ),  # 8
        (9, TType.MAP, 'disks_object_name_mapping', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 9
    )

    def __init__(self, access_key=thrift_spec[1][4], secret_key=thrift_spec[2][4], objectname=thrift_spec[3][4], bucketname=thrift_spec[4][4], region=thrift_spec[5][4], max_size=thrift_spec[6][4], file_system_filter_enable=thrift_spec[7][4], number_of_upload_threads=thrift_spec[8][4], disks_object_name_mapping=None,):
        self.access_key = access_key
        self.secret_key = secret_key
        self.objectname = objectname
        self.bucketname = bucketname
        self.region = region
        self.max_size = max_size
        self.file_system_filter_enable = file_system_filter_enable
        self.number_of_upload_threads = number_of_upload_threads
        self.disks_object_name_mapping = disks_object_name_mapping

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.access_key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.secret_key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.objectname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.bucketname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.region = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.max_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.file_system_filter_enable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I16:
                    self.number_of_upload_threads = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.MAP:
                    self.disks_object_name_mapping = {}
                    (_ktype871, _vtype872, _size870) = iprot.readMapBegin()
                    for _i874 in range(_size870):
                        _key875 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val876 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.disks_object_name_mapping[_key875] = _val876
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('aliyun_options')
        if self.access_key is not None:
            oprot.writeFieldBegin('access_key', TType.STRING, 1)
            oprot.writeString(self.access_key.encode('utf-8') if sys.version_info[0] == 2 else self.access_key)
            oprot.writeFieldEnd()
        if self.secret_key is not None:
            oprot.writeFieldBegin('secret_key', TType.STRING, 2)
            oprot.writeString(self.secret_key.encode('utf-8') if sys.version_info[0] == 2 else self.secret_key)
            oprot.writeFieldEnd()
        if self.objectname is not None:
            oprot.writeFieldBegin('objectname', TType.STRING, 3)
            oprot.writeString(self.objectname.encode('utf-8') if sys.version_info[0] == 2 else self.objectname)
            oprot.writeFieldEnd()
        if self.bucketname is not None:
            oprot.writeFieldBegin('bucketname', TType.STRING, 4)
            oprot.writeString(self.bucketname.encode('utf-8') if sys.version_info[0] == 2 else self.bucketname)
            oprot.writeFieldEnd()
        if self.region is not None:
            oprot.writeFieldBegin('region', TType.STRING, 5)
            oprot.writeString(self.region.encode('utf-8') if sys.version_info[0] == 2 else self.region)
            oprot.writeFieldEnd()
        if self.max_size is not None:
            oprot.writeFieldBegin('max_size', TType.I32, 6)
            oprot.writeI32(self.max_size)
            oprot.writeFieldEnd()
        if self.file_system_filter_enable is not None:
            oprot.writeFieldBegin('file_system_filter_enable', TType.BOOL, 7)
            oprot.writeBool(self.file_system_filter_enable)
            oprot.writeFieldEnd()
        if self.number_of_upload_threads is not None:
            oprot.writeFieldBegin('number_of_upload_threads', TType.I16, 8)
            oprot.writeI16(self.number_of_upload_threads)
            oprot.writeFieldEnd()
        if self.disks_object_name_mapping is not None:
            oprot.writeFieldBegin('disks_object_name_mapping', TType.MAP, 9)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.disks_object_name_mapping))
            for kiter877, viter878 in self.disks_object_name_mapping.items():
                oprot.writeString(kiter877.encode('utf-8') if sys.version_info[0] == 2 else kiter877)
                oprot.writeString(viter878.encode('utf-8') if sys.version_info[0] == 2 else viter878)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class tencent_options(object):
    """
    Attributes:
     - access_key
     - secret_key
     - objectname
     - bucketname
     - region
     - max_size
     - file_system_filter_enable
     - number_of_upload_threads
     - disks_object_name_mapping
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'access_key', 'UTF8', "", ),  # 1
        (2, TType.STRING, 'secret_key', 'UTF8', "", ),  # 2
        (3, TType.STRING, 'objectname', 'UTF8', "", ),  # 3
        (4, TType.STRING, 'bucketname', 'UTF8', "", ),  # 4
        (5, TType.STRING, 'region', 'UTF8', "", ),  # 5
        (6, TType.I32, 'max_size', None, 500, ),  # 6
        (7, TType.BOOL, 'file_system_filter_enable', None, True, ),  # 7
        (8, TType.I16, 'number_of_upload_threads', None, 0, ),  # 8
        (9, TType.MAP, 'disks_object_name_mapping', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 9
    )

    def __init__(self, access_key=thrift_spec[1][4], secret_key=thrift_spec[2][4], objectname=thrift_spec[3][4], bucketname=thrift_spec[4][4], region=thrift_spec[5][4], max_size=thrift_spec[6][4], file_system_filter_enable=thrift_spec[7][4], number_of_upload_threads=thrift_spec[8][4], disks_object_name_mapping=None,):
        self.access_key = access_key
        self.secret_key = secret_key
        self.objectname = objectname
        self.bucketname = bucketname
        self.region = region
        self.max_size = max_size
        self.file_system_filter_enable = file_system_filter_enable
        self.number_of_upload_threads = number_of_upload_threads
        self.disks_object_name_mapping = disks_object_name_mapping

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.access_key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.secret_key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.objectname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.bucketname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.region = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.max_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.file_system_filter_enable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I16:
                    self.number_of_upload_threads = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.MAP:
                    self.disks_object_name_mapping = {}
                    (_ktype880, _vtype881, _size879) = iprot.readMapBegin()
                    for _i883 in range(_size879):
                        _key884 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val885 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.disks_object_name_mapping[_key884] = _val885
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('tencent_options')
        if self.access_key is not None:
            oprot.writeFieldBegin('access_key', TType.STRING, 1)
            oprot.writeString(self.access_key.encode('utf-8') if sys.version_info[0] == 2 else self.access_key)
            oprot.writeFieldEnd()
        if self.secret_key is not None:
            oprot.writeFieldBegin('secret_key', TType.STRING, 2)
            oprot.writeString(self.secret_key.encode('utf-8') if sys.version_info[0] == 2 else self.secret_key)
            oprot.writeFieldEnd()
        if self.objectname is not None:
            oprot.writeFieldBegin('objectname', TType.STRING, 3)
            oprot.writeString(self.objectname.encode('utf-8') if sys.version_info[0] == 2 else self.objectname)
            oprot.writeFieldEnd()
        if self.bucketname is not None:
            oprot.writeFieldBegin('bucketname', TType.STRING, 4)
            oprot.writeString(self.bucketname.encode('utf-8') if sys.version_info[0] == 2 else self.bucketname)
            oprot.writeFieldEnd()
        if self.region is not None:
            oprot.writeFieldBegin('region', TType.STRING, 5)
            oprot.writeString(self.region.encode('utf-8') if sys.version_info[0] == 2 else self.region)
            oprot.writeFieldEnd()
        if self.max_size is not None:
            oprot.writeFieldBegin('max_size', TType.I32, 6)
            oprot.writeI32(self.max_size)
            oprot.writeFieldEnd()
        if self.file_system_filter_enable is not None:
            oprot.writeFieldBegin('file_system_filter_enable', TType.BOOL, 7)
            oprot.writeBool(self.file_system_filter_enable)
            oprot.writeFieldEnd()
        if self.number_of_upload_threads is not None:
            oprot.writeFieldBegin('number_of_upload_threads', TType.I16, 8)
            oprot.writeI16(self.number_of_upload_threads)
            oprot.writeFieldEnd()
        if self.disks_object_name_mapping is not None:
            oprot.writeFieldBegin('disks_object_name_mapping', TType.MAP, 9)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.disks_object_name_mapping))
            for kiter886, viter887 in self.disks_object_name_mapping.items():
                oprot.writeString(kiter886.encode('utf-8') if sys.version_info[0] == 2 else kiter886)
                oprot.writeString(viter887.encode('utf-8') if sys.version_info[0] == 2 else viter887)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class extra_options(object):
    """
    Attributes:
     - aliyun
     - tencent
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'aliyun', (aliyun_options, aliyun_options.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'tencent', (tencent_options, tencent_options.thrift_spec), None, ),  # 2
    )

    def __init__(self, aliyun=None, tencent=None,):
        self.aliyun = aliyun
        self.tencent = tencent

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.aliyun = aliyun_options()
                    self.aliyun.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.tencent = tencent_options()
                    self.tencent.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('extra_options')
        if self.aliyun is not None:
            oprot.writeFieldBegin('aliyun', TType.STRUCT, 1)
            self.aliyun.write(oprot)
            oprot.writeFieldEnd()
        if self.tencent is not None:
            oprot.writeFieldBegin('tencent', TType.STRUCT, 2)
            self.tencent.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class vhd_snapshot(object):
    """
    Attributes:
     - id
     - datetime
     - name
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'id', 'UTF8', "", ),  # 1
        (2, TType.STRING, 'datetime', 'UTF8', "", ),  # 2
        (3, TType.STRING, 'name', 'UTF8', "", ),  # 3
    )

    def __init__(self, id=thrift_spec[1][4], datetime=thrift_spec[2][4], name=thrift_spec[3][4],):
        self.id = id
        self.datetime = datetime
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.datetime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('vhd_snapshot')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.datetime is not None:
            oprot.writeFieldBegin('datetime', TType.STRING, 2)
            oprot.writeString(self.datetime.encode('utf-8') if sys.version_info[0] == 2 else self.datetime)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class loader_job_create_detail(object):
    """
    Attributes:
     - replica_id
     - disks_lun_mapping
     - snapshots
     - disks_snapshot_mapping
     - connection_id
     - block_mode_enable
     - purge_data
     - remap
     - detect_type
     - worker_thread_number
     - host_name
     - export_disk_type
     - export_path
     - disks_size_mapping
     - keep_alive
     - time
     - is_continuous_data_replication
     - azure_storage_connection_string
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'replica_id', 'UTF8', "", ),  # 1
        (2, TType.MAP, 'disks_lun_mapping', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
        (3, TType.LIST, 'snapshots', (TType.STRING, 'UTF8', False), None, ),  # 3
        (4, TType.MAP, 'disks_snapshot_mapping', (TType.STRING, 'UTF8', TType.MAP, (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), False), None, ),  # 4
        (5, TType.STRING, 'connection_id', 'UTF8', None, ),  # 5
        (6, TType.BOOL, 'block_mode_enable', None, False, ),  # 6
        (7, TType.BOOL, 'purge_data', None, True, ),  # 7
        (8, TType.BOOL, 'remap', None, False, ),  # 8
        (9, TType.I32, 'detect_type', None, 0, ),  # 9
        (10, TType.I32, 'worker_thread_number', None, 0, ),  # 10
        (11, TType.STRING, 'host_name', 'UTF8', "", ),  # 11
        (12, TType.I32, 'export_disk_type', None, 0, ),  # 12
        (13, TType.STRING, 'export_path', 'UTF8', "", ),  # 13
        (14, TType.MAP, 'disks_size_mapping', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 14
        (15, TType.BOOL, 'keep_alive', None, True, ),  # 15
        (16, TType.STRING, 'time', 'UTF8', "", ),  # 16
        (17, TType.BOOL, 'is_continuous_data_replication', None, False, ),  # 17
        (18, TType.STRING, 'azure_storage_connection_string', 'UTF8', "", ),  # 18
    )

    def __init__(self, replica_id=thrift_spec[1][4], disks_lun_mapping=None, snapshots=None, disks_snapshot_mapping=None, connection_id=None, block_mode_enable=thrift_spec[6][4], purge_data=thrift_spec[7][4], remap=thrift_spec[8][4], detect_type=thrift_spec[9][4], worker_thread_number=thrift_spec[10][4], host_name=thrift_spec[11][4], export_disk_type=thrift_spec[12][4], export_path=thrift_spec[13][4], disks_size_mapping=None, keep_alive=thrift_spec[15][4], time=thrift_spec[16][4], is_continuous_data_replication=thrift_spec[17][4], azure_storage_connection_string=thrift_spec[18][4],):
        self.replica_id = replica_id
        self.disks_lun_mapping = disks_lun_mapping
        self.snapshots = snapshots
        self.disks_snapshot_mapping = disks_snapshot_mapping
        self.connection_id = connection_id
        self.block_mode_enable = block_mode_enable
        self.purge_data = purge_data
        self.remap = remap
        self.detect_type = detect_type
        self.worker_thread_number = worker_thread_number
        self.host_name = host_name
        self.export_disk_type = export_disk_type
        self.export_path = export_path
        self.disks_size_mapping = disks_size_mapping
        self.keep_alive = keep_alive
        self.time = time
        self.is_continuous_data_replication = is_continuous_data_replication
        self.azure_storage_connection_string = azure_storage_connection_string

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.replica_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.disks_lun_mapping = {}
                    (_ktype889, _vtype890, _size888) = iprot.readMapBegin()
                    for _i892 in range(_size888):
                        _key893 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val894 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.disks_lun_mapping[_key893] = _val894
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.snapshots = []
                    (_etype898, _size895) = iprot.readListBegin()
                    for _i899 in range(_size895):
                        _elem900 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.snapshots.append(_elem900)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.disks_snapshot_mapping = {}
                    (_ktype902, _vtype903, _size901) = iprot.readMapBegin()
                    for _i905 in range(_size901):
                        _key906 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val907 = {}
                        (_ktype909, _vtype910, _size908) = iprot.readMapBegin()
                        for _i912 in range(_size908):
                            _key913 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val914 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val907[_key913] = _val914
                        iprot.readMapEnd()
                        self.disks_snapshot_mapping[_key906] = _val907
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.connection_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.block_mode_enable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.purge_data = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.remap = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.detect_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.worker_thread_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.host_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.export_disk_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.export_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.MAP:
                    self.disks_size_mapping = {}
                    (_ktype916, _vtype917, _size915) = iprot.readMapBegin()
                    for _i919 in range(_size915):
                        _key920 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val921 = iprot.readI64()
                        self.disks_size_mapping[_key920] = _val921
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.BOOL:
                    self.keep_alive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.BOOL:
                    self.is_continuous_data_replication = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.azure_storage_connection_string = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('loader_job_create_detail')
        if self.replica_id is not None:
            oprot.writeFieldBegin('replica_id', TType.STRING, 1)
            oprot.writeString(self.replica_id.encode('utf-8') if sys.version_info[0] == 2 else self.replica_id)
            oprot.writeFieldEnd()
        if self.disks_lun_mapping is not None:
            oprot.writeFieldBegin('disks_lun_mapping', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.disks_lun_mapping))
            for kiter922, viter923 in self.disks_lun_mapping.items():
                oprot.writeString(kiter922.encode('utf-8') if sys.version_info[0] == 2 else kiter922)
                oprot.writeString(viter923.encode('utf-8') if sys.version_info[0] == 2 else viter923)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.snapshots is not None:
            oprot.writeFieldBegin('snapshots', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.snapshots))
            for iter924 in self.snapshots:
                oprot.writeString(iter924.encode('utf-8') if sys.version_info[0] == 2 else iter924)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.disks_snapshot_mapping is not None:
            oprot.writeFieldBegin('disks_snapshot_mapping', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.disks_snapshot_mapping))
            for kiter925, viter926 in self.disks_snapshot_mapping.items():
                oprot.writeString(kiter925.encode('utf-8') if sys.version_info[0] == 2 else kiter925)
                oprot.writeMapBegin(TType.STRING, TType.STRING, len(viter926))
                for kiter927, viter928 in viter926.items():
                    oprot.writeString(kiter927.encode('utf-8') if sys.version_info[0] == 2 else kiter927)
                    oprot.writeString(viter928.encode('utf-8') if sys.version_info[0] == 2 else viter928)
                oprot.writeMapEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.connection_id is not None:
            oprot.writeFieldBegin('connection_id', TType.STRING, 5)
            oprot.writeString(self.connection_id.encode('utf-8') if sys.version_info[0] == 2 else self.connection_id)
            oprot.writeFieldEnd()
        if self.block_mode_enable is not None:
            oprot.writeFieldBegin('block_mode_enable', TType.BOOL, 6)
            oprot.writeBool(self.block_mode_enable)
            oprot.writeFieldEnd()
        if self.purge_data is not None:
            oprot.writeFieldBegin('purge_data', TType.BOOL, 7)
            oprot.writeBool(self.purge_data)
            oprot.writeFieldEnd()
        if self.remap is not None:
            oprot.writeFieldBegin('remap', TType.BOOL, 8)
            oprot.writeBool(self.remap)
            oprot.writeFieldEnd()
        if self.detect_type is not None:
            oprot.writeFieldBegin('detect_type', TType.I32, 9)
            oprot.writeI32(self.detect_type)
            oprot.writeFieldEnd()
        if self.worker_thread_number is not None:
            oprot.writeFieldBegin('worker_thread_number', TType.I32, 10)
            oprot.writeI32(self.worker_thread_number)
            oprot.writeFieldEnd()
        if self.host_name is not None:
            oprot.writeFieldBegin('host_name', TType.STRING, 11)
            oprot.writeString(self.host_name.encode('utf-8') if sys.version_info[0] == 2 else self.host_name)
            oprot.writeFieldEnd()
        if self.export_disk_type is not None:
            oprot.writeFieldBegin('export_disk_type', TType.I32, 12)
            oprot.writeI32(self.export_disk_type)
            oprot.writeFieldEnd()
        if self.export_path is not None:
            oprot.writeFieldBegin('export_path', TType.STRING, 13)
            oprot.writeString(self.export_path.encode('utf-8') if sys.version_info[0] == 2 else self.export_path)
            oprot.writeFieldEnd()
        if self.disks_size_mapping is not None:
            oprot.writeFieldBegin('disks_size_mapping', TType.MAP, 14)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.disks_size_mapping))
            for kiter929, viter930 in self.disks_size_mapping.items():
                oprot.writeString(kiter929.encode('utf-8') if sys.version_info[0] == 2 else kiter929)
                oprot.writeI64(viter930)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.keep_alive is not None:
            oprot.writeFieldBegin('keep_alive', TType.BOOL, 15)
            oprot.writeBool(self.keep_alive)
            oprot.writeFieldEnd()
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.STRING, 16)
            oprot.writeString(self.time.encode('utf-8') if sys.version_info[0] == 2 else self.time)
            oprot.writeFieldEnd()
        if self.is_continuous_data_replication is not None:
            oprot.writeFieldBegin('is_continuous_data_replication', TType.BOOL, 17)
            oprot.writeBool(self.is_continuous_data_replication)
            oprot.writeFieldEnd()
        if self.azure_storage_connection_string is not None:
            oprot.writeFieldBegin('azure_storage_connection_string', TType.STRING, 18)
            oprot.writeString(self.azure_storage_connection_string.encode('utf-8') if sys.version_info[0] == 2 else self.azure_storage_connection_string)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class launcher_job_create_detail(object):
    """
    Attributes:
     - replica_id
     - disks_lun_mapping
     - is_sysvol_authoritative_restore
     - is_enable_debug
     - is_disable_machine_password_change
     - is_force_normal_boot
     - network_infos
     - config
     - gpt_to_mbr
     - detect_type
     - skip_system_injection
     - reboot_winpe
     - callbacks
     - callback_timeout
     - host_name
     - export_disk_type
     - export_path
     - target_type
     - os_type
     - is_update_ex
     - options_type
     - options
     - pre_scripts
     - post_scripts
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'replica_id', 'UTF8', "", ),  # 1
        (2, TType.MAP, 'disks_lun_mapping', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
        (3, TType.BOOL, 'is_sysvol_authoritative_restore', None, False, ),  # 3
        (4, TType.BOOL, 'is_enable_debug', None, False, ),  # 4
        (5, TType.BOOL, 'is_disable_machine_password_change', None, False, ),  # 5
        (6, TType.BOOL, 'is_force_normal_boot', None, False, ),  # 6
        (7, TType.SET, 'network_infos', (TType.STRUCT, (network_info, network_info.thrift_spec), False), None, ),  # 7
        (8, TType.STRING, 'config', 'UTF8', None, ),  # 8
        (9, TType.BOOL, 'gpt_to_mbr', None, True, ),  # 9
        (10, TType.I32, 'detect_type', None, 0, ),  # 10
        (11, TType.BOOL, 'skip_system_injection', None, False, ),  # 11
        (12, TType.BOOL, 'reboot_winpe', None, False, ),  # 12
        (13, TType.SET, 'callbacks', (TType.STRING, 'UTF8', False), None, ),  # 13
        (14, TType.I32, 'callback_timeout', None, 30, ),  # 14
        (15, TType.STRING, 'host_name', 'UTF8', "", ),  # 15
        (16, TType.I32, 'export_disk_type', None, 0, ),  # 16
        (17, TType.STRING, 'export_path', 'UTF8', "", ),  # 17
        (18, TType.I32, 'target_type', None, -1, ),  # 18
        (19, TType.I32, 'os_type', None, 1, ),  # 19
        (20, TType.BOOL, 'is_update_ex', None, False, ),  # 20
        (21, TType.I32, 'options_type', None, 0, ),  # 21
        (22, TType.STRUCT, 'options', (extra_options, extra_options.thrift_spec), None, ),  # 22
        (23, TType.SET, 'pre_scripts', (TType.STRING, 'UTF8', False), None, ),  # 23
        (24, TType.SET, 'post_scripts', (TType.STRING, 'UTF8', False), None, ),  # 24
    )

    def __init__(self, replica_id=thrift_spec[1][4], disks_lun_mapping=None, is_sysvol_authoritative_restore=thrift_spec[3][4], is_enable_debug=thrift_spec[4][4], is_disable_machine_password_change=thrift_spec[5][4], is_force_normal_boot=thrift_spec[6][4], network_infos=None, config=None, gpt_to_mbr=thrift_spec[9][4], detect_type=thrift_spec[10][4], skip_system_injection=thrift_spec[11][4], reboot_winpe=thrift_spec[12][4], callbacks=None, callback_timeout=thrift_spec[14][4], host_name=thrift_spec[15][4], export_disk_type=thrift_spec[16][4], export_path=thrift_spec[17][4], target_type=thrift_spec[18][4], os_type=thrift_spec[19][4], is_update_ex=thrift_spec[20][4], options_type=thrift_spec[21][4], options=None, pre_scripts=None, post_scripts=None,):
        self.replica_id = replica_id
        self.disks_lun_mapping = disks_lun_mapping
        self.is_sysvol_authoritative_restore = is_sysvol_authoritative_restore
        self.is_enable_debug = is_enable_debug
        self.is_disable_machine_password_change = is_disable_machine_password_change
        self.is_force_normal_boot = is_force_normal_boot
        self.network_infos = network_infos
        self.config = config
        self.gpt_to_mbr = gpt_to_mbr
        self.detect_type = detect_type
        self.skip_system_injection = skip_system_injection
        self.reboot_winpe = reboot_winpe
        self.callbacks = callbacks
        self.callback_timeout = callback_timeout
        self.host_name = host_name
        self.export_disk_type = export_disk_type
        self.export_path = export_path
        self.target_type = target_type
        self.os_type = os_type
        self.is_update_ex = is_update_ex
        self.options_type = options_type
        self.options = options
        self.pre_scripts = pre_scripts
        self.post_scripts = post_scripts

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.replica_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.disks_lun_mapping = {}
                    (_ktype932, _vtype933, _size931) = iprot.readMapBegin()
                    for _i935 in range(_size931):
                        _key936 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val937 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.disks_lun_mapping[_key936] = _val937
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.is_sysvol_authoritative_restore = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.is_enable_debug = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.is_disable_machine_password_change = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.is_force_normal_boot = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.SET:
                    self.network_infos = set()
                    (_etype941, _size938) = iprot.readSetBegin()
                    for _i942 in range(_size938):
                        _elem943 = network_info()
                        _elem943.read(iprot)
                        self.network_infos.add(_elem943)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.config = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.gpt_to_mbr = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.detect_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.skip_system_injection = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.reboot_winpe = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.SET:
                    self.callbacks = set()
                    (_etype947, _size944) = iprot.readSetBegin()
                    for _i948 in range(_size944):
                        _elem949 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.callbacks.add(_elem949)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.callback_timeout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.host_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.export_disk_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.export_path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.target_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I32:
                    self.os_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.BOOL:
                    self.is_update_ex = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.options_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRUCT:
                    self.options = extra_options()
                    self.options.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.SET:
                    self.pre_scripts = set()
                    (_etype953, _size950) = iprot.readSetBegin()
                    for _i954 in range(_size950):
                        _elem955 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.pre_scripts.add(_elem955)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.SET:
                    self.post_scripts = set()
                    (_etype959, _size956) = iprot.readSetBegin()
                    for _i960 in range(_size956):
                        _elem961 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.post_scripts.add(_elem961)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('launcher_job_create_detail')
        if self.replica_id is not None:
            oprot.writeFieldBegin('replica_id', TType.STRING, 1)
            oprot.writeString(self.replica_id.encode('utf-8') if sys.version_info[0] == 2 else self.replica_id)
            oprot.writeFieldEnd()
        if self.disks_lun_mapping is not None:
            oprot.writeFieldBegin('disks_lun_mapping', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.disks_lun_mapping))
            for kiter962, viter963 in self.disks_lun_mapping.items():
                oprot.writeString(kiter962.encode('utf-8') if sys.version_info[0] == 2 else kiter962)
                oprot.writeString(viter963.encode('utf-8') if sys.version_info[0] == 2 else viter963)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.is_sysvol_authoritative_restore is not None:
            oprot.writeFieldBegin('is_sysvol_authoritative_restore', TType.BOOL, 3)
            oprot.writeBool(self.is_sysvol_authoritative_restore)
            oprot.writeFieldEnd()
        if self.is_enable_debug is not None:
            oprot.writeFieldBegin('is_enable_debug', TType.BOOL, 4)
            oprot.writeBool(self.is_enable_debug)
            oprot.writeFieldEnd()
        if self.is_disable_machine_password_change is not None:
            oprot.writeFieldBegin('is_disable_machine_password_change', TType.BOOL, 5)
            oprot.writeBool(self.is_disable_machine_password_change)
            oprot.writeFieldEnd()
        if self.is_force_normal_boot is not None:
            oprot.writeFieldBegin('is_force_normal_boot', TType.BOOL, 6)
            oprot.writeBool(self.is_force_normal_boot)
            oprot.writeFieldEnd()
        if self.network_infos is not None:
            oprot.writeFieldBegin('network_infos', TType.SET, 7)
            oprot.writeSetBegin(TType.STRUCT, len(self.network_infos))
            for iter964 in self.network_infos:
                iter964.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.config is not None:
            oprot.writeFieldBegin('config', TType.STRING, 8)
            oprot.writeString(self.config.encode('utf-8') if sys.version_info[0] == 2 else self.config)
            oprot.writeFieldEnd()
        if self.gpt_to_mbr is not None:
            oprot.writeFieldBegin('gpt_to_mbr', TType.BOOL, 9)
            oprot.writeBool(self.gpt_to_mbr)
            oprot.writeFieldEnd()
        if self.detect_type is not None:
            oprot.writeFieldBegin('detect_type', TType.I32, 10)
            oprot.writeI32(self.detect_type)
            oprot.writeFieldEnd()
        if self.skip_system_injection is not None:
            oprot.writeFieldBegin('skip_system_injection', TType.BOOL, 11)
            oprot.writeBool(self.skip_system_injection)
            oprot.writeFieldEnd()
        if self.reboot_winpe is not None:
            oprot.writeFieldBegin('reboot_winpe', TType.BOOL, 12)
            oprot.writeBool(self.reboot_winpe)
            oprot.writeFieldEnd()
        if self.callbacks is not None:
            oprot.writeFieldBegin('callbacks', TType.SET, 13)
            oprot.writeSetBegin(TType.STRING, len(self.callbacks))
            for iter965 in self.callbacks:
                oprot.writeString(iter965.encode('utf-8') if sys.version_info[0] == 2 else iter965)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.callback_timeout is not None:
            oprot.writeFieldBegin('callback_timeout', TType.I32, 14)
            oprot.writeI32(self.callback_timeout)
            oprot.writeFieldEnd()
        if self.host_name is not None:
            oprot.writeFieldBegin('host_name', TType.STRING, 15)
            oprot.writeString(self.host_name.encode('utf-8') if sys.version_info[0] == 2 else self.host_name)
            oprot.writeFieldEnd()
        if self.export_disk_type is not None:
            oprot.writeFieldBegin('export_disk_type', TType.I32, 16)
            oprot.writeI32(self.export_disk_type)
            oprot.writeFieldEnd()
        if self.export_path is not None:
            oprot.writeFieldBegin('export_path', TType.STRING, 17)
            oprot.writeString(self.export_path.encode('utf-8') if sys.version_info[0] == 2 else self.export_path)
            oprot.writeFieldEnd()
        if self.target_type is not None:
            oprot.writeFieldBegin('target_type', TType.I32, 18)
            oprot.writeI32(self.target_type)
            oprot.writeFieldEnd()
        if self.os_type is not None:
            oprot.writeFieldBegin('os_type', TType.I32, 19)
            oprot.writeI32(self.os_type)
            oprot.writeFieldEnd()
        if self.is_update_ex is not None:
            oprot.writeFieldBegin('is_update_ex', TType.BOOL, 20)
            oprot.writeBool(self.is_update_ex)
            oprot.writeFieldEnd()
        if self.options_type is not None:
            oprot.writeFieldBegin('options_type', TType.I32, 21)
            oprot.writeI32(self.options_type)
            oprot.writeFieldEnd()
        if self.options is not None:
            oprot.writeFieldBegin('options', TType.STRUCT, 22)
            self.options.write(oprot)
            oprot.writeFieldEnd()
        if self.pre_scripts is not None:
            oprot.writeFieldBegin('pre_scripts', TType.SET, 23)
            oprot.writeSetBegin(TType.STRING, len(self.pre_scripts))
            for iter966 in self.pre_scripts:
                oprot.writeString(iter966.encode('utf-8') if sys.version_info[0] == 2 else iter966)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.post_scripts is not None:
            oprot.writeFieldBegin('post_scripts', TType.SET, 24)
            oprot.writeSetBegin(TType.STRING, len(self.post_scripts))
            for iter967 in self.post_scripts:
                oprot.writeString(iter967.encode('utf-8') if sys.version_info[0] == 2 else iter967)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class register_service_info(object):
    """
    Attributes:
     - mgmt_addr
     - username
     - password
     - service_types
     - version
     - path
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'mgmt_addr', 'UTF8', "", ),  # 1
        (2, TType.STRING, 'username', 'UTF8', "", ),  # 2
        (3, TType.STRING, 'password', 'UTF8', "", ),  # 3
        (4, TType.SET, 'service_types', (TType.STRING, 'UTF8', False), None, ),  # 4
        (5, TType.STRING, 'version', 'UTF8', "", ),  # 5
        (6, TType.STRING, 'path', 'UTF8', "", ),  # 6
    )

    def __init__(self, mgmt_addr=thrift_spec[1][4], username=thrift_spec[2][4], password=thrift_spec[3][4], service_types=None, version=thrift_spec[5][4], path=thrift_spec[6][4],):
        self.mgmt_addr = mgmt_addr
        self.username = username
        self.password = password
        self.service_types = service_types
        self.version = version
        self.path = path

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mgmt_addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.SET:
                    self.service_types = set()
                    (_etype971, _size968) = iprot.readSetBegin()
                    for _i972 in range(_size968):
                        _elem973 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.service_types.add(_elem973)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('register_service_info')
        if self.mgmt_addr is not None:
            oprot.writeFieldBegin('mgmt_addr', TType.STRING, 1)
            oprot.writeString(self.mgmt_addr.encode('utf-8') if sys.version_info[0] == 2 else self.mgmt_addr)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 2)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 3)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.service_types is not None:
            oprot.writeFieldBegin('service_types', TType.SET, 4)
            oprot.writeSetBegin(TType.STRING, len(self.service_types))
            for iter974 in self.service_types:
                oprot.writeString(iter974.encode('utf-8') if sys.version_info[0] == 2 else iter974)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 5)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 6)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class register_physical_packer_info(object):
    """
    Attributes:
     - mgmt_addr
     - username
     - password
     - packer_addr
     - version
     - path
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'mgmt_addr', 'UTF8', "", ),  # 1
        (2, TType.STRING, 'username', 'UTF8', "", ),  # 2
        (3, TType.STRING, 'password', 'UTF8', "", ),  # 3
        (4, TType.STRING, 'packer_addr', 'UTF8', "", ),  # 4
        (5, TType.STRING, 'version', 'UTF8', "", ),  # 5
        (6, TType.STRING, 'path', 'UTF8', "", ),  # 6
    )

    def __init__(self, mgmt_addr=thrift_spec[1][4], username=thrift_spec[2][4], password=thrift_spec[3][4], packer_addr=thrift_spec[4][4], version=thrift_spec[5][4], path=thrift_spec[6][4],):
        self.mgmt_addr = mgmt_addr
        self.username = username
        self.password = password
        self.packer_addr = packer_addr
        self.version = version
        self.path = path

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mgmt_addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.packer_addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('register_physical_packer_info')
        if self.mgmt_addr is not None:
            oprot.writeFieldBegin('mgmt_addr', TType.STRING, 1)
            oprot.writeString(self.mgmt_addr.encode('utf-8') if sys.version_info[0] == 2 else self.mgmt_addr)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 2)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 3)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.packer_addr is not None:
            oprot.writeFieldBegin('packer_addr', TType.STRING, 4)
            oprot.writeString(self.packer_addr.encode('utf-8') if sys.version_info[0] == 2 else self.packer_addr)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 5)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 6)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class command_empty(TException):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('command_empty')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class invalid_session(TException):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('invalid_session')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class transport_message(object):
    """
    Attributes:
     - id
     - message
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I64, 'id', None, 0, ),  # 1
        (2, TType.STRING, 'message', 'BINARY', "", ),  # 2
    )

    def __init__(self, id=thrift_spec[1][4], message=thrift_spec[2][4],):
        self.id = id
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('transport_message')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeBinary(self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class register_return(object):
    """
    Attributes:
     - message
     - session
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'message', 'UTF8', "", ),  # 1
        (2, TType.STRING, 'session', 'UTF8', "", ),  # 2
    )

    def __init__(self, message=thrift_spec[1][4], session=thrift_spec[2][4],):
        self.message = message
        self.session = session

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.session = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('register_return')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRING, 2)
            oprot.writeString(self.session.encode('utf-8') if sys.version_info[0] == 2 else self.session)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class license_info(object):
    """
    Attributes:
     - key
     - activated
     - count
     - expired_date
     - consumed
     - is_active
     - name
     - email
     - status
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'key', 'UTF8', "", ),  # 1
        (2, TType.STRING, 'activated', 'UTF8', "", ),  # 2
        (3, TType.I32, 'count', None, 0, ),  # 3
        (4, TType.STRING, 'expired_date', 'UTF8', "", ),  # 4
        (5, TType.I32, 'consumed', None, 0, ),  # 5
        (6, TType.BOOL, 'is_active', None, False, ),  # 6
        (7, TType.STRING, 'name', 'UTF8', "", ),  # 7
        (8, TType.STRING, 'email', 'UTF8', "", ),  # 8
        (9, TType.STRING, 'status', 'UTF8', "", ),  # 9
    )

    def __init__(self, key=thrift_spec[1][4], activated=thrift_spec[2][4], count=thrift_spec[3][4], expired_date=thrift_spec[4][4], consumed=thrift_spec[5][4], is_active=thrift_spec[6][4], name=thrift_spec[7][4], email=thrift_spec[8][4], status=thrift_spec[9][4],):
        self.key = key
        self.activated = activated
        self.count = count
        self.expired_date = expired_date
        self.consumed = consumed
        self.is_active = is_active
        self.name = name
        self.email = email
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.activated = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.expired_date = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.consumed = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.is_active = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.status = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('license_info')
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRING, 1)
            oprot.writeString(self.key.encode('utf-8') if sys.version_info[0] == 2 else self.key)
            oprot.writeFieldEnd()
        if self.activated is not None:
            oprot.writeFieldBegin('activated', TType.STRING, 2)
            oprot.writeString(self.activated.encode('utf-8') if sys.version_info[0] == 2 else self.activated)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 3)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.expired_date is not None:
            oprot.writeFieldBegin('expired_date', TType.STRING, 4)
            oprot.writeString(self.expired_date.encode('utf-8') if sys.version_info[0] == 2 else self.expired_date)
            oprot.writeFieldEnd()
        if self.consumed is not None:
            oprot.writeFieldBegin('consumed', TType.I32, 5)
            oprot.writeI32(self.consumed)
            oprot.writeFieldEnd()
        if self.is_active is not None:
            oprot.writeFieldBegin('is_active', TType.BOOL, 6)
            oprot.writeBool(self.is_active)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 7)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 8)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRING, 9)
            oprot.writeString(self.status.encode('utf-8') if sys.version_info[0] == 2 else self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class workload_history(object):
    """
    Attributes:
     - machine_id
     - name
     - type
     - histories
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'machine_id', 'UTF8', "", ),  # 1
        (2, TType.STRING, 'name', 'UTF8', "", ),  # 2
        (3, TType.STRING, 'type', 'UTF8', "", ),  # 3
        (4, TType.LIST, 'histories', (TType.I32, None, False), None, ),  # 4
    )

    def __init__(self, machine_id=thrift_spec[1][4], name=thrift_spec[2][4], type=thrift_spec[3][4], histories=None,):
        self.machine_id = machine_id
        self.name = name
        self.type = type
        self.histories = histories

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.machine_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.histories = []
                    (_etype978, _size975) = iprot.readListBegin()
                    for _i979 in range(_size975):
                        _elem980 = iprot.readI32()
                        self.histories.append(_elem980)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('workload_history')
        if self.machine_id is not None:
            oprot.writeFieldBegin('machine_id', TType.STRING, 1)
            oprot.writeString(self.machine_id.encode('utf-8') if sys.version_info[0] == 2 else self.machine_id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 3)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.histories is not None:
            oprot.writeFieldBegin('histories', TType.LIST, 4)
            oprot.writeListBegin(TType.I32, len(self.histories))
            for iter981 in self.histories:
                oprot.writeI32(iter981)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class license_infos(object):
    """
    Attributes:
     - licenses
     - histories
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'licenses', (TType.STRUCT, (license_info, license_info.thrift_spec), False), None, ),  # 1
        (2, TType.LIST, 'histories', (TType.STRUCT, (workload_history, workload_history.thrift_spec), False), None, ),  # 2
    )

    def __init__(self, licenses=None, histories=None,):
        self.licenses = licenses
        self.histories = histories

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.licenses = []
                    (_etype985, _size982) = iprot.readListBegin()
                    for _i986 in range(_size982):
                        _elem987 = license_info()
                        _elem987.read(iprot)
                        self.licenses.append(_elem987)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.histories = []
                    (_etype991, _size988) = iprot.readListBegin()
                    for _i992 in range(_size988):
                        _elem993 = workload_history()
                        _elem993.read(iprot)
                        self.histories.append(_elem993)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('license_infos')
        if self.licenses is not None:
            oprot.writeFieldBegin('licenses', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.licenses))
            for iter994 in self.licenses:
                iter994.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.histories is not None:
            oprot.writeFieldBegin('histories', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.histories))
            for iter995 in self.histories:
                iter995.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class running_task(object):
    """
    Attributes:
     - id
     - triggers
     - mgmt_addr
     - mgmt_port
     - is_ssl
     - parameters
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
        (2, TType.LIST, 'triggers', (TType.STRUCT, (job_trigger, job_trigger.thrift_spec), False), None, ),  # 2
        (3, TType.STRING, 'mgmt_addr', 'UTF8', None, ),  # 3
        (4, TType.I32, 'mgmt_port', None, 80, ),  # 4
        (5, TType.BOOL, 'is_ssl', None, False, ),  # 5
        (6, TType.STRING, 'parameters', 'UTF8', None, ),  # 6
    )

    def __init__(self, id=None, triggers=None, mgmt_addr=None, mgmt_port=thrift_spec[4][4], is_ssl=thrift_spec[5][4], parameters=None,):
        self.id = id
        self.triggers = triggers
        self.mgmt_addr = mgmt_addr
        self.mgmt_port = mgmt_port
        self.is_ssl = is_ssl
        self.parameters = parameters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.triggers = []
                    (_etype999, _size996) = iprot.readListBegin()
                    for _i1000 in range(_size996):
                        _elem1001 = job_trigger()
                        _elem1001.read(iprot)
                        self.triggers.append(_elem1001)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.mgmt_addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.mgmt_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.is_ssl = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.parameters = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('running_task')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.triggers is not None:
            oprot.writeFieldBegin('triggers', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.triggers))
            for iter1002 in self.triggers:
                iter1002.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mgmt_addr is not None:
            oprot.writeFieldBegin('mgmt_addr', TType.STRING, 3)
            oprot.writeString(self.mgmt_addr.encode('utf-8') if sys.version_info[0] == 2 else self.mgmt_addr)
            oprot.writeFieldEnd()
        if self.mgmt_port is not None:
            oprot.writeFieldBegin('mgmt_port', TType.I32, 4)
            oprot.writeI32(self.mgmt_port)
            oprot.writeFieldEnd()
        if self.is_ssl is not None:
            oprot.writeFieldBegin('is_ssl', TType.BOOL, 5)
            oprot.writeBool(self.is_ssl)
            oprot.writeFieldEnd()
        if self.parameters is not None:
            oprot.writeFieldBegin('parameters', TType.STRING, 6)
            oprot.writeString(self.parameters.encode('utf-8') if sys.version_info[0] == 2 else self.parameters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
