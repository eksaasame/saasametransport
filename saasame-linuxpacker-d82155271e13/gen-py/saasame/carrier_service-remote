#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from saasame import carrier_service
from saasame.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  string create(string session_id, create_image_info image)')
    print('  string create_ex(string session_id,  connection_ids, string base_name, string name, i64 size, i32 block_size, string parent, bool checksum_verify)')
    print('  string open(string session_id,  connection_ids, string base_name, string name)')
    print('  string read(string session_id, string image_id, i64 start, i32 number_of_bytes_to_read)')
    print('  i32 write(string session_id, string image_id, i64 start, string buffer, i32 number_of_bytes_to_write)')
    print('  i32 write_ex(string session_id, string image_id, i64 start, string buffer, i32 number_of_bytes_to_write, bool is_compressed)')
    print('  bool close(string session_id, string image_id, bool is_cancel)')
    print('  bool remove_base_image(string session_id,  base_images)')
    print('  bool remove_snapshot_image(string session_id,  images)')
    print('  bool verify_management(string management, i32 port, bool is_ssl)')
    print('  bool set_buffer_size(string session_id, i32 size)')
    print('  bool is_buffer_free(string session_id, string image_id)')
    print('  bool is_image_replicated(string session_id,  connection_ids, string image_name)')
    print('  bool test_connection(string session_id, connection conn)')
    print('  bool add_connection(string session_id, connection conn)')
    print('  bool remove_connection(string session_id, string connection_id)')
    print('  bool modify_connection(string session_id, connection conn)')
    print('   enumerate_connections(string session_id)')
    print('  connection get_connection(string session_id, string connection_id)')
    print('  i64 get_available_bytes(string session_id, string connection_id)')
    print('  service_info ping()')
    print('  physical_machine_info get_host_detail(string session_id, machine_detail_filter filter)')
    print('   get_service_list(string session_id)')
    print('   enumerate_disks(enumerate_disk_filter_style filter)')
    print('  bool verify_carrier(string carrier, bool is_ssl)')
    print('  string take_xray()')
    print('  string take_xrays()')
    print('  bool create_mutex(string session, i16 timeout)')
    print('  bool delete_mutex(string session)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = carrier_service.Client(protocol)
transport.open()

if cmd == 'create':
    if len(args) != 2:
        print('create requires 2 args')
        sys.exit(1)
    pp.pprint(client.create(args[0], eval(args[1]),))

elif cmd == 'create_ex':
    if len(args) != 8:
        print('create_ex requires 8 args')
        sys.exit(1)
    pp.pprint(client.create_ex(args[0], eval(args[1]), args[2], args[3], eval(args[4]), eval(args[5]), args[6], eval(args[7]),))

elif cmd == 'open':
    if len(args) != 4:
        print('open requires 4 args')
        sys.exit(1)
    pp.pprint(client.open(args[0], eval(args[1]), args[2], args[3],))

elif cmd == 'read':
    if len(args) != 4:
        print('read requires 4 args')
        sys.exit(1)
    pp.pprint(client.read(args[0], args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'write':
    if len(args) != 5:
        print('write requires 5 args')
        sys.exit(1)
    pp.pprint(client.write(args[0], args[1], eval(args[2]), args[3], eval(args[4]),))

elif cmd == 'write_ex':
    if len(args) != 6:
        print('write_ex requires 6 args')
        sys.exit(1)
    pp.pprint(client.write_ex(args[0], args[1], eval(args[2]), args[3], eval(args[4]), eval(args[5]),))

elif cmd == 'close':
    if len(args) != 3:
        print('close requires 3 args')
        sys.exit(1)
    pp.pprint(client.close(args[0], args[1], eval(args[2]),))

elif cmd == 'remove_base_image':
    if len(args) != 2:
        print('remove_base_image requires 2 args')
        sys.exit(1)
    pp.pprint(client.remove_base_image(args[0], eval(args[1]),))

elif cmd == 'remove_snapshot_image':
    if len(args) != 2:
        print('remove_snapshot_image requires 2 args')
        sys.exit(1)
    pp.pprint(client.remove_snapshot_image(args[0], eval(args[1]),))

elif cmd == 'verify_management':
    if len(args) != 3:
        print('verify_management requires 3 args')
        sys.exit(1)
    pp.pprint(client.verify_management(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'set_buffer_size':
    if len(args) != 2:
        print('set_buffer_size requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_buffer_size(args[0], eval(args[1]),))

elif cmd == 'is_buffer_free':
    if len(args) != 2:
        print('is_buffer_free requires 2 args')
        sys.exit(1)
    pp.pprint(client.is_buffer_free(args[0], args[1],))

elif cmd == 'is_image_replicated':
    if len(args) != 3:
        print('is_image_replicated requires 3 args')
        sys.exit(1)
    pp.pprint(client.is_image_replicated(args[0], eval(args[1]), args[2],))

elif cmd == 'test_connection':
    if len(args) != 2:
        print('test_connection requires 2 args')
        sys.exit(1)
    pp.pprint(client.test_connection(args[0], eval(args[1]),))

elif cmd == 'add_connection':
    if len(args) != 2:
        print('add_connection requires 2 args')
        sys.exit(1)
    pp.pprint(client.add_connection(args[0], eval(args[1]),))

elif cmd == 'remove_connection':
    if len(args) != 2:
        print('remove_connection requires 2 args')
        sys.exit(1)
    pp.pprint(client.remove_connection(args[0], args[1],))

elif cmd == 'modify_connection':
    if len(args) != 2:
        print('modify_connection requires 2 args')
        sys.exit(1)
    pp.pprint(client.modify_connection(args[0], eval(args[1]),))

elif cmd == 'enumerate_connections':
    if len(args) != 1:
        print('enumerate_connections requires 1 args')
        sys.exit(1)
    pp.pprint(client.enumerate_connections(args[0],))

elif cmd == 'get_connection':
    if len(args) != 2:
        print('get_connection requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_connection(args[0], args[1],))

elif cmd == 'get_available_bytes':
    if len(args) != 2:
        print('get_available_bytes requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_available_bytes(args[0], args[1],))

elif cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

elif cmd == 'get_host_detail':
    if len(args) != 2:
        print('get_host_detail requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_host_detail(args[0], eval(args[1]),))

elif cmd == 'get_service_list':
    if len(args) != 1:
        print('get_service_list requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_service_list(args[0],))

elif cmd == 'enumerate_disks':
    if len(args) != 1:
        print('enumerate_disks requires 1 args')
        sys.exit(1)
    pp.pprint(client.enumerate_disks(eval(args[0]),))

elif cmd == 'verify_carrier':
    if len(args) != 2:
        print('verify_carrier requires 2 args')
        sys.exit(1)
    pp.pprint(client.verify_carrier(args[0], eval(args[1]),))

elif cmd == 'take_xray':
    if len(args) != 0:
        print('take_xray requires 0 args')
        sys.exit(1)
    pp.pprint(client.take_xray())

elif cmd == 'take_xrays':
    if len(args) != 0:
        print('take_xrays requires 0 args')
        sys.exit(1)
    pp.pprint(client.take_xrays())

elif cmd == 'create_mutex':
    if len(args) != 2:
        print('create_mutex requires 2 args')
        sys.exit(1)
    pp.pprint(client.create_mutex(args[0], eval(args[1]),))

elif cmd == 'delete_mutex':
    if len(args) != 1:
        print('delete_mutex requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_mutex(args[0],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
