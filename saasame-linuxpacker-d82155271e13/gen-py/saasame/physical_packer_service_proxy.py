#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import saasame.common_service
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport


class Iface(saasame.common_service.Iface):
    def packer_ping_p(self, session_id, addr):
        """
        Parameters:
         - session_id
         - addr
        """
        pass

    def take_snapshots_p(self, session_id, addr, disks):
        """
        Parameters:
         - session_id
         - addr
         - disks
        """
        pass

    def take_snapshots_ex_p(self, session_id, addr, disks, pre_script, post_script):
        """
        Parameters:
         - session_id
         - addr
         - disks
         - pre_script
         - post_script
        """
        pass

    def delete_snapshot_p(self, session_id, addr, snapshot_id):
        """
        Parameters:
         - session_id
         - addr
         - snapshot_id
        """
        pass

    def delete_snapshot_set_p(self, session_id, addr, snapshot_set_id):
        """
        Parameters:
         - session_id
         - addr
         - snapshot_set_id
        """
        pass

    def get_all_snapshots_p(self, session_id, addr):
        """
        Parameters:
         - session_id
         - addr
        """
        pass

    def create_packer_job_ex_p(self, session_id, addr, job_id, create_job):
        """
        Parameters:
         - session_id
         - addr
         - job_id
         - create_job
        """
        pass

    def get_packer_job_p(self, session_id, addr, job_id, previous_updated_time):
        """
        Parameters:
         - session_id
         - addr
         - job_id
         - previous_updated_time
        """
        pass

    def interrupt_packer_job_p(self, session_id, addr, job_id):
        """
        Parameters:
         - session_id
         - addr
         - job_id
        """
        pass

    def resume_packer_job_p(self, session_id, addr, job_id):
        """
        Parameters:
         - session_id
         - addr
         - job_id
        """
        pass

    def remove_packer_job_p(self, session_id, addr, job_id):
        """
        Parameters:
         - session_id
         - addr
         - job_id
        """
        pass

    def running_packer_job_p(self, session_id, addr, job_id):
        """
        Parameters:
         - session_id
         - addr
         - job_id
        """
        pass

    def enumerate_packer_disks_p(self, session_id, addr, filter):
        """
        Parameters:
         - session_id
         - addr
         - filter
        """
        pass

    def verify_packer_carrier_p(self, session_id, addr, carrier, is_ssl):
        """
        Parameters:
         - session_id
         - addr
         - carrier
         - is_ssl
        """
        pass

    def get_packer_host_detail_p(self, session_id, addr, filter):
        """
        Parameters:
         - session_id
         - addr
         - filter
        """
        pass


class Client(saasame.common_service.Client, Iface):
    def __init__(self, iprot, oprot=None):
        saasame.common_service.Client.__init__(self, iprot, oprot)

    def packer_ping_p(self, session_id, addr):
        """
        Parameters:
         - session_id
         - addr
        """
        self.send_packer_ping_p(session_id, addr)
        return self.recv_packer_ping_p()

    def send_packer_ping_p(self, session_id, addr):
        self._oprot.writeMessageBegin('packer_ping_p', TMessageType.CALL, self._seqid)
        args = packer_ping_p_args()
        args.session_id = session_id
        args.addr = addr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_packer_ping_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = packer_ping_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "packer_ping_p failed: unknown result")

    def take_snapshots_p(self, session_id, addr, disks):
        """
        Parameters:
         - session_id
         - addr
         - disks
        """
        self.send_take_snapshots_p(session_id, addr, disks)
        return self.recv_take_snapshots_p()

    def send_take_snapshots_p(self, session_id, addr, disks):
        self._oprot.writeMessageBegin('take_snapshots_p', TMessageType.CALL, self._seqid)
        args = take_snapshots_p_args()
        args.session_id = session_id
        args.addr = addr
        args.disks = disks
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_take_snapshots_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = take_snapshots_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "take_snapshots_p failed: unknown result")

    def take_snapshots_ex_p(self, session_id, addr, disks, pre_script, post_script):
        """
        Parameters:
         - session_id
         - addr
         - disks
         - pre_script
         - post_script
        """
        self.send_take_snapshots_ex_p(session_id, addr, disks, pre_script, post_script)
        return self.recv_take_snapshots_ex_p()

    def send_take_snapshots_ex_p(self, session_id, addr, disks, pre_script, post_script):
        self._oprot.writeMessageBegin('take_snapshots_ex_p', TMessageType.CALL, self._seqid)
        args = take_snapshots_ex_p_args()
        args.session_id = session_id
        args.addr = addr
        args.disks = disks
        args.pre_script = pre_script
        args.post_script = post_script
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_take_snapshots_ex_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = take_snapshots_ex_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "take_snapshots_ex_p failed: unknown result")

    def delete_snapshot_p(self, session_id, addr, snapshot_id):
        """
        Parameters:
         - session_id
         - addr
         - snapshot_id
        """
        self.send_delete_snapshot_p(session_id, addr, snapshot_id)
        return self.recv_delete_snapshot_p()

    def send_delete_snapshot_p(self, session_id, addr, snapshot_id):
        self._oprot.writeMessageBegin('delete_snapshot_p', TMessageType.CALL, self._seqid)
        args = delete_snapshot_p_args()
        args.session_id = session_id
        args.addr = addr
        args.snapshot_id = snapshot_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_delete_snapshot_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = delete_snapshot_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "delete_snapshot_p failed: unknown result")

    def delete_snapshot_set_p(self, session_id, addr, snapshot_set_id):
        """
        Parameters:
         - session_id
         - addr
         - snapshot_set_id
        """
        self.send_delete_snapshot_set_p(session_id, addr, snapshot_set_id)
        return self.recv_delete_snapshot_set_p()

    def send_delete_snapshot_set_p(self, session_id, addr, snapshot_set_id):
        self._oprot.writeMessageBegin('delete_snapshot_set_p', TMessageType.CALL, self._seqid)
        args = delete_snapshot_set_p_args()
        args.session_id = session_id
        args.addr = addr
        args.snapshot_set_id = snapshot_set_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_delete_snapshot_set_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = delete_snapshot_set_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "delete_snapshot_set_p failed: unknown result")

    def get_all_snapshots_p(self, session_id, addr):
        """
        Parameters:
         - session_id
         - addr
        """
        self.send_get_all_snapshots_p(session_id, addr)
        return self.recv_get_all_snapshots_p()

    def send_get_all_snapshots_p(self, session_id, addr):
        self._oprot.writeMessageBegin('get_all_snapshots_p', TMessageType.CALL, self._seqid)
        args = get_all_snapshots_p_args()
        args.session_id = session_id
        args.addr = addr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_all_snapshots_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_all_snapshots_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_all_snapshots_p failed: unknown result")

    def create_packer_job_ex_p(self, session_id, addr, job_id, create_job):
        """
        Parameters:
         - session_id
         - addr
         - job_id
         - create_job
        """
        self.send_create_packer_job_ex_p(session_id, addr, job_id, create_job)
        return self.recv_create_packer_job_ex_p()

    def send_create_packer_job_ex_p(self, session_id, addr, job_id, create_job):
        self._oprot.writeMessageBegin('create_packer_job_ex_p', TMessageType.CALL, self._seqid)
        args = create_packer_job_ex_p_args()
        args.session_id = session_id
        args.addr = addr
        args.job_id = job_id
        args.create_job = create_job
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create_packer_job_ex_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_packer_job_ex_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "create_packer_job_ex_p failed: unknown result")

    def get_packer_job_p(self, session_id, addr, job_id, previous_updated_time):
        """
        Parameters:
         - session_id
         - addr
         - job_id
         - previous_updated_time
        """
        self.send_get_packer_job_p(session_id, addr, job_id, previous_updated_time)
        return self.recv_get_packer_job_p()

    def send_get_packer_job_p(self, session_id, addr, job_id, previous_updated_time):
        self._oprot.writeMessageBegin('get_packer_job_p', TMessageType.CALL, self._seqid)
        args = get_packer_job_p_args()
        args.session_id = session_id
        args.addr = addr
        args.job_id = job_id
        args.previous_updated_time = previous_updated_time
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_packer_job_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_packer_job_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_packer_job_p failed: unknown result")

    def interrupt_packer_job_p(self, session_id, addr, job_id):
        """
        Parameters:
         - session_id
         - addr
         - job_id
        """
        self.send_interrupt_packer_job_p(session_id, addr, job_id)
        return self.recv_interrupt_packer_job_p()

    def send_interrupt_packer_job_p(self, session_id, addr, job_id):
        self._oprot.writeMessageBegin('interrupt_packer_job_p', TMessageType.CALL, self._seqid)
        args = interrupt_packer_job_p_args()
        args.session_id = session_id
        args.addr = addr
        args.job_id = job_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_interrupt_packer_job_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = interrupt_packer_job_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "interrupt_packer_job_p failed: unknown result")

    def resume_packer_job_p(self, session_id, addr, job_id):
        """
        Parameters:
         - session_id
         - addr
         - job_id
        """
        self.send_resume_packer_job_p(session_id, addr, job_id)
        return self.recv_resume_packer_job_p()

    def send_resume_packer_job_p(self, session_id, addr, job_id):
        self._oprot.writeMessageBegin('resume_packer_job_p', TMessageType.CALL, self._seqid)
        args = resume_packer_job_p_args()
        args.session_id = session_id
        args.addr = addr
        args.job_id = job_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_resume_packer_job_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = resume_packer_job_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "resume_packer_job_p failed: unknown result")

    def remove_packer_job_p(self, session_id, addr, job_id):
        """
        Parameters:
         - session_id
         - addr
         - job_id
        """
        self.send_remove_packer_job_p(session_id, addr, job_id)
        return self.recv_remove_packer_job_p()

    def send_remove_packer_job_p(self, session_id, addr, job_id):
        self._oprot.writeMessageBegin('remove_packer_job_p', TMessageType.CALL, self._seqid)
        args = remove_packer_job_p_args()
        args.session_id = session_id
        args.addr = addr
        args.job_id = job_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_remove_packer_job_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = remove_packer_job_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "remove_packer_job_p failed: unknown result")

    def running_packer_job_p(self, session_id, addr, job_id):
        """
        Parameters:
         - session_id
         - addr
         - job_id
        """
        self.send_running_packer_job_p(session_id, addr, job_id)
        return self.recv_running_packer_job_p()

    def send_running_packer_job_p(self, session_id, addr, job_id):
        self._oprot.writeMessageBegin('running_packer_job_p', TMessageType.CALL, self._seqid)
        args = running_packer_job_p_args()
        args.session_id = session_id
        args.addr = addr
        args.job_id = job_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_running_packer_job_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = running_packer_job_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "running_packer_job_p failed: unknown result")

    def enumerate_packer_disks_p(self, session_id, addr, filter):
        """
        Parameters:
         - session_id
         - addr
         - filter
        """
        self.send_enumerate_packer_disks_p(session_id, addr, filter)
        return self.recv_enumerate_packer_disks_p()

    def send_enumerate_packer_disks_p(self, session_id, addr, filter):
        self._oprot.writeMessageBegin('enumerate_packer_disks_p', TMessageType.CALL, self._seqid)
        args = enumerate_packer_disks_p_args()
        args.session_id = session_id
        args.addr = addr
        args.filter = filter
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_enumerate_packer_disks_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = enumerate_packer_disks_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "enumerate_packer_disks_p failed: unknown result")

    def verify_packer_carrier_p(self, session_id, addr, carrier, is_ssl):
        """
        Parameters:
         - session_id
         - addr
         - carrier
         - is_ssl
        """
        self.send_verify_packer_carrier_p(session_id, addr, carrier, is_ssl)
        return self.recv_verify_packer_carrier_p()

    def send_verify_packer_carrier_p(self, session_id, addr, carrier, is_ssl):
        self._oprot.writeMessageBegin('verify_packer_carrier_p', TMessageType.CALL, self._seqid)
        args = verify_packer_carrier_p_args()
        args.session_id = session_id
        args.addr = addr
        args.carrier = carrier
        args.is_ssl = is_ssl
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_verify_packer_carrier_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = verify_packer_carrier_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "verify_packer_carrier_p failed: unknown result")

    def get_packer_host_detail_p(self, session_id, addr, filter):
        """
        Parameters:
         - session_id
         - addr
         - filter
        """
        self.send_get_packer_host_detail_p(session_id, addr, filter)
        return self.recv_get_packer_host_detail_p()

    def send_get_packer_host_detail_p(self, session_id, addr, filter):
        self._oprot.writeMessageBegin('get_packer_host_detail_p', TMessageType.CALL, self._seqid)
        args = get_packer_host_detail_p_args()
        args.session_id = session_id
        args.addr = addr
        args.filter = filter
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_packer_host_detail_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_packer_host_detail_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_packer_host_detail_p failed: unknown result")


class Processor(saasame.common_service.Processor, Iface, TProcessor):
    def __init__(self, handler):
        saasame.common_service.Processor.__init__(self, handler)
        self._processMap["packer_ping_p"] = Processor.process_packer_ping_p
        self._processMap["take_snapshots_p"] = Processor.process_take_snapshots_p
        self._processMap["take_snapshots_ex_p"] = Processor.process_take_snapshots_ex_p
        self._processMap["delete_snapshot_p"] = Processor.process_delete_snapshot_p
        self._processMap["delete_snapshot_set_p"] = Processor.process_delete_snapshot_set_p
        self._processMap["get_all_snapshots_p"] = Processor.process_get_all_snapshots_p
        self._processMap["create_packer_job_ex_p"] = Processor.process_create_packer_job_ex_p
        self._processMap["get_packer_job_p"] = Processor.process_get_packer_job_p
        self._processMap["interrupt_packer_job_p"] = Processor.process_interrupt_packer_job_p
        self._processMap["resume_packer_job_p"] = Processor.process_resume_packer_job_p
        self._processMap["remove_packer_job_p"] = Processor.process_remove_packer_job_p
        self._processMap["running_packer_job_p"] = Processor.process_running_packer_job_p
        self._processMap["enumerate_packer_disks_p"] = Processor.process_enumerate_packer_disks_p
        self._processMap["verify_packer_carrier_p"] = Processor.process_verify_packer_carrier_p
        self._processMap["get_packer_host_detail_p"] = Processor.process_get_packer_host_detail_p

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_packer_ping_p(self, seqid, iprot, oprot):
        args = packer_ping_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = packer_ping_p_result()
        try:
            result.success = self._handler.packer_ping_p(args.session_id, args.addr)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("packer_ping_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_take_snapshots_p(self, seqid, iprot, oprot):
        args = take_snapshots_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = take_snapshots_p_result()
        try:
            result.success = self._handler.take_snapshots_p(args.session_id, args.addr, args.disks)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("take_snapshots_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_take_snapshots_ex_p(self, seqid, iprot, oprot):
        args = take_snapshots_ex_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = take_snapshots_ex_p_result()
        try:
            result.success = self._handler.take_snapshots_ex_p(args.session_id, args.addr, args.disks, args.pre_script, args.post_script)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("take_snapshots_ex_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_delete_snapshot_p(self, seqid, iprot, oprot):
        args = delete_snapshot_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = delete_snapshot_p_result()
        try:
            result.success = self._handler.delete_snapshot_p(args.session_id, args.addr, args.snapshot_id)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("delete_snapshot_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_delete_snapshot_set_p(self, seqid, iprot, oprot):
        args = delete_snapshot_set_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = delete_snapshot_set_p_result()
        try:
            result.success = self._handler.delete_snapshot_set_p(args.session_id, args.addr, args.snapshot_set_id)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("delete_snapshot_set_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_all_snapshots_p(self, seqid, iprot, oprot):
        args = get_all_snapshots_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_all_snapshots_p_result()
        try:
            result.success = self._handler.get_all_snapshots_p(args.session_id, args.addr)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_all_snapshots_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_create_packer_job_ex_p(self, seqid, iprot, oprot):
        args = create_packer_job_ex_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_packer_job_ex_p_result()
        try:
            result.success = self._handler.create_packer_job_ex_p(args.session_id, args.addr, args.job_id, args.create_job)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create_packer_job_ex_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_packer_job_p(self, seqid, iprot, oprot):
        args = get_packer_job_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_packer_job_p_result()
        try:
            result.success = self._handler.get_packer_job_p(args.session_id, args.addr, args.job_id, args.previous_updated_time)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_packer_job_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_interrupt_packer_job_p(self, seqid, iprot, oprot):
        args = interrupt_packer_job_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = interrupt_packer_job_p_result()
        try:
            result.success = self._handler.interrupt_packer_job_p(args.session_id, args.addr, args.job_id)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("interrupt_packer_job_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_resume_packer_job_p(self, seqid, iprot, oprot):
        args = resume_packer_job_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = resume_packer_job_p_result()
        try:
            result.success = self._handler.resume_packer_job_p(args.session_id, args.addr, args.job_id)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("resume_packer_job_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_remove_packer_job_p(self, seqid, iprot, oprot):
        args = remove_packer_job_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = remove_packer_job_p_result()
        try:
            result.success = self._handler.remove_packer_job_p(args.session_id, args.addr, args.job_id)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("remove_packer_job_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_running_packer_job_p(self, seqid, iprot, oprot):
        args = running_packer_job_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = running_packer_job_p_result()
        try:
            result.success = self._handler.running_packer_job_p(args.session_id, args.addr, args.job_id)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("running_packer_job_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_enumerate_packer_disks_p(self, seqid, iprot, oprot):
        args = enumerate_packer_disks_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = enumerate_packer_disks_p_result()
        try:
            result.success = self._handler.enumerate_packer_disks_p(args.session_id, args.addr, args.filter)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("enumerate_packer_disks_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_verify_packer_carrier_p(self, seqid, iprot, oprot):
        args = verify_packer_carrier_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = verify_packer_carrier_p_result()
        try:
            result.success = self._handler.verify_packer_carrier_p(args.session_id, args.addr, args.carrier, args.is_ssl)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("verify_packer_carrier_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_packer_host_detail_p(self, seqid, iprot, oprot):
        args = get_packer_host_detail_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_packer_host_detail_p_result()
        try:
            result.success = self._handler.get_packer_host_detail_p(args.session_id, args.addr, args.filter)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_packer_host_detail_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class packer_ping_p_args(object):
    """
    Attributes:
     - session_id
     - addr
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'addr', 'UTF8', None, ),  # 2
    )

    def __init__(self, session_id=None, addr=None,):
        self.session_id = session_id
        self.addr = addr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('packer_ping_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.STRING, 2)
            oprot.writeString(self.addr.encode('utf-8') if sys.version_info[0] == 2 else self.addr)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class packer_ping_p_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (service_info, service_info.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = service_info()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('packer_ping_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class take_snapshots_p_args(object):
    """
    Attributes:
     - session_id
     - addr
     - disks
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'addr', 'UTF8', None, ),  # 2
        (3, TType.SET, 'disks', (TType.STRING, 'UTF8', False), None, ),  # 3
    )

    def __init__(self, session_id=None, addr=None, disks=None,):
        self.session_id = session_id
        self.addr = addr
        self.disks = disks

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.disks = set()
                    (_etype1152, _size1149) = iprot.readSetBegin()
                    for _i1153 in range(_size1149):
                        _elem1154 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.disks.add(_elem1154)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('take_snapshots_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.STRING, 2)
            oprot.writeString(self.addr.encode('utf-8') if sys.version_info[0] == 2 else self.addr)
            oprot.writeFieldEnd()
        if self.disks is not None:
            oprot.writeFieldBegin('disks', TType.SET, 3)
            oprot.writeSetBegin(TType.STRING, len(self.disks))
            for iter1155 in self.disks:
                oprot.writeString(iter1155.encode('utf-8') if sys.version_info[0] == 2 else iter1155)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class take_snapshots_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (snapshot, snapshot.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1159, _size1156) = iprot.readListBegin()
                    for _i1160 in range(_size1156):
                        _elem1161 = snapshot()
                        _elem1161.read(iprot)
                        self.success.append(_elem1161)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('take_snapshots_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter1162 in self.success:
                iter1162.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class take_snapshots_ex_p_args(object):
    """
    Attributes:
     - session_id
     - addr
     - disks
     - pre_script
     - post_script
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'addr', 'UTF8', None, ),  # 2
        (3, TType.SET, 'disks', (TType.STRING, 'UTF8', False), None, ),  # 3
        (4, TType.STRING, 'pre_script', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'post_script', 'UTF8', None, ),  # 5
    )

    def __init__(self, session_id=None, addr=None, disks=None, pre_script=None, post_script=None,):
        self.session_id = session_id
        self.addr = addr
        self.disks = disks
        self.pre_script = pre_script
        self.post_script = post_script

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.disks = set()
                    (_etype1166, _size1163) = iprot.readSetBegin()
                    for _i1167 in range(_size1163):
                        _elem1168 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.disks.add(_elem1168)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.pre_script = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.post_script = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('take_snapshots_ex_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.STRING, 2)
            oprot.writeString(self.addr.encode('utf-8') if sys.version_info[0] == 2 else self.addr)
            oprot.writeFieldEnd()
        if self.disks is not None:
            oprot.writeFieldBegin('disks', TType.SET, 3)
            oprot.writeSetBegin(TType.STRING, len(self.disks))
            for iter1169 in self.disks:
                oprot.writeString(iter1169.encode('utf-8') if sys.version_info[0] == 2 else iter1169)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.pre_script is not None:
            oprot.writeFieldBegin('pre_script', TType.STRING, 4)
            oprot.writeString(self.pre_script.encode('utf-8') if sys.version_info[0] == 2 else self.pre_script)
            oprot.writeFieldEnd()
        if self.post_script is not None:
            oprot.writeFieldBegin('post_script', TType.STRING, 5)
            oprot.writeString(self.post_script.encode('utf-8') if sys.version_info[0] == 2 else self.post_script)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class take_snapshots_ex_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (snapshot, snapshot.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1173, _size1170) = iprot.readListBegin()
                    for _i1174 in range(_size1170):
                        _elem1175 = snapshot()
                        _elem1175.read(iprot)
                        self.success.append(_elem1175)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('take_snapshots_ex_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter1176 in self.success:
                iter1176.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class delete_snapshot_p_args(object):
    """
    Attributes:
     - session_id
     - addr
     - snapshot_id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'addr', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'snapshot_id', 'UTF8', None, ),  # 3
    )

    def __init__(self, session_id=None, addr=None, snapshot_id=None,):
        self.session_id = session_id
        self.addr = addr
        self.snapshot_id = snapshot_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.snapshot_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('delete_snapshot_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.STRING, 2)
            oprot.writeString(self.addr.encode('utf-8') if sys.version_info[0] == 2 else self.addr)
            oprot.writeFieldEnd()
        if self.snapshot_id is not None:
            oprot.writeFieldBegin('snapshot_id', TType.STRING, 3)
            oprot.writeString(self.snapshot_id.encode('utf-8') if sys.version_info[0] == 2 else self.snapshot_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class delete_snapshot_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (delete_snapshot_result, delete_snapshot_result.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = delete_snapshot_result()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('delete_snapshot_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class delete_snapshot_set_p_args(object):
    """
    Attributes:
     - session_id
     - addr
     - snapshot_set_id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'addr', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'snapshot_set_id', 'UTF8', None, ),  # 3
    )

    def __init__(self, session_id=None, addr=None, snapshot_set_id=None,):
        self.session_id = session_id
        self.addr = addr
        self.snapshot_set_id = snapshot_set_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.snapshot_set_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('delete_snapshot_set_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.STRING, 2)
            oprot.writeString(self.addr.encode('utf-8') if sys.version_info[0] == 2 else self.addr)
            oprot.writeFieldEnd()
        if self.snapshot_set_id is not None:
            oprot.writeFieldBegin('snapshot_set_id', TType.STRING, 3)
            oprot.writeString(self.snapshot_set_id.encode('utf-8') if sys.version_info[0] == 2 else self.snapshot_set_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class delete_snapshot_set_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (delete_snapshot_result, delete_snapshot_result.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = delete_snapshot_result()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('delete_snapshot_set_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class get_all_snapshots_p_args(object):
    """
    Attributes:
     - session_id
     - addr
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'addr', 'UTF8', None, ),  # 2
    )

    def __init__(self, session_id=None, addr=None,):
        self.session_id = session_id
        self.addr = addr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('get_all_snapshots_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.STRING, 2)
            oprot.writeString(self.addr.encode('utf-8') if sys.version_info[0] == 2 else self.addr)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class get_all_snapshots_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.MAP, 'success', (TType.STRING, 'UTF8', TType.LIST, (TType.STRUCT, (snapshot, snapshot.thrift_spec), False), False), None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.MAP:
                    self.success = {}
                    (_ktype1178, _vtype1179, _size1177) = iprot.readMapBegin()
                    for _i1181 in range(_size1177):
                        _key1182 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val1183 = []
                        (_etype1187, _size1184) = iprot.readListBegin()
                        for _i1188 in range(_size1184):
                            _elem1189 = snapshot()
                            _elem1189.read(iprot)
                            _val1183.append(_elem1189)
                        iprot.readListEnd()
                        self.success[_key1182] = _val1183
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('get_all_snapshots_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.MAP, 0)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.success))
            for kiter1190, viter1191 in self.success.items():
                oprot.writeString(kiter1190.encode('utf-8') if sys.version_info[0] == 2 else kiter1190)
                oprot.writeListBegin(TType.STRUCT, len(viter1191))
                for iter1192 in viter1191:
                    iter1192.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class create_packer_job_ex_p_args(object):
    """
    Attributes:
     - session_id
     - addr
     - job_id
     - create_job
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'addr', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'job_id', 'UTF8', None, ),  # 3
        (4, TType.STRUCT, 'create_job', (create_packer_job_detail, create_packer_job_detail.thrift_spec), None, ),  # 4
    )

    def __init__(self, session_id=None, addr=None, job_id=None, create_job=None,):
        self.session_id = session_id
        self.addr = addr
        self.job_id = job_id
        self.create_job = create_job

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.job_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.create_job = create_packer_job_detail()
                    self.create_job.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('create_packer_job_ex_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.STRING, 2)
            oprot.writeString(self.addr.encode('utf-8') if sys.version_info[0] == 2 else self.addr)
            oprot.writeFieldEnd()
        if self.job_id is not None:
            oprot.writeFieldBegin('job_id', TType.STRING, 3)
            oprot.writeString(self.job_id.encode('utf-8') if sys.version_info[0] == 2 else self.job_id)
            oprot.writeFieldEnd()
        if self.create_job is not None:
            oprot.writeFieldBegin('create_job', TType.STRUCT, 4)
            self.create_job.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class create_packer_job_ex_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (packer_job_detail, packer_job_detail.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = packer_job_detail()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('create_packer_job_ex_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class get_packer_job_p_args(object):
    """
    Attributes:
     - session_id
     - addr
     - job_id
     - previous_updated_time
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'addr', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'job_id', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'previous_updated_time', 'UTF8', None, ),  # 4
    )

    def __init__(self, session_id=None, addr=None, job_id=None, previous_updated_time=None,):
        self.session_id = session_id
        self.addr = addr
        self.job_id = job_id
        self.previous_updated_time = previous_updated_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.job_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.previous_updated_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('get_packer_job_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.STRING, 2)
            oprot.writeString(self.addr.encode('utf-8') if sys.version_info[0] == 2 else self.addr)
            oprot.writeFieldEnd()
        if self.job_id is not None:
            oprot.writeFieldBegin('job_id', TType.STRING, 3)
            oprot.writeString(self.job_id.encode('utf-8') if sys.version_info[0] == 2 else self.job_id)
            oprot.writeFieldEnd()
        if self.previous_updated_time is not None:
            oprot.writeFieldBegin('previous_updated_time', TType.STRING, 4)
            oprot.writeString(self.previous_updated_time.encode('utf-8') if sys.version_info[0] == 2 else self.previous_updated_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class get_packer_job_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (packer_job_detail, packer_job_detail.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = packer_job_detail()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('get_packer_job_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class interrupt_packer_job_p_args(object):
    """
    Attributes:
     - session_id
     - addr
     - job_id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'addr', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'job_id', 'UTF8', None, ),  # 3
    )

    def __init__(self, session_id=None, addr=None, job_id=None,):
        self.session_id = session_id
        self.addr = addr
        self.job_id = job_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.job_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('interrupt_packer_job_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.STRING, 2)
            oprot.writeString(self.addr.encode('utf-8') if sys.version_info[0] == 2 else self.addr)
            oprot.writeFieldEnd()
        if self.job_id is not None:
            oprot.writeFieldBegin('job_id', TType.STRING, 3)
            oprot.writeString(self.job_id.encode('utf-8') if sys.version_info[0] == 2 else self.job_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class interrupt_packer_job_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('interrupt_packer_job_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class resume_packer_job_p_args(object):
    """
    Attributes:
     - session_id
     - addr
     - job_id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'addr', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'job_id', 'UTF8', None, ),  # 3
    )

    def __init__(self, session_id=None, addr=None, job_id=None,):
        self.session_id = session_id
        self.addr = addr
        self.job_id = job_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.job_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('resume_packer_job_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.STRING, 2)
            oprot.writeString(self.addr.encode('utf-8') if sys.version_info[0] == 2 else self.addr)
            oprot.writeFieldEnd()
        if self.job_id is not None:
            oprot.writeFieldBegin('job_id', TType.STRING, 3)
            oprot.writeString(self.job_id.encode('utf-8') if sys.version_info[0] == 2 else self.job_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class resume_packer_job_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('resume_packer_job_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class remove_packer_job_p_args(object):
    """
    Attributes:
     - session_id
     - addr
     - job_id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'addr', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'job_id', 'UTF8', None, ),  # 3
    )

    def __init__(self, session_id=None, addr=None, job_id=None,):
        self.session_id = session_id
        self.addr = addr
        self.job_id = job_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.job_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('remove_packer_job_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.STRING, 2)
            oprot.writeString(self.addr.encode('utf-8') if sys.version_info[0] == 2 else self.addr)
            oprot.writeFieldEnd()
        if self.job_id is not None:
            oprot.writeFieldBegin('job_id', TType.STRING, 3)
            oprot.writeString(self.job_id.encode('utf-8') if sys.version_info[0] == 2 else self.job_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class remove_packer_job_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('remove_packer_job_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class running_packer_job_p_args(object):
    """
    Attributes:
     - session_id
     - addr
     - job_id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'addr', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'job_id', 'UTF8', None, ),  # 3
    )

    def __init__(self, session_id=None, addr=None, job_id=None,):
        self.session_id = session_id
        self.addr = addr
        self.job_id = job_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.job_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('running_packer_job_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.STRING, 2)
            oprot.writeString(self.addr.encode('utf-8') if sys.version_info[0] == 2 else self.addr)
            oprot.writeFieldEnd()
        if self.job_id is not None:
            oprot.writeFieldBegin('job_id', TType.STRING, 3)
            oprot.writeString(self.job_id.encode('utf-8') if sys.version_info[0] == 2 else self.job_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class running_packer_job_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('running_packer_job_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class enumerate_packer_disks_p_args(object):
    """
    Attributes:
     - session_id
     - addr
     - filter
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'addr', 'UTF8', None, ),  # 2
        (3, TType.I32, 'filter', None, None, ),  # 3
    )

    def __init__(self, session_id=None, addr=None, filter=None,):
        self.session_id = session_id
        self.addr = addr
        self.filter = filter

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.filter = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('enumerate_packer_disks_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.STRING, 2)
            oprot.writeString(self.addr.encode('utf-8') if sys.version_info[0] == 2 else self.addr)
            oprot.writeFieldEnd()
        if self.filter is not None:
            oprot.writeFieldBegin('filter', TType.I32, 3)
            oprot.writeI32(self.filter)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class enumerate_packer_disks_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.SET, 'success', (TType.STRUCT, (disk_info, disk_info.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.SET:
                    self.success = set()
                    (_etype1196, _size1193) = iprot.readSetBegin()
                    for _i1197 in range(_size1193):
                        _elem1198 = disk_info()
                        _elem1198.read(iprot)
                        self.success.add(_elem1198)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('enumerate_packer_disks_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.SET, 0)
            oprot.writeSetBegin(TType.STRUCT, len(self.success))
            for iter1199 in self.success:
                iter1199.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class verify_packer_carrier_p_args(object):
    """
    Attributes:
     - session_id
     - addr
     - carrier
     - is_ssl
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'addr', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'carrier', 'UTF8', None, ),  # 3
        (4, TType.BOOL, 'is_ssl', None, None, ),  # 4
    )

    def __init__(self, session_id=None, addr=None, carrier=None, is_ssl=None,):
        self.session_id = session_id
        self.addr = addr
        self.carrier = carrier
        self.is_ssl = is_ssl

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.carrier = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.is_ssl = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('verify_packer_carrier_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.STRING, 2)
            oprot.writeString(self.addr.encode('utf-8') if sys.version_info[0] == 2 else self.addr)
            oprot.writeFieldEnd()
        if self.carrier is not None:
            oprot.writeFieldBegin('carrier', TType.STRING, 3)
            oprot.writeString(self.carrier.encode('utf-8') if sys.version_info[0] == 2 else self.carrier)
            oprot.writeFieldEnd()
        if self.is_ssl is not None:
            oprot.writeFieldBegin('is_ssl', TType.BOOL, 4)
            oprot.writeBool(self.is_ssl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class verify_packer_carrier_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('verify_packer_carrier_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class get_packer_host_detail_p_args(object):
    """
    Attributes:
     - session_id
     - addr
     - filter
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'addr', 'UTF8', None, ),  # 2
        (3, TType.I32, 'filter', None, None, ),  # 3
    )

    def __init__(self, session_id=None, addr=None, filter=None,):
        self.session_id = session_id
        self.addr = addr
        self.filter = filter

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.filter = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('get_packer_host_detail_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.STRING, 2)
            oprot.writeString(self.addr.encode('utf-8') if sys.version_info[0] == 2 else self.addr)
            oprot.writeFieldEnd()
        if self.filter is not None:
            oprot.writeFieldBegin('filter', TType.I32, 3)
            oprot.writeI32(self.filter)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class get_packer_host_detail_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (physical_machine_info, physical_machine_info.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = physical_machine_info()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('get_packer_host_detail_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
