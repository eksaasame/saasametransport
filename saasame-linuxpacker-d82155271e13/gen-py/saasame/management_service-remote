#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from saasame import management_service
from saasame.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  replica_job_create_detail get_replica_job_create_detail(string session_id, string job_id)')
    print('  void update_replica_job_state(string session_id, replica_job_detail state)')
    print('  bool is_replica_job_alive(string session_id, string job_id)')
    print('  loader_job_create_detail get_loader_job_create_detail(string session_id, string job_id)')
    print('  void update_loader_job_state(string session_id, loader_job_detail state)')
    print('  bool take_snapshots(string session_id, string snapshot_id)')
    print('  bool check_snapshots(string session_id, string snapshots_id)')
    print('  launcher_job_create_detail get_launcher_job_create_detail(string session_id, string job_id)')
    print('  void update_launcher_job_state(string session_id, launcher_job_detail state)')
    print('  void update_launcher_job_state_ex(string session_id, launcher_job_detail state)')
    print('  bool is_launcher_job_image_ready(string session_id, string job_id)')
    print('  bool is_loader_job_devices_ready(string session_id, string job_id)')
    print('  bool mount_loader_job_devices(string session_id, string job_id)')
    print('  bool dismount_loader_job_devices(string session_id, string job_id)')
    print('  bool discard_snapshots(string session_id, string snapshots_id)')
    print('  register_return register_service(string session_id, register_service_info register_info, physical_machine_info machine_info)')
    print('  register_return register_physical_packer(string session_id, register_physical_packer_info packer_info, physical_machine_info machine_info)')
    print('  bool check_running_task(string task_id, string parameters)')
    print('  service_info ping()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = management_service.Client(protocol)
transport.open()

if cmd == 'get_replica_job_create_detail':
    if len(args) != 2:
        print('get_replica_job_create_detail requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_replica_job_create_detail(args[0], args[1],))

elif cmd == 'update_replica_job_state':
    if len(args) != 2:
        print('update_replica_job_state requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_replica_job_state(args[0], eval(args[1]),))

elif cmd == 'is_replica_job_alive':
    if len(args) != 2:
        print('is_replica_job_alive requires 2 args')
        sys.exit(1)
    pp.pprint(client.is_replica_job_alive(args[0], args[1],))

elif cmd == 'get_loader_job_create_detail':
    if len(args) != 2:
        print('get_loader_job_create_detail requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_loader_job_create_detail(args[0], args[1],))

elif cmd == 'update_loader_job_state':
    if len(args) != 2:
        print('update_loader_job_state requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_loader_job_state(args[0], eval(args[1]),))

elif cmd == 'take_snapshots':
    if len(args) != 2:
        print('take_snapshots requires 2 args')
        sys.exit(1)
    pp.pprint(client.take_snapshots(args[0], args[1],))

elif cmd == 'check_snapshots':
    if len(args) != 2:
        print('check_snapshots requires 2 args')
        sys.exit(1)
    pp.pprint(client.check_snapshots(args[0], args[1],))

elif cmd == 'get_launcher_job_create_detail':
    if len(args) != 2:
        print('get_launcher_job_create_detail requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_launcher_job_create_detail(args[0], args[1],))

elif cmd == 'update_launcher_job_state':
    if len(args) != 2:
        print('update_launcher_job_state requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_launcher_job_state(args[0], eval(args[1]),))

elif cmd == 'update_launcher_job_state_ex':
    if len(args) != 2:
        print('update_launcher_job_state_ex requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_launcher_job_state_ex(args[0], eval(args[1]),))

elif cmd == 'is_launcher_job_image_ready':
    if len(args) != 2:
        print('is_launcher_job_image_ready requires 2 args')
        sys.exit(1)
    pp.pprint(client.is_launcher_job_image_ready(args[0], args[1],))

elif cmd == 'is_loader_job_devices_ready':
    if len(args) != 2:
        print('is_loader_job_devices_ready requires 2 args')
        sys.exit(1)
    pp.pprint(client.is_loader_job_devices_ready(args[0], args[1],))

elif cmd == 'mount_loader_job_devices':
    if len(args) != 2:
        print('mount_loader_job_devices requires 2 args')
        sys.exit(1)
    pp.pprint(client.mount_loader_job_devices(args[0], args[1],))

elif cmd == 'dismount_loader_job_devices':
    if len(args) != 2:
        print('dismount_loader_job_devices requires 2 args')
        sys.exit(1)
    pp.pprint(client.dismount_loader_job_devices(args[0], args[1],))

elif cmd == 'discard_snapshots':
    if len(args) != 2:
        print('discard_snapshots requires 2 args')
        sys.exit(1)
    pp.pprint(client.discard_snapshots(args[0], args[1],))

elif cmd == 'register_service':
    if len(args) != 3:
        print('register_service requires 3 args')
        sys.exit(1)
    pp.pprint(client.register_service(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'register_physical_packer':
    if len(args) != 3:
        print('register_physical_packer requires 3 args')
        sys.exit(1)
    pp.pprint(client.register_physical_packer(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'check_running_task':
    if len(args) != 2:
        print('check_running_task requires 2 args')
        sys.exit(1)
    pp.pprint(client.check_running_task(args[0], args[1],))

elif cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
