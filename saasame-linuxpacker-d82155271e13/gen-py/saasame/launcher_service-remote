#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from saasame import launcher_service
from saasame.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  launcher_job_detail create_job_ex(string session_id, string job_id, create_job_detail create_job)')
    print('  launcher_job_detail create_job(string session_id, create_job_detail create_job)')
    print('  launcher_job_detail get_job(string session_id, string job_id)')
    print('  bool interrupt_job(string session_id, string job_id)')
    print('  bool resume_job(string session_id, string job_id)')
    print('  bool update_job(string session_id, string job_id, create_job_detail job)')
    print('  bool remove_job(string session_id, string job_id)')
    print('   list_jobs(string session_id)')
    print('  void terminate(string session_id)')
    print('  bool running_job(string session_id, string job_id)')
    print('  bool verify_management(string management, i32 port, bool is_ssl)')
    print('  bool unregister(string session)')
    print('  job_detail create_job_ex_p(string session_id, string job_id, create_job_detail create_job, string service_type)')
    print('  job_detail get_job_p(string session_id, string job_id, string service_type)')
    print('  bool interrupt_job_p(string session_id, string job_id, string service_type)')
    print('  bool resume_job_p(string session_id, string job_id, string service_type)')
    print('  bool remove_job_p(string session_id, string job_id, string service_type)')
    print('  bool running_job_p(string session_id, string job_id, string service_type)')
    print('  bool update_job_p(string session_id, string job_id, create_job_detail create_job, string service_type)')
    print('  bool remove_snapshot_image_p(string session_id,  images, string service_type)')
    print('  bool test_connection_p(string session_id, connection conn, string service_type)')
    print('  bool add_connection_p(string session_id, connection conn, string service_type)')
    print('  bool remove_connection_p(string session_id, string connection_id, string service_type)')
    print('  bool modify_connection_p(string session_id, connection conn, string service_type)')
    print('   enumerate_connections_p(string session_id, string service_type)')
    print('  connection get_connection_p(string session_id, string connection_id, string service_type)')
    print('  virtual_host get_virtual_host_info_p(string session_id, string host, string username, string password)')
    print('  virtual_machine get_virtual_machine_detail_p(string session_id, string host, string username, string password, string machine_id)')
    print('  physical_machine_info get_physical_machine_detail_p(string session_id, string host, machine_detail_filter filter)')
    print('  bool verify_packer_to_carrier_p(string packer, string carrier, i32 port, bool is_ssl)')
    print('  string take_packer_xray_p(string session_id, string host)')
    print('  service_info get_packer_service_info_p(string session_id, string host)')
    print('  bool set_customized_id_p(string session_id, string disk_addr, string disk_id)')
    print('  service_info packer_ping_p(string session_id, string addr)')
    print('   take_snapshots_p(string session_id, string addr,  disks)')
    print('   take_snapshots_ex_p(string session_id, string addr,  disks, string pre_script, string post_script)')
    print('  delete_snapshot_result delete_snapshot_p(string session_id, string addr, string snapshot_id)')
    print('  delete_snapshot_result delete_snapshot_set_p(string session_id, string addr, string snapshot_set_id)')
    print('   get_all_snapshots_p(string session_id, string addr)')
    print('  packer_job_detail create_packer_job_ex_p(string session_id, string addr, string job_id, create_packer_job_detail create_job)')
    print('  packer_job_detail get_packer_job_p(string session_id, string addr, string job_id, string previous_updated_time)')
    print('  bool interrupt_packer_job_p(string session_id, string addr, string job_id)')
    print('  bool resume_packer_job_p(string session_id, string addr, string job_id)')
    print('  bool remove_packer_job_p(string session_id, string addr, string job_id)')
    print('  bool running_packer_job_p(string session_id, string addr, string job_id)')
    print('   enumerate_packer_disks_p(string session_id, string addr, enumerate_disk_filter_style filter)')
    print('  bool verify_packer_carrier_p(string session_id, string addr, string carrier, bool is_ssl)')
    print('  physical_machine_info get_packer_host_detail_p(string session_id, string addr, machine_detail_filter filter)')
    print('  service_info ping()')
    print('  physical_machine_info get_host_detail(string session_id, machine_detail_filter filter)')
    print('   get_service_list(string session_id)')
    print('   enumerate_disks(enumerate_disk_filter_style filter)')
    print('  bool verify_carrier(string carrier, bool is_ssl)')
    print('  string take_xray()')
    print('  string take_xrays()')
    print('  bool create_mutex(string session, i16 timeout)')
    print('  bool delete_mutex(string session)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = launcher_service.Client(protocol)
transport.open()

if cmd == 'create_job_ex':
    if len(args) != 3:
        print('create_job_ex requires 3 args')
        sys.exit(1)
    pp.pprint(client.create_job_ex(args[0], args[1], eval(args[2]),))

elif cmd == 'create_job':
    if len(args) != 2:
        print('create_job requires 2 args')
        sys.exit(1)
    pp.pprint(client.create_job(args[0], eval(args[1]),))

elif cmd == 'get_job':
    if len(args) != 2:
        print('get_job requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_job(args[0], args[1],))

elif cmd == 'interrupt_job':
    if len(args) != 2:
        print('interrupt_job requires 2 args')
        sys.exit(1)
    pp.pprint(client.interrupt_job(args[0], args[1],))

elif cmd == 'resume_job':
    if len(args) != 2:
        print('resume_job requires 2 args')
        sys.exit(1)
    pp.pprint(client.resume_job(args[0], args[1],))

elif cmd == 'update_job':
    if len(args) != 3:
        print('update_job requires 3 args')
        sys.exit(1)
    pp.pprint(client.update_job(args[0], args[1], eval(args[2]),))

elif cmd == 'remove_job':
    if len(args) != 2:
        print('remove_job requires 2 args')
        sys.exit(1)
    pp.pprint(client.remove_job(args[0], args[1],))

elif cmd == 'list_jobs':
    if len(args) != 1:
        print('list_jobs requires 1 args')
        sys.exit(1)
    pp.pprint(client.list_jobs(args[0],))

elif cmd == 'terminate':
    if len(args) != 1:
        print('terminate requires 1 args')
        sys.exit(1)
    pp.pprint(client.terminate(args[0],))

elif cmd == 'running_job':
    if len(args) != 2:
        print('running_job requires 2 args')
        sys.exit(1)
    pp.pprint(client.running_job(args[0], args[1],))

elif cmd == 'verify_management':
    if len(args) != 3:
        print('verify_management requires 3 args')
        sys.exit(1)
    pp.pprint(client.verify_management(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'unregister':
    if len(args) != 1:
        print('unregister requires 1 args')
        sys.exit(1)
    pp.pprint(client.unregister(args[0],))

elif cmd == 'create_job_ex_p':
    if len(args) != 4:
        print('create_job_ex_p requires 4 args')
        sys.exit(1)
    pp.pprint(client.create_job_ex_p(args[0], args[1], eval(args[2]), args[3],))

elif cmd == 'get_job_p':
    if len(args) != 3:
        print('get_job_p requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_job_p(args[0], args[1], args[2],))

elif cmd == 'interrupt_job_p':
    if len(args) != 3:
        print('interrupt_job_p requires 3 args')
        sys.exit(1)
    pp.pprint(client.interrupt_job_p(args[0], args[1], args[2],))

elif cmd == 'resume_job_p':
    if len(args) != 3:
        print('resume_job_p requires 3 args')
        sys.exit(1)
    pp.pprint(client.resume_job_p(args[0], args[1], args[2],))

elif cmd == 'remove_job_p':
    if len(args) != 3:
        print('remove_job_p requires 3 args')
        sys.exit(1)
    pp.pprint(client.remove_job_p(args[0], args[1], args[2],))

elif cmd == 'running_job_p':
    if len(args) != 3:
        print('running_job_p requires 3 args')
        sys.exit(1)
    pp.pprint(client.running_job_p(args[0], args[1], args[2],))

elif cmd == 'update_job_p':
    if len(args) != 4:
        print('update_job_p requires 4 args')
        sys.exit(1)
    pp.pprint(client.update_job_p(args[0], args[1], eval(args[2]), args[3],))

elif cmd == 'remove_snapshot_image_p':
    if len(args) != 3:
        print('remove_snapshot_image_p requires 3 args')
        sys.exit(1)
    pp.pprint(client.remove_snapshot_image_p(args[0], eval(args[1]), args[2],))

elif cmd == 'test_connection_p':
    if len(args) != 3:
        print('test_connection_p requires 3 args')
        sys.exit(1)
    pp.pprint(client.test_connection_p(args[0], eval(args[1]), args[2],))

elif cmd == 'add_connection_p':
    if len(args) != 3:
        print('add_connection_p requires 3 args')
        sys.exit(1)
    pp.pprint(client.add_connection_p(args[0], eval(args[1]), args[2],))

elif cmd == 'remove_connection_p':
    if len(args) != 3:
        print('remove_connection_p requires 3 args')
        sys.exit(1)
    pp.pprint(client.remove_connection_p(args[0], args[1], args[2],))

elif cmd == 'modify_connection_p':
    if len(args) != 3:
        print('modify_connection_p requires 3 args')
        sys.exit(1)
    pp.pprint(client.modify_connection_p(args[0], eval(args[1]), args[2],))

elif cmd == 'enumerate_connections_p':
    if len(args) != 2:
        print('enumerate_connections_p requires 2 args')
        sys.exit(1)
    pp.pprint(client.enumerate_connections_p(args[0], args[1],))

elif cmd == 'get_connection_p':
    if len(args) != 3:
        print('get_connection_p requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_connection_p(args[0], args[1], args[2],))

elif cmd == 'get_virtual_host_info_p':
    if len(args) != 4:
        print('get_virtual_host_info_p requires 4 args')
        sys.exit(1)
    pp.pprint(client.get_virtual_host_info_p(args[0], args[1], args[2], args[3],))

elif cmd == 'get_virtual_machine_detail_p':
    if len(args) != 5:
        print('get_virtual_machine_detail_p requires 5 args')
        sys.exit(1)
    pp.pprint(client.get_virtual_machine_detail_p(args[0], args[1], args[2], args[3], args[4],))

elif cmd == 'get_physical_machine_detail_p':
    if len(args) != 3:
        print('get_physical_machine_detail_p requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_physical_machine_detail_p(args[0], args[1], eval(args[2]),))

elif cmd == 'verify_packer_to_carrier_p':
    if len(args) != 4:
        print('verify_packer_to_carrier_p requires 4 args')
        sys.exit(1)
    pp.pprint(client.verify_packer_to_carrier_p(args[0], args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'take_packer_xray_p':
    if len(args) != 2:
        print('take_packer_xray_p requires 2 args')
        sys.exit(1)
    pp.pprint(client.take_packer_xray_p(args[0], args[1],))

elif cmd == 'get_packer_service_info_p':
    if len(args) != 2:
        print('get_packer_service_info_p requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_packer_service_info_p(args[0], args[1],))

elif cmd == 'set_customized_id_p':
    if len(args) != 3:
        print('set_customized_id_p requires 3 args')
        sys.exit(1)
    pp.pprint(client.set_customized_id_p(args[0], args[1], args[2],))

elif cmd == 'packer_ping_p':
    if len(args) != 2:
        print('packer_ping_p requires 2 args')
        sys.exit(1)
    pp.pprint(client.packer_ping_p(args[0], args[1],))

elif cmd == 'take_snapshots_p':
    if len(args) != 3:
        print('take_snapshots_p requires 3 args')
        sys.exit(1)
    pp.pprint(client.take_snapshots_p(args[0], args[1], eval(args[2]),))

elif cmd == 'take_snapshots_ex_p':
    if len(args) != 5:
        print('take_snapshots_ex_p requires 5 args')
        sys.exit(1)
    pp.pprint(client.take_snapshots_ex_p(args[0], args[1], eval(args[2]), args[3], args[4],))

elif cmd == 'delete_snapshot_p':
    if len(args) != 3:
        print('delete_snapshot_p requires 3 args')
        sys.exit(1)
    pp.pprint(client.delete_snapshot_p(args[0], args[1], args[2],))

elif cmd == 'delete_snapshot_set_p':
    if len(args) != 3:
        print('delete_snapshot_set_p requires 3 args')
        sys.exit(1)
    pp.pprint(client.delete_snapshot_set_p(args[0], args[1], args[2],))

elif cmd == 'get_all_snapshots_p':
    if len(args) != 2:
        print('get_all_snapshots_p requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_all_snapshots_p(args[0], args[1],))

elif cmd == 'create_packer_job_ex_p':
    if len(args) != 4:
        print('create_packer_job_ex_p requires 4 args')
        sys.exit(1)
    pp.pprint(client.create_packer_job_ex_p(args[0], args[1], args[2], eval(args[3]),))

elif cmd == 'get_packer_job_p':
    if len(args) != 4:
        print('get_packer_job_p requires 4 args')
        sys.exit(1)
    pp.pprint(client.get_packer_job_p(args[0], args[1], args[2], args[3],))

elif cmd == 'interrupt_packer_job_p':
    if len(args) != 3:
        print('interrupt_packer_job_p requires 3 args')
        sys.exit(1)
    pp.pprint(client.interrupt_packer_job_p(args[0], args[1], args[2],))

elif cmd == 'resume_packer_job_p':
    if len(args) != 3:
        print('resume_packer_job_p requires 3 args')
        sys.exit(1)
    pp.pprint(client.resume_packer_job_p(args[0], args[1], args[2],))

elif cmd == 'remove_packer_job_p':
    if len(args) != 3:
        print('remove_packer_job_p requires 3 args')
        sys.exit(1)
    pp.pprint(client.remove_packer_job_p(args[0], args[1], args[2],))

elif cmd == 'running_packer_job_p':
    if len(args) != 3:
        print('running_packer_job_p requires 3 args')
        sys.exit(1)
    pp.pprint(client.running_packer_job_p(args[0], args[1], args[2],))

elif cmd == 'enumerate_packer_disks_p':
    if len(args) != 3:
        print('enumerate_packer_disks_p requires 3 args')
        sys.exit(1)
    pp.pprint(client.enumerate_packer_disks_p(args[0], args[1], eval(args[2]),))

elif cmd == 'verify_packer_carrier_p':
    if len(args) != 4:
        print('verify_packer_carrier_p requires 4 args')
        sys.exit(1)
    pp.pprint(client.verify_packer_carrier_p(args[0], args[1], args[2], eval(args[3]),))

elif cmd == 'get_packer_host_detail_p':
    if len(args) != 3:
        print('get_packer_host_detail_p requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_packer_host_detail_p(args[0], args[1], eval(args[2]),))

elif cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

elif cmd == 'get_host_detail':
    if len(args) != 2:
        print('get_host_detail requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_host_detail(args[0], eval(args[1]),))

elif cmd == 'get_service_list':
    if len(args) != 1:
        print('get_service_list requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_service_list(args[0],))

elif cmd == 'enumerate_disks':
    if len(args) != 1:
        print('enumerate_disks requires 1 args')
        sys.exit(1)
    pp.pprint(client.enumerate_disks(eval(args[0]),))

elif cmd == 'verify_carrier':
    if len(args) != 2:
        print('verify_carrier requires 2 args')
        sys.exit(1)
    pp.pprint(client.verify_carrier(args[0], eval(args[1]),))

elif cmd == 'take_xray':
    if len(args) != 0:
        print('take_xray requires 0 args')
        sys.exit(1)
    pp.pprint(client.take_xray())

elif cmd == 'take_xrays':
    if len(args) != 0:
        print('take_xrays requires 0 args')
        sys.exit(1)
    pp.pprint(client.take_xrays())

elif cmd == 'create_mutex':
    if len(args) != 2:
        print('create_mutex requires 2 args')
        sys.exit(1)
    pp.pprint(client.create_mutex(args[0], eval(args[1]),))

elif cmd == 'delete_mutex':
    if len(args) != 1:
        print('delete_mutex requires 1 args')
        sys.exit(1)
    pp.pprint(client.delete_mutex(args[0],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
