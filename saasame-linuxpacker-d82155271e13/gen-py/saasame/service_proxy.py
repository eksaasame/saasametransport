#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import saasame.physical_packer_service_proxy
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport


class Iface(saasame.physical_packer_service_proxy.Iface):
    def create_job_ex_p(self, session_id, job_id, create_job, service_type):
        """
        Parameters:
         - session_id
         - job_id
         - create_job
         - service_type
        """
        pass

    def get_job_p(self, session_id, job_id, service_type):
        """
        Parameters:
         - session_id
         - job_id
         - service_type
        """
        pass

    def interrupt_job_p(self, session_id, job_id, service_type):
        """
        Parameters:
         - session_id
         - job_id
         - service_type
        """
        pass

    def resume_job_p(self, session_id, job_id, service_type):
        """
        Parameters:
         - session_id
         - job_id
         - service_type
        """
        pass

    def remove_job_p(self, session_id, job_id, service_type):
        """
        Parameters:
         - session_id
         - job_id
         - service_type
        """
        pass

    def running_job_p(self, session_id, job_id, service_type):
        """
        Parameters:
         - session_id
         - job_id
         - service_type
        """
        pass

    def update_job_p(self, session_id, job_id, create_job, service_type):
        """
        Parameters:
         - session_id
         - job_id
         - create_job
         - service_type
        """
        pass

    def remove_snapshot_image_p(self, session_id, images, service_type):
        """
        Parameters:
         - session_id
         - images
         - service_type
        """
        pass

    def test_connection_p(self, session_id, conn, service_type):
        """
        Parameters:
         - session_id
         - conn
         - service_type
        """
        pass

    def add_connection_p(self, session_id, conn, service_type):
        """
        Parameters:
         - session_id
         - conn
         - service_type
        """
        pass

    def remove_connection_p(self, session_id, connection_id, service_type):
        """
        Parameters:
         - session_id
         - connection_id
         - service_type
        """
        pass

    def modify_connection_p(self, session_id, conn, service_type):
        """
        Parameters:
         - session_id
         - conn
         - service_type
        """
        pass

    def enumerate_connections_p(self, session_id, service_type):
        """
        Parameters:
         - session_id
         - service_type
        """
        pass

    def get_connection_p(self, session_id, connection_id, service_type):
        """
        Parameters:
         - session_id
         - connection_id
         - service_type
        """
        pass

    def get_virtual_host_info_p(self, session_id, host, username, password):
        """
        Parameters:
         - session_id
         - host
         - username
         - password
        """
        pass

    def get_virtual_machine_detail_p(self, session_id, host, username, password, machine_id):
        """
        Parameters:
         - session_id
         - host
         - username
         - password
         - machine_id
        """
        pass

    def get_physical_machine_detail_p(self, session_id, host, filter):
        """
        Parameters:
         - session_id
         - host
         - filter
        """
        pass

    def verify_packer_to_carrier_p(self, packer, carrier, port, is_ssl):
        """
        Parameters:
         - packer
         - carrier
         - port
         - is_ssl
        """
        pass

    def take_packer_xray_p(self, session_id, host):
        """
        Parameters:
         - session_id
         - host
        """
        pass

    def get_packer_service_info_p(self, session_id, host):
        """
        Parameters:
         - session_id
         - host
        """
        pass

    def set_customized_id_p(self, session_id, disk_addr, disk_id):
        """
        Parameters:
         - session_id
         - disk_addr
         - disk_id
        """
        pass


class Client(saasame.physical_packer_service_proxy.Client, Iface):
    def __init__(self, iprot, oprot=None):
        saasame.physical_packer_service_proxy.Client.__init__(self, iprot, oprot)

    def create_job_ex_p(self, session_id, job_id, create_job, service_type):
        """
        Parameters:
         - session_id
         - job_id
         - create_job
         - service_type
        """
        self.send_create_job_ex_p(session_id, job_id, create_job, service_type)
        return self.recv_create_job_ex_p()

    def send_create_job_ex_p(self, session_id, job_id, create_job, service_type):
        self._oprot.writeMessageBegin('create_job_ex_p', TMessageType.CALL, self._seqid)
        args = create_job_ex_p_args()
        args.session_id = session_id
        args.job_id = job_id
        args.create_job = create_job
        args.service_type = service_type
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create_job_ex_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_job_ex_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "create_job_ex_p failed: unknown result")

    def get_job_p(self, session_id, job_id, service_type):
        """
        Parameters:
         - session_id
         - job_id
         - service_type
        """
        self.send_get_job_p(session_id, job_id, service_type)
        return self.recv_get_job_p()

    def send_get_job_p(self, session_id, job_id, service_type):
        self._oprot.writeMessageBegin('get_job_p', TMessageType.CALL, self._seqid)
        args = get_job_p_args()
        args.session_id = session_id
        args.job_id = job_id
        args.service_type = service_type
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_job_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_job_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_job_p failed: unknown result")

    def interrupt_job_p(self, session_id, job_id, service_type):
        """
        Parameters:
         - session_id
         - job_id
         - service_type
        """
        self.send_interrupt_job_p(session_id, job_id, service_type)
        return self.recv_interrupt_job_p()

    def send_interrupt_job_p(self, session_id, job_id, service_type):
        self._oprot.writeMessageBegin('interrupt_job_p', TMessageType.CALL, self._seqid)
        args = interrupt_job_p_args()
        args.session_id = session_id
        args.job_id = job_id
        args.service_type = service_type
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_interrupt_job_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = interrupt_job_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "interrupt_job_p failed: unknown result")

    def resume_job_p(self, session_id, job_id, service_type):
        """
        Parameters:
         - session_id
         - job_id
         - service_type
        """
        self.send_resume_job_p(session_id, job_id, service_type)
        return self.recv_resume_job_p()

    def send_resume_job_p(self, session_id, job_id, service_type):
        self._oprot.writeMessageBegin('resume_job_p', TMessageType.CALL, self._seqid)
        args = resume_job_p_args()
        args.session_id = session_id
        args.job_id = job_id
        args.service_type = service_type
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_resume_job_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = resume_job_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "resume_job_p failed: unknown result")

    def remove_job_p(self, session_id, job_id, service_type):
        """
        Parameters:
         - session_id
         - job_id
         - service_type
        """
        self.send_remove_job_p(session_id, job_id, service_type)
        return self.recv_remove_job_p()

    def send_remove_job_p(self, session_id, job_id, service_type):
        self._oprot.writeMessageBegin('remove_job_p', TMessageType.CALL, self._seqid)
        args = remove_job_p_args()
        args.session_id = session_id
        args.job_id = job_id
        args.service_type = service_type
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_remove_job_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = remove_job_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "remove_job_p failed: unknown result")

    def running_job_p(self, session_id, job_id, service_type):
        """
        Parameters:
         - session_id
         - job_id
         - service_type
        """
        self.send_running_job_p(session_id, job_id, service_type)
        return self.recv_running_job_p()

    def send_running_job_p(self, session_id, job_id, service_type):
        self._oprot.writeMessageBegin('running_job_p', TMessageType.CALL, self._seqid)
        args = running_job_p_args()
        args.session_id = session_id
        args.job_id = job_id
        args.service_type = service_type
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_running_job_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = running_job_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "running_job_p failed: unknown result")

    def update_job_p(self, session_id, job_id, create_job, service_type):
        """
        Parameters:
         - session_id
         - job_id
         - create_job
         - service_type
        """
        self.send_update_job_p(session_id, job_id, create_job, service_type)
        return self.recv_update_job_p()

    def send_update_job_p(self, session_id, job_id, create_job, service_type):
        self._oprot.writeMessageBegin('update_job_p', TMessageType.CALL, self._seqid)
        args = update_job_p_args()
        args.session_id = session_id
        args.job_id = job_id
        args.create_job = create_job
        args.service_type = service_type
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_update_job_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = update_job_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "update_job_p failed: unknown result")

    def remove_snapshot_image_p(self, session_id, images, service_type):
        """
        Parameters:
         - session_id
         - images
         - service_type
        """
        self.send_remove_snapshot_image_p(session_id, images, service_type)
        return self.recv_remove_snapshot_image_p()

    def send_remove_snapshot_image_p(self, session_id, images, service_type):
        self._oprot.writeMessageBegin('remove_snapshot_image_p', TMessageType.CALL, self._seqid)
        args = remove_snapshot_image_p_args()
        args.session_id = session_id
        args.images = images
        args.service_type = service_type
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_remove_snapshot_image_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = remove_snapshot_image_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "remove_snapshot_image_p failed: unknown result")

    def test_connection_p(self, session_id, conn, service_type):
        """
        Parameters:
         - session_id
         - conn
         - service_type
        """
        self.send_test_connection_p(session_id, conn, service_type)
        return self.recv_test_connection_p()

    def send_test_connection_p(self, session_id, conn, service_type):
        self._oprot.writeMessageBegin('test_connection_p', TMessageType.CALL, self._seqid)
        args = test_connection_p_args()
        args.session_id = session_id
        args.conn = conn
        args.service_type = service_type
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_test_connection_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = test_connection_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "test_connection_p failed: unknown result")

    def add_connection_p(self, session_id, conn, service_type):
        """
        Parameters:
         - session_id
         - conn
         - service_type
        """
        self.send_add_connection_p(session_id, conn, service_type)
        return self.recv_add_connection_p()

    def send_add_connection_p(self, session_id, conn, service_type):
        self._oprot.writeMessageBegin('add_connection_p', TMessageType.CALL, self._seqid)
        args = add_connection_p_args()
        args.session_id = session_id
        args.conn = conn
        args.service_type = service_type
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_add_connection_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = add_connection_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "add_connection_p failed: unknown result")

    def remove_connection_p(self, session_id, connection_id, service_type):
        """
        Parameters:
         - session_id
         - connection_id
         - service_type
        """
        self.send_remove_connection_p(session_id, connection_id, service_type)
        return self.recv_remove_connection_p()

    def send_remove_connection_p(self, session_id, connection_id, service_type):
        self._oprot.writeMessageBegin('remove_connection_p', TMessageType.CALL, self._seqid)
        args = remove_connection_p_args()
        args.session_id = session_id
        args.connection_id = connection_id
        args.service_type = service_type
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_remove_connection_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = remove_connection_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "remove_connection_p failed: unknown result")

    def modify_connection_p(self, session_id, conn, service_type):
        """
        Parameters:
         - session_id
         - conn
         - service_type
        """
        self.send_modify_connection_p(session_id, conn, service_type)
        return self.recv_modify_connection_p()

    def send_modify_connection_p(self, session_id, conn, service_type):
        self._oprot.writeMessageBegin('modify_connection_p', TMessageType.CALL, self._seqid)
        args = modify_connection_p_args()
        args.session_id = session_id
        args.conn = conn
        args.service_type = service_type
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_modify_connection_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = modify_connection_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "modify_connection_p failed: unknown result")

    def enumerate_connections_p(self, session_id, service_type):
        """
        Parameters:
         - session_id
         - service_type
        """
        self.send_enumerate_connections_p(session_id, service_type)
        return self.recv_enumerate_connections_p()

    def send_enumerate_connections_p(self, session_id, service_type):
        self._oprot.writeMessageBegin('enumerate_connections_p', TMessageType.CALL, self._seqid)
        args = enumerate_connections_p_args()
        args.session_id = session_id
        args.service_type = service_type
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_enumerate_connections_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = enumerate_connections_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "enumerate_connections_p failed: unknown result")

    def get_connection_p(self, session_id, connection_id, service_type):
        """
        Parameters:
         - session_id
         - connection_id
         - service_type
        """
        self.send_get_connection_p(session_id, connection_id, service_type)
        return self.recv_get_connection_p()

    def send_get_connection_p(self, session_id, connection_id, service_type):
        self._oprot.writeMessageBegin('get_connection_p', TMessageType.CALL, self._seqid)
        args = get_connection_p_args()
        args.session_id = session_id
        args.connection_id = connection_id
        args.service_type = service_type
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_connection_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_connection_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_connection_p failed: unknown result")

    def get_virtual_host_info_p(self, session_id, host, username, password):
        """
        Parameters:
         - session_id
         - host
         - username
         - password
        """
        self.send_get_virtual_host_info_p(session_id, host, username, password)
        return self.recv_get_virtual_host_info_p()

    def send_get_virtual_host_info_p(self, session_id, host, username, password):
        self._oprot.writeMessageBegin('get_virtual_host_info_p', TMessageType.CALL, self._seqid)
        args = get_virtual_host_info_p_args()
        args.session_id = session_id
        args.host = host
        args.username = username
        args.password = password
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_virtual_host_info_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_virtual_host_info_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_virtual_host_info_p failed: unknown result")

    def get_virtual_machine_detail_p(self, session_id, host, username, password, machine_id):
        """
        Parameters:
         - session_id
         - host
         - username
         - password
         - machine_id
        """
        self.send_get_virtual_machine_detail_p(session_id, host, username, password, machine_id)
        return self.recv_get_virtual_machine_detail_p()

    def send_get_virtual_machine_detail_p(self, session_id, host, username, password, machine_id):
        self._oprot.writeMessageBegin('get_virtual_machine_detail_p', TMessageType.CALL, self._seqid)
        args = get_virtual_machine_detail_p_args()
        args.session_id = session_id
        args.host = host
        args.username = username
        args.password = password
        args.machine_id = machine_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_virtual_machine_detail_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_virtual_machine_detail_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_virtual_machine_detail_p failed: unknown result")

    def get_physical_machine_detail_p(self, session_id, host, filter):
        """
        Parameters:
         - session_id
         - host
         - filter
        """
        self.send_get_physical_machine_detail_p(session_id, host, filter)
        return self.recv_get_physical_machine_detail_p()

    def send_get_physical_machine_detail_p(self, session_id, host, filter):
        self._oprot.writeMessageBegin('get_physical_machine_detail_p', TMessageType.CALL, self._seqid)
        args = get_physical_machine_detail_p_args()
        args.session_id = session_id
        args.host = host
        args.filter = filter
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_physical_machine_detail_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_physical_machine_detail_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_physical_machine_detail_p failed: unknown result")

    def verify_packer_to_carrier_p(self, packer, carrier, port, is_ssl):
        """
        Parameters:
         - packer
         - carrier
         - port
         - is_ssl
        """
        self.send_verify_packer_to_carrier_p(packer, carrier, port, is_ssl)
        return self.recv_verify_packer_to_carrier_p()

    def send_verify_packer_to_carrier_p(self, packer, carrier, port, is_ssl):
        self._oprot.writeMessageBegin('verify_packer_to_carrier_p', TMessageType.CALL, self._seqid)
        args = verify_packer_to_carrier_p_args()
        args.packer = packer
        args.carrier = carrier
        args.port = port
        args.is_ssl = is_ssl
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_verify_packer_to_carrier_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = verify_packer_to_carrier_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "verify_packer_to_carrier_p failed: unknown result")

    def take_packer_xray_p(self, session_id, host):
        """
        Parameters:
         - session_id
         - host
        """
        self.send_take_packer_xray_p(session_id, host)
        return self.recv_take_packer_xray_p()

    def send_take_packer_xray_p(self, session_id, host):
        self._oprot.writeMessageBegin('take_packer_xray_p', TMessageType.CALL, self._seqid)
        args = take_packer_xray_p_args()
        args.session_id = session_id
        args.host = host
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_take_packer_xray_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = take_packer_xray_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "take_packer_xray_p failed: unknown result")

    def get_packer_service_info_p(self, session_id, host):
        """
        Parameters:
         - session_id
         - host
        """
        self.send_get_packer_service_info_p(session_id, host)
        return self.recv_get_packer_service_info_p()

    def send_get_packer_service_info_p(self, session_id, host):
        self._oprot.writeMessageBegin('get_packer_service_info_p', TMessageType.CALL, self._seqid)
        args = get_packer_service_info_p_args()
        args.session_id = session_id
        args.host = host
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_packer_service_info_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_packer_service_info_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_packer_service_info_p failed: unknown result")

    def set_customized_id_p(self, session_id, disk_addr, disk_id):
        """
        Parameters:
         - session_id
         - disk_addr
         - disk_id
        """
        self.send_set_customized_id_p(session_id, disk_addr, disk_id)
        return self.recv_set_customized_id_p()

    def send_set_customized_id_p(self, session_id, disk_addr, disk_id):
        self._oprot.writeMessageBegin('set_customized_id_p', TMessageType.CALL, self._seqid)
        args = set_customized_id_p_args()
        args.session_id = session_id
        args.disk_addr = disk_addr
        args.disk_id = disk_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_set_customized_id_p(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = set_customized_id_p_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "set_customized_id_p failed: unknown result")


class Processor(saasame.physical_packer_service_proxy.Processor, Iface, TProcessor):
    def __init__(self, handler):
        saasame.physical_packer_service_proxy.Processor.__init__(self, handler)
        self._processMap["create_job_ex_p"] = Processor.process_create_job_ex_p
        self._processMap["get_job_p"] = Processor.process_get_job_p
        self._processMap["interrupt_job_p"] = Processor.process_interrupt_job_p
        self._processMap["resume_job_p"] = Processor.process_resume_job_p
        self._processMap["remove_job_p"] = Processor.process_remove_job_p
        self._processMap["running_job_p"] = Processor.process_running_job_p
        self._processMap["update_job_p"] = Processor.process_update_job_p
        self._processMap["remove_snapshot_image_p"] = Processor.process_remove_snapshot_image_p
        self._processMap["test_connection_p"] = Processor.process_test_connection_p
        self._processMap["add_connection_p"] = Processor.process_add_connection_p
        self._processMap["remove_connection_p"] = Processor.process_remove_connection_p
        self._processMap["modify_connection_p"] = Processor.process_modify_connection_p
        self._processMap["enumerate_connections_p"] = Processor.process_enumerate_connections_p
        self._processMap["get_connection_p"] = Processor.process_get_connection_p
        self._processMap["get_virtual_host_info_p"] = Processor.process_get_virtual_host_info_p
        self._processMap["get_virtual_machine_detail_p"] = Processor.process_get_virtual_machine_detail_p
        self._processMap["get_physical_machine_detail_p"] = Processor.process_get_physical_machine_detail_p
        self._processMap["verify_packer_to_carrier_p"] = Processor.process_verify_packer_to_carrier_p
        self._processMap["take_packer_xray_p"] = Processor.process_take_packer_xray_p
        self._processMap["get_packer_service_info_p"] = Processor.process_get_packer_service_info_p
        self._processMap["set_customized_id_p"] = Processor.process_set_customized_id_p

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_create_job_ex_p(self, seqid, iprot, oprot):
        args = create_job_ex_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_job_ex_p_result()
        try:
            result.success = self._handler.create_job_ex_p(args.session_id, args.job_id, args.create_job, args.service_type)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create_job_ex_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_job_p(self, seqid, iprot, oprot):
        args = get_job_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_job_p_result()
        try:
            result.success = self._handler.get_job_p(args.session_id, args.job_id, args.service_type)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_job_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_interrupt_job_p(self, seqid, iprot, oprot):
        args = interrupt_job_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = interrupt_job_p_result()
        try:
            result.success = self._handler.interrupt_job_p(args.session_id, args.job_id, args.service_type)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("interrupt_job_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_resume_job_p(self, seqid, iprot, oprot):
        args = resume_job_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = resume_job_p_result()
        try:
            result.success = self._handler.resume_job_p(args.session_id, args.job_id, args.service_type)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("resume_job_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_remove_job_p(self, seqid, iprot, oprot):
        args = remove_job_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = remove_job_p_result()
        try:
            result.success = self._handler.remove_job_p(args.session_id, args.job_id, args.service_type)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("remove_job_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_running_job_p(self, seqid, iprot, oprot):
        args = running_job_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = running_job_p_result()
        try:
            result.success = self._handler.running_job_p(args.session_id, args.job_id, args.service_type)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("running_job_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_update_job_p(self, seqid, iprot, oprot):
        args = update_job_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = update_job_p_result()
        try:
            result.success = self._handler.update_job_p(args.session_id, args.job_id, args.create_job, args.service_type)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("update_job_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_remove_snapshot_image_p(self, seqid, iprot, oprot):
        args = remove_snapshot_image_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = remove_snapshot_image_p_result()
        try:
            result.success = self._handler.remove_snapshot_image_p(args.session_id, args.images, args.service_type)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("remove_snapshot_image_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_test_connection_p(self, seqid, iprot, oprot):
        args = test_connection_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = test_connection_p_result()
        try:
            result.success = self._handler.test_connection_p(args.session_id, args.conn, args.service_type)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("test_connection_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_add_connection_p(self, seqid, iprot, oprot):
        args = add_connection_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = add_connection_p_result()
        try:
            result.success = self._handler.add_connection_p(args.session_id, args.conn, args.service_type)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("add_connection_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_remove_connection_p(self, seqid, iprot, oprot):
        args = remove_connection_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = remove_connection_p_result()
        try:
            result.success = self._handler.remove_connection_p(args.session_id, args.connection_id, args.service_type)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("remove_connection_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_modify_connection_p(self, seqid, iprot, oprot):
        args = modify_connection_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = modify_connection_p_result()
        try:
            result.success = self._handler.modify_connection_p(args.session_id, args.conn, args.service_type)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("modify_connection_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_enumerate_connections_p(self, seqid, iprot, oprot):
        args = enumerate_connections_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = enumerate_connections_p_result()
        try:
            result.success = self._handler.enumerate_connections_p(args.session_id, args.service_type)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("enumerate_connections_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_connection_p(self, seqid, iprot, oprot):
        args = get_connection_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_connection_p_result()
        try:
            result.success = self._handler.get_connection_p(args.session_id, args.connection_id, args.service_type)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_connection_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_virtual_host_info_p(self, seqid, iprot, oprot):
        args = get_virtual_host_info_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_virtual_host_info_p_result()
        try:
            result.success = self._handler.get_virtual_host_info_p(args.session_id, args.host, args.username, args.password)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_virtual_host_info_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_virtual_machine_detail_p(self, seqid, iprot, oprot):
        args = get_virtual_machine_detail_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_virtual_machine_detail_p_result()
        try:
            result.success = self._handler.get_virtual_machine_detail_p(args.session_id, args.host, args.username, args.password, args.machine_id)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_virtual_machine_detail_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_physical_machine_detail_p(self, seqid, iprot, oprot):
        args = get_physical_machine_detail_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_physical_machine_detail_p_result()
        try:
            result.success = self._handler.get_physical_machine_detail_p(args.session_id, args.host, args.filter)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_physical_machine_detail_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_verify_packer_to_carrier_p(self, seqid, iprot, oprot):
        args = verify_packer_to_carrier_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = verify_packer_to_carrier_p_result()
        try:
            result.success = self._handler.verify_packer_to_carrier_p(args.packer, args.carrier, args.port, args.is_ssl)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("verify_packer_to_carrier_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_take_packer_xray_p(self, seqid, iprot, oprot):
        args = take_packer_xray_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = take_packer_xray_p_result()
        try:
            result.success = self._handler.take_packer_xray_p(args.session_id, args.host)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("take_packer_xray_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_packer_service_info_p(self, seqid, iprot, oprot):
        args = get_packer_service_info_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_packer_service_info_p_result()
        try:
            result.success = self._handler.get_packer_service_info_p(args.session_id, args.host)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_packer_service_info_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_set_customized_id_p(self, seqid, iprot, oprot):
        args = set_customized_id_p_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = set_customized_id_p_result()
        try:
            result.success = self._handler.set_customized_id_p(args.session_id, args.disk_addr, args.disk_id)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except invalid_operation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("set_customized_id_p", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class create_job_ex_p_args(object):
    """
    Attributes:
     - session_id
     - job_id
     - create_job
     - service_type
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'job_id', 'UTF8', None, ),  # 2
        (3, TType.STRUCT, 'create_job', (create_job_detail, create_job_detail.thrift_spec), None, ),  # 3
        (4, TType.STRING, 'service_type', 'UTF8', None, ),  # 4
    )

    def __init__(self, session_id=None, job_id=None, create_job=None, service_type=None,):
        self.session_id = session_id
        self.job_id = job_id
        self.create_job = create_job
        self.service_type = service_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.job_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.create_job = create_job_detail()
                    self.create_job.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.service_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('create_job_ex_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.job_id is not None:
            oprot.writeFieldBegin('job_id', TType.STRING, 2)
            oprot.writeString(self.job_id.encode('utf-8') if sys.version_info[0] == 2 else self.job_id)
            oprot.writeFieldEnd()
        if self.create_job is not None:
            oprot.writeFieldBegin('create_job', TType.STRUCT, 3)
            self.create_job.write(oprot)
            oprot.writeFieldEnd()
        if self.service_type is not None:
            oprot.writeFieldBegin('service_type', TType.STRING, 4)
            oprot.writeString(self.service_type.encode('utf-8') if sys.version_info[0] == 2 else self.service_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class create_job_ex_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (job_detail, job_detail.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = job_detail()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('create_job_ex_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class get_job_p_args(object):
    """
    Attributes:
     - session_id
     - job_id
     - service_type
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'job_id', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'service_type', 'UTF8', None, ),  # 3
    )

    def __init__(self, session_id=None, job_id=None, service_type=None,):
        self.session_id = session_id
        self.job_id = job_id
        self.service_type = service_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.job_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.service_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('get_job_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.job_id is not None:
            oprot.writeFieldBegin('job_id', TType.STRING, 2)
            oprot.writeString(self.job_id.encode('utf-8') if sys.version_info[0] == 2 else self.job_id)
            oprot.writeFieldEnd()
        if self.service_type is not None:
            oprot.writeFieldBegin('service_type', TType.STRING, 3)
            oprot.writeString(self.service_type.encode('utf-8') if sys.version_info[0] == 2 else self.service_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class get_job_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (job_detail, job_detail.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = job_detail()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('get_job_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class interrupt_job_p_args(object):
    """
    Attributes:
     - session_id
     - job_id
     - service_type
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'job_id', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'service_type', 'UTF8', None, ),  # 3
    )

    def __init__(self, session_id=None, job_id=None, service_type=None,):
        self.session_id = session_id
        self.job_id = job_id
        self.service_type = service_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.job_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.service_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('interrupt_job_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.job_id is not None:
            oprot.writeFieldBegin('job_id', TType.STRING, 2)
            oprot.writeString(self.job_id.encode('utf-8') if sys.version_info[0] == 2 else self.job_id)
            oprot.writeFieldEnd()
        if self.service_type is not None:
            oprot.writeFieldBegin('service_type', TType.STRING, 3)
            oprot.writeString(self.service_type.encode('utf-8') if sys.version_info[0] == 2 else self.service_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class interrupt_job_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('interrupt_job_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class resume_job_p_args(object):
    """
    Attributes:
     - session_id
     - job_id
     - service_type
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'job_id', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'service_type', 'UTF8', None, ),  # 3
    )

    def __init__(self, session_id=None, job_id=None, service_type=None,):
        self.session_id = session_id
        self.job_id = job_id
        self.service_type = service_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.job_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.service_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('resume_job_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.job_id is not None:
            oprot.writeFieldBegin('job_id', TType.STRING, 2)
            oprot.writeString(self.job_id.encode('utf-8') if sys.version_info[0] == 2 else self.job_id)
            oprot.writeFieldEnd()
        if self.service_type is not None:
            oprot.writeFieldBegin('service_type', TType.STRING, 3)
            oprot.writeString(self.service_type.encode('utf-8') if sys.version_info[0] == 2 else self.service_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class resume_job_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('resume_job_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class remove_job_p_args(object):
    """
    Attributes:
     - session_id
     - job_id
     - service_type
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'job_id', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'service_type', 'UTF8', None, ),  # 3
    )

    def __init__(self, session_id=None, job_id=None, service_type=None,):
        self.session_id = session_id
        self.job_id = job_id
        self.service_type = service_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.job_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.service_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('remove_job_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.job_id is not None:
            oprot.writeFieldBegin('job_id', TType.STRING, 2)
            oprot.writeString(self.job_id.encode('utf-8') if sys.version_info[0] == 2 else self.job_id)
            oprot.writeFieldEnd()
        if self.service_type is not None:
            oprot.writeFieldBegin('service_type', TType.STRING, 3)
            oprot.writeString(self.service_type.encode('utf-8') if sys.version_info[0] == 2 else self.service_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class remove_job_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('remove_job_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class running_job_p_args(object):
    """
    Attributes:
     - session_id
     - job_id
     - service_type
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'job_id', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'service_type', 'UTF8', None, ),  # 3
    )

    def __init__(self, session_id=None, job_id=None, service_type=None,):
        self.session_id = session_id
        self.job_id = job_id
        self.service_type = service_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.job_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.service_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('running_job_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.job_id is not None:
            oprot.writeFieldBegin('job_id', TType.STRING, 2)
            oprot.writeString(self.job_id.encode('utf-8') if sys.version_info[0] == 2 else self.job_id)
            oprot.writeFieldEnd()
        if self.service_type is not None:
            oprot.writeFieldBegin('service_type', TType.STRING, 3)
            oprot.writeString(self.service_type.encode('utf-8') if sys.version_info[0] == 2 else self.service_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class running_job_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('running_job_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class update_job_p_args(object):
    """
    Attributes:
     - session_id
     - job_id
     - create_job
     - service_type
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'job_id', 'UTF8', None, ),  # 2
        (3, TType.STRUCT, 'create_job', (create_job_detail, create_job_detail.thrift_spec), None, ),  # 3
        (4, TType.STRING, 'service_type', 'UTF8', None, ),  # 4
    )

    def __init__(self, session_id=None, job_id=None, create_job=None, service_type=None,):
        self.session_id = session_id
        self.job_id = job_id
        self.create_job = create_job
        self.service_type = service_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.job_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.create_job = create_job_detail()
                    self.create_job.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.service_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('update_job_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.job_id is not None:
            oprot.writeFieldBegin('job_id', TType.STRING, 2)
            oprot.writeString(self.job_id.encode('utf-8') if sys.version_info[0] == 2 else self.job_id)
            oprot.writeFieldEnd()
        if self.create_job is not None:
            oprot.writeFieldBegin('create_job', TType.STRUCT, 3)
            self.create_job.write(oprot)
            oprot.writeFieldEnd()
        if self.service_type is not None:
            oprot.writeFieldBegin('service_type', TType.STRING, 4)
            oprot.writeString(self.service_type.encode('utf-8') if sys.version_info[0] == 2 else self.service_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class update_job_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('update_job_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class remove_snapshot_image_p_args(object):
    """
    Attributes:
     - session_id
     - images
     - service_type
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.MAP, 'images', (TType.STRING, 'UTF8', TType.STRUCT, (image_map_info, image_map_info.thrift_spec), False), None, ),  # 2
        (3, TType.STRING, 'service_type', 'UTF8', None, ),  # 3
    )

    def __init__(self, session_id=None, images=None, service_type=None,):
        self.session_id = session_id
        self.images = images
        self.service_type = service_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.images = {}
                    (_ktype1201, _vtype1202, _size1200) = iprot.readMapBegin()
                    for _i1204 in range(_size1200):
                        _key1205 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val1206 = image_map_info()
                        _val1206.read(iprot)
                        self.images[_key1205] = _val1206
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.service_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('remove_snapshot_image_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.images is not None:
            oprot.writeFieldBegin('images', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.images))
            for kiter1207, viter1208 in self.images.items():
                oprot.writeString(kiter1207.encode('utf-8') if sys.version_info[0] == 2 else kiter1207)
                viter1208.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.service_type is not None:
            oprot.writeFieldBegin('service_type', TType.STRING, 3)
            oprot.writeString(self.service_type.encode('utf-8') if sys.version_info[0] == 2 else self.service_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class remove_snapshot_image_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('remove_snapshot_image_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class test_connection_p_args(object):
    """
    Attributes:
     - session_id
     - conn
     - service_type
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRUCT, 'conn', (connection, connection.thrift_spec), None, ),  # 2
        (3, TType.STRING, 'service_type', 'UTF8', None, ),  # 3
    )

    def __init__(self, session_id=None, conn=None, service_type=None,):
        self.session_id = session_id
        self.conn = conn
        self.service_type = service_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.conn = connection()
                    self.conn.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.service_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('test_connection_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.conn is not None:
            oprot.writeFieldBegin('conn', TType.STRUCT, 2)
            self.conn.write(oprot)
            oprot.writeFieldEnd()
        if self.service_type is not None:
            oprot.writeFieldBegin('service_type', TType.STRING, 3)
            oprot.writeString(self.service_type.encode('utf-8') if sys.version_info[0] == 2 else self.service_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class test_connection_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('test_connection_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class add_connection_p_args(object):
    """
    Attributes:
     - session_id
     - conn
     - service_type
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRUCT, 'conn', (connection, connection.thrift_spec), None, ),  # 2
        (3, TType.STRING, 'service_type', 'UTF8', None, ),  # 3
    )

    def __init__(self, session_id=None, conn=None, service_type=None,):
        self.session_id = session_id
        self.conn = conn
        self.service_type = service_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.conn = connection()
                    self.conn.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.service_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('add_connection_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.conn is not None:
            oprot.writeFieldBegin('conn', TType.STRUCT, 2)
            self.conn.write(oprot)
            oprot.writeFieldEnd()
        if self.service_type is not None:
            oprot.writeFieldBegin('service_type', TType.STRING, 3)
            oprot.writeString(self.service_type.encode('utf-8') if sys.version_info[0] == 2 else self.service_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class add_connection_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('add_connection_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class remove_connection_p_args(object):
    """
    Attributes:
     - session_id
     - connection_id
     - service_type
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'connection_id', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'service_type', 'UTF8', None, ),  # 3
    )

    def __init__(self, session_id=None, connection_id=None, service_type=None,):
        self.session_id = session_id
        self.connection_id = connection_id
        self.service_type = service_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.connection_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.service_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('remove_connection_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.connection_id is not None:
            oprot.writeFieldBegin('connection_id', TType.STRING, 2)
            oprot.writeString(self.connection_id.encode('utf-8') if sys.version_info[0] == 2 else self.connection_id)
            oprot.writeFieldEnd()
        if self.service_type is not None:
            oprot.writeFieldBegin('service_type', TType.STRING, 3)
            oprot.writeString(self.service_type.encode('utf-8') if sys.version_info[0] == 2 else self.service_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class remove_connection_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('remove_connection_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class modify_connection_p_args(object):
    """
    Attributes:
     - session_id
     - conn
     - service_type
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRUCT, 'conn', (connection, connection.thrift_spec), None, ),  # 2
        (3, TType.STRING, 'service_type', 'UTF8', None, ),  # 3
    )

    def __init__(self, session_id=None, conn=None, service_type=None,):
        self.session_id = session_id
        self.conn = conn
        self.service_type = service_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.conn = connection()
                    self.conn.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.service_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('modify_connection_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.conn is not None:
            oprot.writeFieldBegin('conn', TType.STRUCT, 2)
            self.conn.write(oprot)
            oprot.writeFieldEnd()
        if self.service_type is not None:
            oprot.writeFieldBegin('service_type', TType.STRING, 3)
            oprot.writeString(self.service_type.encode('utf-8') if sys.version_info[0] == 2 else self.service_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class modify_connection_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('modify_connection_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class enumerate_connections_p_args(object):
    """
    Attributes:
     - session_id
     - service_type
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'service_type', 'UTF8', None, ),  # 2
    )

    def __init__(self, session_id=None, service_type=None,):
        self.session_id = session_id
        self.service_type = service_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.service_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('enumerate_connections_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.service_type is not None:
            oprot.writeFieldBegin('service_type', TType.STRING, 2)
            oprot.writeString(self.service_type.encode('utf-8') if sys.version_info[0] == 2 else self.service_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class enumerate_connections_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (connection, connection.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1212, _size1209) = iprot.readListBegin()
                    for _i1213 in range(_size1209):
                        _elem1214 = connection()
                        _elem1214.read(iprot)
                        self.success.append(_elem1214)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('enumerate_connections_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter1215 in self.success:
                iter1215.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class get_connection_p_args(object):
    """
    Attributes:
     - session_id
     - connection_id
     - service_type
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'connection_id', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'service_type', 'UTF8', None, ),  # 3
    )

    def __init__(self, session_id=None, connection_id=None, service_type=None,):
        self.session_id = session_id
        self.connection_id = connection_id
        self.service_type = service_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.connection_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.service_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('get_connection_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.connection_id is not None:
            oprot.writeFieldBegin('connection_id', TType.STRING, 2)
            oprot.writeString(self.connection_id.encode('utf-8') if sys.version_info[0] == 2 else self.connection_id)
            oprot.writeFieldEnd()
        if self.service_type is not None:
            oprot.writeFieldBegin('service_type', TType.STRING, 3)
            oprot.writeString(self.service_type.encode('utf-8') if sys.version_info[0] == 2 else self.service_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class get_connection_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (connection, connection.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = connection()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('get_connection_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class get_virtual_host_info_p_args(object):
    """
    Attributes:
     - session_id
     - host
     - username
     - password
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'host', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'username', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'password', 'UTF8', None, ),  # 4
    )

    def __init__(self, session_id=None, host=None, username=None, password=None,):
        self.session_id = session_id
        self.host = host
        self.username = username
        self.password = password

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.host = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('get_virtual_host_info_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 2)
            oprot.writeString(self.host.encode('utf-8') if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 3)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 4)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class get_virtual_host_info_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (virtual_host, virtual_host.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = virtual_host()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('get_virtual_host_info_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class get_virtual_machine_detail_p_args(object):
    """
    Attributes:
     - session_id
     - host
     - username
     - password
     - machine_id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'host', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'username', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'password', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'machine_id', 'UTF8', None, ),  # 5
    )

    def __init__(self, session_id=None, host=None, username=None, password=None, machine_id=None,):
        self.session_id = session_id
        self.host = host
        self.username = username
        self.password = password
        self.machine_id = machine_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.host = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.machine_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('get_virtual_machine_detail_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 2)
            oprot.writeString(self.host.encode('utf-8') if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 3)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 4)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.machine_id is not None:
            oprot.writeFieldBegin('machine_id', TType.STRING, 5)
            oprot.writeString(self.machine_id.encode('utf-8') if sys.version_info[0] == 2 else self.machine_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class get_virtual_machine_detail_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (virtual_machine, virtual_machine.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = virtual_machine()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('get_virtual_machine_detail_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class get_physical_machine_detail_p_args(object):
    """
    Attributes:
     - session_id
     - host
     - filter
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'host', 'UTF8', None, ),  # 2
        (3, TType.I32, 'filter', None, None, ),  # 3
    )

    def __init__(self, session_id=None, host=None, filter=None,):
        self.session_id = session_id
        self.host = host
        self.filter = filter

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.host = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.filter = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('get_physical_machine_detail_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 2)
            oprot.writeString(self.host.encode('utf-8') if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        if self.filter is not None:
            oprot.writeFieldBegin('filter', TType.I32, 3)
            oprot.writeI32(self.filter)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class get_physical_machine_detail_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (physical_machine_info, physical_machine_info.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = physical_machine_info()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('get_physical_machine_detail_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class verify_packer_to_carrier_p_args(object):
    """
    Attributes:
     - packer
     - carrier
     - port
     - is_ssl
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'packer', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'carrier', 'UTF8', None, ),  # 2
        (3, TType.I32, 'port', None, None, ),  # 3
        (4, TType.BOOL, 'is_ssl', None, None, ),  # 4
    )

    def __init__(self, packer=None, carrier=None, port=None, is_ssl=None,):
        self.packer = packer
        self.carrier = carrier
        self.port = port
        self.is_ssl = is_ssl

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.packer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.carrier = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.is_ssl = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('verify_packer_to_carrier_p_args')
        if self.packer is not None:
            oprot.writeFieldBegin('packer', TType.STRING, 1)
            oprot.writeString(self.packer.encode('utf-8') if sys.version_info[0] == 2 else self.packer)
            oprot.writeFieldEnd()
        if self.carrier is not None:
            oprot.writeFieldBegin('carrier', TType.STRING, 2)
            oprot.writeString(self.carrier.encode('utf-8') if sys.version_info[0] == 2 else self.carrier)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 3)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.is_ssl is not None:
            oprot.writeFieldBegin('is_ssl', TType.BOOL, 4)
            oprot.writeBool(self.is_ssl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class verify_packer_to_carrier_p_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('verify_packer_to_carrier_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class take_packer_xray_p_args(object):
    """
    Attributes:
     - session_id
     - host
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'host', 'UTF8', None, ),  # 2
    )

    def __init__(self, session_id=None, host=None,):
        self.session_id = session_id
        self.host = host

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.host = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('take_packer_xray_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 2)
            oprot.writeString(self.host.encode('utf-8') if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class take_packer_xray_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.STRING, 'success', 'BINARY', None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('take_packer_xray_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeBinary(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class get_packer_service_info_p_args(object):
    """
    Attributes:
     - session_id
     - host
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'host', 'UTF8', None, ),  # 2
    )

    def __init__(self, session_id=None, host=None,):
        self.session_id = session_id
        self.host = host

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.host = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('get_packer_service_info_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 2)
            oprot.writeString(self.host.encode('utf-8') if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class get_packer_service_info_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (service_info, service_info.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = service_info()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('get_packer_service_info_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class set_customized_id_p_args(object):
    """
    Attributes:
     - session_id
     - disk_addr
     - disk_id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'session_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'disk_addr', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'disk_id', 'UTF8', None, ),  # 3
    )

    def __init__(self, session_id=None, disk_addr=None, disk_id=None,):
        self.session_id = session_id
        self.disk_addr = disk_addr
        self.disk_id = disk_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.disk_addr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.disk_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('set_customized_id_p_args')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRING, 1)
            oprot.writeString(self.session_id.encode('utf-8') if sys.version_info[0] == 2 else self.session_id)
            oprot.writeFieldEnd()
        if self.disk_addr is not None:
            oprot.writeFieldBegin('disk_addr', TType.STRING, 2)
            oprot.writeString(self.disk_addr.encode('utf-8') if sys.version_info[0] == 2 else self.disk_addr)
            oprot.writeFieldEnd()
        if self.disk_id is not None:
            oprot.writeFieldBegin('disk_id', TType.STRING, 3)
            oprot.writeString(self.disk_id.encode('utf-8') if sys.version_info[0] == 2 else self.disk_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class set_customized_id_p_result(object):
    """
    Attributes:
     - success
     - ouch
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ouch', (invalid_operation, invalid_operation.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = invalid_operation()
                    self.ouch.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('set_customized_id_p_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
