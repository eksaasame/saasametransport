/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef loader_service_H
#define loader_service_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/stdcxx.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "saasame_types.h"
#include "common_connection_service.h"

namespace saasame { namespace transport {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class loader_serviceIf : virtual public common_connection_serviceIf {
 public:
  virtual ~loader_serviceIf() {}
  virtual void create_job_ex(loader_job_detail& _return, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job) = 0;
  virtual void create_job(loader_job_detail& _return, const std::string& session_id, const create_job_detail& create_job) = 0;
  virtual void get_job(loader_job_detail& _return, const std::string& session_id, const std::string& job_id) = 0;
  virtual bool interrupt_job(const std::string& session_id, const std::string& job_id) = 0;
  virtual bool resume_job(const std::string& session_id, const std::string& job_id) = 0;
  virtual bool remove_job(const std::string& session_id, const std::string& job_id) = 0;
  virtual void list_jobs(std::vector<loader_job_detail> & _return, const std::string& session_id) = 0;
  virtual bool update_job(const std::string& session_id, const std::string& job_id, const create_job_detail& job) = 0;
  virtual void terminate(const std::string& session_id) = 0;
  virtual bool remove_snapshot_image(const std::string& session_id, const std::map<std::string, image_map_info> & images) = 0;
  virtual bool running_job(const std::string& session_id, const std::string& job_id) = 0;
  virtual bool verify_management(const std::string& management, const int32_t port, const bool is_ssl) = 0;
  virtual bool set_customized_id(const std::string& session_id, const std::string& disk_addr, const std::string& disk_id) = 0;
  virtual void create_vhd_disk_from_snapshot(std::string& _return, const std::string& connection_string, const std::string& container, const std::string& original_disk_name, const std::string& target_disk_name, const std::string& snapshot) = 0;
  virtual bool is_snapshot_vhd_disk_ready(const std::string& task_id) = 0;
  virtual bool delete_vhd_disk(const std::string& connection_string, const std::string& container, const std::string& disk_name) = 0;
  virtual bool delete_vhd_disk_snapshot(const std::string& connection_string, const std::string& container, const std::string& disk_name, const std::string& snapshot) = 0;
  virtual void get_vhd_disk_snapshots(std::vector<vhd_snapshot> & _return, const std::string& connection_string, const std::string& container, const std::string& disk_name) = 0;
  virtual bool verify_connection_string(const std::string& connection_string) = 0;
};

class loader_serviceIfFactory : virtual public common_connection_serviceIfFactory {
 public:
  typedef loader_serviceIf Handler;

  virtual ~loader_serviceIfFactory() {}

  virtual loader_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(common_serviceIf* /* handler */) = 0;
};

class loader_serviceIfSingletonFactory : virtual public loader_serviceIfFactory {
 public:
  loader_serviceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<loader_serviceIf>& iface) : iface_(iface) {}
  virtual ~loader_serviceIfSingletonFactory() {}

  virtual loader_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(common_serviceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<loader_serviceIf> iface_;
};

class loader_serviceNull : virtual public loader_serviceIf , virtual public common_connection_serviceNull {
 public:
  virtual ~loader_serviceNull() {}
  void create_job_ex(loader_job_detail& /* _return */, const std::string& /* session_id */, const std::string& /* job_id */, const create_job_detail& /* create_job */) {
    return;
  }
  void create_job(loader_job_detail& /* _return */, const std::string& /* session_id */, const create_job_detail& /* create_job */) {
    return;
  }
  void get_job(loader_job_detail& /* _return */, const std::string& /* session_id */, const std::string& /* job_id */) {
    return;
  }
  bool interrupt_job(const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
  bool resume_job(const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
  bool remove_job(const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
  void list_jobs(std::vector<loader_job_detail> & /* _return */, const std::string& /* session_id */) {
    return;
  }
  bool update_job(const std::string& /* session_id */, const std::string& /* job_id */, const create_job_detail& /* job */) {
    bool _return = false;
    return _return;
  }
  void terminate(const std::string& /* session_id */) {
    return;
  }
  bool remove_snapshot_image(const std::string& /* session_id */, const std::map<std::string, image_map_info> & /* images */) {
    bool _return = false;
    return _return;
  }
  bool running_job(const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
  bool verify_management(const std::string& /* management */, const int32_t /* port */, const bool /* is_ssl */) {
    bool _return = false;
    return _return;
  }
  bool set_customized_id(const std::string& /* session_id */, const std::string& /* disk_addr */, const std::string& /* disk_id */) {
    bool _return = false;
    return _return;
  }
  void create_vhd_disk_from_snapshot(std::string& /* _return */, const std::string& /* connection_string */, const std::string& /* container */, const std::string& /* original_disk_name */, const std::string& /* target_disk_name */, const std::string& /* snapshot */) {
    return;
  }
  bool is_snapshot_vhd_disk_ready(const std::string& /* task_id */) {
    bool _return = false;
    return _return;
  }
  bool delete_vhd_disk(const std::string& /* connection_string */, const std::string& /* container */, const std::string& /* disk_name */) {
    bool _return = false;
    return _return;
  }
  bool delete_vhd_disk_snapshot(const std::string& /* connection_string */, const std::string& /* container */, const std::string& /* disk_name */, const std::string& /* snapshot */) {
    bool _return = false;
    return _return;
  }
  void get_vhd_disk_snapshots(std::vector<vhd_snapshot> & /* _return */, const std::string& /* connection_string */, const std::string& /* container */, const std::string& /* disk_name */) {
    return;
  }
  bool verify_connection_string(const std::string& /* connection_string */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _loader_service_create_job_ex_args__isset {
  _loader_service_create_job_ex_args__isset() : session_id(false), job_id(false), create_job(false) {}
  bool session_id :1;
  bool job_id :1;
  bool create_job :1;
} _loader_service_create_job_ex_args__isset;

class loader_service_create_job_ex_args {
 public:

  loader_service_create_job_ex_args(const loader_service_create_job_ex_args&);
  loader_service_create_job_ex_args& operator=(const loader_service_create_job_ex_args&);
  loader_service_create_job_ex_args() : session_id(), job_id() {
  }

  virtual ~loader_service_create_job_ex_args() throw();
  std::string session_id;
  std::string job_id;
  create_job_detail create_job;

  _loader_service_create_job_ex_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  void __set_create_job(const create_job_detail& val);

  bool operator == (const loader_service_create_job_ex_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    if (!(create_job == rhs.create_job))
      return false;
    return true;
  }
  bool operator != (const loader_service_create_job_ex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_create_job_ex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class loader_service_create_job_ex_pargs {
 public:


  virtual ~loader_service_create_job_ex_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;
  const create_job_detail* create_job;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_create_job_ex_result__isset {
  _loader_service_create_job_ex_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_create_job_ex_result__isset;

class loader_service_create_job_ex_result {
 public:

  loader_service_create_job_ex_result(const loader_service_create_job_ex_result&);
  loader_service_create_job_ex_result& operator=(const loader_service_create_job_ex_result&);
  loader_service_create_job_ex_result() {
  }

  virtual ~loader_service_create_job_ex_result() throw();
  loader_job_detail success;
  invalid_operation ouch;

  _loader_service_create_job_ex_result__isset __isset;

  void __set_success(const loader_job_detail& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const loader_service_create_job_ex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const loader_service_create_job_ex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_create_job_ex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_create_job_ex_presult__isset {
  _loader_service_create_job_ex_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_create_job_ex_presult__isset;

class loader_service_create_job_ex_presult {
 public:


  virtual ~loader_service_create_job_ex_presult() throw();
  loader_job_detail* success;
  invalid_operation ouch;

  _loader_service_create_job_ex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_create_job_args__isset {
  _loader_service_create_job_args__isset() : session_id(false), create_job(false) {}
  bool session_id :1;
  bool create_job :1;
} _loader_service_create_job_args__isset;

class loader_service_create_job_args {
 public:

  loader_service_create_job_args(const loader_service_create_job_args&);
  loader_service_create_job_args& operator=(const loader_service_create_job_args&);
  loader_service_create_job_args() : session_id() {
  }

  virtual ~loader_service_create_job_args() throw();
  std::string session_id;
  create_job_detail create_job;

  _loader_service_create_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_create_job(const create_job_detail& val);

  bool operator == (const loader_service_create_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(create_job == rhs.create_job))
      return false;
    return true;
  }
  bool operator != (const loader_service_create_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_create_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class loader_service_create_job_pargs {
 public:


  virtual ~loader_service_create_job_pargs() throw();
  const std::string* session_id;
  const create_job_detail* create_job;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_create_job_result__isset {
  _loader_service_create_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_create_job_result__isset;

class loader_service_create_job_result {
 public:

  loader_service_create_job_result(const loader_service_create_job_result&);
  loader_service_create_job_result& operator=(const loader_service_create_job_result&);
  loader_service_create_job_result() {
  }

  virtual ~loader_service_create_job_result() throw();
  loader_job_detail success;
  invalid_operation ouch;

  _loader_service_create_job_result__isset __isset;

  void __set_success(const loader_job_detail& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const loader_service_create_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const loader_service_create_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_create_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_create_job_presult__isset {
  _loader_service_create_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_create_job_presult__isset;

class loader_service_create_job_presult {
 public:


  virtual ~loader_service_create_job_presult() throw();
  loader_job_detail* success;
  invalid_operation ouch;

  _loader_service_create_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_get_job_args__isset {
  _loader_service_get_job_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _loader_service_get_job_args__isset;

class loader_service_get_job_args {
 public:

  loader_service_get_job_args(const loader_service_get_job_args&);
  loader_service_get_job_args& operator=(const loader_service_get_job_args&);
  loader_service_get_job_args() : session_id(), job_id() {
  }

  virtual ~loader_service_get_job_args() throw();
  std::string session_id;
  std::string job_id;

  _loader_service_get_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const loader_service_get_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const loader_service_get_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_get_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class loader_service_get_job_pargs {
 public:


  virtual ~loader_service_get_job_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_get_job_result__isset {
  _loader_service_get_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_get_job_result__isset;

class loader_service_get_job_result {
 public:

  loader_service_get_job_result(const loader_service_get_job_result&);
  loader_service_get_job_result& operator=(const loader_service_get_job_result&);
  loader_service_get_job_result() {
  }

  virtual ~loader_service_get_job_result() throw();
  loader_job_detail success;
  invalid_operation ouch;

  _loader_service_get_job_result__isset __isset;

  void __set_success(const loader_job_detail& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const loader_service_get_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const loader_service_get_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_get_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_get_job_presult__isset {
  _loader_service_get_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_get_job_presult__isset;

class loader_service_get_job_presult {
 public:


  virtual ~loader_service_get_job_presult() throw();
  loader_job_detail* success;
  invalid_operation ouch;

  _loader_service_get_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_interrupt_job_args__isset {
  _loader_service_interrupt_job_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _loader_service_interrupt_job_args__isset;

class loader_service_interrupt_job_args {
 public:

  loader_service_interrupt_job_args(const loader_service_interrupt_job_args&);
  loader_service_interrupt_job_args& operator=(const loader_service_interrupt_job_args&);
  loader_service_interrupt_job_args() : session_id(), job_id() {
  }

  virtual ~loader_service_interrupt_job_args() throw();
  std::string session_id;
  std::string job_id;

  _loader_service_interrupt_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const loader_service_interrupt_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const loader_service_interrupt_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_interrupt_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class loader_service_interrupt_job_pargs {
 public:


  virtual ~loader_service_interrupt_job_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_interrupt_job_result__isset {
  _loader_service_interrupt_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_interrupt_job_result__isset;

class loader_service_interrupt_job_result {
 public:

  loader_service_interrupt_job_result(const loader_service_interrupt_job_result&);
  loader_service_interrupt_job_result& operator=(const loader_service_interrupt_job_result&);
  loader_service_interrupt_job_result() : success(0) {
  }

  virtual ~loader_service_interrupt_job_result() throw();
  bool success;
  invalid_operation ouch;

  _loader_service_interrupt_job_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const loader_service_interrupt_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const loader_service_interrupt_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_interrupt_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_interrupt_job_presult__isset {
  _loader_service_interrupt_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_interrupt_job_presult__isset;

class loader_service_interrupt_job_presult {
 public:


  virtual ~loader_service_interrupt_job_presult() throw();
  bool* success;
  invalid_operation ouch;

  _loader_service_interrupt_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_resume_job_args__isset {
  _loader_service_resume_job_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _loader_service_resume_job_args__isset;

class loader_service_resume_job_args {
 public:

  loader_service_resume_job_args(const loader_service_resume_job_args&);
  loader_service_resume_job_args& operator=(const loader_service_resume_job_args&);
  loader_service_resume_job_args() : session_id(), job_id() {
  }

  virtual ~loader_service_resume_job_args() throw();
  std::string session_id;
  std::string job_id;

  _loader_service_resume_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const loader_service_resume_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const loader_service_resume_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_resume_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class loader_service_resume_job_pargs {
 public:


  virtual ~loader_service_resume_job_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_resume_job_result__isset {
  _loader_service_resume_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_resume_job_result__isset;

class loader_service_resume_job_result {
 public:

  loader_service_resume_job_result(const loader_service_resume_job_result&);
  loader_service_resume_job_result& operator=(const loader_service_resume_job_result&);
  loader_service_resume_job_result() : success(0) {
  }

  virtual ~loader_service_resume_job_result() throw();
  bool success;
  invalid_operation ouch;

  _loader_service_resume_job_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const loader_service_resume_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const loader_service_resume_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_resume_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_resume_job_presult__isset {
  _loader_service_resume_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_resume_job_presult__isset;

class loader_service_resume_job_presult {
 public:


  virtual ~loader_service_resume_job_presult() throw();
  bool* success;
  invalid_operation ouch;

  _loader_service_resume_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_remove_job_args__isset {
  _loader_service_remove_job_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _loader_service_remove_job_args__isset;

class loader_service_remove_job_args {
 public:

  loader_service_remove_job_args(const loader_service_remove_job_args&);
  loader_service_remove_job_args& operator=(const loader_service_remove_job_args&);
  loader_service_remove_job_args() : session_id(), job_id() {
  }

  virtual ~loader_service_remove_job_args() throw();
  std::string session_id;
  std::string job_id;

  _loader_service_remove_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const loader_service_remove_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const loader_service_remove_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_remove_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class loader_service_remove_job_pargs {
 public:


  virtual ~loader_service_remove_job_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_remove_job_result__isset {
  _loader_service_remove_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_remove_job_result__isset;

class loader_service_remove_job_result {
 public:

  loader_service_remove_job_result(const loader_service_remove_job_result&);
  loader_service_remove_job_result& operator=(const loader_service_remove_job_result&);
  loader_service_remove_job_result() : success(0) {
  }

  virtual ~loader_service_remove_job_result() throw();
  bool success;
  invalid_operation ouch;

  _loader_service_remove_job_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const loader_service_remove_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const loader_service_remove_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_remove_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_remove_job_presult__isset {
  _loader_service_remove_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_remove_job_presult__isset;

class loader_service_remove_job_presult {
 public:


  virtual ~loader_service_remove_job_presult() throw();
  bool* success;
  invalid_operation ouch;

  _loader_service_remove_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_list_jobs_args__isset {
  _loader_service_list_jobs_args__isset() : session_id(false) {}
  bool session_id :1;
} _loader_service_list_jobs_args__isset;

class loader_service_list_jobs_args {
 public:

  loader_service_list_jobs_args(const loader_service_list_jobs_args&);
  loader_service_list_jobs_args& operator=(const loader_service_list_jobs_args&);
  loader_service_list_jobs_args() : session_id() {
  }

  virtual ~loader_service_list_jobs_args() throw();
  std::string session_id;

  _loader_service_list_jobs_args__isset __isset;

  void __set_session_id(const std::string& val);

  bool operator == (const loader_service_list_jobs_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const loader_service_list_jobs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_list_jobs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class loader_service_list_jobs_pargs {
 public:


  virtual ~loader_service_list_jobs_pargs() throw();
  const std::string* session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_list_jobs_result__isset {
  _loader_service_list_jobs_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_list_jobs_result__isset;

class loader_service_list_jobs_result {
 public:

  loader_service_list_jobs_result(const loader_service_list_jobs_result&);
  loader_service_list_jobs_result& operator=(const loader_service_list_jobs_result&);
  loader_service_list_jobs_result() {
  }

  virtual ~loader_service_list_jobs_result() throw();
  std::vector<loader_job_detail>  success;
  invalid_operation ouch;

  _loader_service_list_jobs_result__isset __isset;

  void __set_success(const std::vector<loader_job_detail> & val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const loader_service_list_jobs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const loader_service_list_jobs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_list_jobs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_list_jobs_presult__isset {
  _loader_service_list_jobs_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_list_jobs_presult__isset;

class loader_service_list_jobs_presult {
 public:


  virtual ~loader_service_list_jobs_presult() throw();
  std::vector<loader_job_detail> * success;
  invalid_operation ouch;

  _loader_service_list_jobs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_update_job_args__isset {
  _loader_service_update_job_args__isset() : session_id(false), job_id(false), job(false) {}
  bool session_id :1;
  bool job_id :1;
  bool job :1;
} _loader_service_update_job_args__isset;

class loader_service_update_job_args {
 public:

  loader_service_update_job_args(const loader_service_update_job_args&);
  loader_service_update_job_args& operator=(const loader_service_update_job_args&);
  loader_service_update_job_args() : session_id(), job_id() {
  }

  virtual ~loader_service_update_job_args() throw();
  std::string session_id;
  std::string job_id;
  create_job_detail job;

  _loader_service_update_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  void __set_job(const create_job_detail& val);

  bool operator == (const loader_service_update_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    if (!(job == rhs.job))
      return false;
    return true;
  }
  bool operator != (const loader_service_update_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_update_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class loader_service_update_job_pargs {
 public:


  virtual ~loader_service_update_job_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;
  const create_job_detail* job;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_update_job_result__isset {
  _loader_service_update_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_update_job_result__isset;

class loader_service_update_job_result {
 public:

  loader_service_update_job_result(const loader_service_update_job_result&);
  loader_service_update_job_result& operator=(const loader_service_update_job_result&);
  loader_service_update_job_result() : success(0) {
  }

  virtual ~loader_service_update_job_result() throw();
  bool success;
  invalid_operation ouch;

  _loader_service_update_job_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const loader_service_update_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const loader_service_update_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_update_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_update_job_presult__isset {
  _loader_service_update_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_update_job_presult__isset;

class loader_service_update_job_presult {
 public:


  virtual ~loader_service_update_job_presult() throw();
  bool* success;
  invalid_operation ouch;

  _loader_service_update_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_terminate_args__isset {
  _loader_service_terminate_args__isset() : session_id(false) {}
  bool session_id :1;
} _loader_service_terminate_args__isset;

class loader_service_terminate_args {
 public:

  loader_service_terminate_args(const loader_service_terminate_args&);
  loader_service_terminate_args& operator=(const loader_service_terminate_args&);
  loader_service_terminate_args() : session_id() {
  }

  virtual ~loader_service_terminate_args() throw();
  std::string session_id;

  _loader_service_terminate_args__isset __isset;

  void __set_session_id(const std::string& val);

  bool operator == (const loader_service_terminate_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const loader_service_terminate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_terminate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class loader_service_terminate_pargs {
 public:


  virtual ~loader_service_terminate_pargs() throw();
  const std::string* session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class loader_service_terminate_result {
 public:

  loader_service_terminate_result(const loader_service_terminate_result&);
  loader_service_terminate_result& operator=(const loader_service_terminate_result&);
  loader_service_terminate_result() {
  }

  virtual ~loader_service_terminate_result() throw();

  bool operator == (const loader_service_terminate_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const loader_service_terminate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_terminate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class loader_service_terminate_presult {
 public:


  virtual ~loader_service_terminate_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_remove_snapshot_image_args__isset {
  _loader_service_remove_snapshot_image_args__isset() : session_id(false), images(false) {}
  bool session_id :1;
  bool images :1;
} _loader_service_remove_snapshot_image_args__isset;

class loader_service_remove_snapshot_image_args {
 public:

  loader_service_remove_snapshot_image_args(const loader_service_remove_snapshot_image_args&);
  loader_service_remove_snapshot_image_args& operator=(const loader_service_remove_snapshot_image_args&);
  loader_service_remove_snapshot_image_args() : session_id() {
  }

  virtual ~loader_service_remove_snapshot_image_args() throw();
  std::string session_id;
  std::map<std::string, image_map_info>  images;

  _loader_service_remove_snapshot_image_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_images(const std::map<std::string, image_map_info> & val);

  bool operator == (const loader_service_remove_snapshot_image_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(images == rhs.images))
      return false;
    return true;
  }
  bool operator != (const loader_service_remove_snapshot_image_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_remove_snapshot_image_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class loader_service_remove_snapshot_image_pargs {
 public:


  virtual ~loader_service_remove_snapshot_image_pargs() throw();
  const std::string* session_id;
  const std::map<std::string, image_map_info> * images;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_remove_snapshot_image_result__isset {
  _loader_service_remove_snapshot_image_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_remove_snapshot_image_result__isset;

class loader_service_remove_snapshot_image_result {
 public:

  loader_service_remove_snapshot_image_result(const loader_service_remove_snapshot_image_result&);
  loader_service_remove_snapshot_image_result& operator=(const loader_service_remove_snapshot_image_result&);
  loader_service_remove_snapshot_image_result() : success(0) {
  }

  virtual ~loader_service_remove_snapshot_image_result() throw();
  bool success;
  invalid_operation ouch;

  _loader_service_remove_snapshot_image_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const loader_service_remove_snapshot_image_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const loader_service_remove_snapshot_image_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_remove_snapshot_image_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_remove_snapshot_image_presult__isset {
  _loader_service_remove_snapshot_image_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_remove_snapshot_image_presult__isset;

class loader_service_remove_snapshot_image_presult {
 public:


  virtual ~loader_service_remove_snapshot_image_presult() throw();
  bool* success;
  invalid_operation ouch;

  _loader_service_remove_snapshot_image_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_running_job_args__isset {
  _loader_service_running_job_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _loader_service_running_job_args__isset;

class loader_service_running_job_args {
 public:

  loader_service_running_job_args(const loader_service_running_job_args&);
  loader_service_running_job_args& operator=(const loader_service_running_job_args&);
  loader_service_running_job_args() : session_id(), job_id() {
  }

  virtual ~loader_service_running_job_args() throw();
  std::string session_id;
  std::string job_id;

  _loader_service_running_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const loader_service_running_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const loader_service_running_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_running_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class loader_service_running_job_pargs {
 public:


  virtual ~loader_service_running_job_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_running_job_result__isset {
  _loader_service_running_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_running_job_result__isset;

class loader_service_running_job_result {
 public:

  loader_service_running_job_result(const loader_service_running_job_result&);
  loader_service_running_job_result& operator=(const loader_service_running_job_result&);
  loader_service_running_job_result() : success(0) {
  }

  virtual ~loader_service_running_job_result() throw();
  bool success;
  invalid_operation ouch;

  _loader_service_running_job_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const loader_service_running_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const loader_service_running_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_running_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_running_job_presult__isset {
  _loader_service_running_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_running_job_presult__isset;

class loader_service_running_job_presult {
 public:


  virtual ~loader_service_running_job_presult() throw();
  bool* success;
  invalid_operation ouch;

  _loader_service_running_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_verify_management_args__isset {
  _loader_service_verify_management_args__isset() : management(false), port(false), is_ssl(false) {}
  bool management :1;
  bool port :1;
  bool is_ssl :1;
} _loader_service_verify_management_args__isset;

class loader_service_verify_management_args {
 public:

  loader_service_verify_management_args(const loader_service_verify_management_args&);
  loader_service_verify_management_args& operator=(const loader_service_verify_management_args&);
  loader_service_verify_management_args() : management(), port(0), is_ssl(0) {
  }

  virtual ~loader_service_verify_management_args() throw();
  std::string management;
  int32_t port;
  bool is_ssl;

  _loader_service_verify_management_args__isset __isset;

  void __set_management(const std::string& val);

  void __set_port(const int32_t val);

  void __set_is_ssl(const bool val);

  bool operator == (const loader_service_verify_management_args & rhs) const
  {
    if (!(management == rhs.management))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(is_ssl == rhs.is_ssl))
      return false;
    return true;
  }
  bool operator != (const loader_service_verify_management_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_verify_management_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class loader_service_verify_management_pargs {
 public:


  virtual ~loader_service_verify_management_pargs() throw();
  const std::string* management;
  const int32_t* port;
  const bool* is_ssl;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_verify_management_result__isset {
  _loader_service_verify_management_result__isset() : success(false) {}
  bool success :1;
} _loader_service_verify_management_result__isset;

class loader_service_verify_management_result {
 public:

  loader_service_verify_management_result(const loader_service_verify_management_result&);
  loader_service_verify_management_result& operator=(const loader_service_verify_management_result&);
  loader_service_verify_management_result() : success(0) {
  }

  virtual ~loader_service_verify_management_result() throw();
  bool success;

  _loader_service_verify_management_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const loader_service_verify_management_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const loader_service_verify_management_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_verify_management_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_verify_management_presult__isset {
  _loader_service_verify_management_presult__isset() : success(false) {}
  bool success :1;
} _loader_service_verify_management_presult__isset;

class loader_service_verify_management_presult {
 public:


  virtual ~loader_service_verify_management_presult() throw();
  bool* success;

  _loader_service_verify_management_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_set_customized_id_args__isset {
  _loader_service_set_customized_id_args__isset() : session_id(false), disk_addr(false), disk_id(false) {}
  bool session_id :1;
  bool disk_addr :1;
  bool disk_id :1;
} _loader_service_set_customized_id_args__isset;

class loader_service_set_customized_id_args {
 public:

  loader_service_set_customized_id_args(const loader_service_set_customized_id_args&);
  loader_service_set_customized_id_args& operator=(const loader_service_set_customized_id_args&);
  loader_service_set_customized_id_args() : session_id(), disk_addr(), disk_id() {
  }

  virtual ~loader_service_set_customized_id_args() throw();
  std::string session_id;
  std::string disk_addr;
  std::string disk_id;

  _loader_service_set_customized_id_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_disk_addr(const std::string& val);

  void __set_disk_id(const std::string& val);

  bool operator == (const loader_service_set_customized_id_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(disk_addr == rhs.disk_addr))
      return false;
    if (!(disk_id == rhs.disk_id))
      return false;
    return true;
  }
  bool operator != (const loader_service_set_customized_id_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_set_customized_id_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class loader_service_set_customized_id_pargs {
 public:


  virtual ~loader_service_set_customized_id_pargs() throw();
  const std::string* session_id;
  const std::string* disk_addr;
  const std::string* disk_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_set_customized_id_result__isset {
  _loader_service_set_customized_id_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_set_customized_id_result__isset;

class loader_service_set_customized_id_result {
 public:

  loader_service_set_customized_id_result(const loader_service_set_customized_id_result&);
  loader_service_set_customized_id_result& operator=(const loader_service_set_customized_id_result&);
  loader_service_set_customized_id_result() : success(0) {
  }

  virtual ~loader_service_set_customized_id_result() throw();
  bool success;
  invalid_operation ouch;

  _loader_service_set_customized_id_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const loader_service_set_customized_id_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const loader_service_set_customized_id_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_set_customized_id_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_set_customized_id_presult__isset {
  _loader_service_set_customized_id_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_set_customized_id_presult__isset;

class loader_service_set_customized_id_presult {
 public:


  virtual ~loader_service_set_customized_id_presult() throw();
  bool* success;
  invalid_operation ouch;

  _loader_service_set_customized_id_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_create_vhd_disk_from_snapshot_args__isset {
  _loader_service_create_vhd_disk_from_snapshot_args__isset() : connection_string(false), container(false), original_disk_name(false), target_disk_name(false), snapshot(false) {}
  bool connection_string :1;
  bool container :1;
  bool original_disk_name :1;
  bool target_disk_name :1;
  bool snapshot :1;
} _loader_service_create_vhd_disk_from_snapshot_args__isset;

class loader_service_create_vhd_disk_from_snapshot_args {
 public:

  loader_service_create_vhd_disk_from_snapshot_args(const loader_service_create_vhd_disk_from_snapshot_args&);
  loader_service_create_vhd_disk_from_snapshot_args& operator=(const loader_service_create_vhd_disk_from_snapshot_args&);
  loader_service_create_vhd_disk_from_snapshot_args() : connection_string(), container(), original_disk_name(), target_disk_name(), snapshot() {
  }

  virtual ~loader_service_create_vhd_disk_from_snapshot_args() throw();
  std::string connection_string;
  std::string container;
  std::string original_disk_name;
  std::string target_disk_name;
  std::string snapshot;

  _loader_service_create_vhd_disk_from_snapshot_args__isset __isset;

  void __set_connection_string(const std::string& val);

  void __set_container(const std::string& val);

  void __set_original_disk_name(const std::string& val);

  void __set_target_disk_name(const std::string& val);

  void __set_snapshot(const std::string& val);

  bool operator == (const loader_service_create_vhd_disk_from_snapshot_args & rhs) const
  {
    if (!(connection_string == rhs.connection_string))
      return false;
    if (!(container == rhs.container))
      return false;
    if (!(original_disk_name == rhs.original_disk_name))
      return false;
    if (!(target_disk_name == rhs.target_disk_name))
      return false;
    if (!(snapshot == rhs.snapshot))
      return false;
    return true;
  }
  bool operator != (const loader_service_create_vhd_disk_from_snapshot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_create_vhd_disk_from_snapshot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class loader_service_create_vhd_disk_from_snapshot_pargs {
 public:


  virtual ~loader_service_create_vhd_disk_from_snapshot_pargs() throw();
  const std::string* connection_string;
  const std::string* container;
  const std::string* original_disk_name;
  const std::string* target_disk_name;
  const std::string* snapshot;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_create_vhd_disk_from_snapshot_result__isset {
  _loader_service_create_vhd_disk_from_snapshot_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_create_vhd_disk_from_snapshot_result__isset;

class loader_service_create_vhd_disk_from_snapshot_result {
 public:

  loader_service_create_vhd_disk_from_snapshot_result(const loader_service_create_vhd_disk_from_snapshot_result&);
  loader_service_create_vhd_disk_from_snapshot_result& operator=(const loader_service_create_vhd_disk_from_snapshot_result&);
  loader_service_create_vhd_disk_from_snapshot_result() : success() {
  }

  virtual ~loader_service_create_vhd_disk_from_snapshot_result() throw();
  std::string success;
  invalid_operation ouch;

  _loader_service_create_vhd_disk_from_snapshot_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const loader_service_create_vhd_disk_from_snapshot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const loader_service_create_vhd_disk_from_snapshot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_create_vhd_disk_from_snapshot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_create_vhd_disk_from_snapshot_presult__isset {
  _loader_service_create_vhd_disk_from_snapshot_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_create_vhd_disk_from_snapshot_presult__isset;

class loader_service_create_vhd_disk_from_snapshot_presult {
 public:


  virtual ~loader_service_create_vhd_disk_from_snapshot_presult() throw();
  std::string* success;
  invalid_operation ouch;

  _loader_service_create_vhd_disk_from_snapshot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_is_snapshot_vhd_disk_ready_args__isset {
  _loader_service_is_snapshot_vhd_disk_ready_args__isset() : task_id(false) {}
  bool task_id :1;
} _loader_service_is_snapshot_vhd_disk_ready_args__isset;

class loader_service_is_snapshot_vhd_disk_ready_args {
 public:

  loader_service_is_snapshot_vhd_disk_ready_args(const loader_service_is_snapshot_vhd_disk_ready_args&);
  loader_service_is_snapshot_vhd_disk_ready_args& operator=(const loader_service_is_snapshot_vhd_disk_ready_args&);
  loader_service_is_snapshot_vhd_disk_ready_args() : task_id() {
  }

  virtual ~loader_service_is_snapshot_vhd_disk_ready_args() throw();
  std::string task_id;

  _loader_service_is_snapshot_vhd_disk_ready_args__isset __isset;

  void __set_task_id(const std::string& val);

  bool operator == (const loader_service_is_snapshot_vhd_disk_ready_args & rhs) const
  {
    if (!(task_id == rhs.task_id))
      return false;
    return true;
  }
  bool operator != (const loader_service_is_snapshot_vhd_disk_ready_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_is_snapshot_vhd_disk_ready_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class loader_service_is_snapshot_vhd_disk_ready_pargs {
 public:


  virtual ~loader_service_is_snapshot_vhd_disk_ready_pargs() throw();
  const std::string* task_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_is_snapshot_vhd_disk_ready_result__isset {
  _loader_service_is_snapshot_vhd_disk_ready_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_is_snapshot_vhd_disk_ready_result__isset;

class loader_service_is_snapshot_vhd_disk_ready_result {
 public:

  loader_service_is_snapshot_vhd_disk_ready_result(const loader_service_is_snapshot_vhd_disk_ready_result&);
  loader_service_is_snapshot_vhd_disk_ready_result& operator=(const loader_service_is_snapshot_vhd_disk_ready_result&);
  loader_service_is_snapshot_vhd_disk_ready_result() : success(0) {
  }

  virtual ~loader_service_is_snapshot_vhd_disk_ready_result() throw();
  bool success;
  invalid_operation ouch;

  _loader_service_is_snapshot_vhd_disk_ready_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const loader_service_is_snapshot_vhd_disk_ready_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const loader_service_is_snapshot_vhd_disk_ready_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_is_snapshot_vhd_disk_ready_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_is_snapshot_vhd_disk_ready_presult__isset {
  _loader_service_is_snapshot_vhd_disk_ready_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_is_snapshot_vhd_disk_ready_presult__isset;

class loader_service_is_snapshot_vhd_disk_ready_presult {
 public:


  virtual ~loader_service_is_snapshot_vhd_disk_ready_presult() throw();
  bool* success;
  invalid_operation ouch;

  _loader_service_is_snapshot_vhd_disk_ready_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_delete_vhd_disk_args__isset {
  _loader_service_delete_vhd_disk_args__isset() : connection_string(false), container(false), disk_name(false) {}
  bool connection_string :1;
  bool container :1;
  bool disk_name :1;
} _loader_service_delete_vhd_disk_args__isset;

class loader_service_delete_vhd_disk_args {
 public:

  loader_service_delete_vhd_disk_args(const loader_service_delete_vhd_disk_args&);
  loader_service_delete_vhd_disk_args& operator=(const loader_service_delete_vhd_disk_args&);
  loader_service_delete_vhd_disk_args() : connection_string(), container(), disk_name() {
  }

  virtual ~loader_service_delete_vhd_disk_args() throw();
  std::string connection_string;
  std::string container;
  std::string disk_name;

  _loader_service_delete_vhd_disk_args__isset __isset;

  void __set_connection_string(const std::string& val);

  void __set_container(const std::string& val);

  void __set_disk_name(const std::string& val);

  bool operator == (const loader_service_delete_vhd_disk_args & rhs) const
  {
    if (!(connection_string == rhs.connection_string))
      return false;
    if (!(container == rhs.container))
      return false;
    if (!(disk_name == rhs.disk_name))
      return false;
    return true;
  }
  bool operator != (const loader_service_delete_vhd_disk_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_delete_vhd_disk_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class loader_service_delete_vhd_disk_pargs {
 public:


  virtual ~loader_service_delete_vhd_disk_pargs() throw();
  const std::string* connection_string;
  const std::string* container;
  const std::string* disk_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_delete_vhd_disk_result__isset {
  _loader_service_delete_vhd_disk_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_delete_vhd_disk_result__isset;

class loader_service_delete_vhd_disk_result {
 public:

  loader_service_delete_vhd_disk_result(const loader_service_delete_vhd_disk_result&);
  loader_service_delete_vhd_disk_result& operator=(const loader_service_delete_vhd_disk_result&);
  loader_service_delete_vhd_disk_result() : success(0) {
  }

  virtual ~loader_service_delete_vhd_disk_result() throw();
  bool success;
  invalid_operation ouch;

  _loader_service_delete_vhd_disk_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const loader_service_delete_vhd_disk_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const loader_service_delete_vhd_disk_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_delete_vhd_disk_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_delete_vhd_disk_presult__isset {
  _loader_service_delete_vhd_disk_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_delete_vhd_disk_presult__isset;

class loader_service_delete_vhd_disk_presult {
 public:


  virtual ~loader_service_delete_vhd_disk_presult() throw();
  bool* success;
  invalid_operation ouch;

  _loader_service_delete_vhd_disk_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_delete_vhd_disk_snapshot_args__isset {
  _loader_service_delete_vhd_disk_snapshot_args__isset() : connection_string(false), container(false), disk_name(false), snapshot(false) {}
  bool connection_string :1;
  bool container :1;
  bool disk_name :1;
  bool snapshot :1;
} _loader_service_delete_vhd_disk_snapshot_args__isset;

class loader_service_delete_vhd_disk_snapshot_args {
 public:

  loader_service_delete_vhd_disk_snapshot_args(const loader_service_delete_vhd_disk_snapshot_args&);
  loader_service_delete_vhd_disk_snapshot_args& operator=(const loader_service_delete_vhd_disk_snapshot_args&);
  loader_service_delete_vhd_disk_snapshot_args() : connection_string(), container(), disk_name(), snapshot() {
  }

  virtual ~loader_service_delete_vhd_disk_snapshot_args() throw();
  std::string connection_string;
  std::string container;
  std::string disk_name;
  std::string snapshot;

  _loader_service_delete_vhd_disk_snapshot_args__isset __isset;

  void __set_connection_string(const std::string& val);

  void __set_container(const std::string& val);

  void __set_disk_name(const std::string& val);

  void __set_snapshot(const std::string& val);

  bool operator == (const loader_service_delete_vhd_disk_snapshot_args & rhs) const
  {
    if (!(connection_string == rhs.connection_string))
      return false;
    if (!(container == rhs.container))
      return false;
    if (!(disk_name == rhs.disk_name))
      return false;
    if (!(snapshot == rhs.snapshot))
      return false;
    return true;
  }
  bool operator != (const loader_service_delete_vhd_disk_snapshot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_delete_vhd_disk_snapshot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class loader_service_delete_vhd_disk_snapshot_pargs {
 public:


  virtual ~loader_service_delete_vhd_disk_snapshot_pargs() throw();
  const std::string* connection_string;
  const std::string* container;
  const std::string* disk_name;
  const std::string* snapshot;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_delete_vhd_disk_snapshot_result__isset {
  _loader_service_delete_vhd_disk_snapshot_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_delete_vhd_disk_snapshot_result__isset;

class loader_service_delete_vhd_disk_snapshot_result {
 public:

  loader_service_delete_vhd_disk_snapshot_result(const loader_service_delete_vhd_disk_snapshot_result&);
  loader_service_delete_vhd_disk_snapshot_result& operator=(const loader_service_delete_vhd_disk_snapshot_result&);
  loader_service_delete_vhd_disk_snapshot_result() : success(0) {
  }

  virtual ~loader_service_delete_vhd_disk_snapshot_result() throw();
  bool success;
  invalid_operation ouch;

  _loader_service_delete_vhd_disk_snapshot_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const loader_service_delete_vhd_disk_snapshot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const loader_service_delete_vhd_disk_snapshot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_delete_vhd_disk_snapshot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_delete_vhd_disk_snapshot_presult__isset {
  _loader_service_delete_vhd_disk_snapshot_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_delete_vhd_disk_snapshot_presult__isset;

class loader_service_delete_vhd_disk_snapshot_presult {
 public:


  virtual ~loader_service_delete_vhd_disk_snapshot_presult() throw();
  bool* success;
  invalid_operation ouch;

  _loader_service_delete_vhd_disk_snapshot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_get_vhd_disk_snapshots_args__isset {
  _loader_service_get_vhd_disk_snapshots_args__isset() : connection_string(false), container(false), disk_name(false) {}
  bool connection_string :1;
  bool container :1;
  bool disk_name :1;
} _loader_service_get_vhd_disk_snapshots_args__isset;

class loader_service_get_vhd_disk_snapshots_args {
 public:

  loader_service_get_vhd_disk_snapshots_args(const loader_service_get_vhd_disk_snapshots_args&);
  loader_service_get_vhd_disk_snapshots_args& operator=(const loader_service_get_vhd_disk_snapshots_args&);
  loader_service_get_vhd_disk_snapshots_args() : connection_string(), container(), disk_name() {
  }

  virtual ~loader_service_get_vhd_disk_snapshots_args() throw();
  std::string connection_string;
  std::string container;
  std::string disk_name;

  _loader_service_get_vhd_disk_snapshots_args__isset __isset;

  void __set_connection_string(const std::string& val);

  void __set_container(const std::string& val);

  void __set_disk_name(const std::string& val);

  bool operator == (const loader_service_get_vhd_disk_snapshots_args & rhs) const
  {
    if (!(connection_string == rhs.connection_string))
      return false;
    if (!(container == rhs.container))
      return false;
    if (!(disk_name == rhs.disk_name))
      return false;
    return true;
  }
  bool operator != (const loader_service_get_vhd_disk_snapshots_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_get_vhd_disk_snapshots_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class loader_service_get_vhd_disk_snapshots_pargs {
 public:


  virtual ~loader_service_get_vhd_disk_snapshots_pargs() throw();
  const std::string* connection_string;
  const std::string* container;
  const std::string* disk_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_get_vhd_disk_snapshots_result__isset {
  _loader_service_get_vhd_disk_snapshots_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_get_vhd_disk_snapshots_result__isset;

class loader_service_get_vhd_disk_snapshots_result {
 public:

  loader_service_get_vhd_disk_snapshots_result(const loader_service_get_vhd_disk_snapshots_result&);
  loader_service_get_vhd_disk_snapshots_result& operator=(const loader_service_get_vhd_disk_snapshots_result&);
  loader_service_get_vhd_disk_snapshots_result() {
  }

  virtual ~loader_service_get_vhd_disk_snapshots_result() throw();
  std::vector<vhd_snapshot>  success;
  invalid_operation ouch;

  _loader_service_get_vhd_disk_snapshots_result__isset __isset;

  void __set_success(const std::vector<vhd_snapshot> & val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const loader_service_get_vhd_disk_snapshots_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const loader_service_get_vhd_disk_snapshots_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_get_vhd_disk_snapshots_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_get_vhd_disk_snapshots_presult__isset {
  _loader_service_get_vhd_disk_snapshots_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_get_vhd_disk_snapshots_presult__isset;

class loader_service_get_vhd_disk_snapshots_presult {
 public:


  virtual ~loader_service_get_vhd_disk_snapshots_presult() throw();
  std::vector<vhd_snapshot> * success;
  invalid_operation ouch;

  _loader_service_get_vhd_disk_snapshots_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_verify_connection_string_args__isset {
  _loader_service_verify_connection_string_args__isset() : connection_string(false) {}
  bool connection_string :1;
} _loader_service_verify_connection_string_args__isset;

class loader_service_verify_connection_string_args {
 public:

  loader_service_verify_connection_string_args(const loader_service_verify_connection_string_args&);
  loader_service_verify_connection_string_args& operator=(const loader_service_verify_connection_string_args&);
  loader_service_verify_connection_string_args() : connection_string() {
  }

  virtual ~loader_service_verify_connection_string_args() throw();
  std::string connection_string;

  _loader_service_verify_connection_string_args__isset __isset;

  void __set_connection_string(const std::string& val);

  bool operator == (const loader_service_verify_connection_string_args & rhs) const
  {
    if (!(connection_string == rhs.connection_string))
      return false;
    return true;
  }
  bool operator != (const loader_service_verify_connection_string_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_verify_connection_string_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class loader_service_verify_connection_string_pargs {
 public:


  virtual ~loader_service_verify_connection_string_pargs() throw();
  const std::string* connection_string;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_verify_connection_string_result__isset {
  _loader_service_verify_connection_string_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_verify_connection_string_result__isset;

class loader_service_verify_connection_string_result {
 public:

  loader_service_verify_connection_string_result(const loader_service_verify_connection_string_result&);
  loader_service_verify_connection_string_result& operator=(const loader_service_verify_connection_string_result&);
  loader_service_verify_connection_string_result() : success(0) {
  }

  virtual ~loader_service_verify_connection_string_result() throw();
  bool success;
  invalid_operation ouch;

  _loader_service_verify_connection_string_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const loader_service_verify_connection_string_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const loader_service_verify_connection_string_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const loader_service_verify_connection_string_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _loader_service_verify_connection_string_presult__isset {
  _loader_service_verify_connection_string_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _loader_service_verify_connection_string_presult__isset;

class loader_service_verify_connection_string_presult {
 public:


  virtual ~loader_service_verify_connection_string_presult() throw();
  bool* success;
  invalid_operation ouch;

  _loader_service_verify_connection_string_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class loader_serviceClient : virtual public loader_serviceIf, public common_connection_serviceClient {
 public:
  loader_serviceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    common_connection_serviceClient(prot, prot) {}
  loader_serviceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    common_connection_serviceClient(iprot, oprot) {}
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void create_job_ex(loader_job_detail& _return, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job);
  void send_create_job_ex(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job);
  void recv_create_job_ex(loader_job_detail& _return);
  void create_job(loader_job_detail& _return, const std::string& session_id, const create_job_detail& create_job);
  void send_create_job(const std::string& session_id, const create_job_detail& create_job);
  void recv_create_job(loader_job_detail& _return);
  void get_job(loader_job_detail& _return, const std::string& session_id, const std::string& job_id);
  void send_get_job(const std::string& session_id, const std::string& job_id);
  void recv_get_job(loader_job_detail& _return);
  bool interrupt_job(const std::string& session_id, const std::string& job_id);
  void send_interrupt_job(const std::string& session_id, const std::string& job_id);
  bool recv_interrupt_job();
  bool resume_job(const std::string& session_id, const std::string& job_id);
  void send_resume_job(const std::string& session_id, const std::string& job_id);
  bool recv_resume_job();
  bool remove_job(const std::string& session_id, const std::string& job_id);
  void send_remove_job(const std::string& session_id, const std::string& job_id);
  bool recv_remove_job();
  void list_jobs(std::vector<loader_job_detail> & _return, const std::string& session_id);
  void send_list_jobs(const std::string& session_id);
  void recv_list_jobs(std::vector<loader_job_detail> & _return);
  bool update_job(const std::string& session_id, const std::string& job_id, const create_job_detail& job);
  void send_update_job(const std::string& session_id, const std::string& job_id, const create_job_detail& job);
  bool recv_update_job();
  void terminate(const std::string& session_id);
  void send_terminate(const std::string& session_id);
  void recv_terminate();
  bool remove_snapshot_image(const std::string& session_id, const std::map<std::string, image_map_info> & images);
  void send_remove_snapshot_image(const std::string& session_id, const std::map<std::string, image_map_info> & images);
  bool recv_remove_snapshot_image();
  bool running_job(const std::string& session_id, const std::string& job_id);
  void send_running_job(const std::string& session_id, const std::string& job_id);
  bool recv_running_job();
  bool verify_management(const std::string& management, const int32_t port, const bool is_ssl);
  void send_verify_management(const std::string& management, const int32_t port, const bool is_ssl);
  bool recv_verify_management();
  bool set_customized_id(const std::string& session_id, const std::string& disk_addr, const std::string& disk_id);
  void send_set_customized_id(const std::string& session_id, const std::string& disk_addr, const std::string& disk_id);
  bool recv_set_customized_id();
  void create_vhd_disk_from_snapshot(std::string& _return, const std::string& connection_string, const std::string& container, const std::string& original_disk_name, const std::string& target_disk_name, const std::string& snapshot);
  void send_create_vhd_disk_from_snapshot(const std::string& connection_string, const std::string& container, const std::string& original_disk_name, const std::string& target_disk_name, const std::string& snapshot);
  void recv_create_vhd_disk_from_snapshot(std::string& _return);
  bool is_snapshot_vhd_disk_ready(const std::string& task_id);
  void send_is_snapshot_vhd_disk_ready(const std::string& task_id);
  bool recv_is_snapshot_vhd_disk_ready();
  bool delete_vhd_disk(const std::string& connection_string, const std::string& container, const std::string& disk_name);
  void send_delete_vhd_disk(const std::string& connection_string, const std::string& container, const std::string& disk_name);
  bool recv_delete_vhd_disk();
  bool delete_vhd_disk_snapshot(const std::string& connection_string, const std::string& container, const std::string& disk_name, const std::string& snapshot);
  void send_delete_vhd_disk_snapshot(const std::string& connection_string, const std::string& container, const std::string& disk_name, const std::string& snapshot);
  bool recv_delete_vhd_disk_snapshot();
  void get_vhd_disk_snapshots(std::vector<vhd_snapshot> & _return, const std::string& connection_string, const std::string& container, const std::string& disk_name);
  void send_get_vhd_disk_snapshots(const std::string& connection_string, const std::string& container, const std::string& disk_name);
  void recv_get_vhd_disk_snapshots(std::vector<vhd_snapshot> & _return);
  bool verify_connection_string(const std::string& connection_string);
  void send_verify_connection_string(const std::string& connection_string);
  bool recv_verify_connection_string();
};

class loader_serviceProcessor : public common_connection_serviceProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<loader_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (loader_serviceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_create_job_ex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_interrupt_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resume_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_list_jobs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_terminate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_snapshot_image(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_running_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verify_management(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_customized_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_vhd_disk_from_snapshot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_is_snapshot_vhd_disk_ready(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_vhd_disk(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_vhd_disk_snapshot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_vhd_disk_snapshots(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verify_connection_string(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  loader_serviceProcessor(::apache::thrift::stdcxx::shared_ptr<loader_serviceIf> iface) :
    common_connection_serviceProcessor(iface),
    iface_(iface) {
    processMap_["create_job_ex"] = &loader_serviceProcessor::process_create_job_ex;
    processMap_["create_job"] = &loader_serviceProcessor::process_create_job;
    processMap_["get_job"] = &loader_serviceProcessor::process_get_job;
    processMap_["interrupt_job"] = &loader_serviceProcessor::process_interrupt_job;
    processMap_["resume_job"] = &loader_serviceProcessor::process_resume_job;
    processMap_["remove_job"] = &loader_serviceProcessor::process_remove_job;
    processMap_["list_jobs"] = &loader_serviceProcessor::process_list_jobs;
    processMap_["update_job"] = &loader_serviceProcessor::process_update_job;
    processMap_["terminate"] = &loader_serviceProcessor::process_terminate;
    processMap_["remove_snapshot_image"] = &loader_serviceProcessor::process_remove_snapshot_image;
    processMap_["running_job"] = &loader_serviceProcessor::process_running_job;
    processMap_["verify_management"] = &loader_serviceProcessor::process_verify_management;
    processMap_["set_customized_id"] = &loader_serviceProcessor::process_set_customized_id;
    processMap_["create_vhd_disk_from_snapshot"] = &loader_serviceProcessor::process_create_vhd_disk_from_snapshot;
    processMap_["is_snapshot_vhd_disk_ready"] = &loader_serviceProcessor::process_is_snapshot_vhd_disk_ready;
    processMap_["delete_vhd_disk"] = &loader_serviceProcessor::process_delete_vhd_disk;
    processMap_["delete_vhd_disk_snapshot"] = &loader_serviceProcessor::process_delete_vhd_disk_snapshot;
    processMap_["get_vhd_disk_snapshots"] = &loader_serviceProcessor::process_get_vhd_disk_snapshots;
    processMap_["verify_connection_string"] = &loader_serviceProcessor::process_verify_connection_string;
  }

  virtual ~loader_serviceProcessor() {}
};

class loader_serviceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  loader_serviceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< loader_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< loader_serviceIfFactory > handlerFactory_;
};

class loader_serviceMultiface : virtual public loader_serviceIf, public common_connection_serviceMultiface {
 public:
  loader_serviceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<loader_serviceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<apache::thrift::stdcxx::shared_ptr<loader_serviceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      common_connection_serviceMultiface::add(*iter);
    }
  }
  virtual ~loader_serviceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<loader_serviceIf> > ifaces_;
  loader_serviceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<loader_serviceIf> iface) {
    common_connection_serviceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void create_job_ex(loader_job_detail& _return, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_job_ex(_return, session_id, job_id, create_job);
    }
    ifaces_[i]->create_job_ex(_return, session_id, job_id, create_job);
    return;
  }

  void create_job(loader_job_detail& _return, const std::string& session_id, const create_job_detail& create_job) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_job(_return, session_id, create_job);
    }
    ifaces_[i]->create_job(_return, session_id, create_job);
    return;
  }

  void get_job(loader_job_detail& _return, const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_job(_return, session_id, job_id);
    }
    ifaces_[i]->get_job(_return, session_id, job_id);
    return;
  }

  bool interrupt_job(const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->interrupt_job(session_id, job_id);
    }
    return ifaces_[i]->interrupt_job(session_id, job_id);
  }

  bool resume_job(const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resume_job(session_id, job_id);
    }
    return ifaces_[i]->resume_job(session_id, job_id);
  }

  bool remove_job(const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_job(session_id, job_id);
    }
    return ifaces_[i]->remove_job(session_id, job_id);
  }

  void list_jobs(std::vector<loader_job_detail> & _return, const std::string& session_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->list_jobs(_return, session_id);
    }
    ifaces_[i]->list_jobs(_return, session_id);
    return;
  }

  bool update_job(const std::string& session_id, const std::string& job_id, const create_job_detail& job) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_job(session_id, job_id, job);
    }
    return ifaces_[i]->update_job(session_id, job_id, job);
  }

  void terminate(const std::string& session_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->terminate(session_id);
    }
    ifaces_[i]->terminate(session_id);
  }

  bool remove_snapshot_image(const std::string& session_id, const std::map<std::string, image_map_info> & images) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_snapshot_image(session_id, images);
    }
    return ifaces_[i]->remove_snapshot_image(session_id, images);
  }

  bool running_job(const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->running_job(session_id, job_id);
    }
    return ifaces_[i]->running_job(session_id, job_id);
  }

  bool verify_management(const std::string& management, const int32_t port, const bool is_ssl) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verify_management(management, port, is_ssl);
    }
    return ifaces_[i]->verify_management(management, port, is_ssl);
  }

  bool set_customized_id(const std::string& session_id, const std::string& disk_addr, const std::string& disk_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_customized_id(session_id, disk_addr, disk_id);
    }
    return ifaces_[i]->set_customized_id(session_id, disk_addr, disk_id);
  }

  void create_vhd_disk_from_snapshot(std::string& _return, const std::string& connection_string, const std::string& container, const std::string& original_disk_name, const std::string& target_disk_name, const std::string& snapshot) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_vhd_disk_from_snapshot(_return, connection_string, container, original_disk_name, target_disk_name, snapshot);
    }
    ifaces_[i]->create_vhd_disk_from_snapshot(_return, connection_string, container, original_disk_name, target_disk_name, snapshot);
    return;
  }

  bool is_snapshot_vhd_disk_ready(const std::string& task_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->is_snapshot_vhd_disk_ready(task_id);
    }
    return ifaces_[i]->is_snapshot_vhd_disk_ready(task_id);
  }

  bool delete_vhd_disk(const std::string& connection_string, const std::string& container, const std::string& disk_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_vhd_disk(connection_string, container, disk_name);
    }
    return ifaces_[i]->delete_vhd_disk(connection_string, container, disk_name);
  }

  bool delete_vhd_disk_snapshot(const std::string& connection_string, const std::string& container, const std::string& disk_name, const std::string& snapshot) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_vhd_disk_snapshot(connection_string, container, disk_name, snapshot);
    }
    return ifaces_[i]->delete_vhd_disk_snapshot(connection_string, container, disk_name, snapshot);
  }

  void get_vhd_disk_snapshots(std::vector<vhd_snapshot> & _return, const std::string& connection_string, const std::string& container, const std::string& disk_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_vhd_disk_snapshots(_return, connection_string, container, disk_name);
    }
    ifaces_[i]->get_vhd_disk_snapshots(_return, connection_string, container, disk_name);
    return;
  }

  bool verify_connection_string(const std::string& connection_string) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verify_connection_string(connection_string);
    }
    return ifaces_[i]->verify_connection_string(connection_string);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class loader_serviceConcurrentClient : virtual public loader_serviceIf, public common_connection_serviceConcurrentClient {
 public:
  loader_serviceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    common_connection_serviceConcurrentClient(prot, prot) {}
  loader_serviceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    common_connection_serviceConcurrentClient(iprot, oprot) {}
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void create_job_ex(loader_job_detail& _return, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job);
  int32_t send_create_job_ex(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job);
  void recv_create_job_ex(loader_job_detail& _return, const int32_t seqid);
  void create_job(loader_job_detail& _return, const std::string& session_id, const create_job_detail& create_job);
  int32_t send_create_job(const std::string& session_id, const create_job_detail& create_job);
  void recv_create_job(loader_job_detail& _return, const int32_t seqid);
  void get_job(loader_job_detail& _return, const std::string& session_id, const std::string& job_id);
  int32_t send_get_job(const std::string& session_id, const std::string& job_id);
  void recv_get_job(loader_job_detail& _return, const int32_t seqid);
  bool interrupt_job(const std::string& session_id, const std::string& job_id);
  int32_t send_interrupt_job(const std::string& session_id, const std::string& job_id);
  bool recv_interrupt_job(const int32_t seqid);
  bool resume_job(const std::string& session_id, const std::string& job_id);
  int32_t send_resume_job(const std::string& session_id, const std::string& job_id);
  bool recv_resume_job(const int32_t seqid);
  bool remove_job(const std::string& session_id, const std::string& job_id);
  int32_t send_remove_job(const std::string& session_id, const std::string& job_id);
  bool recv_remove_job(const int32_t seqid);
  void list_jobs(std::vector<loader_job_detail> & _return, const std::string& session_id);
  int32_t send_list_jobs(const std::string& session_id);
  void recv_list_jobs(std::vector<loader_job_detail> & _return, const int32_t seqid);
  bool update_job(const std::string& session_id, const std::string& job_id, const create_job_detail& job);
  int32_t send_update_job(const std::string& session_id, const std::string& job_id, const create_job_detail& job);
  bool recv_update_job(const int32_t seqid);
  void terminate(const std::string& session_id);
  int32_t send_terminate(const std::string& session_id);
  void recv_terminate(const int32_t seqid);
  bool remove_snapshot_image(const std::string& session_id, const std::map<std::string, image_map_info> & images);
  int32_t send_remove_snapshot_image(const std::string& session_id, const std::map<std::string, image_map_info> & images);
  bool recv_remove_snapshot_image(const int32_t seqid);
  bool running_job(const std::string& session_id, const std::string& job_id);
  int32_t send_running_job(const std::string& session_id, const std::string& job_id);
  bool recv_running_job(const int32_t seqid);
  bool verify_management(const std::string& management, const int32_t port, const bool is_ssl);
  int32_t send_verify_management(const std::string& management, const int32_t port, const bool is_ssl);
  bool recv_verify_management(const int32_t seqid);
  bool set_customized_id(const std::string& session_id, const std::string& disk_addr, const std::string& disk_id);
  int32_t send_set_customized_id(const std::string& session_id, const std::string& disk_addr, const std::string& disk_id);
  bool recv_set_customized_id(const int32_t seqid);
  void create_vhd_disk_from_snapshot(std::string& _return, const std::string& connection_string, const std::string& container, const std::string& original_disk_name, const std::string& target_disk_name, const std::string& snapshot);
  int32_t send_create_vhd_disk_from_snapshot(const std::string& connection_string, const std::string& container, const std::string& original_disk_name, const std::string& target_disk_name, const std::string& snapshot);
  void recv_create_vhd_disk_from_snapshot(std::string& _return, const int32_t seqid);
  bool is_snapshot_vhd_disk_ready(const std::string& task_id);
  int32_t send_is_snapshot_vhd_disk_ready(const std::string& task_id);
  bool recv_is_snapshot_vhd_disk_ready(const int32_t seqid);
  bool delete_vhd_disk(const std::string& connection_string, const std::string& container, const std::string& disk_name);
  int32_t send_delete_vhd_disk(const std::string& connection_string, const std::string& container, const std::string& disk_name);
  bool recv_delete_vhd_disk(const int32_t seqid);
  bool delete_vhd_disk_snapshot(const std::string& connection_string, const std::string& container, const std::string& disk_name, const std::string& snapshot);
  int32_t send_delete_vhd_disk_snapshot(const std::string& connection_string, const std::string& container, const std::string& disk_name, const std::string& snapshot);
  bool recv_delete_vhd_disk_snapshot(const int32_t seqid);
  void get_vhd_disk_snapshots(std::vector<vhd_snapshot> & _return, const std::string& connection_string, const std::string& container, const std::string& disk_name);
  int32_t send_get_vhd_disk_snapshots(const std::string& connection_string, const std::string& container, const std::string& disk_name);
  void recv_get_vhd_disk_snapshots(std::vector<vhd_snapshot> & _return, const int32_t seqid);
  bool verify_connection_string(const std::string& connection_string);
  int32_t send_verify_connection_string(const std::string& connection_string);
  bool recv_verify_connection_string(const int32_t seqid);
};

class loader_serviceCobClient;

class loader_serviceCobClIf : virtual public common_connection_serviceCobClIf {
 public:
  virtual ~loader_serviceCobClIf() {}
  virtual void create_job_ex(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job) = 0;
  virtual void create_job(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& session_id, const create_job_detail& create_job) = 0;
  virtual void get_job(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void interrupt_job(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void resume_job(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void remove_job(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void list_jobs(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& session_id) = 0;
  virtual void update_job(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const create_job_detail& job) = 0;
  virtual void terminate(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& session_id) = 0;
  virtual void remove_snapshot_image(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& session_id, const std::map<std::string, image_map_info> & images) = 0;
  virtual void running_job(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void verify_management(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& management, const int32_t port, const bool is_ssl) = 0;
  virtual void set_customized_id(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& session_id, const std::string& disk_addr, const std::string& disk_id) = 0;
  virtual void create_vhd_disk_from_snapshot(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& connection_string, const std::string& container, const std::string& original_disk_name, const std::string& target_disk_name, const std::string& snapshot) = 0;
  virtual void is_snapshot_vhd_disk_ready(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& task_id) = 0;
  virtual void delete_vhd_disk(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& connection_string, const std::string& container, const std::string& disk_name) = 0;
  virtual void delete_vhd_disk_snapshot(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& connection_string, const std::string& container, const std::string& disk_name, const std::string& snapshot) = 0;
  virtual void get_vhd_disk_snapshots(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& connection_string, const std::string& container, const std::string& disk_name) = 0;
  virtual void verify_connection_string(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& connection_string) = 0;
};

class loader_serviceCobSvIf : virtual public common_connection_serviceCobSvIf {
 public:
  virtual ~loader_serviceCobSvIf() {}
  virtual void create_job_ex(::apache::thrift::stdcxx::function<void(loader_job_detail const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job) = 0;
  virtual void create_job(::apache::thrift::stdcxx::function<void(loader_job_detail const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const create_job_detail& create_job) = 0;
  virtual void get_job(::apache::thrift::stdcxx::function<void(loader_job_detail const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void interrupt_job(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void resume_job(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void remove_job(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void list_jobs(::apache::thrift::stdcxx::function<void(std::vector<loader_job_detail>  const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id) = 0;
  virtual void update_job(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id, const create_job_detail& job) = 0;
  virtual void terminate(::apache::thrift::stdcxx::function<void()> cob, const std::string& session_id) = 0;
  virtual void remove_snapshot_image(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::map<std::string, image_map_info> & images) = 0;
  virtual void running_job(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void verify_management(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, const std::string& management, const int32_t port, const bool is_ssl) = 0;
  virtual void set_customized_id(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& disk_addr, const std::string& disk_id) = 0;
  virtual void create_vhd_disk_from_snapshot(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& connection_string, const std::string& container, const std::string& original_disk_name, const std::string& target_disk_name, const std::string& snapshot) = 0;
  virtual void is_snapshot_vhd_disk_ready(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& task_id) = 0;
  virtual void delete_vhd_disk(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& connection_string, const std::string& container, const std::string& disk_name) = 0;
  virtual void delete_vhd_disk_snapshot(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& connection_string, const std::string& container, const std::string& disk_name, const std::string& snapshot) = 0;
  virtual void get_vhd_disk_snapshots(::apache::thrift::stdcxx::function<void(std::vector<vhd_snapshot>  const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& connection_string, const std::string& container, const std::string& disk_name) = 0;
  virtual void verify_connection_string(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& connection_string) = 0;
};

class loader_serviceCobSvIfFactory : virtual public common_connection_serviceCobSvIfFactory {
 public:
  typedef loader_serviceCobSvIf Handler;

  virtual ~loader_serviceCobSvIfFactory() {}

  virtual loader_serviceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(common_serviceCobSvIf* /* handler */) = 0;
};

class loader_serviceCobSvIfSingletonFactory : virtual public loader_serviceCobSvIfFactory {
 public:
  loader_serviceCobSvIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<loader_serviceCobSvIf>& iface) : iface_(iface) {}
  virtual ~loader_serviceCobSvIfSingletonFactory() {}

  virtual loader_serviceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(common_serviceCobSvIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<loader_serviceCobSvIf> iface_;
};

class loader_serviceCobSvNull : virtual public loader_serviceCobSvIf , virtual public common_connection_serviceCobSvNull {
 public:
  virtual ~loader_serviceCobSvNull() {}
  void create_job_ex(::apache::thrift::stdcxx::function<void(loader_job_detail const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */, const create_job_detail& /* create_job */) {
    loader_job_detail _return;
    return cob(_return);
  }
  void create_job(::apache::thrift::stdcxx::function<void(loader_job_detail const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const create_job_detail& /* create_job */) {
    loader_job_detail _return;
    return cob(_return);
  }
  void get_job(::apache::thrift::stdcxx::function<void(loader_job_detail const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    loader_job_detail _return;
    return cob(_return);
  }
  void interrupt_job(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
  void resume_job(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
  void remove_job(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
  void list_jobs(::apache::thrift::stdcxx::function<void(std::vector<loader_job_detail>  const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */) {
    std::vector<loader_job_detail>  _return;
    return cob(_return);
  }
  void update_job(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */, const create_job_detail& /* job */) {
    bool _return = false;
    return cob(_return);
  }
  void terminate(::apache::thrift::stdcxx::function<void()> cob, const std::string& /* session_id */) {
    return cob();
  }
  void remove_snapshot_image(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::map<std::string, image_map_info> & /* images */) {
    bool _return = false;
    return cob(_return);
  }
  void running_job(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
  void verify_management(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, const std::string& /* management */, const int32_t /* port */, const bool /* is_ssl */) {
    bool _return = false;
    return cob(_return);
  }
  void set_customized_id(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* disk_addr */, const std::string& /* disk_id */) {
    bool _return = false;
    return cob(_return);
  }
  void create_vhd_disk_from_snapshot(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* connection_string */, const std::string& /* container */, const std::string& /* original_disk_name */, const std::string& /* target_disk_name */, const std::string& /* snapshot */) {
    std::string _return;
    return cob(_return);
  }
  void is_snapshot_vhd_disk_ready(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* task_id */) {
    bool _return = false;
    return cob(_return);
  }
  void delete_vhd_disk(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* connection_string */, const std::string& /* container */, const std::string& /* disk_name */) {
    bool _return = false;
    return cob(_return);
  }
  void delete_vhd_disk_snapshot(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* connection_string */, const std::string& /* container */, const std::string& /* disk_name */, const std::string& /* snapshot */) {
    bool _return = false;
    return cob(_return);
  }
  void get_vhd_disk_snapshots(::apache::thrift::stdcxx::function<void(std::vector<vhd_snapshot>  const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* connection_string */, const std::string& /* container */, const std::string& /* disk_name */) {
    std::vector<vhd_snapshot>  _return;
    return cob(_return);
  }
  void verify_connection_string(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* connection_string */) {
    bool _return = false;
    return cob(_return);
  }
};

class loader_serviceCobClient : virtual public loader_serviceCobClIf, public common_connection_serviceCobClient {
 public:
  loader_serviceCobClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    common_connection_serviceCobClient(channel, protocolFactory) {}
  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void create_job_ex(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job);
  void send_create_job_ex(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job);
  void recv_create_job_ex(loader_job_detail& _return);
  void create_job(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& session_id, const create_job_detail& create_job);
  void send_create_job(const std::string& session_id, const create_job_detail& create_job);
  void recv_create_job(loader_job_detail& _return);
  void get_job(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_get_job(const std::string& session_id, const std::string& job_id);
  void recv_get_job(loader_job_detail& _return);
  void interrupt_job(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_interrupt_job(const std::string& session_id, const std::string& job_id);
  bool recv_interrupt_job();
  void resume_job(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_resume_job(const std::string& session_id, const std::string& job_id);
  bool recv_resume_job();
  void remove_job(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_remove_job(const std::string& session_id, const std::string& job_id);
  bool recv_remove_job();
  void list_jobs(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& session_id);
  void send_list_jobs(const std::string& session_id);
  void recv_list_jobs(std::vector<loader_job_detail> & _return);
  void update_job(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const create_job_detail& job);
  void send_update_job(const std::string& session_id, const std::string& job_id, const create_job_detail& job);
  bool recv_update_job();
  void terminate(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& session_id);
  void send_terminate(const std::string& session_id);
  void recv_terminate();
  void remove_snapshot_image(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& session_id, const std::map<std::string, image_map_info> & images);
  void send_remove_snapshot_image(const std::string& session_id, const std::map<std::string, image_map_info> & images);
  bool recv_remove_snapshot_image();
  void running_job(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_running_job(const std::string& session_id, const std::string& job_id);
  bool recv_running_job();
  void verify_management(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& management, const int32_t port, const bool is_ssl);
  void send_verify_management(const std::string& management, const int32_t port, const bool is_ssl);
  bool recv_verify_management();
  void set_customized_id(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& session_id, const std::string& disk_addr, const std::string& disk_id);
  void send_set_customized_id(const std::string& session_id, const std::string& disk_addr, const std::string& disk_id);
  bool recv_set_customized_id();
  void create_vhd_disk_from_snapshot(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& connection_string, const std::string& container, const std::string& original_disk_name, const std::string& target_disk_name, const std::string& snapshot);
  void send_create_vhd_disk_from_snapshot(const std::string& connection_string, const std::string& container, const std::string& original_disk_name, const std::string& target_disk_name, const std::string& snapshot);
  void recv_create_vhd_disk_from_snapshot(std::string& _return);
  void is_snapshot_vhd_disk_ready(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& task_id);
  void send_is_snapshot_vhd_disk_ready(const std::string& task_id);
  bool recv_is_snapshot_vhd_disk_ready();
  void delete_vhd_disk(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& connection_string, const std::string& container, const std::string& disk_name);
  void send_delete_vhd_disk(const std::string& connection_string, const std::string& container, const std::string& disk_name);
  bool recv_delete_vhd_disk();
  void delete_vhd_disk_snapshot(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& connection_string, const std::string& container, const std::string& disk_name, const std::string& snapshot);
  void send_delete_vhd_disk_snapshot(const std::string& connection_string, const std::string& container, const std::string& disk_name, const std::string& snapshot);
  bool recv_delete_vhd_disk_snapshot();
  void get_vhd_disk_snapshots(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& connection_string, const std::string& container, const std::string& disk_name);
  void send_get_vhd_disk_snapshots(const std::string& connection_string, const std::string& container, const std::string& disk_name);
  void recv_get_vhd_disk_snapshots(std::vector<vhd_snapshot> & _return);
  void verify_connection_string(::apache::thrift::stdcxx::function<void(loader_serviceCobClient* client)> cob, const std::string& connection_string);
  void send_verify_connection_string(const std::string& connection_string);
  bool recv_verify_connection_string();
};

class loader_serviceAsyncProcessor : public common_connection_serviceAsyncProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<loader_serviceCobSvIf> iface_;
  virtual void dispatchCall(::apache::thrift::stdcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (loader_serviceAsyncProcessor::*ProcessFunction)(::apache::thrift::stdcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_create_job_ex(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_create_job_ex(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const loader_job_detail& _return);
  void throw_create_job_ex(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_create_job(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_create_job(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const loader_job_detail& _return);
  void throw_create_job(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_job(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_job(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const loader_job_detail& _return);
  void throw_get_job(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_interrupt_job(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_interrupt_job(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_interrupt_job(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_resume_job(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_resume_job(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_resume_job(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_remove_job(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_remove_job(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_remove_job(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_list_jobs(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_list_jobs(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector<loader_job_detail> & _return);
  void throw_list_jobs(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_update_job(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_update_job(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_update_job(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_terminate(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_terminate(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx);
  void throw_terminate(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_remove_snapshot_image(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_remove_snapshot_image(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_remove_snapshot_image(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_running_job(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_running_job(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_running_job(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_verify_management(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_verify_management(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_verify_management(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_set_customized_id(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_set_customized_id(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_set_customized_id(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_create_vhd_disk_from_snapshot(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_create_vhd_disk_from_snapshot(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::string& _return);
  void throw_create_vhd_disk_from_snapshot(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_is_snapshot_vhd_disk_ready(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_is_snapshot_vhd_disk_ready(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_is_snapshot_vhd_disk_ready(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_delete_vhd_disk(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_delete_vhd_disk(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_delete_vhd_disk(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_delete_vhd_disk_snapshot(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_delete_vhd_disk_snapshot(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_delete_vhd_disk_snapshot(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_vhd_disk_snapshots(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_vhd_disk_snapshots(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector<vhd_snapshot> & _return);
  void throw_get_vhd_disk_snapshots(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_verify_connection_string(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_verify_connection_string(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_verify_connection_string(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  loader_serviceAsyncProcessor(::apache::thrift::stdcxx::shared_ptr<loader_serviceCobSvIf> iface) :
    common_connection_serviceAsyncProcessor(iface),
    iface_(iface) {
    processMap_["create_job_ex"] = &loader_serviceAsyncProcessor::process_create_job_ex;
    processMap_["create_job"] = &loader_serviceAsyncProcessor::process_create_job;
    processMap_["get_job"] = &loader_serviceAsyncProcessor::process_get_job;
    processMap_["interrupt_job"] = &loader_serviceAsyncProcessor::process_interrupt_job;
    processMap_["resume_job"] = &loader_serviceAsyncProcessor::process_resume_job;
    processMap_["remove_job"] = &loader_serviceAsyncProcessor::process_remove_job;
    processMap_["list_jobs"] = &loader_serviceAsyncProcessor::process_list_jobs;
    processMap_["update_job"] = &loader_serviceAsyncProcessor::process_update_job;
    processMap_["terminate"] = &loader_serviceAsyncProcessor::process_terminate;
    processMap_["remove_snapshot_image"] = &loader_serviceAsyncProcessor::process_remove_snapshot_image;
    processMap_["running_job"] = &loader_serviceAsyncProcessor::process_running_job;
    processMap_["verify_management"] = &loader_serviceAsyncProcessor::process_verify_management;
    processMap_["set_customized_id"] = &loader_serviceAsyncProcessor::process_set_customized_id;
    processMap_["create_vhd_disk_from_snapshot"] = &loader_serviceAsyncProcessor::process_create_vhd_disk_from_snapshot;
    processMap_["is_snapshot_vhd_disk_ready"] = &loader_serviceAsyncProcessor::process_is_snapshot_vhd_disk_ready;
    processMap_["delete_vhd_disk"] = &loader_serviceAsyncProcessor::process_delete_vhd_disk;
    processMap_["delete_vhd_disk_snapshot"] = &loader_serviceAsyncProcessor::process_delete_vhd_disk_snapshot;
    processMap_["get_vhd_disk_snapshots"] = &loader_serviceAsyncProcessor::process_get_vhd_disk_snapshots;
    processMap_["verify_connection_string"] = &loader_serviceAsyncProcessor::process_verify_connection_string;
  }

  virtual ~loader_serviceAsyncProcessor() {}
};

class loader_serviceAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  loader_serviceAsyncProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< loader_serviceCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< loader_serviceCobSvIfFactory > handlerFactory_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
