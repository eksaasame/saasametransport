/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef common_connection_service_H
#define common_connection_service_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/stdcxx.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "saasame_types.h"
#include "common_service.h"

namespace saasame { namespace transport {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class common_connection_serviceIf : virtual public common_serviceIf {
 public:
  virtual ~common_connection_serviceIf() {}
  virtual bool test_connection(const std::string& session_id, const connection& conn) = 0;
  virtual bool add_connection(const std::string& session_id, const connection& conn) = 0;
  virtual bool remove_connection(const std::string& session_id, const std::string& connection_id) = 0;
  virtual bool modify_connection(const std::string& session_id, const connection& conn) = 0;
  virtual void enumerate_connections(std::vector<connection> & _return, const std::string& session_id) = 0;
  virtual void get_connection(connection& _return, const std::string& session_id, const std::string& connection_id) = 0;
  virtual int64_t get_available_bytes(const std::string& session_id, const std::string& connection_id) = 0;
};

class common_connection_serviceIfFactory : virtual public common_serviceIfFactory {
 public:
  typedef common_connection_serviceIf Handler;

  virtual ~common_connection_serviceIfFactory() {}

  virtual common_connection_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(common_serviceIf* /* handler */) = 0;
};

class common_connection_serviceIfSingletonFactory : virtual public common_connection_serviceIfFactory {
 public:
  common_connection_serviceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<common_connection_serviceIf>& iface) : iface_(iface) {}
  virtual ~common_connection_serviceIfSingletonFactory() {}

  virtual common_connection_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(common_serviceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<common_connection_serviceIf> iface_;
};

class common_connection_serviceNull : virtual public common_connection_serviceIf , virtual public common_serviceNull {
 public:
  virtual ~common_connection_serviceNull() {}
  bool test_connection(const std::string& /* session_id */, const connection& /* conn */) {
    bool _return = false;
    return _return;
  }
  bool add_connection(const std::string& /* session_id */, const connection& /* conn */) {
    bool _return = false;
    return _return;
  }
  bool remove_connection(const std::string& /* session_id */, const std::string& /* connection_id */) {
    bool _return = false;
    return _return;
  }
  bool modify_connection(const std::string& /* session_id */, const connection& /* conn */) {
    bool _return = false;
    return _return;
  }
  void enumerate_connections(std::vector<connection> & /* _return */, const std::string& /* session_id */) {
    return;
  }
  void get_connection(connection& /* _return */, const std::string& /* session_id */, const std::string& /* connection_id */) {
    return;
  }
  int64_t get_available_bytes(const std::string& /* session_id */, const std::string& /* connection_id */) {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _common_connection_service_test_connection_args__isset {
  _common_connection_service_test_connection_args__isset() : session_id(false), conn(false) {}
  bool session_id :1;
  bool conn :1;
} _common_connection_service_test_connection_args__isset;

class common_connection_service_test_connection_args {
 public:

  common_connection_service_test_connection_args(const common_connection_service_test_connection_args&);
  common_connection_service_test_connection_args& operator=(const common_connection_service_test_connection_args&);
  common_connection_service_test_connection_args() : session_id() {
  }

  virtual ~common_connection_service_test_connection_args() throw();
  std::string session_id;
  connection conn;

  _common_connection_service_test_connection_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_conn(const connection& val);

  bool operator == (const common_connection_service_test_connection_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(conn == rhs.conn))
      return false;
    return true;
  }
  bool operator != (const common_connection_service_test_connection_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_connection_service_test_connection_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class common_connection_service_test_connection_pargs {
 public:


  virtual ~common_connection_service_test_connection_pargs() throw();
  const std::string* session_id;
  const connection* conn;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_connection_service_test_connection_result__isset {
  _common_connection_service_test_connection_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_connection_service_test_connection_result__isset;

class common_connection_service_test_connection_result {
 public:

  common_connection_service_test_connection_result(const common_connection_service_test_connection_result&);
  common_connection_service_test_connection_result& operator=(const common_connection_service_test_connection_result&);
  common_connection_service_test_connection_result() : success(0) {
  }

  virtual ~common_connection_service_test_connection_result() throw();
  bool success;
  invalid_operation ouch;

  _common_connection_service_test_connection_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const common_connection_service_test_connection_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const common_connection_service_test_connection_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_connection_service_test_connection_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_connection_service_test_connection_presult__isset {
  _common_connection_service_test_connection_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_connection_service_test_connection_presult__isset;

class common_connection_service_test_connection_presult {
 public:


  virtual ~common_connection_service_test_connection_presult() throw();
  bool* success;
  invalid_operation ouch;

  _common_connection_service_test_connection_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_connection_service_add_connection_args__isset {
  _common_connection_service_add_connection_args__isset() : session_id(false), conn(false) {}
  bool session_id :1;
  bool conn :1;
} _common_connection_service_add_connection_args__isset;

class common_connection_service_add_connection_args {
 public:

  common_connection_service_add_connection_args(const common_connection_service_add_connection_args&);
  common_connection_service_add_connection_args& operator=(const common_connection_service_add_connection_args&);
  common_connection_service_add_connection_args() : session_id() {
  }

  virtual ~common_connection_service_add_connection_args() throw();
  std::string session_id;
  connection conn;

  _common_connection_service_add_connection_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_conn(const connection& val);

  bool operator == (const common_connection_service_add_connection_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(conn == rhs.conn))
      return false;
    return true;
  }
  bool operator != (const common_connection_service_add_connection_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_connection_service_add_connection_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class common_connection_service_add_connection_pargs {
 public:


  virtual ~common_connection_service_add_connection_pargs() throw();
  const std::string* session_id;
  const connection* conn;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_connection_service_add_connection_result__isset {
  _common_connection_service_add_connection_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_connection_service_add_connection_result__isset;

class common_connection_service_add_connection_result {
 public:

  common_connection_service_add_connection_result(const common_connection_service_add_connection_result&);
  common_connection_service_add_connection_result& operator=(const common_connection_service_add_connection_result&);
  common_connection_service_add_connection_result() : success(0) {
  }

  virtual ~common_connection_service_add_connection_result() throw();
  bool success;
  invalid_operation ouch;

  _common_connection_service_add_connection_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const common_connection_service_add_connection_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const common_connection_service_add_connection_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_connection_service_add_connection_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_connection_service_add_connection_presult__isset {
  _common_connection_service_add_connection_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_connection_service_add_connection_presult__isset;

class common_connection_service_add_connection_presult {
 public:


  virtual ~common_connection_service_add_connection_presult() throw();
  bool* success;
  invalid_operation ouch;

  _common_connection_service_add_connection_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_connection_service_remove_connection_args__isset {
  _common_connection_service_remove_connection_args__isset() : session_id(false), connection_id(false) {}
  bool session_id :1;
  bool connection_id :1;
} _common_connection_service_remove_connection_args__isset;

class common_connection_service_remove_connection_args {
 public:

  common_connection_service_remove_connection_args(const common_connection_service_remove_connection_args&);
  common_connection_service_remove_connection_args& operator=(const common_connection_service_remove_connection_args&);
  common_connection_service_remove_connection_args() : session_id(), connection_id() {
  }

  virtual ~common_connection_service_remove_connection_args() throw();
  std::string session_id;
  std::string connection_id;

  _common_connection_service_remove_connection_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_connection_id(const std::string& val);

  bool operator == (const common_connection_service_remove_connection_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(connection_id == rhs.connection_id))
      return false;
    return true;
  }
  bool operator != (const common_connection_service_remove_connection_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_connection_service_remove_connection_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class common_connection_service_remove_connection_pargs {
 public:


  virtual ~common_connection_service_remove_connection_pargs() throw();
  const std::string* session_id;
  const std::string* connection_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_connection_service_remove_connection_result__isset {
  _common_connection_service_remove_connection_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_connection_service_remove_connection_result__isset;

class common_connection_service_remove_connection_result {
 public:

  common_connection_service_remove_connection_result(const common_connection_service_remove_connection_result&);
  common_connection_service_remove_connection_result& operator=(const common_connection_service_remove_connection_result&);
  common_connection_service_remove_connection_result() : success(0) {
  }

  virtual ~common_connection_service_remove_connection_result() throw();
  bool success;
  invalid_operation ouch;

  _common_connection_service_remove_connection_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const common_connection_service_remove_connection_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const common_connection_service_remove_connection_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_connection_service_remove_connection_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_connection_service_remove_connection_presult__isset {
  _common_connection_service_remove_connection_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_connection_service_remove_connection_presult__isset;

class common_connection_service_remove_connection_presult {
 public:


  virtual ~common_connection_service_remove_connection_presult() throw();
  bool* success;
  invalid_operation ouch;

  _common_connection_service_remove_connection_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_connection_service_modify_connection_args__isset {
  _common_connection_service_modify_connection_args__isset() : session_id(false), conn(false) {}
  bool session_id :1;
  bool conn :1;
} _common_connection_service_modify_connection_args__isset;

class common_connection_service_modify_connection_args {
 public:

  common_connection_service_modify_connection_args(const common_connection_service_modify_connection_args&);
  common_connection_service_modify_connection_args& operator=(const common_connection_service_modify_connection_args&);
  common_connection_service_modify_connection_args() : session_id() {
  }

  virtual ~common_connection_service_modify_connection_args() throw();
  std::string session_id;
  connection conn;

  _common_connection_service_modify_connection_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_conn(const connection& val);

  bool operator == (const common_connection_service_modify_connection_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(conn == rhs.conn))
      return false;
    return true;
  }
  bool operator != (const common_connection_service_modify_connection_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_connection_service_modify_connection_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class common_connection_service_modify_connection_pargs {
 public:


  virtual ~common_connection_service_modify_connection_pargs() throw();
  const std::string* session_id;
  const connection* conn;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_connection_service_modify_connection_result__isset {
  _common_connection_service_modify_connection_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_connection_service_modify_connection_result__isset;

class common_connection_service_modify_connection_result {
 public:

  common_connection_service_modify_connection_result(const common_connection_service_modify_connection_result&);
  common_connection_service_modify_connection_result& operator=(const common_connection_service_modify_connection_result&);
  common_connection_service_modify_connection_result() : success(0) {
  }

  virtual ~common_connection_service_modify_connection_result() throw();
  bool success;
  invalid_operation ouch;

  _common_connection_service_modify_connection_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const common_connection_service_modify_connection_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const common_connection_service_modify_connection_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_connection_service_modify_connection_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_connection_service_modify_connection_presult__isset {
  _common_connection_service_modify_connection_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_connection_service_modify_connection_presult__isset;

class common_connection_service_modify_connection_presult {
 public:


  virtual ~common_connection_service_modify_connection_presult() throw();
  bool* success;
  invalid_operation ouch;

  _common_connection_service_modify_connection_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_connection_service_enumerate_connections_args__isset {
  _common_connection_service_enumerate_connections_args__isset() : session_id(false) {}
  bool session_id :1;
} _common_connection_service_enumerate_connections_args__isset;

class common_connection_service_enumerate_connections_args {
 public:

  common_connection_service_enumerate_connections_args(const common_connection_service_enumerate_connections_args&);
  common_connection_service_enumerate_connections_args& operator=(const common_connection_service_enumerate_connections_args&);
  common_connection_service_enumerate_connections_args() : session_id() {
  }

  virtual ~common_connection_service_enumerate_connections_args() throw();
  std::string session_id;

  _common_connection_service_enumerate_connections_args__isset __isset;

  void __set_session_id(const std::string& val);

  bool operator == (const common_connection_service_enumerate_connections_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const common_connection_service_enumerate_connections_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_connection_service_enumerate_connections_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class common_connection_service_enumerate_connections_pargs {
 public:


  virtual ~common_connection_service_enumerate_connections_pargs() throw();
  const std::string* session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_connection_service_enumerate_connections_result__isset {
  _common_connection_service_enumerate_connections_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_connection_service_enumerate_connections_result__isset;

class common_connection_service_enumerate_connections_result {
 public:

  common_connection_service_enumerate_connections_result(const common_connection_service_enumerate_connections_result&);
  common_connection_service_enumerate_connections_result& operator=(const common_connection_service_enumerate_connections_result&);
  common_connection_service_enumerate_connections_result() {
  }

  virtual ~common_connection_service_enumerate_connections_result() throw();
  std::vector<connection>  success;
  invalid_operation ouch;

  _common_connection_service_enumerate_connections_result__isset __isset;

  void __set_success(const std::vector<connection> & val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const common_connection_service_enumerate_connections_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const common_connection_service_enumerate_connections_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_connection_service_enumerate_connections_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_connection_service_enumerate_connections_presult__isset {
  _common_connection_service_enumerate_connections_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_connection_service_enumerate_connections_presult__isset;

class common_connection_service_enumerate_connections_presult {
 public:


  virtual ~common_connection_service_enumerate_connections_presult() throw();
  std::vector<connection> * success;
  invalid_operation ouch;

  _common_connection_service_enumerate_connections_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_connection_service_get_connection_args__isset {
  _common_connection_service_get_connection_args__isset() : session_id(false), connection_id(false) {}
  bool session_id :1;
  bool connection_id :1;
} _common_connection_service_get_connection_args__isset;

class common_connection_service_get_connection_args {
 public:

  common_connection_service_get_connection_args(const common_connection_service_get_connection_args&);
  common_connection_service_get_connection_args& operator=(const common_connection_service_get_connection_args&);
  common_connection_service_get_connection_args() : session_id(), connection_id() {
  }

  virtual ~common_connection_service_get_connection_args() throw();
  std::string session_id;
  std::string connection_id;

  _common_connection_service_get_connection_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_connection_id(const std::string& val);

  bool operator == (const common_connection_service_get_connection_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(connection_id == rhs.connection_id))
      return false;
    return true;
  }
  bool operator != (const common_connection_service_get_connection_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_connection_service_get_connection_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class common_connection_service_get_connection_pargs {
 public:


  virtual ~common_connection_service_get_connection_pargs() throw();
  const std::string* session_id;
  const std::string* connection_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_connection_service_get_connection_result__isset {
  _common_connection_service_get_connection_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_connection_service_get_connection_result__isset;

class common_connection_service_get_connection_result {
 public:

  common_connection_service_get_connection_result(const common_connection_service_get_connection_result&);
  common_connection_service_get_connection_result& operator=(const common_connection_service_get_connection_result&);
  common_connection_service_get_connection_result() {
  }

  virtual ~common_connection_service_get_connection_result() throw();
  connection success;
  invalid_operation ouch;

  _common_connection_service_get_connection_result__isset __isset;

  void __set_success(const connection& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const common_connection_service_get_connection_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const common_connection_service_get_connection_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_connection_service_get_connection_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_connection_service_get_connection_presult__isset {
  _common_connection_service_get_connection_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_connection_service_get_connection_presult__isset;

class common_connection_service_get_connection_presult {
 public:


  virtual ~common_connection_service_get_connection_presult() throw();
  connection* success;
  invalid_operation ouch;

  _common_connection_service_get_connection_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_connection_service_get_available_bytes_args__isset {
  _common_connection_service_get_available_bytes_args__isset() : session_id(false), connection_id(false) {}
  bool session_id :1;
  bool connection_id :1;
} _common_connection_service_get_available_bytes_args__isset;

class common_connection_service_get_available_bytes_args {
 public:

  common_connection_service_get_available_bytes_args(const common_connection_service_get_available_bytes_args&);
  common_connection_service_get_available_bytes_args& operator=(const common_connection_service_get_available_bytes_args&);
  common_connection_service_get_available_bytes_args() : session_id(), connection_id() {
  }

  virtual ~common_connection_service_get_available_bytes_args() throw();
  std::string session_id;
  std::string connection_id;

  _common_connection_service_get_available_bytes_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_connection_id(const std::string& val);

  bool operator == (const common_connection_service_get_available_bytes_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(connection_id == rhs.connection_id))
      return false;
    return true;
  }
  bool operator != (const common_connection_service_get_available_bytes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_connection_service_get_available_bytes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class common_connection_service_get_available_bytes_pargs {
 public:


  virtual ~common_connection_service_get_available_bytes_pargs() throw();
  const std::string* session_id;
  const std::string* connection_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_connection_service_get_available_bytes_result__isset {
  _common_connection_service_get_available_bytes_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_connection_service_get_available_bytes_result__isset;

class common_connection_service_get_available_bytes_result {
 public:

  common_connection_service_get_available_bytes_result(const common_connection_service_get_available_bytes_result&);
  common_connection_service_get_available_bytes_result& operator=(const common_connection_service_get_available_bytes_result&);
  common_connection_service_get_available_bytes_result() : success(0) {
  }

  virtual ~common_connection_service_get_available_bytes_result() throw();
  int64_t success;
  invalid_operation ouch;

  _common_connection_service_get_available_bytes_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const common_connection_service_get_available_bytes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const common_connection_service_get_available_bytes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_connection_service_get_available_bytes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_connection_service_get_available_bytes_presult__isset {
  _common_connection_service_get_available_bytes_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_connection_service_get_available_bytes_presult__isset;

class common_connection_service_get_available_bytes_presult {
 public:


  virtual ~common_connection_service_get_available_bytes_presult() throw();
  int64_t* success;
  invalid_operation ouch;

  _common_connection_service_get_available_bytes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class common_connection_serviceClient : virtual public common_connection_serviceIf, public common_serviceClient {
 public:
  common_connection_serviceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    common_serviceClient(prot, prot) {}
  common_connection_serviceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    common_serviceClient(iprot, oprot) {}
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool test_connection(const std::string& session_id, const connection& conn);
  void send_test_connection(const std::string& session_id, const connection& conn);
  bool recv_test_connection();
  bool add_connection(const std::string& session_id, const connection& conn);
  void send_add_connection(const std::string& session_id, const connection& conn);
  bool recv_add_connection();
  bool remove_connection(const std::string& session_id, const std::string& connection_id);
  void send_remove_connection(const std::string& session_id, const std::string& connection_id);
  bool recv_remove_connection();
  bool modify_connection(const std::string& session_id, const connection& conn);
  void send_modify_connection(const std::string& session_id, const connection& conn);
  bool recv_modify_connection();
  void enumerate_connections(std::vector<connection> & _return, const std::string& session_id);
  void send_enumerate_connections(const std::string& session_id);
  void recv_enumerate_connections(std::vector<connection> & _return);
  void get_connection(connection& _return, const std::string& session_id, const std::string& connection_id);
  void send_get_connection(const std::string& session_id, const std::string& connection_id);
  void recv_get_connection(connection& _return);
  int64_t get_available_bytes(const std::string& session_id, const std::string& connection_id);
  void send_get_available_bytes(const std::string& session_id, const std::string& connection_id);
  int64_t recv_get_available_bytes();
};

class common_connection_serviceProcessor : public common_serviceProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<common_connection_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (common_connection_serviceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_test_connection(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_connection(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_connection(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_modify_connection(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_enumerate_connections(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_connection(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_available_bytes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  common_connection_serviceProcessor(::apache::thrift::stdcxx::shared_ptr<common_connection_serviceIf> iface) :
    common_serviceProcessor(iface),
    iface_(iface) {
    processMap_["test_connection"] = &common_connection_serviceProcessor::process_test_connection;
    processMap_["add_connection"] = &common_connection_serviceProcessor::process_add_connection;
    processMap_["remove_connection"] = &common_connection_serviceProcessor::process_remove_connection;
    processMap_["modify_connection"] = &common_connection_serviceProcessor::process_modify_connection;
    processMap_["enumerate_connections"] = &common_connection_serviceProcessor::process_enumerate_connections;
    processMap_["get_connection"] = &common_connection_serviceProcessor::process_get_connection;
    processMap_["get_available_bytes"] = &common_connection_serviceProcessor::process_get_available_bytes;
  }

  virtual ~common_connection_serviceProcessor() {}
};

class common_connection_serviceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  common_connection_serviceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< common_connection_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< common_connection_serviceIfFactory > handlerFactory_;
};

class common_connection_serviceMultiface : virtual public common_connection_serviceIf, public common_serviceMultiface {
 public:
  common_connection_serviceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<common_connection_serviceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<apache::thrift::stdcxx::shared_ptr<common_connection_serviceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      common_serviceMultiface::add(*iter);
    }
  }
  virtual ~common_connection_serviceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<common_connection_serviceIf> > ifaces_;
  common_connection_serviceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<common_connection_serviceIf> iface) {
    common_serviceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  bool test_connection(const std::string& session_id, const connection& conn) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->test_connection(session_id, conn);
    }
    return ifaces_[i]->test_connection(session_id, conn);
  }

  bool add_connection(const std::string& session_id, const connection& conn) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_connection(session_id, conn);
    }
    return ifaces_[i]->add_connection(session_id, conn);
  }

  bool remove_connection(const std::string& session_id, const std::string& connection_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_connection(session_id, connection_id);
    }
    return ifaces_[i]->remove_connection(session_id, connection_id);
  }

  bool modify_connection(const std::string& session_id, const connection& conn) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->modify_connection(session_id, conn);
    }
    return ifaces_[i]->modify_connection(session_id, conn);
  }

  void enumerate_connections(std::vector<connection> & _return, const std::string& session_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->enumerate_connections(_return, session_id);
    }
    ifaces_[i]->enumerate_connections(_return, session_id);
    return;
  }

  void get_connection(connection& _return, const std::string& session_id, const std::string& connection_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_connection(_return, session_id, connection_id);
    }
    ifaces_[i]->get_connection(_return, session_id, connection_id);
    return;
  }

  int64_t get_available_bytes(const std::string& session_id, const std::string& connection_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_available_bytes(session_id, connection_id);
    }
    return ifaces_[i]->get_available_bytes(session_id, connection_id);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class common_connection_serviceConcurrentClient : virtual public common_connection_serviceIf, public common_serviceConcurrentClient {
 public:
  common_connection_serviceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    common_serviceConcurrentClient(prot, prot) {}
  common_connection_serviceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    common_serviceConcurrentClient(iprot, oprot) {}
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool test_connection(const std::string& session_id, const connection& conn);
  int32_t send_test_connection(const std::string& session_id, const connection& conn);
  bool recv_test_connection(const int32_t seqid);
  bool add_connection(const std::string& session_id, const connection& conn);
  int32_t send_add_connection(const std::string& session_id, const connection& conn);
  bool recv_add_connection(const int32_t seqid);
  bool remove_connection(const std::string& session_id, const std::string& connection_id);
  int32_t send_remove_connection(const std::string& session_id, const std::string& connection_id);
  bool recv_remove_connection(const int32_t seqid);
  bool modify_connection(const std::string& session_id, const connection& conn);
  int32_t send_modify_connection(const std::string& session_id, const connection& conn);
  bool recv_modify_connection(const int32_t seqid);
  void enumerate_connections(std::vector<connection> & _return, const std::string& session_id);
  int32_t send_enumerate_connections(const std::string& session_id);
  void recv_enumerate_connections(std::vector<connection> & _return, const int32_t seqid);
  void get_connection(connection& _return, const std::string& session_id, const std::string& connection_id);
  int32_t send_get_connection(const std::string& session_id, const std::string& connection_id);
  void recv_get_connection(connection& _return, const int32_t seqid);
  int64_t get_available_bytes(const std::string& session_id, const std::string& connection_id);
  int32_t send_get_available_bytes(const std::string& session_id, const std::string& connection_id);
  int64_t recv_get_available_bytes(const int32_t seqid);
};

class common_connection_serviceCobClient;

class common_connection_serviceCobClIf : virtual public common_serviceCobClIf {
 public:
  virtual ~common_connection_serviceCobClIf() {}
  virtual void test_connection(::apache::thrift::stdcxx::function<void(common_connection_serviceCobClient* client)> cob, const std::string& session_id, const connection& conn) = 0;
  virtual void add_connection(::apache::thrift::stdcxx::function<void(common_connection_serviceCobClient* client)> cob, const std::string& session_id, const connection& conn) = 0;
  virtual void remove_connection(::apache::thrift::stdcxx::function<void(common_connection_serviceCobClient* client)> cob, const std::string& session_id, const std::string& connection_id) = 0;
  virtual void modify_connection(::apache::thrift::stdcxx::function<void(common_connection_serviceCobClient* client)> cob, const std::string& session_id, const connection& conn) = 0;
  virtual void enumerate_connections(::apache::thrift::stdcxx::function<void(common_connection_serviceCobClient* client)> cob, const std::string& session_id) = 0;
  virtual void get_connection(::apache::thrift::stdcxx::function<void(common_connection_serviceCobClient* client)> cob, const std::string& session_id, const std::string& connection_id) = 0;
  virtual void get_available_bytes(::apache::thrift::stdcxx::function<void(common_connection_serviceCobClient* client)> cob, const std::string& session_id, const std::string& connection_id) = 0;
};

class common_connection_serviceCobSvIf : virtual public common_serviceCobSvIf {
 public:
  virtual ~common_connection_serviceCobSvIf() {}
  virtual void test_connection(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const connection& conn) = 0;
  virtual void add_connection(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const connection& conn) = 0;
  virtual void remove_connection(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& connection_id) = 0;
  virtual void modify_connection(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const connection& conn) = 0;
  virtual void enumerate_connections(::apache::thrift::stdcxx::function<void(std::vector<connection>  const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id) = 0;
  virtual void get_connection(::apache::thrift::stdcxx::function<void(connection const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& connection_id) = 0;
  virtual void get_available_bytes(::apache::thrift::stdcxx::function<void(int64_t const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& connection_id) = 0;
};

class common_connection_serviceCobSvIfFactory : virtual public common_serviceCobSvIfFactory {
 public:
  typedef common_connection_serviceCobSvIf Handler;

  virtual ~common_connection_serviceCobSvIfFactory() {}

  virtual common_connection_serviceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(common_serviceCobSvIf* /* handler */) = 0;
};

class common_connection_serviceCobSvIfSingletonFactory : virtual public common_connection_serviceCobSvIfFactory {
 public:
  common_connection_serviceCobSvIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<common_connection_serviceCobSvIf>& iface) : iface_(iface) {}
  virtual ~common_connection_serviceCobSvIfSingletonFactory() {}

  virtual common_connection_serviceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(common_serviceCobSvIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<common_connection_serviceCobSvIf> iface_;
};

class common_connection_serviceCobSvNull : virtual public common_connection_serviceCobSvIf , virtual public common_serviceCobSvNull {
 public:
  virtual ~common_connection_serviceCobSvNull() {}
  void test_connection(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const connection& /* conn */) {
    bool _return = false;
    return cob(_return);
  }
  void add_connection(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const connection& /* conn */) {
    bool _return = false;
    return cob(_return);
  }
  void remove_connection(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* connection_id */) {
    bool _return = false;
    return cob(_return);
  }
  void modify_connection(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const connection& /* conn */) {
    bool _return = false;
    return cob(_return);
  }
  void enumerate_connections(::apache::thrift::stdcxx::function<void(std::vector<connection>  const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */) {
    std::vector<connection>  _return;
    return cob(_return);
  }
  void get_connection(::apache::thrift::stdcxx::function<void(connection const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* connection_id */) {
    connection _return;
    return cob(_return);
  }
  void get_available_bytes(::apache::thrift::stdcxx::function<void(int64_t const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* connection_id */) {
    int64_t _return = 0;
    return cob(_return);
  }
};

class common_connection_serviceCobClient : virtual public common_connection_serviceCobClIf, public common_serviceCobClient {
 public:
  common_connection_serviceCobClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    common_serviceCobClient(channel, protocolFactory) {}
  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void test_connection(::apache::thrift::stdcxx::function<void(common_connection_serviceCobClient* client)> cob, const std::string& session_id, const connection& conn);
  void send_test_connection(const std::string& session_id, const connection& conn);
  bool recv_test_connection();
  void add_connection(::apache::thrift::stdcxx::function<void(common_connection_serviceCobClient* client)> cob, const std::string& session_id, const connection& conn);
  void send_add_connection(const std::string& session_id, const connection& conn);
  bool recv_add_connection();
  void remove_connection(::apache::thrift::stdcxx::function<void(common_connection_serviceCobClient* client)> cob, const std::string& session_id, const std::string& connection_id);
  void send_remove_connection(const std::string& session_id, const std::string& connection_id);
  bool recv_remove_connection();
  void modify_connection(::apache::thrift::stdcxx::function<void(common_connection_serviceCobClient* client)> cob, const std::string& session_id, const connection& conn);
  void send_modify_connection(const std::string& session_id, const connection& conn);
  bool recv_modify_connection();
  void enumerate_connections(::apache::thrift::stdcxx::function<void(common_connection_serviceCobClient* client)> cob, const std::string& session_id);
  void send_enumerate_connections(const std::string& session_id);
  void recv_enumerate_connections(std::vector<connection> & _return);
  void get_connection(::apache::thrift::stdcxx::function<void(common_connection_serviceCobClient* client)> cob, const std::string& session_id, const std::string& connection_id);
  void send_get_connection(const std::string& session_id, const std::string& connection_id);
  void recv_get_connection(connection& _return);
  void get_available_bytes(::apache::thrift::stdcxx::function<void(common_connection_serviceCobClient* client)> cob, const std::string& session_id, const std::string& connection_id);
  void send_get_available_bytes(const std::string& session_id, const std::string& connection_id);
  int64_t recv_get_available_bytes();
};

class common_connection_serviceAsyncProcessor : public common_serviceAsyncProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<common_connection_serviceCobSvIf> iface_;
  virtual void dispatchCall(::apache::thrift::stdcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (common_connection_serviceAsyncProcessor::*ProcessFunction)(::apache::thrift::stdcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_test_connection(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_test_connection(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_test_connection(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_add_connection(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_add_connection(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_add_connection(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_remove_connection(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_remove_connection(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_remove_connection(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_modify_connection(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_modify_connection(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_modify_connection(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_enumerate_connections(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_enumerate_connections(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector<connection> & _return);
  void throw_enumerate_connections(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_connection(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_connection(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const connection& _return);
  void throw_get_connection(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_available_bytes(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_available_bytes(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int64_t& _return);
  void throw_get_available_bytes(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  common_connection_serviceAsyncProcessor(::apache::thrift::stdcxx::shared_ptr<common_connection_serviceCobSvIf> iface) :
    common_serviceAsyncProcessor(iface),
    iface_(iface) {
    processMap_["test_connection"] = &common_connection_serviceAsyncProcessor::process_test_connection;
    processMap_["add_connection"] = &common_connection_serviceAsyncProcessor::process_add_connection;
    processMap_["remove_connection"] = &common_connection_serviceAsyncProcessor::process_remove_connection;
    processMap_["modify_connection"] = &common_connection_serviceAsyncProcessor::process_modify_connection;
    processMap_["enumerate_connections"] = &common_connection_serviceAsyncProcessor::process_enumerate_connections;
    processMap_["get_connection"] = &common_connection_serviceAsyncProcessor::process_get_connection;
    processMap_["get_available_bytes"] = &common_connection_serviceAsyncProcessor::process_get_available_bytes;
  }

  virtual ~common_connection_serviceAsyncProcessor() {}
};

class common_connection_serviceAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  common_connection_serviceAsyncProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< common_connection_serviceCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< common_connection_serviceCobSvIfFactory > handlerFactory_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
