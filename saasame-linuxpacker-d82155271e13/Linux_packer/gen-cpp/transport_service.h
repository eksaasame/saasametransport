/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef transport_service_H
#define transport_service_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/stdcxx.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "saasame_types.h"
#include "physical_packer_service_proxy.h"

namespace saasame { namespace transport {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class transport_serviceIf : virtual public physical_packer_service_proxyIf {
 public:
  virtual ~transport_serviceIf() {}
  virtual void generate_session(std::string& _return, const std::string& addr) = 0;
  virtual void get_package_info(std::string& _return, const std::string& email, const std::string& name, const std::string& key) = 0;
  virtual bool active_license(const std::string& email, const std::string& name, const std::string& key) = 0;
  virtual bool add_license(const std::string& license) = 0;
  virtual bool add_license_with_key(const std::string& key, const std::string& license) = 0;
  virtual void get_licenses(license_infos& _return) = 0;
  virtual bool check_license_expiration(const int8_t days) = 0;
  virtual bool is_license_valid(const std::string& job_id) = 0;
  virtual bool is_license_valid_ex(const std::string& job_id, const bool is_recovery) = 0;
  virtual bool remove_license(const std::string& key) = 0;
  virtual void query_package_info(std::string& _return, const std::string& key) = 0;
  virtual bool create_task(const running_task& task) = 0;
  virtual bool remove_task(const std::string& task_id) = 0;
  virtual void ping_p(service_info& _return, const std::string& addr) = 0;
  virtual void get_host_detail_p(physical_machine_info& _return, const std::string& addr, const machine_detail_filter::type filter) = 0;
  virtual void get_service_list_p(std::set<service_info> & _return, const std::string& addr) = 0;
  virtual void enumerate_disks_p(std::set<disk_info> & _return, const std::string& addr, const enumerate_disk_filter_style::type filter) = 0;
  virtual bool verify_carrier_p(const std::string& addr, const std::string& carrier, const bool is_ssl) = 0;
  virtual void take_xray_p(std::string& _return, const std::string& addr) = 0;
  virtual void take_xrays_p(std::string& _return, const std::string& addr) = 0;
  virtual bool create_mutex_p(const std::string& addr, const std::string& session, const int16_t timeout) = 0;
  virtual bool delete_mutex_p(const std::string& addr, const std::string& session) = 0;
  virtual void create_job_ex_p(job_detail& _return, const std::string& addr, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type) = 0;
  virtual void get_job_p(job_detail& _return, const std::string& addr, const std::string& job_id, const std::string& service_type) = 0;
  virtual bool interrupt_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type) = 0;
  virtual bool resume_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type) = 0;
  virtual bool remove_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type) = 0;
  virtual bool running_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type) = 0;
  virtual bool update_job_p(const std::string& addr, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type) = 0;
  virtual bool remove_snapshot_image_p(const std::string& addr, const std::map<std::string, image_map_info> & images, const std::string& service_type) = 0;
  virtual bool test_connection_p(const std::string& addr, const connection& conn, const std::string& service_type) = 0;
  virtual bool add_connection_p(const std::string& addr, const connection& conn, const std::string& service_type) = 0;
  virtual bool remove_connection_p(const std::string& addr, const std::string& connection_id, const std::string& service_type) = 0;
  virtual bool modify_connection_p(const std::string& addr, const connection& conn, const std::string& service_type) = 0;
  virtual void enumerate_connections_p(std::vector<connection> & _return, const std::string& addr, const std::string& service_type) = 0;
  virtual void get_connection_p(connection& _return, const std::string& addr, const std::string& connection_id, const std::string& service_type) = 0;
  virtual void get_virtual_host_info_p(virtual_host& _return, const std::string& addr, const std::string& host, const std::string& username, const std::string& password) = 0;
  virtual void get_virtual_hosts_p(std::vector<virtual_host> & _return, const std::string& addr, const std::string& host, const std::string& username, const std::string& password) = 0;
  virtual void get_virtual_machine_detail_p(virtual_machine& _return, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) = 0;
  virtual void get_physical_machine_detail_p(physical_machine_info& _return, const std::string& addr, const std::string& host, const machine_detail_filter::type filter) = 0;
  virtual bool power_off_virtual_machine_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) = 0;
  virtual bool remove_virtual_machine_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) = 0;
  virtual void get_virtual_machine_snapshots_p(std::vector<vmware_snapshot> & _return, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) = 0;
  virtual bool remove_virtual_machine_snapshot_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id, const std::string& snapshot_id) = 0;
  virtual void get_datacenter_folder_list_p(std::vector<std::string> & _return, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& datacenter) = 0;
  virtual void take_packer_xray_p(std::string& _return, const std::string& addr, const std::string& host) = 0;
  virtual void get_packer_service_info_p(service_info& _return, const std::string& addr, const std::string& host) = 0;
  virtual bool verify_management_p(const std::string& addr, const std::string& management, const int32_t port, const bool is_ssl) = 0;
  virtual bool verify_packer_to_carrier_p(const std::string& addr, const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl) = 0;
  virtual void get_replica_job_create_detail(replica_job_create_detail& _return, const std::string& session_id, const std::string& job_id) = 0;
  virtual void get_loader_job_create_detail(loader_job_create_detail& _return, const std::string& session_id, const std::string& job_id) = 0;
  virtual void get_launcher_job_create_detail(launcher_job_create_detail& _return, const std::string& session_id, const std::string& job_id) = 0;
  virtual void terminate(const std::string& session_id) = 0;
  virtual bool set_customized_id_p(const std::string& addr, const std::string& disk_addr, const std::string& disk_id) = 0;
  virtual bool unregister_packer_p(const std::string& addr) = 0;
  virtual bool unregister_server_p(const std::string& addr) = 0;
  virtual void create_vhd_disk_from_snapshot(std::string& _return, const std::string& connection_string, const std::string& container, const std::string& original_disk_name, const std::string& target_disk_name, const std::string& snapshot) = 0;
  virtual bool is_snapshot_vhd_disk_ready(const std::string& task_id) = 0;
  virtual bool delete_vhd_disk(const std::string& connection_string, const std::string& container, const std::string& disk_name) = 0;
  virtual bool delete_vhd_disk_snapshot(const std::string& connection_string, const std::string& container, const std::string& disk_name, const std::string& snapshot) = 0;
  virtual void get_vhd_disk_snapshots(std::vector<vhd_snapshot> & _return, const std::string& connection_string, const std::string& container, const std::string& disk_name) = 0;
  virtual bool verify_connection_string(const std::string& connection_string) = 0;
};

class transport_serviceIfFactory : virtual public physical_packer_service_proxyIfFactory {
 public:
  typedef transport_serviceIf Handler;

  virtual ~transport_serviceIfFactory() {}

  virtual transport_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(common_serviceIf* /* handler */) = 0;
};

class transport_serviceIfSingletonFactory : virtual public transport_serviceIfFactory {
 public:
  transport_serviceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<transport_serviceIf>& iface) : iface_(iface) {}
  virtual ~transport_serviceIfSingletonFactory() {}

  virtual transport_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(common_serviceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<transport_serviceIf> iface_;
};

class transport_serviceNull : virtual public transport_serviceIf , virtual public physical_packer_service_proxyNull {
 public:
  virtual ~transport_serviceNull() {}
  void generate_session(std::string& /* _return */, const std::string& /* addr */) {
    return;
  }
  void get_package_info(std::string& /* _return */, const std::string& /* email */, const std::string& /* name */, const std::string& /* key */) {
    return;
  }
  bool active_license(const std::string& /* email */, const std::string& /* name */, const std::string& /* key */) {
    bool _return = false;
    return _return;
  }
  bool add_license(const std::string& /* license */) {
    bool _return = false;
    return _return;
  }
  bool add_license_with_key(const std::string& /* key */, const std::string& /* license */) {
    bool _return = false;
    return _return;
  }
  void get_licenses(license_infos& /* _return */) {
    return;
  }
  bool check_license_expiration(const int8_t /* days */) {
    bool _return = false;
    return _return;
  }
  bool is_license_valid(const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
  bool is_license_valid_ex(const std::string& /* job_id */, const bool /* is_recovery */) {
    bool _return = false;
    return _return;
  }
  bool remove_license(const std::string& /* key */) {
    bool _return = false;
    return _return;
  }
  void query_package_info(std::string& /* _return */, const std::string& /* key */) {
    return;
  }
  bool create_task(const running_task& /* task */) {
    bool _return = false;
    return _return;
  }
  bool remove_task(const std::string& /* task_id */) {
    bool _return = false;
    return _return;
  }
  void ping_p(service_info& /* _return */, const std::string& /* addr */) {
    return;
  }
  void get_host_detail_p(physical_machine_info& /* _return */, const std::string& /* addr */, const machine_detail_filter::type /* filter */) {
    return;
  }
  void get_service_list_p(std::set<service_info> & /* _return */, const std::string& /* addr */) {
    return;
  }
  void enumerate_disks_p(std::set<disk_info> & /* _return */, const std::string& /* addr */, const enumerate_disk_filter_style::type /* filter */) {
    return;
  }
  bool verify_carrier_p(const std::string& /* addr */, const std::string& /* carrier */, const bool /* is_ssl */) {
    bool _return = false;
    return _return;
  }
  void take_xray_p(std::string& /* _return */, const std::string& /* addr */) {
    return;
  }
  void take_xrays_p(std::string& /* _return */, const std::string& /* addr */) {
    return;
  }
  bool create_mutex_p(const std::string& /* addr */, const std::string& /* session */, const int16_t /* timeout */) {
    bool _return = false;
    return _return;
  }
  bool delete_mutex_p(const std::string& /* addr */, const std::string& /* session */) {
    bool _return = false;
    return _return;
  }
  void create_job_ex_p(job_detail& /* _return */, const std::string& /* addr */, const std::string& /* job_id */, const create_job_detail& /* create_job */, const std::string& /* service_type */) {
    return;
  }
  void get_job_p(job_detail& /* _return */, const std::string& /* addr */, const std::string& /* job_id */, const std::string& /* service_type */) {
    return;
  }
  bool interrupt_job_p(const std::string& /* addr */, const std::string& /* job_id */, const std::string& /* service_type */) {
    bool _return = false;
    return _return;
  }
  bool resume_job_p(const std::string& /* addr */, const std::string& /* job_id */, const std::string& /* service_type */) {
    bool _return = false;
    return _return;
  }
  bool remove_job_p(const std::string& /* addr */, const std::string& /* job_id */, const std::string& /* service_type */) {
    bool _return = false;
    return _return;
  }
  bool running_job_p(const std::string& /* addr */, const std::string& /* job_id */, const std::string& /* service_type */) {
    bool _return = false;
    return _return;
  }
  bool update_job_p(const std::string& /* addr */, const std::string& /* job_id */, const create_job_detail& /* create_job */, const std::string& /* service_type */) {
    bool _return = false;
    return _return;
  }
  bool remove_snapshot_image_p(const std::string& /* addr */, const std::map<std::string, image_map_info> & /* images */, const std::string& /* service_type */) {
    bool _return = false;
    return _return;
  }
  bool test_connection_p(const std::string& /* addr */, const connection& /* conn */, const std::string& /* service_type */) {
    bool _return = false;
    return _return;
  }
  bool add_connection_p(const std::string& /* addr */, const connection& /* conn */, const std::string& /* service_type */) {
    bool _return = false;
    return _return;
  }
  bool remove_connection_p(const std::string& /* addr */, const std::string& /* connection_id */, const std::string& /* service_type */) {
    bool _return = false;
    return _return;
  }
  bool modify_connection_p(const std::string& /* addr */, const connection& /* conn */, const std::string& /* service_type */) {
    bool _return = false;
    return _return;
  }
  void enumerate_connections_p(std::vector<connection> & /* _return */, const std::string& /* addr */, const std::string& /* service_type */) {
    return;
  }
  void get_connection_p(connection& /* _return */, const std::string& /* addr */, const std::string& /* connection_id */, const std::string& /* service_type */) {
    return;
  }
  void get_virtual_host_info_p(virtual_host& /* _return */, const std::string& /* addr */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */) {
    return;
  }
  void get_virtual_hosts_p(std::vector<virtual_host> & /* _return */, const std::string& /* addr */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */) {
    return;
  }
  void get_virtual_machine_detail_p(virtual_machine& /* _return */, const std::string& /* addr */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */, const std::string& /* machine_id */) {
    return;
  }
  void get_physical_machine_detail_p(physical_machine_info& /* _return */, const std::string& /* addr */, const std::string& /* host */, const machine_detail_filter::type /* filter */) {
    return;
  }
  bool power_off_virtual_machine_p(const std::string& /* addr */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */, const std::string& /* machine_id */) {
    bool _return = false;
    return _return;
  }
  bool remove_virtual_machine_p(const std::string& /* addr */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */, const std::string& /* machine_id */) {
    bool _return = false;
    return _return;
  }
  void get_virtual_machine_snapshots_p(std::vector<vmware_snapshot> & /* _return */, const std::string& /* addr */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */, const std::string& /* machine_id */) {
    return;
  }
  bool remove_virtual_machine_snapshot_p(const std::string& /* addr */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */, const std::string& /* machine_id */, const std::string& /* snapshot_id */) {
    bool _return = false;
    return _return;
  }
  void get_datacenter_folder_list_p(std::vector<std::string> & /* _return */, const std::string& /* addr */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */, const std::string& /* datacenter */) {
    return;
  }
  void take_packer_xray_p(std::string& /* _return */, const std::string& /* addr */, const std::string& /* host */) {
    return;
  }
  void get_packer_service_info_p(service_info& /* _return */, const std::string& /* addr */, const std::string& /* host */) {
    return;
  }
  bool verify_management_p(const std::string& /* addr */, const std::string& /* management */, const int32_t /* port */, const bool /* is_ssl */) {
    bool _return = false;
    return _return;
  }
  bool verify_packer_to_carrier_p(const std::string& /* addr */, const std::string& /* packer */, const std::string& /* carrier */, const int32_t /* port */, const bool /* is_ssl */) {
    bool _return = false;
    return _return;
  }
  void get_replica_job_create_detail(replica_job_create_detail& /* _return */, const std::string& /* session_id */, const std::string& /* job_id */) {
    return;
  }
  void get_loader_job_create_detail(loader_job_create_detail& /* _return */, const std::string& /* session_id */, const std::string& /* job_id */) {
    return;
  }
  void get_launcher_job_create_detail(launcher_job_create_detail& /* _return */, const std::string& /* session_id */, const std::string& /* job_id */) {
    return;
  }
  void terminate(const std::string& /* session_id */) {
    return;
  }
  bool set_customized_id_p(const std::string& /* addr */, const std::string& /* disk_addr */, const std::string& /* disk_id */) {
    bool _return = false;
    return _return;
  }
  bool unregister_packer_p(const std::string& /* addr */) {
    bool _return = false;
    return _return;
  }
  bool unregister_server_p(const std::string& /* addr */) {
    bool _return = false;
    return _return;
  }
  void create_vhd_disk_from_snapshot(std::string& /* _return */, const std::string& /* connection_string */, const std::string& /* container */, const std::string& /* original_disk_name */, const std::string& /* target_disk_name */, const std::string& /* snapshot */) {
    return;
  }
  bool is_snapshot_vhd_disk_ready(const std::string& /* task_id */) {
    bool _return = false;
    return _return;
  }
  bool delete_vhd_disk(const std::string& /* connection_string */, const std::string& /* container */, const std::string& /* disk_name */) {
    bool _return = false;
    return _return;
  }
  bool delete_vhd_disk_snapshot(const std::string& /* connection_string */, const std::string& /* container */, const std::string& /* disk_name */, const std::string& /* snapshot */) {
    bool _return = false;
    return _return;
  }
  void get_vhd_disk_snapshots(std::vector<vhd_snapshot> & /* _return */, const std::string& /* connection_string */, const std::string& /* container */, const std::string& /* disk_name */) {
    return;
  }
  bool verify_connection_string(const std::string& /* connection_string */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _transport_service_generate_session_args__isset {
  _transport_service_generate_session_args__isset() : addr(false) {}
  bool addr :1;
} _transport_service_generate_session_args__isset;

class transport_service_generate_session_args {
 public:

  transport_service_generate_session_args(const transport_service_generate_session_args&);
  transport_service_generate_session_args& operator=(const transport_service_generate_session_args&);
  transport_service_generate_session_args() : addr() {
  }

  virtual ~transport_service_generate_session_args() throw();
  std::string addr;

  _transport_service_generate_session_args__isset __isset;

  void __set_addr(const std::string& val);

  bool operator == (const transport_service_generate_session_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    return true;
  }
  bool operator != (const transport_service_generate_session_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_generate_session_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_generate_session_pargs {
 public:


  virtual ~transport_service_generate_session_pargs() throw();
  const std::string* addr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_generate_session_result__isset {
  _transport_service_generate_session_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_generate_session_result__isset;

class transport_service_generate_session_result {
 public:

  transport_service_generate_session_result(const transport_service_generate_session_result&);
  transport_service_generate_session_result& operator=(const transport_service_generate_session_result&);
  transport_service_generate_session_result() : success() {
  }

  virtual ~transport_service_generate_session_result() throw();
  std::string success;
  invalid_operation ouch;

  _transport_service_generate_session_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_generate_session_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_generate_session_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_generate_session_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_generate_session_presult__isset {
  _transport_service_generate_session_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_generate_session_presult__isset;

class transport_service_generate_session_presult {
 public:


  virtual ~transport_service_generate_session_presult() throw();
  std::string* success;
  invalid_operation ouch;

  _transport_service_generate_session_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_package_info_args__isset {
  _transport_service_get_package_info_args__isset() : email(false), name(false), key(false) {}
  bool email :1;
  bool name :1;
  bool key :1;
} _transport_service_get_package_info_args__isset;

class transport_service_get_package_info_args {
 public:

  transport_service_get_package_info_args(const transport_service_get_package_info_args&);
  transport_service_get_package_info_args& operator=(const transport_service_get_package_info_args&);
  transport_service_get_package_info_args() : email(), name(), key() {
  }

  virtual ~transport_service_get_package_info_args() throw();
  std::string email;
  std::string name;
  std::string key;

  _transport_service_get_package_info_args__isset __isset;

  void __set_email(const std::string& val);

  void __set_name(const std::string& val);

  void __set_key(const std::string& val);

  bool operator == (const transport_service_get_package_info_args & rhs) const
  {
    if (!(email == rhs.email))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_package_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_package_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_get_package_info_pargs {
 public:


  virtual ~transport_service_get_package_info_pargs() throw();
  const std::string* email;
  const std::string* name;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_package_info_result__isset {
  _transport_service_get_package_info_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_package_info_result__isset;

class transport_service_get_package_info_result {
 public:

  transport_service_get_package_info_result(const transport_service_get_package_info_result&);
  transport_service_get_package_info_result& operator=(const transport_service_get_package_info_result&);
  transport_service_get_package_info_result() : success() {
  }

  virtual ~transport_service_get_package_info_result() throw();
  std::string success;
  invalid_operation ouch;

  _transport_service_get_package_info_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_get_package_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_package_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_package_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_package_info_presult__isset {
  _transport_service_get_package_info_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_package_info_presult__isset;

class transport_service_get_package_info_presult {
 public:


  virtual ~transport_service_get_package_info_presult() throw();
  std::string* success;
  invalid_operation ouch;

  _transport_service_get_package_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_active_license_args__isset {
  _transport_service_active_license_args__isset() : email(false), name(false), key(false) {}
  bool email :1;
  bool name :1;
  bool key :1;
} _transport_service_active_license_args__isset;

class transport_service_active_license_args {
 public:

  transport_service_active_license_args(const transport_service_active_license_args&);
  transport_service_active_license_args& operator=(const transport_service_active_license_args&);
  transport_service_active_license_args() : email(), name(), key() {
  }

  virtual ~transport_service_active_license_args() throw();
  std::string email;
  std::string name;
  std::string key;

  _transport_service_active_license_args__isset __isset;

  void __set_email(const std::string& val);

  void __set_name(const std::string& val);

  void __set_key(const std::string& val);

  bool operator == (const transport_service_active_license_args & rhs) const
  {
    if (!(email == rhs.email))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const transport_service_active_license_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_active_license_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_active_license_pargs {
 public:


  virtual ~transport_service_active_license_pargs() throw();
  const std::string* email;
  const std::string* name;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_active_license_result__isset {
  _transport_service_active_license_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_active_license_result__isset;

class transport_service_active_license_result {
 public:

  transport_service_active_license_result(const transport_service_active_license_result&);
  transport_service_active_license_result& operator=(const transport_service_active_license_result&);
  transport_service_active_license_result() : success(0) {
  }

  virtual ~transport_service_active_license_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_active_license_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_active_license_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_active_license_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_active_license_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_active_license_presult__isset {
  _transport_service_active_license_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_active_license_presult__isset;

class transport_service_active_license_presult {
 public:


  virtual ~transport_service_active_license_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_active_license_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_add_license_args__isset {
  _transport_service_add_license_args__isset() : license(false) {}
  bool license :1;
} _transport_service_add_license_args__isset;

class transport_service_add_license_args {
 public:

  transport_service_add_license_args(const transport_service_add_license_args&);
  transport_service_add_license_args& operator=(const transport_service_add_license_args&);
  transport_service_add_license_args() : license() {
  }

  virtual ~transport_service_add_license_args() throw();
  std::string license;

  _transport_service_add_license_args__isset __isset;

  void __set_license(const std::string& val);

  bool operator == (const transport_service_add_license_args & rhs) const
  {
    if (!(license == rhs.license))
      return false;
    return true;
  }
  bool operator != (const transport_service_add_license_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_add_license_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_add_license_pargs {
 public:


  virtual ~transport_service_add_license_pargs() throw();
  const std::string* license;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_add_license_result__isset {
  _transport_service_add_license_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_add_license_result__isset;

class transport_service_add_license_result {
 public:

  transport_service_add_license_result(const transport_service_add_license_result&);
  transport_service_add_license_result& operator=(const transport_service_add_license_result&);
  transport_service_add_license_result() : success(0) {
  }

  virtual ~transport_service_add_license_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_add_license_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_add_license_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_add_license_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_add_license_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_add_license_presult__isset {
  _transport_service_add_license_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_add_license_presult__isset;

class transport_service_add_license_presult {
 public:


  virtual ~transport_service_add_license_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_add_license_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_add_license_with_key_args__isset {
  _transport_service_add_license_with_key_args__isset() : key(false), license(false) {}
  bool key :1;
  bool license :1;
} _transport_service_add_license_with_key_args__isset;

class transport_service_add_license_with_key_args {
 public:

  transport_service_add_license_with_key_args(const transport_service_add_license_with_key_args&);
  transport_service_add_license_with_key_args& operator=(const transport_service_add_license_with_key_args&);
  transport_service_add_license_with_key_args() : key(), license() {
  }

  virtual ~transport_service_add_license_with_key_args() throw();
  std::string key;
  std::string license;

  _transport_service_add_license_with_key_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_license(const std::string& val);

  bool operator == (const transport_service_add_license_with_key_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(license == rhs.license))
      return false;
    return true;
  }
  bool operator != (const transport_service_add_license_with_key_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_add_license_with_key_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_add_license_with_key_pargs {
 public:


  virtual ~transport_service_add_license_with_key_pargs() throw();
  const std::string* key;
  const std::string* license;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_add_license_with_key_result__isset {
  _transport_service_add_license_with_key_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_add_license_with_key_result__isset;

class transport_service_add_license_with_key_result {
 public:

  transport_service_add_license_with_key_result(const transport_service_add_license_with_key_result&);
  transport_service_add_license_with_key_result& operator=(const transport_service_add_license_with_key_result&);
  transport_service_add_license_with_key_result() : success(0) {
  }

  virtual ~transport_service_add_license_with_key_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_add_license_with_key_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_add_license_with_key_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_add_license_with_key_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_add_license_with_key_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_add_license_with_key_presult__isset {
  _transport_service_add_license_with_key_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_add_license_with_key_presult__isset;

class transport_service_add_license_with_key_presult {
 public:


  virtual ~transport_service_add_license_with_key_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_add_license_with_key_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_get_licenses_args {
 public:

  transport_service_get_licenses_args(const transport_service_get_licenses_args&);
  transport_service_get_licenses_args& operator=(const transport_service_get_licenses_args&);
  transport_service_get_licenses_args() {
  }

  virtual ~transport_service_get_licenses_args() throw();

  bool operator == (const transport_service_get_licenses_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const transport_service_get_licenses_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_licenses_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_get_licenses_pargs {
 public:


  virtual ~transport_service_get_licenses_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_licenses_result__isset {
  _transport_service_get_licenses_result__isset() : success(false) {}
  bool success :1;
} _transport_service_get_licenses_result__isset;

class transport_service_get_licenses_result {
 public:

  transport_service_get_licenses_result(const transport_service_get_licenses_result&);
  transport_service_get_licenses_result& operator=(const transport_service_get_licenses_result&);
  transport_service_get_licenses_result() {
  }

  virtual ~transport_service_get_licenses_result() throw();
  license_infos success;

  _transport_service_get_licenses_result__isset __isset;

  void __set_success(const license_infos& val);

  bool operator == (const transport_service_get_licenses_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_licenses_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_licenses_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_licenses_presult__isset {
  _transport_service_get_licenses_presult__isset() : success(false) {}
  bool success :1;
} _transport_service_get_licenses_presult__isset;

class transport_service_get_licenses_presult {
 public:


  virtual ~transport_service_get_licenses_presult() throw();
  license_infos* success;

  _transport_service_get_licenses_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_check_license_expiration_args__isset {
  _transport_service_check_license_expiration_args__isset() : days(false) {}
  bool days :1;
} _transport_service_check_license_expiration_args__isset;

class transport_service_check_license_expiration_args {
 public:

  transport_service_check_license_expiration_args(const transport_service_check_license_expiration_args&);
  transport_service_check_license_expiration_args& operator=(const transport_service_check_license_expiration_args&);
  transport_service_check_license_expiration_args() : days(0) {
  }

  virtual ~transport_service_check_license_expiration_args() throw();
  int8_t days;

  _transport_service_check_license_expiration_args__isset __isset;

  void __set_days(const int8_t val);

  bool operator == (const transport_service_check_license_expiration_args & rhs) const
  {
    if (!(days == rhs.days))
      return false;
    return true;
  }
  bool operator != (const transport_service_check_license_expiration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_check_license_expiration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_check_license_expiration_pargs {
 public:


  virtual ~transport_service_check_license_expiration_pargs() throw();
  const int8_t* days;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_check_license_expiration_result__isset {
  _transport_service_check_license_expiration_result__isset() : success(false) {}
  bool success :1;
} _transport_service_check_license_expiration_result__isset;

class transport_service_check_license_expiration_result {
 public:

  transport_service_check_license_expiration_result(const transport_service_check_license_expiration_result&);
  transport_service_check_license_expiration_result& operator=(const transport_service_check_license_expiration_result&);
  transport_service_check_license_expiration_result() : success(0) {
  }

  virtual ~transport_service_check_license_expiration_result() throw();
  bool success;

  _transport_service_check_license_expiration_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const transport_service_check_license_expiration_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const transport_service_check_license_expiration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_check_license_expiration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_check_license_expiration_presult__isset {
  _transport_service_check_license_expiration_presult__isset() : success(false) {}
  bool success :1;
} _transport_service_check_license_expiration_presult__isset;

class transport_service_check_license_expiration_presult {
 public:


  virtual ~transport_service_check_license_expiration_presult() throw();
  bool* success;

  _transport_service_check_license_expiration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_is_license_valid_args__isset {
  _transport_service_is_license_valid_args__isset() : job_id(false) {}
  bool job_id :1;
} _transport_service_is_license_valid_args__isset;

class transport_service_is_license_valid_args {
 public:

  transport_service_is_license_valid_args(const transport_service_is_license_valid_args&);
  transport_service_is_license_valid_args& operator=(const transport_service_is_license_valid_args&);
  transport_service_is_license_valid_args() : job_id() {
  }

  virtual ~transport_service_is_license_valid_args() throw();
  std::string job_id;

  _transport_service_is_license_valid_args__isset __isset;

  void __set_job_id(const std::string& val);

  bool operator == (const transport_service_is_license_valid_args & rhs) const
  {
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const transport_service_is_license_valid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_is_license_valid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_is_license_valid_pargs {
 public:


  virtual ~transport_service_is_license_valid_pargs() throw();
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_is_license_valid_result__isset {
  _transport_service_is_license_valid_result__isset() : success(false) {}
  bool success :1;
} _transport_service_is_license_valid_result__isset;

class transport_service_is_license_valid_result {
 public:

  transport_service_is_license_valid_result(const transport_service_is_license_valid_result&);
  transport_service_is_license_valid_result& operator=(const transport_service_is_license_valid_result&);
  transport_service_is_license_valid_result() : success(0) {
  }

  virtual ~transport_service_is_license_valid_result() throw();
  bool success;

  _transport_service_is_license_valid_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const transport_service_is_license_valid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const transport_service_is_license_valid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_is_license_valid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_is_license_valid_presult__isset {
  _transport_service_is_license_valid_presult__isset() : success(false) {}
  bool success :1;
} _transport_service_is_license_valid_presult__isset;

class transport_service_is_license_valid_presult {
 public:


  virtual ~transport_service_is_license_valid_presult() throw();
  bool* success;

  _transport_service_is_license_valid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_is_license_valid_ex_args__isset {
  _transport_service_is_license_valid_ex_args__isset() : job_id(false), is_recovery(false) {}
  bool job_id :1;
  bool is_recovery :1;
} _transport_service_is_license_valid_ex_args__isset;

class transport_service_is_license_valid_ex_args {
 public:

  transport_service_is_license_valid_ex_args(const transport_service_is_license_valid_ex_args&);
  transport_service_is_license_valid_ex_args& operator=(const transport_service_is_license_valid_ex_args&);
  transport_service_is_license_valid_ex_args() : job_id(), is_recovery(0) {
  }

  virtual ~transport_service_is_license_valid_ex_args() throw();
  std::string job_id;
  bool is_recovery;

  _transport_service_is_license_valid_ex_args__isset __isset;

  void __set_job_id(const std::string& val);

  void __set_is_recovery(const bool val);

  bool operator == (const transport_service_is_license_valid_ex_args & rhs) const
  {
    if (!(job_id == rhs.job_id))
      return false;
    if (!(is_recovery == rhs.is_recovery))
      return false;
    return true;
  }
  bool operator != (const transport_service_is_license_valid_ex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_is_license_valid_ex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_is_license_valid_ex_pargs {
 public:


  virtual ~transport_service_is_license_valid_ex_pargs() throw();
  const std::string* job_id;
  const bool* is_recovery;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_is_license_valid_ex_result__isset {
  _transport_service_is_license_valid_ex_result__isset() : success(false) {}
  bool success :1;
} _transport_service_is_license_valid_ex_result__isset;

class transport_service_is_license_valid_ex_result {
 public:

  transport_service_is_license_valid_ex_result(const transport_service_is_license_valid_ex_result&);
  transport_service_is_license_valid_ex_result& operator=(const transport_service_is_license_valid_ex_result&);
  transport_service_is_license_valid_ex_result() : success(0) {
  }

  virtual ~transport_service_is_license_valid_ex_result() throw();
  bool success;

  _transport_service_is_license_valid_ex_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const transport_service_is_license_valid_ex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const transport_service_is_license_valid_ex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_is_license_valid_ex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_is_license_valid_ex_presult__isset {
  _transport_service_is_license_valid_ex_presult__isset() : success(false) {}
  bool success :1;
} _transport_service_is_license_valid_ex_presult__isset;

class transport_service_is_license_valid_ex_presult {
 public:


  virtual ~transport_service_is_license_valid_ex_presult() throw();
  bool* success;

  _transport_service_is_license_valid_ex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_remove_license_args__isset {
  _transport_service_remove_license_args__isset() : key(false) {}
  bool key :1;
} _transport_service_remove_license_args__isset;

class transport_service_remove_license_args {
 public:

  transport_service_remove_license_args(const transport_service_remove_license_args&);
  transport_service_remove_license_args& operator=(const transport_service_remove_license_args&);
  transport_service_remove_license_args() : key() {
  }

  virtual ~transport_service_remove_license_args() throw();
  std::string key;

  _transport_service_remove_license_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const transport_service_remove_license_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const transport_service_remove_license_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_remove_license_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_remove_license_pargs {
 public:


  virtual ~transport_service_remove_license_pargs() throw();
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_remove_license_result__isset {
  _transport_service_remove_license_result__isset() : success(false) {}
  bool success :1;
} _transport_service_remove_license_result__isset;

class transport_service_remove_license_result {
 public:

  transport_service_remove_license_result(const transport_service_remove_license_result&);
  transport_service_remove_license_result& operator=(const transport_service_remove_license_result&);
  transport_service_remove_license_result() : success(0) {
  }

  virtual ~transport_service_remove_license_result() throw();
  bool success;

  _transport_service_remove_license_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const transport_service_remove_license_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const transport_service_remove_license_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_remove_license_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_remove_license_presult__isset {
  _transport_service_remove_license_presult__isset() : success(false) {}
  bool success :1;
} _transport_service_remove_license_presult__isset;

class transport_service_remove_license_presult {
 public:


  virtual ~transport_service_remove_license_presult() throw();
  bool* success;

  _transport_service_remove_license_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_query_package_info_args__isset {
  _transport_service_query_package_info_args__isset() : key(false) {}
  bool key :1;
} _transport_service_query_package_info_args__isset;

class transport_service_query_package_info_args {
 public:

  transport_service_query_package_info_args(const transport_service_query_package_info_args&);
  transport_service_query_package_info_args& operator=(const transport_service_query_package_info_args&);
  transport_service_query_package_info_args() : key() {
  }

  virtual ~transport_service_query_package_info_args() throw();
  std::string key;

  _transport_service_query_package_info_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const transport_service_query_package_info_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const transport_service_query_package_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_query_package_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_query_package_info_pargs {
 public:


  virtual ~transport_service_query_package_info_pargs() throw();
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_query_package_info_result__isset {
  _transport_service_query_package_info_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_query_package_info_result__isset;

class transport_service_query_package_info_result {
 public:

  transport_service_query_package_info_result(const transport_service_query_package_info_result&);
  transport_service_query_package_info_result& operator=(const transport_service_query_package_info_result&);
  transport_service_query_package_info_result() : success() {
  }

  virtual ~transport_service_query_package_info_result() throw();
  std::string success;
  invalid_operation ouch;

  _transport_service_query_package_info_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_query_package_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_query_package_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_query_package_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_query_package_info_presult__isset {
  _transport_service_query_package_info_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_query_package_info_presult__isset;

class transport_service_query_package_info_presult {
 public:


  virtual ~transport_service_query_package_info_presult() throw();
  std::string* success;
  invalid_operation ouch;

  _transport_service_query_package_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_create_task_args__isset {
  _transport_service_create_task_args__isset() : task(false) {}
  bool task :1;
} _transport_service_create_task_args__isset;

class transport_service_create_task_args {
 public:

  transport_service_create_task_args(const transport_service_create_task_args&);
  transport_service_create_task_args& operator=(const transport_service_create_task_args&);
  transport_service_create_task_args() {
  }

  virtual ~transport_service_create_task_args() throw();
  running_task task;

  _transport_service_create_task_args__isset __isset;

  void __set_task(const running_task& val);

  bool operator == (const transport_service_create_task_args & rhs) const
  {
    if (!(task == rhs.task))
      return false;
    return true;
  }
  bool operator != (const transport_service_create_task_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_create_task_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_create_task_pargs {
 public:


  virtual ~transport_service_create_task_pargs() throw();
  const running_task* task;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_create_task_result__isset {
  _transport_service_create_task_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_create_task_result__isset;

class transport_service_create_task_result {
 public:

  transport_service_create_task_result(const transport_service_create_task_result&);
  transport_service_create_task_result& operator=(const transport_service_create_task_result&);
  transport_service_create_task_result() : success(0) {
  }

  virtual ~transport_service_create_task_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_create_task_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_create_task_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_create_task_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_create_task_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_create_task_presult__isset {
  _transport_service_create_task_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_create_task_presult__isset;

class transport_service_create_task_presult {
 public:


  virtual ~transport_service_create_task_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_create_task_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_remove_task_args__isset {
  _transport_service_remove_task_args__isset() : task_id(false) {}
  bool task_id :1;
} _transport_service_remove_task_args__isset;

class transport_service_remove_task_args {
 public:

  transport_service_remove_task_args(const transport_service_remove_task_args&);
  transport_service_remove_task_args& operator=(const transport_service_remove_task_args&);
  transport_service_remove_task_args() : task_id() {
  }

  virtual ~transport_service_remove_task_args() throw();
  std::string task_id;

  _transport_service_remove_task_args__isset __isset;

  void __set_task_id(const std::string& val);

  bool operator == (const transport_service_remove_task_args & rhs) const
  {
    if (!(task_id == rhs.task_id))
      return false;
    return true;
  }
  bool operator != (const transport_service_remove_task_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_remove_task_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_remove_task_pargs {
 public:


  virtual ~transport_service_remove_task_pargs() throw();
  const std::string* task_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_remove_task_result__isset {
  _transport_service_remove_task_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_remove_task_result__isset;

class transport_service_remove_task_result {
 public:

  transport_service_remove_task_result(const transport_service_remove_task_result&);
  transport_service_remove_task_result& operator=(const transport_service_remove_task_result&);
  transport_service_remove_task_result() : success(0) {
  }

  virtual ~transport_service_remove_task_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_remove_task_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_remove_task_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_remove_task_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_remove_task_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_remove_task_presult__isset {
  _transport_service_remove_task_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_remove_task_presult__isset;

class transport_service_remove_task_presult {
 public:


  virtual ~transport_service_remove_task_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_remove_task_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_ping_p_args__isset {
  _transport_service_ping_p_args__isset() : addr(false) {}
  bool addr :1;
} _transport_service_ping_p_args__isset;

class transport_service_ping_p_args {
 public:

  transport_service_ping_p_args(const transport_service_ping_p_args&);
  transport_service_ping_p_args& operator=(const transport_service_ping_p_args&);
  transport_service_ping_p_args() : addr() {
  }

  virtual ~transport_service_ping_p_args() throw();
  std::string addr;

  _transport_service_ping_p_args__isset __isset;

  void __set_addr(const std::string& val);

  bool operator == (const transport_service_ping_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    return true;
  }
  bool operator != (const transport_service_ping_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_ping_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_ping_p_pargs {
 public:


  virtual ~transport_service_ping_p_pargs() throw();
  const std::string* addr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_ping_p_result__isset {
  _transport_service_ping_p_result__isset() : success(false) {}
  bool success :1;
} _transport_service_ping_p_result__isset;

class transport_service_ping_p_result {
 public:

  transport_service_ping_p_result(const transport_service_ping_p_result&);
  transport_service_ping_p_result& operator=(const transport_service_ping_p_result&);
  transport_service_ping_p_result() {
  }

  virtual ~transport_service_ping_p_result() throw();
  service_info success;

  _transport_service_ping_p_result__isset __isset;

  void __set_success(const service_info& val);

  bool operator == (const transport_service_ping_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const transport_service_ping_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_ping_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_ping_p_presult__isset {
  _transport_service_ping_p_presult__isset() : success(false) {}
  bool success :1;
} _transport_service_ping_p_presult__isset;

class transport_service_ping_p_presult {
 public:


  virtual ~transport_service_ping_p_presult() throw();
  service_info* success;

  _transport_service_ping_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_host_detail_p_args__isset {
  _transport_service_get_host_detail_p_args__isset() : addr(false), filter(false) {}
  bool addr :1;
  bool filter :1;
} _transport_service_get_host_detail_p_args__isset;

class transport_service_get_host_detail_p_args {
 public:

  transport_service_get_host_detail_p_args(const transport_service_get_host_detail_p_args&);
  transport_service_get_host_detail_p_args& operator=(const transport_service_get_host_detail_p_args&);
  transport_service_get_host_detail_p_args() : addr(), filter((machine_detail_filter::type)0) {
  }

  virtual ~transport_service_get_host_detail_p_args() throw();
  std::string addr;
  machine_detail_filter::type filter;

  _transport_service_get_host_detail_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_filter(const machine_detail_filter::type val);

  bool operator == (const transport_service_get_host_detail_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_host_detail_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_host_detail_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_get_host_detail_p_pargs {
 public:


  virtual ~transport_service_get_host_detail_p_pargs() throw();
  const std::string* addr;
  const machine_detail_filter::type* filter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_host_detail_p_result__isset {
  _transport_service_get_host_detail_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_host_detail_p_result__isset;

class transport_service_get_host_detail_p_result {
 public:

  transport_service_get_host_detail_p_result(const transport_service_get_host_detail_p_result&);
  transport_service_get_host_detail_p_result& operator=(const transport_service_get_host_detail_p_result&);
  transport_service_get_host_detail_p_result() {
  }

  virtual ~transport_service_get_host_detail_p_result() throw();
  physical_machine_info success;
  invalid_operation ouch;

  _transport_service_get_host_detail_p_result__isset __isset;

  void __set_success(const physical_machine_info& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_get_host_detail_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_host_detail_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_host_detail_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_host_detail_p_presult__isset {
  _transport_service_get_host_detail_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_host_detail_p_presult__isset;

class transport_service_get_host_detail_p_presult {
 public:


  virtual ~transport_service_get_host_detail_p_presult() throw();
  physical_machine_info* success;
  invalid_operation ouch;

  _transport_service_get_host_detail_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_service_list_p_args__isset {
  _transport_service_get_service_list_p_args__isset() : addr(false) {}
  bool addr :1;
} _transport_service_get_service_list_p_args__isset;

class transport_service_get_service_list_p_args {
 public:

  transport_service_get_service_list_p_args(const transport_service_get_service_list_p_args&);
  transport_service_get_service_list_p_args& operator=(const transport_service_get_service_list_p_args&);
  transport_service_get_service_list_p_args() : addr() {
  }

  virtual ~transport_service_get_service_list_p_args() throw();
  std::string addr;

  _transport_service_get_service_list_p_args__isset __isset;

  void __set_addr(const std::string& val);

  bool operator == (const transport_service_get_service_list_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_service_list_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_service_list_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_get_service_list_p_pargs {
 public:


  virtual ~transport_service_get_service_list_p_pargs() throw();
  const std::string* addr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_service_list_p_result__isset {
  _transport_service_get_service_list_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_service_list_p_result__isset;

class transport_service_get_service_list_p_result {
 public:

  transport_service_get_service_list_p_result(const transport_service_get_service_list_p_result&);
  transport_service_get_service_list_p_result& operator=(const transport_service_get_service_list_p_result&);
  transport_service_get_service_list_p_result() {
  }

  virtual ~transport_service_get_service_list_p_result() throw();
  std::set<service_info>  success;
  invalid_operation ouch;

  _transport_service_get_service_list_p_result__isset __isset;

  void __set_success(const std::set<service_info> & val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_get_service_list_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_service_list_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_service_list_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_service_list_p_presult__isset {
  _transport_service_get_service_list_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_service_list_p_presult__isset;

class transport_service_get_service_list_p_presult {
 public:


  virtual ~transport_service_get_service_list_p_presult() throw();
  std::set<service_info> * success;
  invalid_operation ouch;

  _transport_service_get_service_list_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_enumerate_disks_p_args__isset {
  _transport_service_enumerate_disks_p_args__isset() : addr(false), filter(false) {}
  bool addr :1;
  bool filter :1;
} _transport_service_enumerate_disks_p_args__isset;

class transport_service_enumerate_disks_p_args {
 public:

  transport_service_enumerate_disks_p_args(const transport_service_enumerate_disks_p_args&);
  transport_service_enumerate_disks_p_args& operator=(const transport_service_enumerate_disks_p_args&);
  transport_service_enumerate_disks_p_args() : addr(), filter((enumerate_disk_filter_style::type)0) {
  }

  virtual ~transport_service_enumerate_disks_p_args() throw();
  std::string addr;
  enumerate_disk_filter_style::type filter;

  _transport_service_enumerate_disks_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_filter(const enumerate_disk_filter_style::type val);

  bool operator == (const transport_service_enumerate_disks_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const transport_service_enumerate_disks_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_enumerate_disks_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_enumerate_disks_p_pargs {
 public:


  virtual ~transport_service_enumerate_disks_p_pargs() throw();
  const std::string* addr;
  const enumerate_disk_filter_style::type* filter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_enumerate_disks_p_result__isset {
  _transport_service_enumerate_disks_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_enumerate_disks_p_result__isset;

class transport_service_enumerate_disks_p_result {
 public:

  transport_service_enumerate_disks_p_result(const transport_service_enumerate_disks_p_result&);
  transport_service_enumerate_disks_p_result& operator=(const transport_service_enumerate_disks_p_result&);
  transport_service_enumerate_disks_p_result() {
  }

  virtual ~transport_service_enumerate_disks_p_result() throw();
  std::set<disk_info>  success;
  invalid_operation ouch;

  _transport_service_enumerate_disks_p_result__isset __isset;

  void __set_success(const std::set<disk_info> & val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_enumerate_disks_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_enumerate_disks_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_enumerate_disks_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_enumerate_disks_p_presult__isset {
  _transport_service_enumerate_disks_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_enumerate_disks_p_presult__isset;

class transport_service_enumerate_disks_p_presult {
 public:


  virtual ~transport_service_enumerate_disks_p_presult() throw();
  std::set<disk_info> * success;
  invalid_operation ouch;

  _transport_service_enumerate_disks_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_verify_carrier_p_args__isset {
  _transport_service_verify_carrier_p_args__isset() : addr(false), carrier(false), is_ssl(false) {}
  bool addr :1;
  bool carrier :1;
  bool is_ssl :1;
} _transport_service_verify_carrier_p_args__isset;

class transport_service_verify_carrier_p_args {
 public:

  transport_service_verify_carrier_p_args(const transport_service_verify_carrier_p_args&);
  transport_service_verify_carrier_p_args& operator=(const transport_service_verify_carrier_p_args&);
  transport_service_verify_carrier_p_args() : addr(), carrier(), is_ssl(0) {
  }

  virtual ~transport_service_verify_carrier_p_args() throw();
  std::string addr;
  std::string carrier;
  bool is_ssl;

  _transport_service_verify_carrier_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_carrier(const std::string& val);

  void __set_is_ssl(const bool val);

  bool operator == (const transport_service_verify_carrier_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    if (!(is_ssl == rhs.is_ssl))
      return false;
    return true;
  }
  bool operator != (const transport_service_verify_carrier_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_verify_carrier_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_verify_carrier_p_pargs {
 public:


  virtual ~transport_service_verify_carrier_p_pargs() throw();
  const std::string* addr;
  const std::string* carrier;
  const bool* is_ssl;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_verify_carrier_p_result__isset {
  _transport_service_verify_carrier_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_verify_carrier_p_result__isset;

class transport_service_verify_carrier_p_result {
 public:

  transport_service_verify_carrier_p_result(const transport_service_verify_carrier_p_result&);
  transport_service_verify_carrier_p_result& operator=(const transport_service_verify_carrier_p_result&);
  transport_service_verify_carrier_p_result() : success(0) {
  }

  virtual ~transport_service_verify_carrier_p_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_verify_carrier_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_verify_carrier_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_verify_carrier_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_verify_carrier_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_verify_carrier_p_presult__isset {
  _transport_service_verify_carrier_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_verify_carrier_p_presult__isset;

class transport_service_verify_carrier_p_presult {
 public:


  virtual ~transport_service_verify_carrier_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_verify_carrier_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_take_xray_p_args__isset {
  _transport_service_take_xray_p_args__isset() : addr(false) {}
  bool addr :1;
} _transport_service_take_xray_p_args__isset;

class transport_service_take_xray_p_args {
 public:

  transport_service_take_xray_p_args(const transport_service_take_xray_p_args&);
  transport_service_take_xray_p_args& operator=(const transport_service_take_xray_p_args&);
  transport_service_take_xray_p_args() : addr() {
  }

  virtual ~transport_service_take_xray_p_args() throw();
  std::string addr;

  _transport_service_take_xray_p_args__isset __isset;

  void __set_addr(const std::string& val);

  bool operator == (const transport_service_take_xray_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    return true;
  }
  bool operator != (const transport_service_take_xray_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_take_xray_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_take_xray_p_pargs {
 public:


  virtual ~transport_service_take_xray_p_pargs() throw();
  const std::string* addr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_take_xray_p_result__isset {
  _transport_service_take_xray_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_take_xray_p_result__isset;

class transport_service_take_xray_p_result {
 public:

  transport_service_take_xray_p_result(const transport_service_take_xray_p_result&);
  transport_service_take_xray_p_result& operator=(const transport_service_take_xray_p_result&);
  transport_service_take_xray_p_result() : success() {
  }

  virtual ~transport_service_take_xray_p_result() throw();
  std::string success;
  invalid_operation ouch;

  _transport_service_take_xray_p_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_take_xray_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_take_xray_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_take_xray_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_take_xray_p_presult__isset {
  _transport_service_take_xray_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_take_xray_p_presult__isset;

class transport_service_take_xray_p_presult {
 public:


  virtual ~transport_service_take_xray_p_presult() throw();
  std::string* success;
  invalid_operation ouch;

  _transport_service_take_xray_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_take_xrays_p_args__isset {
  _transport_service_take_xrays_p_args__isset() : addr(false) {}
  bool addr :1;
} _transport_service_take_xrays_p_args__isset;

class transport_service_take_xrays_p_args {
 public:

  transport_service_take_xrays_p_args(const transport_service_take_xrays_p_args&);
  transport_service_take_xrays_p_args& operator=(const transport_service_take_xrays_p_args&);
  transport_service_take_xrays_p_args() : addr() {
  }

  virtual ~transport_service_take_xrays_p_args() throw();
  std::string addr;

  _transport_service_take_xrays_p_args__isset __isset;

  void __set_addr(const std::string& val);

  bool operator == (const transport_service_take_xrays_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    return true;
  }
  bool operator != (const transport_service_take_xrays_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_take_xrays_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_take_xrays_p_pargs {
 public:


  virtual ~transport_service_take_xrays_p_pargs() throw();
  const std::string* addr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_take_xrays_p_result__isset {
  _transport_service_take_xrays_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_take_xrays_p_result__isset;

class transport_service_take_xrays_p_result {
 public:

  transport_service_take_xrays_p_result(const transport_service_take_xrays_p_result&);
  transport_service_take_xrays_p_result& operator=(const transport_service_take_xrays_p_result&);
  transport_service_take_xrays_p_result() : success() {
  }

  virtual ~transport_service_take_xrays_p_result() throw();
  std::string success;
  invalid_operation ouch;

  _transport_service_take_xrays_p_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_take_xrays_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_take_xrays_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_take_xrays_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_take_xrays_p_presult__isset {
  _transport_service_take_xrays_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_take_xrays_p_presult__isset;

class transport_service_take_xrays_p_presult {
 public:


  virtual ~transport_service_take_xrays_p_presult() throw();
  std::string* success;
  invalid_operation ouch;

  _transport_service_take_xrays_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_create_mutex_p_args__isset {
  _transport_service_create_mutex_p_args__isset() : addr(false), session(false), timeout(false) {}
  bool addr :1;
  bool session :1;
  bool timeout :1;
} _transport_service_create_mutex_p_args__isset;

class transport_service_create_mutex_p_args {
 public:

  transport_service_create_mutex_p_args(const transport_service_create_mutex_p_args&);
  transport_service_create_mutex_p_args& operator=(const transport_service_create_mutex_p_args&);
  transport_service_create_mutex_p_args() : addr(), session(), timeout(0) {
  }

  virtual ~transport_service_create_mutex_p_args() throw();
  std::string addr;
  std::string session;
  int16_t timeout;

  _transport_service_create_mutex_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_session(const std::string& val);

  void __set_timeout(const int16_t val);

  bool operator == (const transport_service_create_mutex_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(session == rhs.session))
      return false;
    if (!(timeout == rhs.timeout))
      return false;
    return true;
  }
  bool operator != (const transport_service_create_mutex_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_create_mutex_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_create_mutex_p_pargs {
 public:


  virtual ~transport_service_create_mutex_p_pargs() throw();
  const std::string* addr;
  const std::string* session;
  const int16_t* timeout;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_create_mutex_p_result__isset {
  _transport_service_create_mutex_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_create_mutex_p_result__isset;

class transport_service_create_mutex_p_result {
 public:

  transport_service_create_mutex_p_result(const transport_service_create_mutex_p_result&);
  transport_service_create_mutex_p_result& operator=(const transport_service_create_mutex_p_result&);
  transport_service_create_mutex_p_result() : success(0) {
  }

  virtual ~transport_service_create_mutex_p_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_create_mutex_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_create_mutex_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_create_mutex_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_create_mutex_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_create_mutex_p_presult__isset {
  _transport_service_create_mutex_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_create_mutex_p_presult__isset;

class transport_service_create_mutex_p_presult {
 public:


  virtual ~transport_service_create_mutex_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_create_mutex_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_delete_mutex_p_args__isset {
  _transport_service_delete_mutex_p_args__isset() : addr(false), session(false) {}
  bool addr :1;
  bool session :1;
} _transport_service_delete_mutex_p_args__isset;

class transport_service_delete_mutex_p_args {
 public:

  transport_service_delete_mutex_p_args(const transport_service_delete_mutex_p_args&);
  transport_service_delete_mutex_p_args& operator=(const transport_service_delete_mutex_p_args&);
  transport_service_delete_mutex_p_args() : addr(), session() {
  }

  virtual ~transport_service_delete_mutex_p_args() throw();
  std::string addr;
  std::string session;

  _transport_service_delete_mutex_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_session(const std::string& val);

  bool operator == (const transport_service_delete_mutex_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const transport_service_delete_mutex_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_delete_mutex_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_delete_mutex_p_pargs {
 public:


  virtual ~transport_service_delete_mutex_p_pargs() throw();
  const std::string* addr;
  const std::string* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_delete_mutex_p_result__isset {
  _transport_service_delete_mutex_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_delete_mutex_p_result__isset;

class transport_service_delete_mutex_p_result {
 public:

  transport_service_delete_mutex_p_result(const transport_service_delete_mutex_p_result&);
  transport_service_delete_mutex_p_result& operator=(const transport_service_delete_mutex_p_result&);
  transport_service_delete_mutex_p_result() : success(0) {
  }

  virtual ~transport_service_delete_mutex_p_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_delete_mutex_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_delete_mutex_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_delete_mutex_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_delete_mutex_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_delete_mutex_p_presult__isset {
  _transport_service_delete_mutex_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_delete_mutex_p_presult__isset;

class transport_service_delete_mutex_p_presult {
 public:


  virtual ~transport_service_delete_mutex_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_delete_mutex_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_create_job_ex_p_args__isset {
  _transport_service_create_job_ex_p_args__isset() : addr(false), job_id(false), create_job(false), service_type(false) {}
  bool addr :1;
  bool job_id :1;
  bool create_job :1;
  bool service_type :1;
} _transport_service_create_job_ex_p_args__isset;

class transport_service_create_job_ex_p_args {
 public:

  transport_service_create_job_ex_p_args(const transport_service_create_job_ex_p_args&);
  transport_service_create_job_ex_p_args& operator=(const transport_service_create_job_ex_p_args&);
  transport_service_create_job_ex_p_args() : addr(), job_id(), service_type() {
  }

  virtual ~transport_service_create_job_ex_p_args() throw();
  std::string addr;
  std::string job_id;
  create_job_detail create_job;
  std::string service_type;

  _transport_service_create_job_ex_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_job_id(const std::string& val);

  void __set_create_job(const create_job_detail& val);

  void __set_service_type(const std::string& val);

  bool operator == (const transport_service_create_job_ex_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    if (!(create_job == rhs.create_job))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const transport_service_create_job_ex_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_create_job_ex_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_create_job_ex_p_pargs {
 public:


  virtual ~transport_service_create_job_ex_p_pargs() throw();
  const std::string* addr;
  const std::string* job_id;
  const create_job_detail* create_job;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_create_job_ex_p_result__isset {
  _transport_service_create_job_ex_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_create_job_ex_p_result__isset;

class transport_service_create_job_ex_p_result {
 public:

  transport_service_create_job_ex_p_result(const transport_service_create_job_ex_p_result&);
  transport_service_create_job_ex_p_result& operator=(const transport_service_create_job_ex_p_result&);
  transport_service_create_job_ex_p_result() {
  }

  virtual ~transport_service_create_job_ex_p_result() throw();
  job_detail success;
  invalid_operation ouch;

  _transport_service_create_job_ex_p_result__isset __isset;

  void __set_success(const job_detail& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_create_job_ex_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_create_job_ex_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_create_job_ex_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_create_job_ex_p_presult__isset {
  _transport_service_create_job_ex_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_create_job_ex_p_presult__isset;

class transport_service_create_job_ex_p_presult {
 public:


  virtual ~transport_service_create_job_ex_p_presult() throw();
  job_detail* success;
  invalid_operation ouch;

  _transport_service_create_job_ex_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_job_p_args__isset {
  _transport_service_get_job_p_args__isset() : addr(false), job_id(false), service_type(false) {}
  bool addr :1;
  bool job_id :1;
  bool service_type :1;
} _transport_service_get_job_p_args__isset;

class transport_service_get_job_p_args {
 public:

  transport_service_get_job_p_args(const transport_service_get_job_p_args&);
  transport_service_get_job_p_args& operator=(const transport_service_get_job_p_args&);
  transport_service_get_job_p_args() : addr(), job_id(), service_type() {
  }

  virtual ~transport_service_get_job_p_args() throw();
  std::string addr;
  std::string job_id;
  std::string service_type;

  _transport_service_get_job_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_job_id(const std::string& val);

  void __set_service_type(const std::string& val);

  bool operator == (const transport_service_get_job_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_job_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_job_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_get_job_p_pargs {
 public:


  virtual ~transport_service_get_job_p_pargs() throw();
  const std::string* addr;
  const std::string* job_id;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_job_p_result__isset {
  _transport_service_get_job_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_job_p_result__isset;

class transport_service_get_job_p_result {
 public:

  transport_service_get_job_p_result(const transport_service_get_job_p_result&);
  transport_service_get_job_p_result& operator=(const transport_service_get_job_p_result&);
  transport_service_get_job_p_result() {
  }

  virtual ~transport_service_get_job_p_result() throw();
  job_detail success;
  invalid_operation ouch;

  _transport_service_get_job_p_result__isset __isset;

  void __set_success(const job_detail& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_get_job_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_job_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_job_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_job_p_presult__isset {
  _transport_service_get_job_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_job_p_presult__isset;

class transport_service_get_job_p_presult {
 public:


  virtual ~transport_service_get_job_p_presult() throw();
  job_detail* success;
  invalid_operation ouch;

  _transport_service_get_job_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_interrupt_job_p_args__isset {
  _transport_service_interrupt_job_p_args__isset() : addr(false), job_id(false), service_type(false) {}
  bool addr :1;
  bool job_id :1;
  bool service_type :1;
} _transport_service_interrupt_job_p_args__isset;

class transport_service_interrupt_job_p_args {
 public:

  transport_service_interrupt_job_p_args(const transport_service_interrupt_job_p_args&);
  transport_service_interrupt_job_p_args& operator=(const transport_service_interrupt_job_p_args&);
  transport_service_interrupt_job_p_args() : addr(), job_id(), service_type() {
  }

  virtual ~transport_service_interrupt_job_p_args() throw();
  std::string addr;
  std::string job_id;
  std::string service_type;

  _transport_service_interrupt_job_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_job_id(const std::string& val);

  void __set_service_type(const std::string& val);

  bool operator == (const transport_service_interrupt_job_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const transport_service_interrupt_job_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_interrupt_job_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_interrupt_job_p_pargs {
 public:


  virtual ~transport_service_interrupt_job_p_pargs() throw();
  const std::string* addr;
  const std::string* job_id;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_interrupt_job_p_result__isset {
  _transport_service_interrupt_job_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_interrupt_job_p_result__isset;

class transport_service_interrupt_job_p_result {
 public:

  transport_service_interrupt_job_p_result(const transport_service_interrupt_job_p_result&);
  transport_service_interrupt_job_p_result& operator=(const transport_service_interrupt_job_p_result&);
  transport_service_interrupt_job_p_result() : success(0) {
  }

  virtual ~transport_service_interrupt_job_p_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_interrupt_job_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_interrupt_job_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_interrupt_job_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_interrupt_job_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_interrupt_job_p_presult__isset {
  _transport_service_interrupt_job_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_interrupt_job_p_presult__isset;

class transport_service_interrupt_job_p_presult {
 public:


  virtual ~transport_service_interrupt_job_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_interrupt_job_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_resume_job_p_args__isset {
  _transport_service_resume_job_p_args__isset() : addr(false), job_id(false), service_type(false) {}
  bool addr :1;
  bool job_id :1;
  bool service_type :1;
} _transport_service_resume_job_p_args__isset;

class transport_service_resume_job_p_args {
 public:

  transport_service_resume_job_p_args(const transport_service_resume_job_p_args&);
  transport_service_resume_job_p_args& operator=(const transport_service_resume_job_p_args&);
  transport_service_resume_job_p_args() : addr(), job_id(), service_type() {
  }

  virtual ~transport_service_resume_job_p_args() throw();
  std::string addr;
  std::string job_id;
  std::string service_type;

  _transport_service_resume_job_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_job_id(const std::string& val);

  void __set_service_type(const std::string& val);

  bool operator == (const transport_service_resume_job_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const transport_service_resume_job_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_resume_job_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_resume_job_p_pargs {
 public:


  virtual ~transport_service_resume_job_p_pargs() throw();
  const std::string* addr;
  const std::string* job_id;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_resume_job_p_result__isset {
  _transport_service_resume_job_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_resume_job_p_result__isset;

class transport_service_resume_job_p_result {
 public:

  transport_service_resume_job_p_result(const transport_service_resume_job_p_result&);
  transport_service_resume_job_p_result& operator=(const transport_service_resume_job_p_result&);
  transport_service_resume_job_p_result() : success(0) {
  }

  virtual ~transport_service_resume_job_p_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_resume_job_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_resume_job_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_resume_job_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_resume_job_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_resume_job_p_presult__isset {
  _transport_service_resume_job_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_resume_job_p_presult__isset;

class transport_service_resume_job_p_presult {
 public:


  virtual ~transport_service_resume_job_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_resume_job_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_remove_job_p_args__isset {
  _transport_service_remove_job_p_args__isset() : addr(false), job_id(false), service_type(false) {}
  bool addr :1;
  bool job_id :1;
  bool service_type :1;
} _transport_service_remove_job_p_args__isset;

class transport_service_remove_job_p_args {
 public:

  transport_service_remove_job_p_args(const transport_service_remove_job_p_args&);
  transport_service_remove_job_p_args& operator=(const transport_service_remove_job_p_args&);
  transport_service_remove_job_p_args() : addr(), job_id(), service_type() {
  }

  virtual ~transport_service_remove_job_p_args() throw();
  std::string addr;
  std::string job_id;
  std::string service_type;

  _transport_service_remove_job_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_job_id(const std::string& val);

  void __set_service_type(const std::string& val);

  bool operator == (const transport_service_remove_job_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const transport_service_remove_job_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_remove_job_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_remove_job_p_pargs {
 public:


  virtual ~transport_service_remove_job_p_pargs() throw();
  const std::string* addr;
  const std::string* job_id;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_remove_job_p_result__isset {
  _transport_service_remove_job_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_remove_job_p_result__isset;

class transport_service_remove_job_p_result {
 public:

  transport_service_remove_job_p_result(const transport_service_remove_job_p_result&);
  transport_service_remove_job_p_result& operator=(const transport_service_remove_job_p_result&);
  transport_service_remove_job_p_result() : success(0) {
  }

  virtual ~transport_service_remove_job_p_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_remove_job_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_remove_job_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_remove_job_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_remove_job_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_remove_job_p_presult__isset {
  _transport_service_remove_job_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_remove_job_p_presult__isset;

class transport_service_remove_job_p_presult {
 public:


  virtual ~transport_service_remove_job_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_remove_job_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_running_job_p_args__isset {
  _transport_service_running_job_p_args__isset() : addr(false), job_id(false), service_type(false) {}
  bool addr :1;
  bool job_id :1;
  bool service_type :1;
} _transport_service_running_job_p_args__isset;

class transport_service_running_job_p_args {
 public:

  transport_service_running_job_p_args(const transport_service_running_job_p_args&);
  transport_service_running_job_p_args& operator=(const transport_service_running_job_p_args&);
  transport_service_running_job_p_args() : addr(), job_id(), service_type() {
  }

  virtual ~transport_service_running_job_p_args() throw();
  std::string addr;
  std::string job_id;
  std::string service_type;

  _transport_service_running_job_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_job_id(const std::string& val);

  void __set_service_type(const std::string& val);

  bool operator == (const transport_service_running_job_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const transport_service_running_job_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_running_job_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_running_job_p_pargs {
 public:


  virtual ~transport_service_running_job_p_pargs() throw();
  const std::string* addr;
  const std::string* job_id;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_running_job_p_result__isset {
  _transport_service_running_job_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_running_job_p_result__isset;

class transport_service_running_job_p_result {
 public:

  transport_service_running_job_p_result(const transport_service_running_job_p_result&);
  transport_service_running_job_p_result& operator=(const transport_service_running_job_p_result&);
  transport_service_running_job_p_result() : success(0) {
  }

  virtual ~transport_service_running_job_p_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_running_job_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_running_job_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_running_job_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_running_job_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_running_job_p_presult__isset {
  _transport_service_running_job_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_running_job_p_presult__isset;

class transport_service_running_job_p_presult {
 public:


  virtual ~transport_service_running_job_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_running_job_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_update_job_p_args__isset {
  _transport_service_update_job_p_args__isset() : addr(false), job_id(false), create_job(false), service_type(false) {}
  bool addr :1;
  bool job_id :1;
  bool create_job :1;
  bool service_type :1;
} _transport_service_update_job_p_args__isset;

class transport_service_update_job_p_args {
 public:

  transport_service_update_job_p_args(const transport_service_update_job_p_args&);
  transport_service_update_job_p_args& operator=(const transport_service_update_job_p_args&);
  transport_service_update_job_p_args() : addr(), job_id(), service_type() {
  }

  virtual ~transport_service_update_job_p_args() throw();
  std::string addr;
  std::string job_id;
  create_job_detail create_job;
  std::string service_type;

  _transport_service_update_job_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_job_id(const std::string& val);

  void __set_create_job(const create_job_detail& val);

  void __set_service_type(const std::string& val);

  bool operator == (const transport_service_update_job_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    if (!(create_job == rhs.create_job))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const transport_service_update_job_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_update_job_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_update_job_p_pargs {
 public:


  virtual ~transport_service_update_job_p_pargs() throw();
  const std::string* addr;
  const std::string* job_id;
  const create_job_detail* create_job;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_update_job_p_result__isset {
  _transport_service_update_job_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_update_job_p_result__isset;

class transport_service_update_job_p_result {
 public:

  transport_service_update_job_p_result(const transport_service_update_job_p_result&);
  transport_service_update_job_p_result& operator=(const transport_service_update_job_p_result&);
  transport_service_update_job_p_result() : success(0) {
  }

  virtual ~transport_service_update_job_p_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_update_job_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_update_job_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_update_job_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_update_job_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_update_job_p_presult__isset {
  _transport_service_update_job_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_update_job_p_presult__isset;

class transport_service_update_job_p_presult {
 public:


  virtual ~transport_service_update_job_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_update_job_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_remove_snapshot_image_p_args__isset {
  _transport_service_remove_snapshot_image_p_args__isset() : addr(false), images(false), service_type(false) {}
  bool addr :1;
  bool images :1;
  bool service_type :1;
} _transport_service_remove_snapshot_image_p_args__isset;

class transport_service_remove_snapshot_image_p_args {
 public:

  transport_service_remove_snapshot_image_p_args(const transport_service_remove_snapshot_image_p_args&);
  transport_service_remove_snapshot_image_p_args& operator=(const transport_service_remove_snapshot_image_p_args&);
  transport_service_remove_snapshot_image_p_args() : addr(), service_type() {
  }

  virtual ~transport_service_remove_snapshot_image_p_args() throw();
  std::string addr;
  std::map<std::string, image_map_info>  images;
  std::string service_type;

  _transport_service_remove_snapshot_image_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_images(const std::map<std::string, image_map_info> & val);

  void __set_service_type(const std::string& val);

  bool operator == (const transport_service_remove_snapshot_image_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(images == rhs.images))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const transport_service_remove_snapshot_image_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_remove_snapshot_image_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_remove_snapshot_image_p_pargs {
 public:


  virtual ~transport_service_remove_snapshot_image_p_pargs() throw();
  const std::string* addr;
  const std::map<std::string, image_map_info> * images;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_remove_snapshot_image_p_result__isset {
  _transport_service_remove_snapshot_image_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_remove_snapshot_image_p_result__isset;

class transport_service_remove_snapshot_image_p_result {
 public:

  transport_service_remove_snapshot_image_p_result(const transport_service_remove_snapshot_image_p_result&);
  transport_service_remove_snapshot_image_p_result& operator=(const transport_service_remove_snapshot_image_p_result&);
  transport_service_remove_snapshot_image_p_result() : success(0) {
  }

  virtual ~transport_service_remove_snapshot_image_p_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_remove_snapshot_image_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_remove_snapshot_image_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_remove_snapshot_image_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_remove_snapshot_image_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_remove_snapshot_image_p_presult__isset {
  _transport_service_remove_snapshot_image_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_remove_snapshot_image_p_presult__isset;

class transport_service_remove_snapshot_image_p_presult {
 public:


  virtual ~transport_service_remove_snapshot_image_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_remove_snapshot_image_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_test_connection_p_args__isset {
  _transport_service_test_connection_p_args__isset() : addr(false), conn(false), service_type(false) {}
  bool addr :1;
  bool conn :1;
  bool service_type :1;
} _transport_service_test_connection_p_args__isset;

class transport_service_test_connection_p_args {
 public:

  transport_service_test_connection_p_args(const transport_service_test_connection_p_args&);
  transport_service_test_connection_p_args& operator=(const transport_service_test_connection_p_args&);
  transport_service_test_connection_p_args() : addr(), service_type() {
  }

  virtual ~transport_service_test_connection_p_args() throw();
  std::string addr;
  connection conn;
  std::string service_type;

  _transport_service_test_connection_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_conn(const connection& val);

  void __set_service_type(const std::string& val);

  bool operator == (const transport_service_test_connection_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(conn == rhs.conn))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const transport_service_test_connection_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_test_connection_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_test_connection_p_pargs {
 public:


  virtual ~transport_service_test_connection_p_pargs() throw();
  const std::string* addr;
  const connection* conn;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_test_connection_p_result__isset {
  _transport_service_test_connection_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_test_connection_p_result__isset;

class transport_service_test_connection_p_result {
 public:

  transport_service_test_connection_p_result(const transport_service_test_connection_p_result&);
  transport_service_test_connection_p_result& operator=(const transport_service_test_connection_p_result&);
  transport_service_test_connection_p_result() : success(0) {
  }

  virtual ~transport_service_test_connection_p_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_test_connection_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_test_connection_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_test_connection_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_test_connection_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_test_connection_p_presult__isset {
  _transport_service_test_connection_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_test_connection_p_presult__isset;

class transport_service_test_connection_p_presult {
 public:


  virtual ~transport_service_test_connection_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_test_connection_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_add_connection_p_args__isset {
  _transport_service_add_connection_p_args__isset() : addr(false), conn(false), service_type(false) {}
  bool addr :1;
  bool conn :1;
  bool service_type :1;
} _transport_service_add_connection_p_args__isset;

class transport_service_add_connection_p_args {
 public:

  transport_service_add_connection_p_args(const transport_service_add_connection_p_args&);
  transport_service_add_connection_p_args& operator=(const transport_service_add_connection_p_args&);
  transport_service_add_connection_p_args() : addr(), service_type() {
  }

  virtual ~transport_service_add_connection_p_args() throw();
  std::string addr;
  connection conn;
  std::string service_type;

  _transport_service_add_connection_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_conn(const connection& val);

  void __set_service_type(const std::string& val);

  bool operator == (const transport_service_add_connection_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(conn == rhs.conn))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const transport_service_add_connection_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_add_connection_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_add_connection_p_pargs {
 public:


  virtual ~transport_service_add_connection_p_pargs() throw();
  const std::string* addr;
  const connection* conn;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_add_connection_p_result__isset {
  _transport_service_add_connection_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_add_connection_p_result__isset;

class transport_service_add_connection_p_result {
 public:

  transport_service_add_connection_p_result(const transport_service_add_connection_p_result&);
  transport_service_add_connection_p_result& operator=(const transport_service_add_connection_p_result&);
  transport_service_add_connection_p_result() : success(0) {
  }

  virtual ~transport_service_add_connection_p_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_add_connection_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_add_connection_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_add_connection_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_add_connection_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_add_connection_p_presult__isset {
  _transport_service_add_connection_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_add_connection_p_presult__isset;

class transport_service_add_connection_p_presult {
 public:


  virtual ~transport_service_add_connection_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_add_connection_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_remove_connection_p_args__isset {
  _transport_service_remove_connection_p_args__isset() : addr(false), connection_id(false), service_type(false) {}
  bool addr :1;
  bool connection_id :1;
  bool service_type :1;
} _transport_service_remove_connection_p_args__isset;

class transport_service_remove_connection_p_args {
 public:

  transport_service_remove_connection_p_args(const transport_service_remove_connection_p_args&);
  transport_service_remove_connection_p_args& operator=(const transport_service_remove_connection_p_args&);
  transport_service_remove_connection_p_args() : addr(), connection_id(), service_type() {
  }

  virtual ~transport_service_remove_connection_p_args() throw();
  std::string addr;
  std::string connection_id;
  std::string service_type;

  _transport_service_remove_connection_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_connection_id(const std::string& val);

  void __set_service_type(const std::string& val);

  bool operator == (const transport_service_remove_connection_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(connection_id == rhs.connection_id))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const transport_service_remove_connection_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_remove_connection_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_remove_connection_p_pargs {
 public:


  virtual ~transport_service_remove_connection_p_pargs() throw();
  const std::string* addr;
  const std::string* connection_id;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_remove_connection_p_result__isset {
  _transport_service_remove_connection_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_remove_connection_p_result__isset;

class transport_service_remove_connection_p_result {
 public:

  transport_service_remove_connection_p_result(const transport_service_remove_connection_p_result&);
  transport_service_remove_connection_p_result& operator=(const transport_service_remove_connection_p_result&);
  transport_service_remove_connection_p_result() : success(0) {
  }

  virtual ~transport_service_remove_connection_p_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_remove_connection_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_remove_connection_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_remove_connection_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_remove_connection_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_remove_connection_p_presult__isset {
  _transport_service_remove_connection_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_remove_connection_p_presult__isset;

class transport_service_remove_connection_p_presult {
 public:


  virtual ~transport_service_remove_connection_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_remove_connection_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_modify_connection_p_args__isset {
  _transport_service_modify_connection_p_args__isset() : addr(false), conn(false), service_type(false) {}
  bool addr :1;
  bool conn :1;
  bool service_type :1;
} _transport_service_modify_connection_p_args__isset;

class transport_service_modify_connection_p_args {
 public:

  transport_service_modify_connection_p_args(const transport_service_modify_connection_p_args&);
  transport_service_modify_connection_p_args& operator=(const transport_service_modify_connection_p_args&);
  transport_service_modify_connection_p_args() : addr(), service_type() {
  }

  virtual ~transport_service_modify_connection_p_args() throw();
  std::string addr;
  connection conn;
  std::string service_type;

  _transport_service_modify_connection_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_conn(const connection& val);

  void __set_service_type(const std::string& val);

  bool operator == (const transport_service_modify_connection_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(conn == rhs.conn))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const transport_service_modify_connection_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_modify_connection_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_modify_connection_p_pargs {
 public:


  virtual ~transport_service_modify_connection_p_pargs() throw();
  const std::string* addr;
  const connection* conn;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_modify_connection_p_result__isset {
  _transport_service_modify_connection_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_modify_connection_p_result__isset;

class transport_service_modify_connection_p_result {
 public:

  transport_service_modify_connection_p_result(const transport_service_modify_connection_p_result&);
  transport_service_modify_connection_p_result& operator=(const transport_service_modify_connection_p_result&);
  transport_service_modify_connection_p_result() : success(0) {
  }

  virtual ~transport_service_modify_connection_p_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_modify_connection_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_modify_connection_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_modify_connection_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_modify_connection_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_modify_connection_p_presult__isset {
  _transport_service_modify_connection_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_modify_connection_p_presult__isset;

class transport_service_modify_connection_p_presult {
 public:


  virtual ~transport_service_modify_connection_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_modify_connection_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_enumerate_connections_p_args__isset {
  _transport_service_enumerate_connections_p_args__isset() : addr(false), service_type(false) {}
  bool addr :1;
  bool service_type :1;
} _transport_service_enumerate_connections_p_args__isset;

class transport_service_enumerate_connections_p_args {
 public:

  transport_service_enumerate_connections_p_args(const transport_service_enumerate_connections_p_args&);
  transport_service_enumerate_connections_p_args& operator=(const transport_service_enumerate_connections_p_args&);
  transport_service_enumerate_connections_p_args() : addr(), service_type() {
  }

  virtual ~transport_service_enumerate_connections_p_args() throw();
  std::string addr;
  std::string service_type;

  _transport_service_enumerate_connections_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_service_type(const std::string& val);

  bool operator == (const transport_service_enumerate_connections_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const transport_service_enumerate_connections_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_enumerate_connections_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_enumerate_connections_p_pargs {
 public:


  virtual ~transport_service_enumerate_connections_p_pargs() throw();
  const std::string* addr;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_enumerate_connections_p_result__isset {
  _transport_service_enumerate_connections_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_enumerate_connections_p_result__isset;

class transport_service_enumerate_connections_p_result {
 public:

  transport_service_enumerate_connections_p_result(const transport_service_enumerate_connections_p_result&);
  transport_service_enumerate_connections_p_result& operator=(const transport_service_enumerate_connections_p_result&);
  transport_service_enumerate_connections_p_result() {
  }

  virtual ~transport_service_enumerate_connections_p_result() throw();
  std::vector<connection>  success;
  invalid_operation ouch;

  _transport_service_enumerate_connections_p_result__isset __isset;

  void __set_success(const std::vector<connection> & val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_enumerate_connections_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_enumerate_connections_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_enumerate_connections_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_enumerate_connections_p_presult__isset {
  _transport_service_enumerate_connections_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_enumerate_connections_p_presult__isset;

class transport_service_enumerate_connections_p_presult {
 public:


  virtual ~transport_service_enumerate_connections_p_presult() throw();
  std::vector<connection> * success;
  invalid_operation ouch;

  _transport_service_enumerate_connections_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_connection_p_args__isset {
  _transport_service_get_connection_p_args__isset() : addr(false), connection_id(false), service_type(false) {}
  bool addr :1;
  bool connection_id :1;
  bool service_type :1;
} _transport_service_get_connection_p_args__isset;

class transport_service_get_connection_p_args {
 public:

  transport_service_get_connection_p_args(const transport_service_get_connection_p_args&);
  transport_service_get_connection_p_args& operator=(const transport_service_get_connection_p_args&);
  transport_service_get_connection_p_args() : addr(), connection_id(), service_type() {
  }

  virtual ~transport_service_get_connection_p_args() throw();
  std::string addr;
  std::string connection_id;
  std::string service_type;

  _transport_service_get_connection_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_connection_id(const std::string& val);

  void __set_service_type(const std::string& val);

  bool operator == (const transport_service_get_connection_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(connection_id == rhs.connection_id))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_connection_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_connection_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_get_connection_p_pargs {
 public:


  virtual ~transport_service_get_connection_p_pargs() throw();
  const std::string* addr;
  const std::string* connection_id;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_connection_p_result__isset {
  _transport_service_get_connection_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_connection_p_result__isset;

class transport_service_get_connection_p_result {
 public:

  transport_service_get_connection_p_result(const transport_service_get_connection_p_result&);
  transport_service_get_connection_p_result& operator=(const transport_service_get_connection_p_result&);
  transport_service_get_connection_p_result() {
  }

  virtual ~transport_service_get_connection_p_result() throw();
  connection success;
  invalid_operation ouch;

  _transport_service_get_connection_p_result__isset __isset;

  void __set_success(const connection& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_get_connection_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_connection_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_connection_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_connection_p_presult__isset {
  _transport_service_get_connection_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_connection_p_presult__isset;

class transport_service_get_connection_p_presult {
 public:


  virtual ~transport_service_get_connection_p_presult() throw();
  connection* success;
  invalid_operation ouch;

  _transport_service_get_connection_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_virtual_host_info_p_args__isset {
  _transport_service_get_virtual_host_info_p_args__isset() : addr(false), host(false), username(false), password(false) {}
  bool addr :1;
  bool host :1;
  bool username :1;
  bool password :1;
} _transport_service_get_virtual_host_info_p_args__isset;

class transport_service_get_virtual_host_info_p_args {
 public:

  transport_service_get_virtual_host_info_p_args(const transport_service_get_virtual_host_info_p_args&);
  transport_service_get_virtual_host_info_p_args& operator=(const transport_service_get_virtual_host_info_p_args&);
  transport_service_get_virtual_host_info_p_args() : addr(), host(), username(), password() {
  }

  virtual ~transport_service_get_virtual_host_info_p_args() throw();
  std::string addr;
  std::string host;
  std::string username;
  std::string password;

  _transport_service_get_virtual_host_info_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_host(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const transport_service_get_virtual_host_info_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_virtual_host_info_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_virtual_host_info_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_get_virtual_host_info_p_pargs {
 public:


  virtual ~transport_service_get_virtual_host_info_p_pargs() throw();
  const std::string* addr;
  const std::string* host;
  const std::string* username;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_virtual_host_info_p_result__isset {
  _transport_service_get_virtual_host_info_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_virtual_host_info_p_result__isset;

class transport_service_get_virtual_host_info_p_result {
 public:

  transport_service_get_virtual_host_info_p_result(const transport_service_get_virtual_host_info_p_result&);
  transport_service_get_virtual_host_info_p_result& operator=(const transport_service_get_virtual_host_info_p_result&);
  transport_service_get_virtual_host_info_p_result() {
  }

  virtual ~transport_service_get_virtual_host_info_p_result() throw();
  virtual_host success;
  invalid_operation ouch;

  _transport_service_get_virtual_host_info_p_result__isset __isset;

  void __set_success(const virtual_host& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_get_virtual_host_info_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_virtual_host_info_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_virtual_host_info_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_virtual_host_info_p_presult__isset {
  _transport_service_get_virtual_host_info_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_virtual_host_info_p_presult__isset;

class transport_service_get_virtual_host_info_p_presult {
 public:


  virtual ~transport_service_get_virtual_host_info_p_presult() throw();
  virtual_host* success;
  invalid_operation ouch;

  _transport_service_get_virtual_host_info_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_virtual_hosts_p_args__isset {
  _transport_service_get_virtual_hosts_p_args__isset() : addr(false), host(false), username(false), password(false) {}
  bool addr :1;
  bool host :1;
  bool username :1;
  bool password :1;
} _transport_service_get_virtual_hosts_p_args__isset;

class transport_service_get_virtual_hosts_p_args {
 public:

  transport_service_get_virtual_hosts_p_args(const transport_service_get_virtual_hosts_p_args&);
  transport_service_get_virtual_hosts_p_args& operator=(const transport_service_get_virtual_hosts_p_args&);
  transport_service_get_virtual_hosts_p_args() : addr(), host(), username(), password() {
  }

  virtual ~transport_service_get_virtual_hosts_p_args() throw();
  std::string addr;
  std::string host;
  std::string username;
  std::string password;

  _transport_service_get_virtual_hosts_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_host(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const transport_service_get_virtual_hosts_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_virtual_hosts_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_virtual_hosts_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_get_virtual_hosts_p_pargs {
 public:


  virtual ~transport_service_get_virtual_hosts_p_pargs() throw();
  const std::string* addr;
  const std::string* host;
  const std::string* username;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_virtual_hosts_p_result__isset {
  _transport_service_get_virtual_hosts_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_virtual_hosts_p_result__isset;

class transport_service_get_virtual_hosts_p_result {
 public:

  transport_service_get_virtual_hosts_p_result(const transport_service_get_virtual_hosts_p_result&);
  transport_service_get_virtual_hosts_p_result& operator=(const transport_service_get_virtual_hosts_p_result&);
  transport_service_get_virtual_hosts_p_result() {
  }

  virtual ~transport_service_get_virtual_hosts_p_result() throw();
  std::vector<virtual_host>  success;
  invalid_operation ouch;

  _transport_service_get_virtual_hosts_p_result__isset __isset;

  void __set_success(const std::vector<virtual_host> & val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_get_virtual_hosts_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_virtual_hosts_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_virtual_hosts_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_virtual_hosts_p_presult__isset {
  _transport_service_get_virtual_hosts_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_virtual_hosts_p_presult__isset;

class transport_service_get_virtual_hosts_p_presult {
 public:


  virtual ~transport_service_get_virtual_hosts_p_presult() throw();
  std::vector<virtual_host> * success;
  invalid_operation ouch;

  _transport_service_get_virtual_hosts_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_virtual_machine_detail_p_args__isset {
  _transport_service_get_virtual_machine_detail_p_args__isset() : addr(false), host(false), username(false), password(false), machine_id(false) {}
  bool addr :1;
  bool host :1;
  bool username :1;
  bool password :1;
  bool machine_id :1;
} _transport_service_get_virtual_machine_detail_p_args__isset;

class transport_service_get_virtual_machine_detail_p_args {
 public:

  transport_service_get_virtual_machine_detail_p_args(const transport_service_get_virtual_machine_detail_p_args&);
  transport_service_get_virtual_machine_detail_p_args& operator=(const transport_service_get_virtual_machine_detail_p_args&);
  transport_service_get_virtual_machine_detail_p_args() : addr(), host(), username(), password(), machine_id() {
  }

  virtual ~transport_service_get_virtual_machine_detail_p_args() throw();
  std::string addr;
  std::string host;
  std::string username;
  std::string password;
  std::string machine_id;

  _transport_service_get_virtual_machine_detail_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_host(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  void __set_machine_id(const std::string& val);

  bool operator == (const transport_service_get_virtual_machine_detail_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(machine_id == rhs.machine_id))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_virtual_machine_detail_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_virtual_machine_detail_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_get_virtual_machine_detail_p_pargs {
 public:


  virtual ~transport_service_get_virtual_machine_detail_p_pargs() throw();
  const std::string* addr;
  const std::string* host;
  const std::string* username;
  const std::string* password;
  const std::string* machine_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_virtual_machine_detail_p_result__isset {
  _transport_service_get_virtual_machine_detail_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_virtual_machine_detail_p_result__isset;

class transport_service_get_virtual_machine_detail_p_result {
 public:

  transport_service_get_virtual_machine_detail_p_result(const transport_service_get_virtual_machine_detail_p_result&);
  transport_service_get_virtual_machine_detail_p_result& operator=(const transport_service_get_virtual_machine_detail_p_result&);
  transport_service_get_virtual_machine_detail_p_result() {
  }

  virtual ~transport_service_get_virtual_machine_detail_p_result() throw();
  virtual_machine success;
  invalid_operation ouch;

  _transport_service_get_virtual_machine_detail_p_result__isset __isset;

  void __set_success(const virtual_machine& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_get_virtual_machine_detail_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_virtual_machine_detail_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_virtual_machine_detail_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_virtual_machine_detail_p_presult__isset {
  _transport_service_get_virtual_machine_detail_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_virtual_machine_detail_p_presult__isset;

class transport_service_get_virtual_machine_detail_p_presult {
 public:


  virtual ~transport_service_get_virtual_machine_detail_p_presult() throw();
  virtual_machine* success;
  invalid_operation ouch;

  _transport_service_get_virtual_machine_detail_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_physical_machine_detail_p_args__isset {
  _transport_service_get_physical_machine_detail_p_args__isset() : addr(false), host(false), filter(false) {}
  bool addr :1;
  bool host :1;
  bool filter :1;
} _transport_service_get_physical_machine_detail_p_args__isset;

class transport_service_get_physical_machine_detail_p_args {
 public:

  transport_service_get_physical_machine_detail_p_args(const transport_service_get_physical_machine_detail_p_args&);
  transport_service_get_physical_machine_detail_p_args& operator=(const transport_service_get_physical_machine_detail_p_args&);
  transport_service_get_physical_machine_detail_p_args() : addr(), host(), filter((machine_detail_filter::type)0) {
  }

  virtual ~transport_service_get_physical_machine_detail_p_args() throw();
  std::string addr;
  std::string host;
  machine_detail_filter::type filter;

  _transport_service_get_physical_machine_detail_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_host(const std::string& val);

  void __set_filter(const machine_detail_filter::type val);

  bool operator == (const transport_service_get_physical_machine_detail_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_physical_machine_detail_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_physical_machine_detail_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_get_physical_machine_detail_p_pargs {
 public:


  virtual ~transport_service_get_physical_machine_detail_p_pargs() throw();
  const std::string* addr;
  const std::string* host;
  const machine_detail_filter::type* filter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_physical_machine_detail_p_result__isset {
  _transport_service_get_physical_machine_detail_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_physical_machine_detail_p_result__isset;

class transport_service_get_physical_machine_detail_p_result {
 public:

  transport_service_get_physical_machine_detail_p_result(const transport_service_get_physical_machine_detail_p_result&);
  transport_service_get_physical_machine_detail_p_result& operator=(const transport_service_get_physical_machine_detail_p_result&);
  transport_service_get_physical_machine_detail_p_result() {
  }

  virtual ~transport_service_get_physical_machine_detail_p_result() throw();
  physical_machine_info success;
  invalid_operation ouch;

  _transport_service_get_physical_machine_detail_p_result__isset __isset;

  void __set_success(const physical_machine_info& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_get_physical_machine_detail_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_physical_machine_detail_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_physical_machine_detail_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_physical_machine_detail_p_presult__isset {
  _transport_service_get_physical_machine_detail_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_physical_machine_detail_p_presult__isset;

class transport_service_get_physical_machine_detail_p_presult {
 public:


  virtual ~transport_service_get_physical_machine_detail_p_presult() throw();
  physical_machine_info* success;
  invalid_operation ouch;

  _transport_service_get_physical_machine_detail_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_power_off_virtual_machine_p_args__isset {
  _transport_service_power_off_virtual_machine_p_args__isset() : addr(false), host(false), username(false), password(false), machine_id(false) {}
  bool addr :1;
  bool host :1;
  bool username :1;
  bool password :1;
  bool machine_id :1;
} _transport_service_power_off_virtual_machine_p_args__isset;

class transport_service_power_off_virtual_machine_p_args {
 public:

  transport_service_power_off_virtual_machine_p_args(const transport_service_power_off_virtual_machine_p_args&);
  transport_service_power_off_virtual_machine_p_args& operator=(const transport_service_power_off_virtual_machine_p_args&);
  transport_service_power_off_virtual_machine_p_args() : addr(), host(), username(), password(), machine_id() {
  }

  virtual ~transport_service_power_off_virtual_machine_p_args() throw();
  std::string addr;
  std::string host;
  std::string username;
  std::string password;
  std::string machine_id;

  _transport_service_power_off_virtual_machine_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_host(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  void __set_machine_id(const std::string& val);

  bool operator == (const transport_service_power_off_virtual_machine_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(machine_id == rhs.machine_id))
      return false;
    return true;
  }
  bool operator != (const transport_service_power_off_virtual_machine_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_power_off_virtual_machine_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_power_off_virtual_machine_p_pargs {
 public:


  virtual ~transport_service_power_off_virtual_machine_p_pargs() throw();
  const std::string* addr;
  const std::string* host;
  const std::string* username;
  const std::string* password;
  const std::string* machine_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_power_off_virtual_machine_p_result__isset {
  _transport_service_power_off_virtual_machine_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_power_off_virtual_machine_p_result__isset;

class transport_service_power_off_virtual_machine_p_result {
 public:

  transport_service_power_off_virtual_machine_p_result(const transport_service_power_off_virtual_machine_p_result&);
  transport_service_power_off_virtual_machine_p_result& operator=(const transport_service_power_off_virtual_machine_p_result&);
  transport_service_power_off_virtual_machine_p_result() : success(0) {
  }

  virtual ~transport_service_power_off_virtual_machine_p_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_power_off_virtual_machine_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_power_off_virtual_machine_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_power_off_virtual_machine_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_power_off_virtual_machine_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_power_off_virtual_machine_p_presult__isset {
  _transport_service_power_off_virtual_machine_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_power_off_virtual_machine_p_presult__isset;

class transport_service_power_off_virtual_machine_p_presult {
 public:


  virtual ~transport_service_power_off_virtual_machine_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_power_off_virtual_machine_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_remove_virtual_machine_p_args__isset {
  _transport_service_remove_virtual_machine_p_args__isset() : addr(false), host(false), username(false), password(false), machine_id(false) {}
  bool addr :1;
  bool host :1;
  bool username :1;
  bool password :1;
  bool machine_id :1;
} _transport_service_remove_virtual_machine_p_args__isset;

class transport_service_remove_virtual_machine_p_args {
 public:

  transport_service_remove_virtual_machine_p_args(const transport_service_remove_virtual_machine_p_args&);
  transport_service_remove_virtual_machine_p_args& operator=(const transport_service_remove_virtual_machine_p_args&);
  transport_service_remove_virtual_machine_p_args() : addr(), host(), username(), password(), machine_id() {
  }

  virtual ~transport_service_remove_virtual_machine_p_args() throw();
  std::string addr;
  std::string host;
  std::string username;
  std::string password;
  std::string machine_id;

  _transport_service_remove_virtual_machine_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_host(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  void __set_machine_id(const std::string& val);

  bool operator == (const transport_service_remove_virtual_machine_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(machine_id == rhs.machine_id))
      return false;
    return true;
  }
  bool operator != (const transport_service_remove_virtual_machine_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_remove_virtual_machine_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_remove_virtual_machine_p_pargs {
 public:


  virtual ~transport_service_remove_virtual_machine_p_pargs() throw();
  const std::string* addr;
  const std::string* host;
  const std::string* username;
  const std::string* password;
  const std::string* machine_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_remove_virtual_machine_p_result__isset {
  _transport_service_remove_virtual_machine_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_remove_virtual_machine_p_result__isset;

class transport_service_remove_virtual_machine_p_result {
 public:

  transport_service_remove_virtual_machine_p_result(const transport_service_remove_virtual_machine_p_result&);
  transport_service_remove_virtual_machine_p_result& operator=(const transport_service_remove_virtual_machine_p_result&);
  transport_service_remove_virtual_machine_p_result() : success(0) {
  }

  virtual ~transport_service_remove_virtual_machine_p_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_remove_virtual_machine_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_remove_virtual_machine_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_remove_virtual_machine_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_remove_virtual_machine_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_remove_virtual_machine_p_presult__isset {
  _transport_service_remove_virtual_machine_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_remove_virtual_machine_p_presult__isset;

class transport_service_remove_virtual_machine_p_presult {
 public:


  virtual ~transport_service_remove_virtual_machine_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_remove_virtual_machine_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_virtual_machine_snapshots_p_args__isset {
  _transport_service_get_virtual_machine_snapshots_p_args__isset() : addr(false), host(false), username(false), password(false), machine_id(false) {}
  bool addr :1;
  bool host :1;
  bool username :1;
  bool password :1;
  bool machine_id :1;
} _transport_service_get_virtual_machine_snapshots_p_args__isset;

class transport_service_get_virtual_machine_snapshots_p_args {
 public:

  transport_service_get_virtual_machine_snapshots_p_args(const transport_service_get_virtual_machine_snapshots_p_args&);
  transport_service_get_virtual_machine_snapshots_p_args& operator=(const transport_service_get_virtual_machine_snapshots_p_args&);
  transport_service_get_virtual_machine_snapshots_p_args() : addr(), host(), username(), password(), machine_id() {
  }

  virtual ~transport_service_get_virtual_machine_snapshots_p_args() throw();
  std::string addr;
  std::string host;
  std::string username;
  std::string password;
  std::string machine_id;

  _transport_service_get_virtual_machine_snapshots_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_host(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  void __set_machine_id(const std::string& val);

  bool operator == (const transport_service_get_virtual_machine_snapshots_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(machine_id == rhs.machine_id))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_virtual_machine_snapshots_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_virtual_machine_snapshots_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_get_virtual_machine_snapshots_p_pargs {
 public:


  virtual ~transport_service_get_virtual_machine_snapshots_p_pargs() throw();
  const std::string* addr;
  const std::string* host;
  const std::string* username;
  const std::string* password;
  const std::string* machine_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_virtual_machine_snapshots_p_result__isset {
  _transport_service_get_virtual_machine_snapshots_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_virtual_machine_snapshots_p_result__isset;

class transport_service_get_virtual_machine_snapshots_p_result {
 public:

  transport_service_get_virtual_machine_snapshots_p_result(const transport_service_get_virtual_machine_snapshots_p_result&);
  transport_service_get_virtual_machine_snapshots_p_result& operator=(const transport_service_get_virtual_machine_snapshots_p_result&);
  transport_service_get_virtual_machine_snapshots_p_result() {
  }

  virtual ~transport_service_get_virtual_machine_snapshots_p_result() throw();
  std::vector<vmware_snapshot>  success;
  invalid_operation ouch;

  _transport_service_get_virtual_machine_snapshots_p_result__isset __isset;

  void __set_success(const std::vector<vmware_snapshot> & val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_get_virtual_machine_snapshots_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_virtual_machine_snapshots_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_virtual_machine_snapshots_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_virtual_machine_snapshots_p_presult__isset {
  _transport_service_get_virtual_machine_snapshots_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_virtual_machine_snapshots_p_presult__isset;

class transport_service_get_virtual_machine_snapshots_p_presult {
 public:


  virtual ~transport_service_get_virtual_machine_snapshots_p_presult() throw();
  std::vector<vmware_snapshot> * success;
  invalid_operation ouch;

  _transport_service_get_virtual_machine_snapshots_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_remove_virtual_machine_snapshot_p_args__isset {
  _transport_service_remove_virtual_machine_snapshot_p_args__isset() : addr(false), host(false), username(false), password(false), machine_id(false), snapshot_id(false) {}
  bool addr :1;
  bool host :1;
  bool username :1;
  bool password :1;
  bool machine_id :1;
  bool snapshot_id :1;
} _transport_service_remove_virtual_machine_snapshot_p_args__isset;

class transport_service_remove_virtual_machine_snapshot_p_args {
 public:

  transport_service_remove_virtual_machine_snapshot_p_args(const transport_service_remove_virtual_machine_snapshot_p_args&);
  transport_service_remove_virtual_machine_snapshot_p_args& operator=(const transport_service_remove_virtual_machine_snapshot_p_args&);
  transport_service_remove_virtual_machine_snapshot_p_args() : addr(), host(), username(), password(), machine_id(), snapshot_id() {
  }

  virtual ~transport_service_remove_virtual_machine_snapshot_p_args() throw();
  std::string addr;
  std::string host;
  std::string username;
  std::string password;
  std::string machine_id;
  std::string snapshot_id;

  _transport_service_remove_virtual_machine_snapshot_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_host(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  void __set_machine_id(const std::string& val);

  void __set_snapshot_id(const std::string& val);

  bool operator == (const transport_service_remove_virtual_machine_snapshot_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(machine_id == rhs.machine_id))
      return false;
    if (!(snapshot_id == rhs.snapshot_id))
      return false;
    return true;
  }
  bool operator != (const transport_service_remove_virtual_machine_snapshot_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_remove_virtual_machine_snapshot_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_remove_virtual_machine_snapshot_p_pargs {
 public:


  virtual ~transport_service_remove_virtual_machine_snapshot_p_pargs() throw();
  const std::string* addr;
  const std::string* host;
  const std::string* username;
  const std::string* password;
  const std::string* machine_id;
  const std::string* snapshot_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_remove_virtual_machine_snapshot_p_result__isset {
  _transport_service_remove_virtual_machine_snapshot_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_remove_virtual_machine_snapshot_p_result__isset;

class transport_service_remove_virtual_machine_snapshot_p_result {
 public:

  transport_service_remove_virtual_machine_snapshot_p_result(const transport_service_remove_virtual_machine_snapshot_p_result&);
  transport_service_remove_virtual_machine_snapshot_p_result& operator=(const transport_service_remove_virtual_machine_snapshot_p_result&);
  transport_service_remove_virtual_machine_snapshot_p_result() : success(0) {
  }

  virtual ~transport_service_remove_virtual_machine_snapshot_p_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_remove_virtual_machine_snapshot_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_remove_virtual_machine_snapshot_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_remove_virtual_machine_snapshot_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_remove_virtual_machine_snapshot_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_remove_virtual_machine_snapshot_p_presult__isset {
  _transport_service_remove_virtual_machine_snapshot_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_remove_virtual_machine_snapshot_p_presult__isset;

class transport_service_remove_virtual_machine_snapshot_p_presult {
 public:


  virtual ~transport_service_remove_virtual_machine_snapshot_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_remove_virtual_machine_snapshot_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_datacenter_folder_list_p_args__isset {
  _transport_service_get_datacenter_folder_list_p_args__isset() : addr(false), host(false), username(false), password(false), datacenter(false) {}
  bool addr :1;
  bool host :1;
  bool username :1;
  bool password :1;
  bool datacenter :1;
} _transport_service_get_datacenter_folder_list_p_args__isset;

class transport_service_get_datacenter_folder_list_p_args {
 public:

  transport_service_get_datacenter_folder_list_p_args(const transport_service_get_datacenter_folder_list_p_args&);
  transport_service_get_datacenter_folder_list_p_args& operator=(const transport_service_get_datacenter_folder_list_p_args&);
  transport_service_get_datacenter_folder_list_p_args() : addr(), host(), username(), password(), datacenter() {
  }

  virtual ~transport_service_get_datacenter_folder_list_p_args() throw();
  std::string addr;
  std::string host;
  std::string username;
  std::string password;
  std::string datacenter;

  _transport_service_get_datacenter_folder_list_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_host(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  void __set_datacenter(const std::string& val);

  bool operator == (const transport_service_get_datacenter_folder_list_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(datacenter == rhs.datacenter))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_datacenter_folder_list_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_datacenter_folder_list_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_get_datacenter_folder_list_p_pargs {
 public:


  virtual ~transport_service_get_datacenter_folder_list_p_pargs() throw();
  const std::string* addr;
  const std::string* host;
  const std::string* username;
  const std::string* password;
  const std::string* datacenter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_datacenter_folder_list_p_result__isset {
  _transport_service_get_datacenter_folder_list_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_datacenter_folder_list_p_result__isset;

class transport_service_get_datacenter_folder_list_p_result {
 public:

  transport_service_get_datacenter_folder_list_p_result(const transport_service_get_datacenter_folder_list_p_result&);
  transport_service_get_datacenter_folder_list_p_result& operator=(const transport_service_get_datacenter_folder_list_p_result&);
  transport_service_get_datacenter_folder_list_p_result() {
  }

  virtual ~transport_service_get_datacenter_folder_list_p_result() throw();
  std::vector<std::string>  success;
  invalid_operation ouch;

  _transport_service_get_datacenter_folder_list_p_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_get_datacenter_folder_list_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_datacenter_folder_list_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_datacenter_folder_list_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_datacenter_folder_list_p_presult__isset {
  _transport_service_get_datacenter_folder_list_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_datacenter_folder_list_p_presult__isset;

class transport_service_get_datacenter_folder_list_p_presult {
 public:


  virtual ~transport_service_get_datacenter_folder_list_p_presult() throw();
  std::vector<std::string> * success;
  invalid_operation ouch;

  _transport_service_get_datacenter_folder_list_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_take_packer_xray_p_args__isset {
  _transport_service_take_packer_xray_p_args__isset() : addr(false), host(false) {}
  bool addr :1;
  bool host :1;
} _transport_service_take_packer_xray_p_args__isset;

class transport_service_take_packer_xray_p_args {
 public:

  transport_service_take_packer_xray_p_args(const transport_service_take_packer_xray_p_args&);
  transport_service_take_packer_xray_p_args& operator=(const transport_service_take_packer_xray_p_args&);
  transport_service_take_packer_xray_p_args() : addr(), host() {
  }

  virtual ~transport_service_take_packer_xray_p_args() throw();
  std::string addr;
  std::string host;

  _transport_service_take_packer_xray_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_host(const std::string& val);

  bool operator == (const transport_service_take_packer_xray_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(host == rhs.host))
      return false;
    return true;
  }
  bool operator != (const transport_service_take_packer_xray_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_take_packer_xray_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_take_packer_xray_p_pargs {
 public:


  virtual ~transport_service_take_packer_xray_p_pargs() throw();
  const std::string* addr;
  const std::string* host;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_take_packer_xray_p_result__isset {
  _transport_service_take_packer_xray_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_take_packer_xray_p_result__isset;

class transport_service_take_packer_xray_p_result {
 public:

  transport_service_take_packer_xray_p_result(const transport_service_take_packer_xray_p_result&);
  transport_service_take_packer_xray_p_result& operator=(const transport_service_take_packer_xray_p_result&);
  transport_service_take_packer_xray_p_result() : success() {
  }

  virtual ~transport_service_take_packer_xray_p_result() throw();
  std::string success;
  invalid_operation ouch;

  _transport_service_take_packer_xray_p_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_take_packer_xray_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_take_packer_xray_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_take_packer_xray_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_take_packer_xray_p_presult__isset {
  _transport_service_take_packer_xray_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_take_packer_xray_p_presult__isset;

class transport_service_take_packer_xray_p_presult {
 public:


  virtual ~transport_service_take_packer_xray_p_presult() throw();
  std::string* success;
  invalid_operation ouch;

  _transport_service_take_packer_xray_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_packer_service_info_p_args__isset {
  _transport_service_get_packer_service_info_p_args__isset() : addr(false), host(false) {}
  bool addr :1;
  bool host :1;
} _transport_service_get_packer_service_info_p_args__isset;

class transport_service_get_packer_service_info_p_args {
 public:

  transport_service_get_packer_service_info_p_args(const transport_service_get_packer_service_info_p_args&);
  transport_service_get_packer_service_info_p_args& operator=(const transport_service_get_packer_service_info_p_args&);
  transport_service_get_packer_service_info_p_args() : addr(), host() {
  }

  virtual ~transport_service_get_packer_service_info_p_args() throw();
  std::string addr;
  std::string host;

  _transport_service_get_packer_service_info_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_host(const std::string& val);

  bool operator == (const transport_service_get_packer_service_info_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(host == rhs.host))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_packer_service_info_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_packer_service_info_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_get_packer_service_info_p_pargs {
 public:


  virtual ~transport_service_get_packer_service_info_p_pargs() throw();
  const std::string* addr;
  const std::string* host;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_packer_service_info_p_result__isset {
  _transport_service_get_packer_service_info_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_packer_service_info_p_result__isset;

class transport_service_get_packer_service_info_p_result {
 public:

  transport_service_get_packer_service_info_p_result(const transport_service_get_packer_service_info_p_result&);
  transport_service_get_packer_service_info_p_result& operator=(const transport_service_get_packer_service_info_p_result&);
  transport_service_get_packer_service_info_p_result() {
  }

  virtual ~transport_service_get_packer_service_info_p_result() throw();
  service_info success;
  invalid_operation ouch;

  _transport_service_get_packer_service_info_p_result__isset __isset;

  void __set_success(const service_info& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_get_packer_service_info_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_packer_service_info_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_packer_service_info_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_packer_service_info_p_presult__isset {
  _transport_service_get_packer_service_info_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_packer_service_info_p_presult__isset;

class transport_service_get_packer_service_info_p_presult {
 public:


  virtual ~transport_service_get_packer_service_info_p_presult() throw();
  service_info* success;
  invalid_operation ouch;

  _transport_service_get_packer_service_info_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_verify_management_p_args__isset {
  _transport_service_verify_management_p_args__isset() : addr(false), management(false), port(false), is_ssl(false) {}
  bool addr :1;
  bool management :1;
  bool port :1;
  bool is_ssl :1;
} _transport_service_verify_management_p_args__isset;

class transport_service_verify_management_p_args {
 public:

  transport_service_verify_management_p_args(const transport_service_verify_management_p_args&);
  transport_service_verify_management_p_args& operator=(const transport_service_verify_management_p_args&);
  transport_service_verify_management_p_args() : addr(), management(), port(0), is_ssl(0) {
  }

  virtual ~transport_service_verify_management_p_args() throw();
  std::string addr;
  std::string management;
  int32_t port;
  bool is_ssl;

  _transport_service_verify_management_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_management(const std::string& val);

  void __set_port(const int32_t val);

  void __set_is_ssl(const bool val);

  bool operator == (const transport_service_verify_management_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(management == rhs.management))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(is_ssl == rhs.is_ssl))
      return false;
    return true;
  }
  bool operator != (const transport_service_verify_management_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_verify_management_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_verify_management_p_pargs {
 public:


  virtual ~transport_service_verify_management_p_pargs() throw();
  const std::string* addr;
  const std::string* management;
  const int32_t* port;
  const bool* is_ssl;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_verify_management_p_result__isset {
  _transport_service_verify_management_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_verify_management_p_result__isset;

class transport_service_verify_management_p_result {
 public:

  transport_service_verify_management_p_result(const transport_service_verify_management_p_result&);
  transport_service_verify_management_p_result& operator=(const transport_service_verify_management_p_result&);
  transport_service_verify_management_p_result() : success(0) {
  }

  virtual ~transport_service_verify_management_p_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_verify_management_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_verify_management_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_verify_management_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_verify_management_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_verify_management_p_presult__isset {
  _transport_service_verify_management_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_verify_management_p_presult__isset;

class transport_service_verify_management_p_presult {
 public:


  virtual ~transport_service_verify_management_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_verify_management_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_verify_packer_to_carrier_p_args__isset {
  _transport_service_verify_packer_to_carrier_p_args__isset() : addr(false), packer(false), carrier(false), port(false), is_ssl(false) {}
  bool addr :1;
  bool packer :1;
  bool carrier :1;
  bool port :1;
  bool is_ssl :1;
} _transport_service_verify_packer_to_carrier_p_args__isset;

class transport_service_verify_packer_to_carrier_p_args {
 public:

  transport_service_verify_packer_to_carrier_p_args(const transport_service_verify_packer_to_carrier_p_args&);
  transport_service_verify_packer_to_carrier_p_args& operator=(const transport_service_verify_packer_to_carrier_p_args&);
  transport_service_verify_packer_to_carrier_p_args() : addr(), packer(), carrier(), port(0), is_ssl(0) {
  }

  virtual ~transport_service_verify_packer_to_carrier_p_args() throw();
  std::string addr;
  std::string packer;
  std::string carrier;
  int32_t port;
  bool is_ssl;

  _transport_service_verify_packer_to_carrier_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_packer(const std::string& val);

  void __set_carrier(const std::string& val);

  void __set_port(const int32_t val);

  void __set_is_ssl(const bool val);

  bool operator == (const transport_service_verify_packer_to_carrier_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(packer == rhs.packer))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(is_ssl == rhs.is_ssl))
      return false;
    return true;
  }
  bool operator != (const transport_service_verify_packer_to_carrier_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_verify_packer_to_carrier_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_verify_packer_to_carrier_p_pargs {
 public:


  virtual ~transport_service_verify_packer_to_carrier_p_pargs() throw();
  const std::string* addr;
  const std::string* packer;
  const std::string* carrier;
  const int32_t* port;
  const bool* is_ssl;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_verify_packer_to_carrier_p_result__isset {
  _transport_service_verify_packer_to_carrier_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_verify_packer_to_carrier_p_result__isset;

class transport_service_verify_packer_to_carrier_p_result {
 public:

  transport_service_verify_packer_to_carrier_p_result(const transport_service_verify_packer_to_carrier_p_result&);
  transport_service_verify_packer_to_carrier_p_result& operator=(const transport_service_verify_packer_to_carrier_p_result&);
  transport_service_verify_packer_to_carrier_p_result() : success(0) {
  }

  virtual ~transport_service_verify_packer_to_carrier_p_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_verify_packer_to_carrier_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_verify_packer_to_carrier_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_verify_packer_to_carrier_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_verify_packer_to_carrier_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_verify_packer_to_carrier_p_presult__isset {
  _transport_service_verify_packer_to_carrier_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_verify_packer_to_carrier_p_presult__isset;

class transport_service_verify_packer_to_carrier_p_presult {
 public:


  virtual ~transport_service_verify_packer_to_carrier_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_verify_packer_to_carrier_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_replica_job_create_detail_args__isset {
  _transport_service_get_replica_job_create_detail_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _transport_service_get_replica_job_create_detail_args__isset;

class transport_service_get_replica_job_create_detail_args {
 public:

  transport_service_get_replica_job_create_detail_args(const transport_service_get_replica_job_create_detail_args&);
  transport_service_get_replica_job_create_detail_args& operator=(const transport_service_get_replica_job_create_detail_args&);
  transport_service_get_replica_job_create_detail_args() : session_id(), job_id() {
  }

  virtual ~transport_service_get_replica_job_create_detail_args() throw();
  std::string session_id;
  std::string job_id;

  _transport_service_get_replica_job_create_detail_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const transport_service_get_replica_job_create_detail_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_replica_job_create_detail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_replica_job_create_detail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_get_replica_job_create_detail_pargs {
 public:


  virtual ~transport_service_get_replica_job_create_detail_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_replica_job_create_detail_result__isset {
  _transport_service_get_replica_job_create_detail_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_replica_job_create_detail_result__isset;

class transport_service_get_replica_job_create_detail_result {
 public:

  transport_service_get_replica_job_create_detail_result(const transport_service_get_replica_job_create_detail_result&);
  transport_service_get_replica_job_create_detail_result& operator=(const transport_service_get_replica_job_create_detail_result&);
  transport_service_get_replica_job_create_detail_result() {
  }

  virtual ~transport_service_get_replica_job_create_detail_result() throw();
  replica_job_create_detail success;
  invalid_operation ouch;

  _transport_service_get_replica_job_create_detail_result__isset __isset;

  void __set_success(const replica_job_create_detail& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_get_replica_job_create_detail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_replica_job_create_detail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_replica_job_create_detail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_replica_job_create_detail_presult__isset {
  _transport_service_get_replica_job_create_detail_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_replica_job_create_detail_presult__isset;

class transport_service_get_replica_job_create_detail_presult {
 public:


  virtual ~transport_service_get_replica_job_create_detail_presult() throw();
  replica_job_create_detail* success;
  invalid_operation ouch;

  _transport_service_get_replica_job_create_detail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_loader_job_create_detail_args__isset {
  _transport_service_get_loader_job_create_detail_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _transport_service_get_loader_job_create_detail_args__isset;

class transport_service_get_loader_job_create_detail_args {
 public:

  transport_service_get_loader_job_create_detail_args(const transport_service_get_loader_job_create_detail_args&);
  transport_service_get_loader_job_create_detail_args& operator=(const transport_service_get_loader_job_create_detail_args&);
  transport_service_get_loader_job_create_detail_args() : session_id(), job_id() {
  }

  virtual ~transport_service_get_loader_job_create_detail_args() throw();
  std::string session_id;
  std::string job_id;

  _transport_service_get_loader_job_create_detail_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const transport_service_get_loader_job_create_detail_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_loader_job_create_detail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_loader_job_create_detail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_get_loader_job_create_detail_pargs {
 public:


  virtual ~transport_service_get_loader_job_create_detail_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_loader_job_create_detail_result__isset {
  _transport_service_get_loader_job_create_detail_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_loader_job_create_detail_result__isset;

class transport_service_get_loader_job_create_detail_result {
 public:

  transport_service_get_loader_job_create_detail_result(const transport_service_get_loader_job_create_detail_result&);
  transport_service_get_loader_job_create_detail_result& operator=(const transport_service_get_loader_job_create_detail_result&);
  transport_service_get_loader_job_create_detail_result() {
  }

  virtual ~transport_service_get_loader_job_create_detail_result() throw();
  loader_job_create_detail success;
  invalid_operation ouch;

  _transport_service_get_loader_job_create_detail_result__isset __isset;

  void __set_success(const loader_job_create_detail& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_get_loader_job_create_detail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_loader_job_create_detail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_loader_job_create_detail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_loader_job_create_detail_presult__isset {
  _transport_service_get_loader_job_create_detail_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_loader_job_create_detail_presult__isset;

class transport_service_get_loader_job_create_detail_presult {
 public:


  virtual ~transport_service_get_loader_job_create_detail_presult() throw();
  loader_job_create_detail* success;
  invalid_operation ouch;

  _transport_service_get_loader_job_create_detail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_launcher_job_create_detail_args__isset {
  _transport_service_get_launcher_job_create_detail_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _transport_service_get_launcher_job_create_detail_args__isset;

class transport_service_get_launcher_job_create_detail_args {
 public:

  transport_service_get_launcher_job_create_detail_args(const transport_service_get_launcher_job_create_detail_args&);
  transport_service_get_launcher_job_create_detail_args& operator=(const transport_service_get_launcher_job_create_detail_args&);
  transport_service_get_launcher_job_create_detail_args() : session_id(), job_id() {
  }

  virtual ~transport_service_get_launcher_job_create_detail_args() throw();
  std::string session_id;
  std::string job_id;

  _transport_service_get_launcher_job_create_detail_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const transport_service_get_launcher_job_create_detail_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_launcher_job_create_detail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_launcher_job_create_detail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_get_launcher_job_create_detail_pargs {
 public:


  virtual ~transport_service_get_launcher_job_create_detail_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_launcher_job_create_detail_result__isset {
  _transport_service_get_launcher_job_create_detail_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_launcher_job_create_detail_result__isset;

class transport_service_get_launcher_job_create_detail_result {
 public:

  transport_service_get_launcher_job_create_detail_result(const transport_service_get_launcher_job_create_detail_result&);
  transport_service_get_launcher_job_create_detail_result& operator=(const transport_service_get_launcher_job_create_detail_result&);
  transport_service_get_launcher_job_create_detail_result() {
  }

  virtual ~transport_service_get_launcher_job_create_detail_result() throw();
  launcher_job_create_detail success;
  invalid_operation ouch;

  _transport_service_get_launcher_job_create_detail_result__isset __isset;

  void __set_success(const launcher_job_create_detail& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_get_launcher_job_create_detail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_launcher_job_create_detail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_launcher_job_create_detail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_launcher_job_create_detail_presult__isset {
  _transport_service_get_launcher_job_create_detail_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_launcher_job_create_detail_presult__isset;

class transport_service_get_launcher_job_create_detail_presult {
 public:


  virtual ~transport_service_get_launcher_job_create_detail_presult() throw();
  launcher_job_create_detail* success;
  invalid_operation ouch;

  _transport_service_get_launcher_job_create_detail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_terminate_args__isset {
  _transport_service_terminate_args__isset() : session_id(false) {}
  bool session_id :1;
} _transport_service_terminate_args__isset;

class transport_service_terminate_args {
 public:

  transport_service_terminate_args(const transport_service_terminate_args&);
  transport_service_terminate_args& operator=(const transport_service_terminate_args&);
  transport_service_terminate_args() : session_id() {
  }

  virtual ~transport_service_terminate_args() throw();
  std::string session_id;

  _transport_service_terminate_args__isset __isset;

  void __set_session_id(const std::string& val);

  bool operator == (const transport_service_terminate_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const transport_service_terminate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_terminate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_terminate_pargs {
 public:


  virtual ~transport_service_terminate_pargs() throw();
  const std::string* session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_terminate_result {
 public:

  transport_service_terminate_result(const transport_service_terminate_result&);
  transport_service_terminate_result& operator=(const transport_service_terminate_result&);
  transport_service_terminate_result() {
  }

  virtual ~transport_service_terminate_result() throw();

  bool operator == (const transport_service_terminate_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const transport_service_terminate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_terminate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_terminate_presult {
 public:


  virtual ~transport_service_terminate_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_set_customized_id_p_args__isset {
  _transport_service_set_customized_id_p_args__isset() : addr(false), disk_addr(false), disk_id(false) {}
  bool addr :1;
  bool disk_addr :1;
  bool disk_id :1;
} _transport_service_set_customized_id_p_args__isset;

class transport_service_set_customized_id_p_args {
 public:

  transport_service_set_customized_id_p_args(const transport_service_set_customized_id_p_args&);
  transport_service_set_customized_id_p_args& operator=(const transport_service_set_customized_id_p_args&);
  transport_service_set_customized_id_p_args() : addr(), disk_addr(), disk_id() {
  }

  virtual ~transport_service_set_customized_id_p_args() throw();
  std::string addr;
  std::string disk_addr;
  std::string disk_id;

  _transport_service_set_customized_id_p_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_disk_addr(const std::string& val);

  void __set_disk_id(const std::string& val);

  bool operator == (const transport_service_set_customized_id_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(disk_addr == rhs.disk_addr))
      return false;
    if (!(disk_id == rhs.disk_id))
      return false;
    return true;
  }
  bool operator != (const transport_service_set_customized_id_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_set_customized_id_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_set_customized_id_p_pargs {
 public:


  virtual ~transport_service_set_customized_id_p_pargs() throw();
  const std::string* addr;
  const std::string* disk_addr;
  const std::string* disk_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_set_customized_id_p_result__isset {
  _transport_service_set_customized_id_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_set_customized_id_p_result__isset;

class transport_service_set_customized_id_p_result {
 public:

  transport_service_set_customized_id_p_result(const transport_service_set_customized_id_p_result&);
  transport_service_set_customized_id_p_result& operator=(const transport_service_set_customized_id_p_result&);
  transport_service_set_customized_id_p_result() : success(0) {
  }

  virtual ~transport_service_set_customized_id_p_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_set_customized_id_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_set_customized_id_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_set_customized_id_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_set_customized_id_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_set_customized_id_p_presult__isset {
  _transport_service_set_customized_id_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_set_customized_id_p_presult__isset;

class transport_service_set_customized_id_p_presult {
 public:


  virtual ~transport_service_set_customized_id_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_set_customized_id_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_unregister_packer_p_args__isset {
  _transport_service_unregister_packer_p_args__isset() : addr(false) {}
  bool addr :1;
} _transport_service_unregister_packer_p_args__isset;

class transport_service_unregister_packer_p_args {
 public:

  transport_service_unregister_packer_p_args(const transport_service_unregister_packer_p_args&);
  transport_service_unregister_packer_p_args& operator=(const transport_service_unregister_packer_p_args&);
  transport_service_unregister_packer_p_args() : addr() {
  }

  virtual ~transport_service_unregister_packer_p_args() throw();
  std::string addr;

  _transport_service_unregister_packer_p_args__isset __isset;

  void __set_addr(const std::string& val);

  bool operator == (const transport_service_unregister_packer_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    return true;
  }
  bool operator != (const transport_service_unregister_packer_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_unregister_packer_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_unregister_packer_p_pargs {
 public:


  virtual ~transport_service_unregister_packer_p_pargs() throw();
  const std::string* addr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_unregister_packer_p_result__isset {
  _transport_service_unregister_packer_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_unregister_packer_p_result__isset;

class transport_service_unregister_packer_p_result {
 public:

  transport_service_unregister_packer_p_result(const transport_service_unregister_packer_p_result&);
  transport_service_unregister_packer_p_result& operator=(const transport_service_unregister_packer_p_result&);
  transport_service_unregister_packer_p_result() : success(0) {
  }

  virtual ~transport_service_unregister_packer_p_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_unregister_packer_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_unregister_packer_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_unregister_packer_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_unregister_packer_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_unregister_packer_p_presult__isset {
  _transport_service_unregister_packer_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_unregister_packer_p_presult__isset;

class transport_service_unregister_packer_p_presult {
 public:


  virtual ~transport_service_unregister_packer_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_unregister_packer_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_unregister_server_p_args__isset {
  _transport_service_unregister_server_p_args__isset() : addr(false) {}
  bool addr :1;
} _transport_service_unregister_server_p_args__isset;

class transport_service_unregister_server_p_args {
 public:

  transport_service_unregister_server_p_args(const transport_service_unregister_server_p_args&);
  transport_service_unregister_server_p_args& operator=(const transport_service_unregister_server_p_args&);
  transport_service_unregister_server_p_args() : addr() {
  }

  virtual ~transport_service_unregister_server_p_args() throw();
  std::string addr;

  _transport_service_unregister_server_p_args__isset __isset;

  void __set_addr(const std::string& val);

  bool operator == (const transport_service_unregister_server_p_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    return true;
  }
  bool operator != (const transport_service_unregister_server_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_unregister_server_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_unregister_server_p_pargs {
 public:


  virtual ~transport_service_unregister_server_p_pargs() throw();
  const std::string* addr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_unregister_server_p_result__isset {
  _transport_service_unregister_server_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_unregister_server_p_result__isset;

class transport_service_unregister_server_p_result {
 public:

  transport_service_unregister_server_p_result(const transport_service_unregister_server_p_result&);
  transport_service_unregister_server_p_result& operator=(const transport_service_unregister_server_p_result&);
  transport_service_unregister_server_p_result() : success(0) {
  }

  virtual ~transport_service_unregister_server_p_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_unregister_server_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_unregister_server_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_unregister_server_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_unregister_server_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_unregister_server_p_presult__isset {
  _transport_service_unregister_server_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_unregister_server_p_presult__isset;

class transport_service_unregister_server_p_presult {
 public:


  virtual ~transport_service_unregister_server_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_unregister_server_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_create_vhd_disk_from_snapshot_args__isset {
  _transport_service_create_vhd_disk_from_snapshot_args__isset() : connection_string(false), container(false), original_disk_name(false), target_disk_name(false), snapshot(false) {}
  bool connection_string :1;
  bool container :1;
  bool original_disk_name :1;
  bool target_disk_name :1;
  bool snapshot :1;
} _transport_service_create_vhd_disk_from_snapshot_args__isset;

class transport_service_create_vhd_disk_from_snapshot_args {
 public:

  transport_service_create_vhd_disk_from_snapshot_args(const transport_service_create_vhd_disk_from_snapshot_args&);
  transport_service_create_vhd_disk_from_snapshot_args& operator=(const transport_service_create_vhd_disk_from_snapshot_args&);
  transport_service_create_vhd_disk_from_snapshot_args() : connection_string(), container(), original_disk_name(), target_disk_name(), snapshot() {
  }

  virtual ~transport_service_create_vhd_disk_from_snapshot_args() throw();
  std::string connection_string;
  std::string container;
  std::string original_disk_name;
  std::string target_disk_name;
  std::string snapshot;

  _transport_service_create_vhd_disk_from_snapshot_args__isset __isset;

  void __set_connection_string(const std::string& val);

  void __set_container(const std::string& val);

  void __set_original_disk_name(const std::string& val);

  void __set_target_disk_name(const std::string& val);

  void __set_snapshot(const std::string& val);

  bool operator == (const transport_service_create_vhd_disk_from_snapshot_args & rhs) const
  {
    if (!(connection_string == rhs.connection_string))
      return false;
    if (!(container == rhs.container))
      return false;
    if (!(original_disk_name == rhs.original_disk_name))
      return false;
    if (!(target_disk_name == rhs.target_disk_name))
      return false;
    if (!(snapshot == rhs.snapshot))
      return false;
    return true;
  }
  bool operator != (const transport_service_create_vhd_disk_from_snapshot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_create_vhd_disk_from_snapshot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_create_vhd_disk_from_snapshot_pargs {
 public:


  virtual ~transport_service_create_vhd_disk_from_snapshot_pargs() throw();
  const std::string* connection_string;
  const std::string* container;
  const std::string* original_disk_name;
  const std::string* target_disk_name;
  const std::string* snapshot;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_create_vhd_disk_from_snapshot_result__isset {
  _transport_service_create_vhd_disk_from_snapshot_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_create_vhd_disk_from_snapshot_result__isset;

class transport_service_create_vhd_disk_from_snapshot_result {
 public:

  transport_service_create_vhd_disk_from_snapshot_result(const transport_service_create_vhd_disk_from_snapshot_result&);
  transport_service_create_vhd_disk_from_snapshot_result& operator=(const transport_service_create_vhd_disk_from_snapshot_result&);
  transport_service_create_vhd_disk_from_snapshot_result() : success() {
  }

  virtual ~transport_service_create_vhd_disk_from_snapshot_result() throw();
  std::string success;
  invalid_operation ouch;

  _transport_service_create_vhd_disk_from_snapshot_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_create_vhd_disk_from_snapshot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_create_vhd_disk_from_snapshot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_create_vhd_disk_from_snapshot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_create_vhd_disk_from_snapshot_presult__isset {
  _transport_service_create_vhd_disk_from_snapshot_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_create_vhd_disk_from_snapshot_presult__isset;

class transport_service_create_vhd_disk_from_snapshot_presult {
 public:


  virtual ~transport_service_create_vhd_disk_from_snapshot_presult() throw();
  std::string* success;
  invalid_operation ouch;

  _transport_service_create_vhd_disk_from_snapshot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_is_snapshot_vhd_disk_ready_args__isset {
  _transport_service_is_snapshot_vhd_disk_ready_args__isset() : task_id(false) {}
  bool task_id :1;
} _transport_service_is_snapshot_vhd_disk_ready_args__isset;

class transport_service_is_snapshot_vhd_disk_ready_args {
 public:

  transport_service_is_snapshot_vhd_disk_ready_args(const transport_service_is_snapshot_vhd_disk_ready_args&);
  transport_service_is_snapshot_vhd_disk_ready_args& operator=(const transport_service_is_snapshot_vhd_disk_ready_args&);
  transport_service_is_snapshot_vhd_disk_ready_args() : task_id() {
  }

  virtual ~transport_service_is_snapshot_vhd_disk_ready_args() throw();
  std::string task_id;

  _transport_service_is_snapshot_vhd_disk_ready_args__isset __isset;

  void __set_task_id(const std::string& val);

  bool operator == (const transport_service_is_snapshot_vhd_disk_ready_args & rhs) const
  {
    if (!(task_id == rhs.task_id))
      return false;
    return true;
  }
  bool operator != (const transport_service_is_snapshot_vhd_disk_ready_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_is_snapshot_vhd_disk_ready_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_is_snapshot_vhd_disk_ready_pargs {
 public:


  virtual ~transport_service_is_snapshot_vhd_disk_ready_pargs() throw();
  const std::string* task_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_is_snapshot_vhd_disk_ready_result__isset {
  _transport_service_is_snapshot_vhd_disk_ready_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_is_snapshot_vhd_disk_ready_result__isset;

class transport_service_is_snapshot_vhd_disk_ready_result {
 public:

  transport_service_is_snapshot_vhd_disk_ready_result(const transport_service_is_snapshot_vhd_disk_ready_result&);
  transport_service_is_snapshot_vhd_disk_ready_result& operator=(const transport_service_is_snapshot_vhd_disk_ready_result&);
  transport_service_is_snapshot_vhd_disk_ready_result() : success(0) {
  }

  virtual ~transport_service_is_snapshot_vhd_disk_ready_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_is_snapshot_vhd_disk_ready_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_is_snapshot_vhd_disk_ready_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_is_snapshot_vhd_disk_ready_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_is_snapshot_vhd_disk_ready_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_is_snapshot_vhd_disk_ready_presult__isset {
  _transport_service_is_snapshot_vhd_disk_ready_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_is_snapshot_vhd_disk_ready_presult__isset;

class transport_service_is_snapshot_vhd_disk_ready_presult {
 public:


  virtual ~transport_service_is_snapshot_vhd_disk_ready_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_is_snapshot_vhd_disk_ready_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_delete_vhd_disk_args__isset {
  _transport_service_delete_vhd_disk_args__isset() : connection_string(false), container(false), disk_name(false) {}
  bool connection_string :1;
  bool container :1;
  bool disk_name :1;
} _transport_service_delete_vhd_disk_args__isset;

class transport_service_delete_vhd_disk_args {
 public:

  transport_service_delete_vhd_disk_args(const transport_service_delete_vhd_disk_args&);
  transport_service_delete_vhd_disk_args& operator=(const transport_service_delete_vhd_disk_args&);
  transport_service_delete_vhd_disk_args() : connection_string(), container(), disk_name() {
  }

  virtual ~transport_service_delete_vhd_disk_args() throw();
  std::string connection_string;
  std::string container;
  std::string disk_name;

  _transport_service_delete_vhd_disk_args__isset __isset;

  void __set_connection_string(const std::string& val);

  void __set_container(const std::string& val);

  void __set_disk_name(const std::string& val);

  bool operator == (const transport_service_delete_vhd_disk_args & rhs) const
  {
    if (!(connection_string == rhs.connection_string))
      return false;
    if (!(container == rhs.container))
      return false;
    if (!(disk_name == rhs.disk_name))
      return false;
    return true;
  }
  bool operator != (const transport_service_delete_vhd_disk_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_delete_vhd_disk_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_delete_vhd_disk_pargs {
 public:


  virtual ~transport_service_delete_vhd_disk_pargs() throw();
  const std::string* connection_string;
  const std::string* container;
  const std::string* disk_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_delete_vhd_disk_result__isset {
  _transport_service_delete_vhd_disk_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_delete_vhd_disk_result__isset;

class transport_service_delete_vhd_disk_result {
 public:

  transport_service_delete_vhd_disk_result(const transport_service_delete_vhd_disk_result&);
  transport_service_delete_vhd_disk_result& operator=(const transport_service_delete_vhd_disk_result&);
  transport_service_delete_vhd_disk_result() : success(0) {
  }

  virtual ~transport_service_delete_vhd_disk_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_delete_vhd_disk_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_delete_vhd_disk_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_delete_vhd_disk_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_delete_vhd_disk_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_delete_vhd_disk_presult__isset {
  _transport_service_delete_vhd_disk_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_delete_vhd_disk_presult__isset;

class transport_service_delete_vhd_disk_presult {
 public:


  virtual ~transport_service_delete_vhd_disk_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_delete_vhd_disk_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_delete_vhd_disk_snapshot_args__isset {
  _transport_service_delete_vhd_disk_snapshot_args__isset() : connection_string(false), container(false), disk_name(false), snapshot(false) {}
  bool connection_string :1;
  bool container :1;
  bool disk_name :1;
  bool snapshot :1;
} _transport_service_delete_vhd_disk_snapshot_args__isset;

class transport_service_delete_vhd_disk_snapshot_args {
 public:

  transport_service_delete_vhd_disk_snapshot_args(const transport_service_delete_vhd_disk_snapshot_args&);
  transport_service_delete_vhd_disk_snapshot_args& operator=(const transport_service_delete_vhd_disk_snapshot_args&);
  transport_service_delete_vhd_disk_snapshot_args() : connection_string(), container(), disk_name(), snapshot() {
  }

  virtual ~transport_service_delete_vhd_disk_snapshot_args() throw();
  std::string connection_string;
  std::string container;
  std::string disk_name;
  std::string snapshot;

  _transport_service_delete_vhd_disk_snapshot_args__isset __isset;

  void __set_connection_string(const std::string& val);

  void __set_container(const std::string& val);

  void __set_disk_name(const std::string& val);

  void __set_snapshot(const std::string& val);

  bool operator == (const transport_service_delete_vhd_disk_snapshot_args & rhs) const
  {
    if (!(connection_string == rhs.connection_string))
      return false;
    if (!(container == rhs.container))
      return false;
    if (!(disk_name == rhs.disk_name))
      return false;
    if (!(snapshot == rhs.snapshot))
      return false;
    return true;
  }
  bool operator != (const transport_service_delete_vhd_disk_snapshot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_delete_vhd_disk_snapshot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_delete_vhd_disk_snapshot_pargs {
 public:


  virtual ~transport_service_delete_vhd_disk_snapshot_pargs() throw();
  const std::string* connection_string;
  const std::string* container;
  const std::string* disk_name;
  const std::string* snapshot;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_delete_vhd_disk_snapshot_result__isset {
  _transport_service_delete_vhd_disk_snapshot_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_delete_vhd_disk_snapshot_result__isset;

class transport_service_delete_vhd_disk_snapshot_result {
 public:

  transport_service_delete_vhd_disk_snapshot_result(const transport_service_delete_vhd_disk_snapshot_result&);
  transport_service_delete_vhd_disk_snapshot_result& operator=(const transport_service_delete_vhd_disk_snapshot_result&);
  transport_service_delete_vhd_disk_snapshot_result() : success(0) {
  }

  virtual ~transport_service_delete_vhd_disk_snapshot_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_delete_vhd_disk_snapshot_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_delete_vhd_disk_snapshot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_delete_vhd_disk_snapshot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_delete_vhd_disk_snapshot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_delete_vhd_disk_snapshot_presult__isset {
  _transport_service_delete_vhd_disk_snapshot_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_delete_vhd_disk_snapshot_presult__isset;

class transport_service_delete_vhd_disk_snapshot_presult {
 public:


  virtual ~transport_service_delete_vhd_disk_snapshot_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_delete_vhd_disk_snapshot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_vhd_disk_snapshots_args__isset {
  _transport_service_get_vhd_disk_snapshots_args__isset() : connection_string(false), container(false), disk_name(false) {}
  bool connection_string :1;
  bool container :1;
  bool disk_name :1;
} _transport_service_get_vhd_disk_snapshots_args__isset;

class transport_service_get_vhd_disk_snapshots_args {
 public:

  transport_service_get_vhd_disk_snapshots_args(const transport_service_get_vhd_disk_snapshots_args&);
  transport_service_get_vhd_disk_snapshots_args& operator=(const transport_service_get_vhd_disk_snapshots_args&);
  transport_service_get_vhd_disk_snapshots_args() : connection_string(), container(), disk_name() {
  }

  virtual ~transport_service_get_vhd_disk_snapshots_args() throw();
  std::string connection_string;
  std::string container;
  std::string disk_name;

  _transport_service_get_vhd_disk_snapshots_args__isset __isset;

  void __set_connection_string(const std::string& val);

  void __set_container(const std::string& val);

  void __set_disk_name(const std::string& val);

  bool operator == (const transport_service_get_vhd_disk_snapshots_args & rhs) const
  {
    if (!(connection_string == rhs.connection_string))
      return false;
    if (!(container == rhs.container))
      return false;
    if (!(disk_name == rhs.disk_name))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_vhd_disk_snapshots_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_vhd_disk_snapshots_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_get_vhd_disk_snapshots_pargs {
 public:


  virtual ~transport_service_get_vhd_disk_snapshots_pargs() throw();
  const std::string* connection_string;
  const std::string* container;
  const std::string* disk_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_vhd_disk_snapshots_result__isset {
  _transport_service_get_vhd_disk_snapshots_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_vhd_disk_snapshots_result__isset;

class transport_service_get_vhd_disk_snapshots_result {
 public:

  transport_service_get_vhd_disk_snapshots_result(const transport_service_get_vhd_disk_snapshots_result&);
  transport_service_get_vhd_disk_snapshots_result& operator=(const transport_service_get_vhd_disk_snapshots_result&);
  transport_service_get_vhd_disk_snapshots_result() {
  }

  virtual ~transport_service_get_vhd_disk_snapshots_result() throw();
  std::vector<vhd_snapshot>  success;
  invalid_operation ouch;

  _transport_service_get_vhd_disk_snapshots_result__isset __isset;

  void __set_success(const std::vector<vhd_snapshot> & val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_get_vhd_disk_snapshots_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_get_vhd_disk_snapshots_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_get_vhd_disk_snapshots_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_get_vhd_disk_snapshots_presult__isset {
  _transport_service_get_vhd_disk_snapshots_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_get_vhd_disk_snapshots_presult__isset;

class transport_service_get_vhd_disk_snapshots_presult {
 public:


  virtual ~transport_service_get_vhd_disk_snapshots_presult() throw();
  std::vector<vhd_snapshot> * success;
  invalid_operation ouch;

  _transport_service_get_vhd_disk_snapshots_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_verify_connection_string_args__isset {
  _transport_service_verify_connection_string_args__isset() : connection_string(false) {}
  bool connection_string :1;
} _transport_service_verify_connection_string_args__isset;

class transport_service_verify_connection_string_args {
 public:

  transport_service_verify_connection_string_args(const transport_service_verify_connection_string_args&);
  transport_service_verify_connection_string_args& operator=(const transport_service_verify_connection_string_args&);
  transport_service_verify_connection_string_args() : connection_string() {
  }

  virtual ~transport_service_verify_connection_string_args() throw();
  std::string connection_string;

  _transport_service_verify_connection_string_args__isset __isset;

  void __set_connection_string(const std::string& val);

  bool operator == (const transport_service_verify_connection_string_args & rhs) const
  {
    if (!(connection_string == rhs.connection_string))
      return false;
    return true;
  }
  bool operator != (const transport_service_verify_connection_string_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_verify_connection_string_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class transport_service_verify_connection_string_pargs {
 public:


  virtual ~transport_service_verify_connection_string_pargs() throw();
  const std::string* connection_string;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_verify_connection_string_result__isset {
  _transport_service_verify_connection_string_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_verify_connection_string_result__isset;

class transport_service_verify_connection_string_result {
 public:

  transport_service_verify_connection_string_result(const transport_service_verify_connection_string_result&);
  transport_service_verify_connection_string_result& operator=(const transport_service_verify_connection_string_result&);
  transport_service_verify_connection_string_result() : success(0) {
  }

  virtual ~transport_service_verify_connection_string_result() throw();
  bool success;
  invalid_operation ouch;

  _transport_service_verify_connection_string_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const transport_service_verify_connection_string_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const transport_service_verify_connection_string_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const transport_service_verify_connection_string_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _transport_service_verify_connection_string_presult__isset {
  _transport_service_verify_connection_string_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _transport_service_verify_connection_string_presult__isset;

class transport_service_verify_connection_string_presult {
 public:


  virtual ~transport_service_verify_connection_string_presult() throw();
  bool* success;
  invalid_operation ouch;

  _transport_service_verify_connection_string_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class transport_serviceClient : virtual public transport_serviceIf, public physical_packer_service_proxyClient {
 public:
  transport_serviceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    physical_packer_service_proxyClient(prot, prot) {}
  transport_serviceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    physical_packer_service_proxyClient(iprot, oprot) {}
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void generate_session(std::string& _return, const std::string& addr);
  void send_generate_session(const std::string& addr);
  void recv_generate_session(std::string& _return);
  void get_package_info(std::string& _return, const std::string& email, const std::string& name, const std::string& key);
  void send_get_package_info(const std::string& email, const std::string& name, const std::string& key);
  void recv_get_package_info(std::string& _return);
  bool active_license(const std::string& email, const std::string& name, const std::string& key);
  void send_active_license(const std::string& email, const std::string& name, const std::string& key);
  bool recv_active_license();
  bool add_license(const std::string& license);
  void send_add_license(const std::string& license);
  bool recv_add_license();
  bool add_license_with_key(const std::string& key, const std::string& license);
  void send_add_license_with_key(const std::string& key, const std::string& license);
  bool recv_add_license_with_key();
  void get_licenses(license_infos& _return);
  void send_get_licenses();
  void recv_get_licenses(license_infos& _return);
  bool check_license_expiration(const int8_t days);
  void send_check_license_expiration(const int8_t days);
  bool recv_check_license_expiration();
  bool is_license_valid(const std::string& job_id);
  void send_is_license_valid(const std::string& job_id);
  bool recv_is_license_valid();
  bool is_license_valid_ex(const std::string& job_id, const bool is_recovery);
  void send_is_license_valid_ex(const std::string& job_id, const bool is_recovery);
  bool recv_is_license_valid_ex();
  bool remove_license(const std::string& key);
  void send_remove_license(const std::string& key);
  bool recv_remove_license();
  void query_package_info(std::string& _return, const std::string& key);
  void send_query_package_info(const std::string& key);
  void recv_query_package_info(std::string& _return);
  bool create_task(const running_task& task);
  void send_create_task(const running_task& task);
  bool recv_create_task();
  bool remove_task(const std::string& task_id);
  void send_remove_task(const std::string& task_id);
  bool recv_remove_task();
  void ping_p(service_info& _return, const std::string& addr);
  void send_ping_p(const std::string& addr);
  void recv_ping_p(service_info& _return);
  void get_host_detail_p(physical_machine_info& _return, const std::string& addr, const machine_detail_filter::type filter);
  void send_get_host_detail_p(const std::string& addr, const machine_detail_filter::type filter);
  void recv_get_host_detail_p(physical_machine_info& _return);
  void get_service_list_p(std::set<service_info> & _return, const std::string& addr);
  void send_get_service_list_p(const std::string& addr);
  void recv_get_service_list_p(std::set<service_info> & _return);
  void enumerate_disks_p(std::set<disk_info> & _return, const std::string& addr, const enumerate_disk_filter_style::type filter);
  void send_enumerate_disks_p(const std::string& addr, const enumerate_disk_filter_style::type filter);
  void recv_enumerate_disks_p(std::set<disk_info> & _return);
  bool verify_carrier_p(const std::string& addr, const std::string& carrier, const bool is_ssl);
  void send_verify_carrier_p(const std::string& addr, const std::string& carrier, const bool is_ssl);
  bool recv_verify_carrier_p();
  void take_xray_p(std::string& _return, const std::string& addr);
  void send_take_xray_p(const std::string& addr);
  void recv_take_xray_p(std::string& _return);
  void take_xrays_p(std::string& _return, const std::string& addr);
  void send_take_xrays_p(const std::string& addr);
  void recv_take_xrays_p(std::string& _return);
  bool create_mutex_p(const std::string& addr, const std::string& session, const int16_t timeout);
  void send_create_mutex_p(const std::string& addr, const std::string& session, const int16_t timeout);
  bool recv_create_mutex_p();
  bool delete_mutex_p(const std::string& addr, const std::string& session);
  void send_delete_mutex_p(const std::string& addr, const std::string& session);
  bool recv_delete_mutex_p();
  void create_job_ex_p(job_detail& _return, const std::string& addr, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
  void send_create_job_ex_p(const std::string& addr, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
  void recv_create_job_ex_p(job_detail& _return);
  void get_job_p(job_detail& _return, const std::string& addr, const std::string& job_id, const std::string& service_type);
  void send_get_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type);
  void recv_get_job_p(job_detail& _return);
  bool interrupt_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type);
  void send_interrupt_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type);
  bool recv_interrupt_job_p();
  bool resume_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type);
  void send_resume_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type);
  bool recv_resume_job_p();
  bool remove_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type);
  void send_remove_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type);
  bool recv_remove_job_p();
  bool running_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type);
  void send_running_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type);
  bool recv_running_job_p();
  bool update_job_p(const std::string& addr, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
  void send_update_job_p(const std::string& addr, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
  bool recv_update_job_p();
  bool remove_snapshot_image_p(const std::string& addr, const std::map<std::string, image_map_info> & images, const std::string& service_type);
  void send_remove_snapshot_image_p(const std::string& addr, const std::map<std::string, image_map_info> & images, const std::string& service_type);
  bool recv_remove_snapshot_image_p();
  bool test_connection_p(const std::string& addr, const connection& conn, const std::string& service_type);
  void send_test_connection_p(const std::string& addr, const connection& conn, const std::string& service_type);
  bool recv_test_connection_p();
  bool add_connection_p(const std::string& addr, const connection& conn, const std::string& service_type);
  void send_add_connection_p(const std::string& addr, const connection& conn, const std::string& service_type);
  bool recv_add_connection_p();
  bool remove_connection_p(const std::string& addr, const std::string& connection_id, const std::string& service_type);
  void send_remove_connection_p(const std::string& addr, const std::string& connection_id, const std::string& service_type);
  bool recv_remove_connection_p();
  bool modify_connection_p(const std::string& addr, const connection& conn, const std::string& service_type);
  void send_modify_connection_p(const std::string& addr, const connection& conn, const std::string& service_type);
  bool recv_modify_connection_p();
  void enumerate_connections_p(std::vector<connection> & _return, const std::string& addr, const std::string& service_type);
  void send_enumerate_connections_p(const std::string& addr, const std::string& service_type);
  void recv_enumerate_connections_p(std::vector<connection> & _return);
  void get_connection_p(connection& _return, const std::string& addr, const std::string& connection_id, const std::string& service_type);
  void send_get_connection_p(const std::string& addr, const std::string& connection_id, const std::string& service_type);
  void recv_get_connection_p(connection& _return);
  void get_virtual_host_info_p(virtual_host& _return, const std::string& addr, const std::string& host, const std::string& username, const std::string& password);
  void send_get_virtual_host_info_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password);
  void recv_get_virtual_host_info_p(virtual_host& _return);
  void get_virtual_hosts_p(std::vector<virtual_host> & _return, const std::string& addr, const std::string& host, const std::string& username, const std::string& password);
  void send_get_virtual_hosts_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password);
  void recv_get_virtual_hosts_p(std::vector<virtual_host> & _return);
  void get_virtual_machine_detail_p(virtual_machine& _return, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void send_get_virtual_machine_detail_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void recv_get_virtual_machine_detail_p(virtual_machine& _return);
  void get_physical_machine_detail_p(physical_machine_info& _return, const std::string& addr, const std::string& host, const machine_detail_filter::type filter);
  void send_get_physical_machine_detail_p(const std::string& addr, const std::string& host, const machine_detail_filter::type filter);
  void recv_get_physical_machine_detail_p(physical_machine_info& _return);
  bool power_off_virtual_machine_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void send_power_off_virtual_machine_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  bool recv_power_off_virtual_machine_p();
  bool remove_virtual_machine_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void send_remove_virtual_machine_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  bool recv_remove_virtual_machine_p();
  void get_virtual_machine_snapshots_p(std::vector<vmware_snapshot> & _return, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void send_get_virtual_machine_snapshots_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void recv_get_virtual_machine_snapshots_p(std::vector<vmware_snapshot> & _return);
  bool remove_virtual_machine_snapshot_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id, const std::string& snapshot_id);
  void send_remove_virtual_machine_snapshot_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id, const std::string& snapshot_id);
  bool recv_remove_virtual_machine_snapshot_p();
  void get_datacenter_folder_list_p(std::vector<std::string> & _return, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& datacenter);
  void send_get_datacenter_folder_list_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& datacenter);
  void recv_get_datacenter_folder_list_p(std::vector<std::string> & _return);
  void take_packer_xray_p(std::string& _return, const std::string& addr, const std::string& host);
  void send_take_packer_xray_p(const std::string& addr, const std::string& host);
  void recv_take_packer_xray_p(std::string& _return);
  void get_packer_service_info_p(service_info& _return, const std::string& addr, const std::string& host);
  void send_get_packer_service_info_p(const std::string& addr, const std::string& host);
  void recv_get_packer_service_info_p(service_info& _return);
  bool verify_management_p(const std::string& addr, const std::string& management, const int32_t port, const bool is_ssl);
  void send_verify_management_p(const std::string& addr, const std::string& management, const int32_t port, const bool is_ssl);
  bool recv_verify_management_p();
  bool verify_packer_to_carrier_p(const std::string& addr, const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl);
  void send_verify_packer_to_carrier_p(const std::string& addr, const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl);
  bool recv_verify_packer_to_carrier_p();
  void get_replica_job_create_detail(replica_job_create_detail& _return, const std::string& session_id, const std::string& job_id);
  void send_get_replica_job_create_detail(const std::string& session_id, const std::string& job_id);
  void recv_get_replica_job_create_detail(replica_job_create_detail& _return);
  void get_loader_job_create_detail(loader_job_create_detail& _return, const std::string& session_id, const std::string& job_id);
  void send_get_loader_job_create_detail(const std::string& session_id, const std::string& job_id);
  void recv_get_loader_job_create_detail(loader_job_create_detail& _return);
  void get_launcher_job_create_detail(launcher_job_create_detail& _return, const std::string& session_id, const std::string& job_id);
  void send_get_launcher_job_create_detail(const std::string& session_id, const std::string& job_id);
  void recv_get_launcher_job_create_detail(launcher_job_create_detail& _return);
  void terminate(const std::string& session_id);
  void send_terminate(const std::string& session_id);
  void recv_terminate();
  bool set_customized_id_p(const std::string& addr, const std::string& disk_addr, const std::string& disk_id);
  void send_set_customized_id_p(const std::string& addr, const std::string& disk_addr, const std::string& disk_id);
  bool recv_set_customized_id_p();
  bool unregister_packer_p(const std::string& addr);
  void send_unregister_packer_p(const std::string& addr);
  bool recv_unregister_packer_p();
  bool unregister_server_p(const std::string& addr);
  void send_unregister_server_p(const std::string& addr);
  bool recv_unregister_server_p();
  void create_vhd_disk_from_snapshot(std::string& _return, const std::string& connection_string, const std::string& container, const std::string& original_disk_name, const std::string& target_disk_name, const std::string& snapshot);
  void send_create_vhd_disk_from_snapshot(const std::string& connection_string, const std::string& container, const std::string& original_disk_name, const std::string& target_disk_name, const std::string& snapshot);
  void recv_create_vhd_disk_from_snapshot(std::string& _return);
  bool is_snapshot_vhd_disk_ready(const std::string& task_id);
  void send_is_snapshot_vhd_disk_ready(const std::string& task_id);
  bool recv_is_snapshot_vhd_disk_ready();
  bool delete_vhd_disk(const std::string& connection_string, const std::string& container, const std::string& disk_name);
  void send_delete_vhd_disk(const std::string& connection_string, const std::string& container, const std::string& disk_name);
  bool recv_delete_vhd_disk();
  bool delete_vhd_disk_snapshot(const std::string& connection_string, const std::string& container, const std::string& disk_name, const std::string& snapshot);
  void send_delete_vhd_disk_snapshot(const std::string& connection_string, const std::string& container, const std::string& disk_name, const std::string& snapshot);
  bool recv_delete_vhd_disk_snapshot();
  void get_vhd_disk_snapshots(std::vector<vhd_snapshot> & _return, const std::string& connection_string, const std::string& container, const std::string& disk_name);
  void send_get_vhd_disk_snapshots(const std::string& connection_string, const std::string& container, const std::string& disk_name);
  void recv_get_vhd_disk_snapshots(std::vector<vhd_snapshot> & _return);
  bool verify_connection_string(const std::string& connection_string);
  void send_verify_connection_string(const std::string& connection_string);
  bool recv_verify_connection_string();
};

class transport_serviceProcessor : public physical_packer_service_proxyProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<transport_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (transport_serviceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_generate_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_package_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_active_license(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_license(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_license_with_key(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_licenses(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_check_license_expiration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_is_license_valid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_is_license_valid_ex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_license(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query_package_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_task(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_task(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_host_detail_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_service_list_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_enumerate_disks_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verify_carrier_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_take_xray_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_take_xrays_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_mutex_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_mutex_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_job_ex_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_job_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_interrupt_job_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resume_job_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_job_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_running_job_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_job_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_snapshot_image_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_test_connection_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_connection_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_connection_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_modify_connection_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_enumerate_connections_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_connection_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_virtual_host_info_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_virtual_hosts_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_virtual_machine_detail_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_physical_machine_detail_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_power_off_virtual_machine_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_virtual_machine_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_virtual_machine_snapshots_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_virtual_machine_snapshot_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_datacenter_folder_list_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_take_packer_xray_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_packer_service_info_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verify_management_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verify_packer_to_carrier_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_replica_job_create_detail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_loader_job_create_detail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_launcher_job_create_detail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_terminate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_customized_id_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unregister_packer_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unregister_server_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_vhd_disk_from_snapshot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_is_snapshot_vhd_disk_ready(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_vhd_disk(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_vhd_disk_snapshot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_vhd_disk_snapshots(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verify_connection_string(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  transport_serviceProcessor(::apache::thrift::stdcxx::shared_ptr<transport_serviceIf> iface) :
    physical_packer_service_proxyProcessor(iface),
    iface_(iface) {
    processMap_["generate_session"] = &transport_serviceProcessor::process_generate_session;
    processMap_["get_package_info"] = &transport_serviceProcessor::process_get_package_info;
    processMap_["active_license"] = &transport_serviceProcessor::process_active_license;
    processMap_["add_license"] = &transport_serviceProcessor::process_add_license;
    processMap_["add_license_with_key"] = &transport_serviceProcessor::process_add_license_with_key;
    processMap_["get_licenses"] = &transport_serviceProcessor::process_get_licenses;
    processMap_["check_license_expiration"] = &transport_serviceProcessor::process_check_license_expiration;
    processMap_["is_license_valid"] = &transport_serviceProcessor::process_is_license_valid;
    processMap_["is_license_valid_ex"] = &transport_serviceProcessor::process_is_license_valid_ex;
    processMap_["remove_license"] = &transport_serviceProcessor::process_remove_license;
    processMap_["query_package_info"] = &transport_serviceProcessor::process_query_package_info;
    processMap_["create_task"] = &transport_serviceProcessor::process_create_task;
    processMap_["remove_task"] = &transport_serviceProcessor::process_remove_task;
    processMap_["ping_p"] = &transport_serviceProcessor::process_ping_p;
    processMap_["get_host_detail_p"] = &transport_serviceProcessor::process_get_host_detail_p;
    processMap_["get_service_list_p"] = &transport_serviceProcessor::process_get_service_list_p;
    processMap_["enumerate_disks_p"] = &transport_serviceProcessor::process_enumerate_disks_p;
    processMap_["verify_carrier_p"] = &transport_serviceProcessor::process_verify_carrier_p;
    processMap_["take_xray_p"] = &transport_serviceProcessor::process_take_xray_p;
    processMap_["take_xrays_p"] = &transport_serviceProcessor::process_take_xrays_p;
    processMap_["create_mutex_p"] = &transport_serviceProcessor::process_create_mutex_p;
    processMap_["delete_mutex_p"] = &transport_serviceProcessor::process_delete_mutex_p;
    processMap_["create_job_ex_p"] = &transport_serviceProcessor::process_create_job_ex_p;
    processMap_["get_job_p"] = &transport_serviceProcessor::process_get_job_p;
    processMap_["interrupt_job_p"] = &transport_serviceProcessor::process_interrupt_job_p;
    processMap_["resume_job_p"] = &transport_serviceProcessor::process_resume_job_p;
    processMap_["remove_job_p"] = &transport_serviceProcessor::process_remove_job_p;
    processMap_["running_job_p"] = &transport_serviceProcessor::process_running_job_p;
    processMap_["update_job_p"] = &transport_serviceProcessor::process_update_job_p;
    processMap_["remove_snapshot_image_p"] = &transport_serviceProcessor::process_remove_snapshot_image_p;
    processMap_["test_connection_p"] = &transport_serviceProcessor::process_test_connection_p;
    processMap_["add_connection_p"] = &transport_serviceProcessor::process_add_connection_p;
    processMap_["remove_connection_p"] = &transport_serviceProcessor::process_remove_connection_p;
    processMap_["modify_connection_p"] = &transport_serviceProcessor::process_modify_connection_p;
    processMap_["enumerate_connections_p"] = &transport_serviceProcessor::process_enumerate_connections_p;
    processMap_["get_connection_p"] = &transport_serviceProcessor::process_get_connection_p;
    processMap_["get_virtual_host_info_p"] = &transport_serviceProcessor::process_get_virtual_host_info_p;
    processMap_["get_virtual_hosts_p"] = &transport_serviceProcessor::process_get_virtual_hosts_p;
    processMap_["get_virtual_machine_detail_p"] = &transport_serviceProcessor::process_get_virtual_machine_detail_p;
    processMap_["get_physical_machine_detail_p"] = &transport_serviceProcessor::process_get_physical_machine_detail_p;
    processMap_["power_off_virtual_machine_p"] = &transport_serviceProcessor::process_power_off_virtual_machine_p;
    processMap_["remove_virtual_machine_p"] = &transport_serviceProcessor::process_remove_virtual_machine_p;
    processMap_["get_virtual_machine_snapshots_p"] = &transport_serviceProcessor::process_get_virtual_machine_snapshots_p;
    processMap_["remove_virtual_machine_snapshot_p"] = &transport_serviceProcessor::process_remove_virtual_machine_snapshot_p;
    processMap_["get_datacenter_folder_list_p"] = &transport_serviceProcessor::process_get_datacenter_folder_list_p;
    processMap_["take_packer_xray_p"] = &transport_serviceProcessor::process_take_packer_xray_p;
    processMap_["get_packer_service_info_p"] = &transport_serviceProcessor::process_get_packer_service_info_p;
    processMap_["verify_management_p"] = &transport_serviceProcessor::process_verify_management_p;
    processMap_["verify_packer_to_carrier_p"] = &transport_serviceProcessor::process_verify_packer_to_carrier_p;
    processMap_["get_replica_job_create_detail"] = &transport_serviceProcessor::process_get_replica_job_create_detail;
    processMap_["get_loader_job_create_detail"] = &transport_serviceProcessor::process_get_loader_job_create_detail;
    processMap_["get_launcher_job_create_detail"] = &transport_serviceProcessor::process_get_launcher_job_create_detail;
    processMap_["terminate"] = &transport_serviceProcessor::process_terminate;
    processMap_["set_customized_id_p"] = &transport_serviceProcessor::process_set_customized_id_p;
    processMap_["unregister_packer_p"] = &transport_serviceProcessor::process_unregister_packer_p;
    processMap_["unregister_server_p"] = &transport_serviceProcessor::process_unregister_server_p;
    processMap_["create_vhd_disk_from_snapshot"] = &transport_serviceProcessor::process_create_vhd_disk_from_snapshot;
    processMap_["is_snapshot_vhd_disk_ready"] = &transport_serviceProcessor::process_is_snapshot_vhd_disk_ready;
    processMap_["delete_vhd_disk"] = &transport_serviceProcessor::process_delete_vhd_disk;
    processMap_["delete_vhd_disk_snapshot"] = &transport_serviceProcessor::process_delete_vhd_disk_snapshot;
    processMap_["get_vhd_disk_snapshots"] = &transport_serviceProcessor::process_get_vhd_disk_snapshots;
    processMap_["verify_connection_string"] = &transport_serviceProcessor::process_verify_connection_string;
  }

  virtual ~transport_serviceProcessor() {}
};

class transport_serviceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  transport_serviceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< transport_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< transport_serviceIfFactory > handlerFactory_;
};

class transport_serviceMultiface : virtual public transport_serviceIf, public physical_packer_service_proxyMultiface {
 public:
  transport_serviceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<transport_serviceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<apache::thrift::stdcxx::shared_ptr<transport_serviceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      physical_packer_service_proxyMultiface::add(*iter);
    }
  }
  virtual ~transport_serviceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<transport_serviceIf> > ifaces_;
  transport_serviceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<transport_serviceIf> iface) {
    physical_packer_service_proxyMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void generate_session(std::string& _return, const std::string& addr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->generate_session(_return, addr);
    }
    ifaces_[i]->generate_session(_return, addr);
    return;
  }

  void get_package_info(std::string& _return, const std::string& email, const std::string& name, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_package_info(_return, email, name, key);
    }
    ifaces_[i]->get_package_info(_return, email, name, key);
    return;
  }

  bool active_license(const std::string& email, const std::string& name, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->active_license(email, name, key);
    }
    return ifaces_[i]->active_license(email, name, key);
  }

  bool add_license(const std::string& license) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_license(license);
    }
    return ifaces_[i]->add_license(license);
  }

  bool add_license_with_key(const std::string& key, const std::string& license) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_license_with_key(key, license);
    }
    return ifaces_[i]->add_license_with_key(key, license);
  }

  void get_licenses(license_infos& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_licenses(_return);
    }
    ifaces_[i]->get_licenses(_return);
    return;
  }

  bool check_license_expiration(const int8_t days) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->check_license_expiration(days);
    }
    return ifaces_[i]->check_license_expiration(days);
  }

  bool is_license_valid(const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->is_license_valid(job_id);
    }
    return ifaces_[i]->is_license_valid(job_id);
  }

  bool is_license_valid_ex(const std::string& job_id, const bool is_recovery) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->is_license_valid_ex(job_id, is_recovery);
    }
    return ifaces_[i]->is_license_valid_ex(job_id, is_recovery);
  }

  bool remove_license(const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_license(key);
    }
    return ifaces_[i]->remove_license(key);
  }

  void query_package_info(std::string& _return, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query_package_info(_return, key);
    }
    ifaces_[i]->query_package_info(_return, key);
    return;
  }

  bool create_task(const running_task& task) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_task(task);
    }
    return ifaces_[i]->create_task(task);
  }

  bool remove_task(const std::string& task_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_task(task_id);
    }
    return ifaces_[i]->remove_task(task_id);
  }

  void ping_p(service_info& _return, const std::string& addr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping_p(_return, addr);
    }
    ifaces_[i]->ping_p(_return, addr);
    return;
  }

  void get_host_detail_p(physical_machine_info& _return, const std::string& addr, const machine_detail_filter::type filter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_host_detail_p(_return, addr, filter);
    }
    ifaces_[i]->get_host_detail_p(_return, addr, filter);
    return;
  }

  void get_service_list_p(std::set<service_info> & _return, const std::string& addr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_service_list_p(_return, addr);
    }
    ifaces_[i]->get_service_list_p(_return, addr);
    return;
  }

  void enumerate_disks_p(std::set<disk_info> & _return, const std::string& addr, const enumerate_disk_filter_style::type filter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->enumerate_disks_p(_return, addr, filter);
    }
    ifaces_[i]->enumerate_disks_p(_return, addr, filter);
    return;
  }

  bool verify_carrier_p(const std::string& addr, const std::string& carrier, const bool is_ssl) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verify_carrier_p(addr, carrier, is_ssl);
    }
    return ifaces_[i]->verify_carrier_p(addr, carrier, is_ssl);
  }

  void take_xray_p(std::string& _return, const std::string& addr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->take_xray_p(_return, addr);
    }
    ifaces_[i]->take_xray_p(_return, addr);
    return;
  }

  void take_xrays_p(std::string& _return, const std::string& addr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->take_xrays_p(_return, addr);
    }
    ifaces_[i]->take_xrays_p(_return, addr);
    return;
  }

  bool create_mutex_p(const std::string& addr, const std::string& session, const int16_t timeout) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_mutex_p(addr, session, timeout);
    }
    return ifaces_[i]->create_mutex_p(addr, session, timeout);
  }

  bool delete_mutex_p(const std::string& addr, const std::string& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_mutex_p(addr, session);
    }
    return ifaces_[i]->delete_mutex_p(addr, session);
  }

  void create_job_ex_p(job_detail& _return, const std::string& addr, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_job_ex_p(_return, addr, job_id, create_job, service_type);
    }
    ifaces_[i]->create_job_ex_p(_return, addr, job_id, create_job, service_type);
    return;
  }

  void get_job_p(job_detail& _return, const std::string& addr, const std::string& job_id, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_job_p(_return, addr, job_id, service_type);
    }
    ifaces_[i]->get_job_p(_return, addr, job_id, service_type);
    return;
  }

  bool interrupt_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->interrupt_job_p(addr, job_id, service_type);
    }
    return ifaces_[i]->interrupt_job_p(addr, job_id, service_type);
  }

  bool resume_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resume_job_p(addr, job_id, service_type);
    }
    return ifaces_[i]->resume_job_p(addr, job_id, service_type);
  }

  bool remove_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_job_p(addr, job_id, service_type);
    }
    return ifaces_[i]->remove_job_p(addr, job_id, service_type);
  }

  bool running_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->running_job_p(addr, job_id, service_type);
    }
    return ifaces_[i]->running_job_p(addr, job_id, service_type);
  }

  bool update_job_p(const std::string& addr, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_job_p(addr, job_id, create_job, service_type);
    }
    return ifaces_[i]->update_job_p(addr, job_id, create_job, service_type);
  }

  bool remove_snapshot_image_p(const std::string& addr, const std::map<std::string, image_map_info> & images, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_snapshot_image_p(addr, images, service_type);
    }
    return ifaces_[i]->remove_snapshot_image_p(addr, images, service_type);
  }

  bool test_connection_p(const std::string& addr, const connection& conn, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->test_connection_p(addr, conn, service_type);
    }
    return ifaces_[i]->test_connection_p(addr, conn, service_type);
  }

  bool add_connection_p(const std::string& addr, const connection& conn, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_connection_p(addr, conn, service_type);
    }
    return ifaces_[i]->add_connection_p(addr, conn, service_type);
  }

  bool remove_connection_p(const std::string& addr, const std::string& connection_id, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_connection_p(addr, connection_id, service_type);
    }
    return ifaces_[i]->remove_connection_p(addr, connection_id, service_type);
  }

  bool modify_connection_p(const std::string& addr, const connection& conn, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->modify_connection_p(addr, conn, service_type);
    }
    return ifaces_[i]->modify_connection_p(addr, conn, service_type);
  }

  void enumerate_connections_p(std::vector<connection> & _return, const std::string& addr, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->enumerate_connections_p(_return, addr, service_type);
    }
    ifaces_[i]->enumerate_connections_p(_return, addr, service_type);
    return;
  }

  void get_connection_p(connection& _return, const std::string& addr, const std::string& connection_id, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_connection_p(_return, addr, connection_id, service_type);
    }
    ifaces_[i]->get_connection_p(_return, addr, connection_id, service_type);
    return;
  }

  void get_virtual_host_info_p(virtual_host& _return, const std::string& addr, const std::string& host, const std::string& username, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_virtual_host_info_p(_return, addr, host, username, password);
    }
    ifaces_[i]->get_virtual_host_info_p(_return, addr, host, username, password);
    return;
  }

  void get_virtual_hosts_p(std::vector<virtual_host> & _return, const std::string& addr, const std::string& host, const std::string& username, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_virtual_hosts_p(_return, addr, host, username, password);
    }
    ifaces_[i]->get_virtual_hosts_p(_return, addr, host, username, password);
    return;
  }

  void get_virtual_machine_detail_p(virtual_machine& _return, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_virtual_machine_detail_p(_return, addr, host, username, password, machine_id);
    }
    ifaces_[i]->get_virtual_machine_detail_p(_return, addr, host, username, password, machine_id);
    return;
  }

  void get_physical_machine_detail_p(physical_machine_info& _return, const std::string& addr, const std::string& host, const machine_detail_filter::type filter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_physical_machine_detail_p(_return, addr, host, filter);
    }
    ifaces_[i]->get_physical_machine_detail_p(_return, addr, host, filter);
    return;
  }

  bool power_off_virtual_machine_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->power_off_virtual_machine_p(addr, host, username, password, machine_id);
    }
    return ifaces_[i]->power_off_virtual_machine_p(addr, host, username, password, machine_id);
  }

  bool remove_virtual_machine_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_virtual_machine_p(addr, host, username, password, machine_id);
    }
    return ifaces_[i]->remove_virtual_machine_p(addr, host, username, password, machine_id);
  }

  void get_virtual_machine_snapshots_p(std::vector<vmware_snapshot> & _return, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_virtual_machine_snapshots_p(_return, addr, host, username, password, machine_id);
    }
    ifaces_[i]->get_virtual_machine_snapshots_p(_return, addr, host, username, password, machine_id);
    return;
  }

  bool remove_virtual_machine_snapshot_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id, const std::string& snapshot_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_virtual_machine_snapshot_p(addr, host, username, password, machine_id, snapshot_id);
    }
    return ifaces_[i]->remove_virtual_machine_snapshot_p(addr, host, username, password, machine_id, snapshot_id);
  }

  void get_datacenter_folder_list_p(std::vector<std::string> & _return, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& datacenter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_datacenter_folder_list_p(_return, addr, host, username, password, datacenter);
    }
    ifaces_[i]->get_datacenter_folder_list_p(_return, addr, host, username, password, datacenter);
    return;
  }

  void take_packer_xray_p(std::string& _return, const std::string& addr, const std::string& host) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->take_packer_xray_p(_return, addr, host);
    }
    ifaces_[i]->take_packer_xray_p(_return, addr, host);
    return;
  }

  void get_packer_service_info_p(service_info& _return, const std::string& addr, const std::string& host) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_packer_service_info_p(_return, addr, host);
    }
    ifaces_[i]->get_packer_service_info_p(_return, addr, host);
    return;
  }

  bool verify_management_p(const std::string& addr, const std::string& management, const int32_t port, const bool is_ssl) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verify_management_p(addr, management, port, is_ssl);
    }
    return ifaces_[i]->verify_management_p(addr, management, port, is_ssl);
  }

  bool verify_packer_to_carrier_p(const std::string& addr, const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verify_packer_to_carrier_p(addr, packer, carrier, port, is_ssl);
    }
    return ifaces_[i]->verify_packer_to_carrier_p(addr, packer, carrier, port, is_ssl);
  }

  void get_replica_job_create_detail(replica_job_create_detail& _return, const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_replica_job_create_detail(_return, session_id, job_id);
    }
    ifaces_[i]->get_replica_job_create_detail(_return, session_id, job_id);
    return;
  }

  void get_loader_job_create_detail(loader_job_create_detail& _return, const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_loader_job_create_detail(_return, session_id, job_id);
    }
    ifaces_[i]->get_loader_job_create_detail(_return, session_id, job_id);
    return;
  }

  void get_launcher_job_create_detail(launcher_job_create_detail& _return, const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_launcher_job_create_detail(_return, session_id, job_id);
    }
    ifaces_[i]->get_launcher_job_create_detail(_return, session_id, job_id);
    return;
  }

  void terminate(const std::string& session_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->terminate(session_id);
    }
    ifaces_[i]->terminate(session_id);
  }

  bool set_customized_id_p(const std::string& addr, const std::string& disk_addr, const std::string& disk_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_customized_id_p(addr, disk_addr, disk_id);
    }
    return ifaces_[i]->set_customized_id_p(addr, disk_addr, disk_id);
  }

  bool unregister_packer_p(const std::string& addr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unregister_packer_p(addr);
    }
    return ifaces_[i]->unregister_packer_p(addr);
  }

  bool unregister_server_p(const std::string& addr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unregister_server_p(addr);
    }
    return ifaces_[i]->unregister_server_p(addr);
  }

  void create_vhd_disk_from_snapshot(std::string& _return, const std::string& connection_string, const std::string& container, const std::string& original_disk_name, const std::string& target_disk_name, const std::string& snapshot) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_vhd_disk_from_snapshot(_return, connection_string, container, original_disk_name, target_disk_name, snapshot);
    }
    ifaces_[i]->create_vhd_disk_from_snapshot(_return, connection_string, container, original_disk_name, target_disk_name, snapshot);
    return;
  }

  bool is_snapshot_vhd_disk_ready(const std::string& task_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->is_snapshot_vhd_disk_ready(task_id);
    }
    return ifaces_[i]->is_snapshot_vhd_disk_ready(task_id);
  }

  bool delete_vhd_disk(const std::string& connection_string, const std::string& container, const std::string& disk_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_vhd_disk(connection_string, container, disk_name);
    }
    return ifaces_[i]->delete_vhd_disk(connection_string, container, disk_name);
  }

  bool delete_vhd_disk_snapshot(const std::string& connection_string, const std::string& container, const std::string& disk_name, const std::string& snapshot) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_vhd_disk_snapshot(connection_string, container, disk_name, snapshot);
    }
    return ifaces_[i]->delete_vhd_disk_snapshot(connection_string, container, disk_name, snapshot);
  }

  void get_vhd_disk_snapshots(std::vector<vhd_snapshot> & _return, const std::string& connection_string, const std::string& container, const std::string& disk_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_vhd_disk_snapshots(_return, connection_string, container, disk_name);
    }
    ifaces_[i]->get_vhd_disk_snapshots(_return, connection_string, container, disk_name);
    return;
  }

  bool verify_connection_string(const std::string& connection_string) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verify_connection_string(connection_string);
    }
    return ifaces_[i]->verify_connection_string(connection_string);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class transport_serviceConcurrentClient : virtual public transport_serviceIf, public physical_packer_service_proxyConcurrentClient {
 public:
  transport_serviceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    physical_packer_service_proxyConcurrentClient(prot, prot) {}
  transport_serviceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    physical_packer_service_proxyConcurrentClient(iprot, oprot) {}
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void generate_session(std::string& _return, const std::string& addr);
  int32_t send_generate_session(const std::string& addr);
  void recv_generate_session(std::string& _return, const int32_t seqid);
  void get_package_info(std::string& _return, const std::string& email, const std::string& name, const std::string& key);
  int32_t send_get_package_info(const std::string& email, const std::string& name, const std::string& key);
  void recv_get_package_info(std::string& _return, const int32_t seqid);
  bool active_license(const std::string& email, const std::string& name, const std::string& key);
  int32_t send_active_license(const std::string& email, const std::string& name, const std::string& key);
  bool recv_active_license(const int32_t seqid);
  bool add_license(const std::string& license);
  int32_t send_add_license(const std::string& license);
  bool recv_add_license(const int32_t seqid);
  bool add_license_with_key(const std::string& key, const std::string& license);
  int32_t send_add_license_with_key(const std::string& key, const std::string& license);
  bool recv_add_license_with_key(const int32_t seqid);
  void get_licenses(license_infos& _return);
  int32_t send_get_licenses();
  void recv_get_licenses(license_infos& _return, const int32_t seqid);
  bool check_license_expiration(const int8_t days);
  int32_t send_check_license_expiration(const int8_t days);
  bool recv_check_license_expiration(const int32_t seqid);
  bool is_license_valid(const std::string& job_id);
  int32_t send_is_license_valid(const std::string& job_id);
  bool recv_is_license_valid(const int32_t seqid);
  bool is_license_valid_ex(const std::string& job_id, const bool is_recovery);
  int32_t send_is_license_valid_ex(const std::string& job_id, const bool is_recovery);
  bool recv_is_license_valid_ex(const int32_t seqid);
  bool remove_license(const std::string& key);
  int32_t send_remove_license(const std::string& key);
  bool recv_remove_license(const int32_t seqid);
  void query_package_info(std::string& _return, const std::string& key);
  int32_t send_query_package_info(const std::string& key);
  void recv_query_package_info(std::string& _return, const int32_t seqid);
  bool create_task(const running_task& task);
  int32_t send_create_task(const running_task& task);
  bool recv_create_task(const int32_t seqid);
  bool remove_task(const std::string& task_id);
  int32_t send_remove_task(const std::string& task_id);
  bool recv_remove_task(const int32_t seqid);
  void ping_p(service_info& _return, const std::string& addr);
  int32_t send_ping_p(const std::string& addr);
  void recv_ping_p(service_info& _return, const int32_t seqid);
  void get_host_detail_p(physical_machine_info& _return, const std::string& addr, const machine_detail_filter::type filter);
  int32_t send_get_host_detail_p(const std::string& addr, const machine_detail_filter::type filter);
  void recv_get_host_detail_p(physical_machine_info& _return, const int32_t seqid);
  void get_service_list_p(std::set<service_info> & _return, const std::string& addr);
  int32_t send_get_service_list_p(const std::string& addr);
  void recv_get_service_list_p(std::set<service_info> & _return, const int32_t seqid);
  void enumerate_disks_p(std::set<disk_info> & _return, const std::string& addr, const enumerate_disk_filter_style::type filter);
  int32_t send_enumerate_disks_p(const std::string& addr, const enumerate_disk_filter_style::type filter);
  void recv_enumerate_disks_p(std::set<disk_info> & _return, const int32_t seqid);
  bool verify_carrier_p(const std::string& addr, const std::string& carrier, const bool is_ssl);
  int32_t send_verify_carrier_p(const std::string& addr, const std::string& carrier, const bool is_ssl);
  bool recv_verify_carrier_p(const int32_t seqid);
  void take_xray_p(std::string& _return, const std::string& addr);
  int32_t send_take_xray_p(const std::string& addr);
  void recv_take_xray_p(std::string& _return, const int32_t seqid);
  void take_xrays_p(std::string& _return, const std::string& addr);
  int32_t send_take_xrays_p(const std::string& addr);
  void recv_take_xrays_p(std::string& _return, const int32_t seqid);
  bool create_mutex_p(const std::string& addr, const std::string& session, const int16_t timeout);
  int32_t send_create_mutex_p(const std::string& addr, const std::string& session, const int16_t timeout);
  bool recv_create_mutex_p(const int32_t seqid);
  bool delete_mutex_p(const std::string& addr, const std::string& session);
  int32_t send_delete_mutex_p(const std::string& addr, const std::string& session);
  bool recv_delete_mutex_p(const int32_t seqid);
  void create_job_ex_p(job_detail& _return, const std::string& addr, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
  int32_t send_create_job_ex_p(const std::string& addr, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
  void recv_create_job_ex_p(job_detail& _return, const int32_t seqid);
  void get_job_p(job_detail& _return, const std::string& addr, const std::string& job_id, const std::string& service_type);
  int32_t send_get_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type);
  void recv_get_job_p(job_detail& _return, const int32_t seqid);
  bool interrupt_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type);
  int32_t send_interrupt_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type);
  bool recv_interrupt_job_p(const int32_t seqid);
  bool resume_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type);
  int32_t send_resume_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type);
  bool recv_resume_job_p(const int32_t seqid);
  bool remove_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type);
  int32_t send_remove_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type);
  bool recv_remove_job_p(const int32_t seqid);
  bool running_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type);
  int32_t send_running_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type);
  bool recv_running_job_p(const int32_t seqid);
  bool update_job_p(const std::string& addr, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
  int32_t send_update_job_p(const std::string& addr, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
  bool recv_update_job_p(const int32_t seqid);
  bool remove_snapshot_image_p(const std::string& addr, const std::map<std::string, image_map_info> & images, const std::string& service_type);
  int32_t send_remove_snapshot_image_p(const std::string& addr, const std::map<std::string, image_map_info> & images, const std::string& service_type);
  bool recv_remove_snapshot_image_p(const int32_t seqid);
  bool test_connection_p(const std::string& addr, const connection& conn, const std::string& service_type);
  int32_t send_test_connection_p(const std::string& addr, const connection& conn, const std::string& service_type);
  bool recv_test_connection_p(const int32_t seqid);
  bool add_connection_p(const std::string& addr, const connection& conn, const std::string& service_type);
  int32_t send_add_connection_p(const std::string& addr, const connection& conn, const std::string& service_type);
  bool recv_add_connection_p(const int32_t seqid);
  bool remove_connection_p(const std::string& addr, const std::string& connection_id, const std::string& service_type);
  int32_t send_remove_connection_p(const std::string& addr, const std::string& connection_id, const std::string& service_type);
  bool recv_remove_connection_p(const int32_t seqid);
  bool modify_connection_p(const std::string& addr, const connection& conn, const std::string& service_type);
  int32_t send_modify_connection_p(const std::string& addr, const connection& conn, const std::string& service_type);
  bool recv_modify_connection_p(const int32_t seqid);
  void enumerate_connections_p(std::vector<connection> & _return, const std::string& addr, const std::string& service_type);
  int32_t send_enumerate_connections_p(const std::string& addr, const std::string& service_type);
  void recv_enumerate_connections_p(std::vector<connection> & _return, const int32_t seqid);
  void get_connection_p(connection& _return, const std::string& addr, const std::string& connection_id, const std::string& service_type);
  int32_t send_get_connection_p(const std::string& addr, const std::string& connection_id, const std::string& service_type);
  void recv_get_connection_p(connection& _return, const int32_t seqid);
  void get_virtual_host_info_p(virtual_host& _return, const std::string& addr, const std::string& host, const std::string& username, const std::string& password);
  int32_t send_get_virtual_host_info_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password);
  void recv_get_virtual_host_info_p(virtual_host& _return, const int32_t seqid);
  void get_virtual_hosts_p(std::vector<virtual_host> & _return, const std::string& addr, const std::string& host, const std::string& username, const std::string& password);
  int32_t send_get_virtual_hosts_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password);
  void recv_get_virtual_hosts_p(std::vector<virtual_host> & _return, const int32_t seqid);
  void get_virtual_machine_detail_p(virtual_machine& _return, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  int32_t send_get_virtual_machine_detail_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void recv_get_virtual_machine_detail_p(virtual_machine& _return, const int32_t seqid);
  void get_physical_machine_detail_p(physical_machine_info& _return, const std::string& addr, const std::string& host, const machine_detail_filter::type filter);
  int32_t send_get_physical_machine_detail_p(const std::string& addr, const std::string& host, const machine_detail_filter::type filter);
  void recv_get_physical_machine_detail_p(physical_machine_info& _return, const int32_t seqid);
  bool power_off_virtual_machine_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  int32_t send_power_off_virtual_machine_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  bool recv_power_off_virtual_machine_p(const int32_t seqid);
  bool remove_virtual_machine_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  int32_t send_remove_virtual_machine_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  bool recv_remove_virtual_machine_p(const int32_t seqid);
  void get_virtual_machine_snapshots_p(std::vector<vmware_snapshot> & _return, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  int32_t send_get_virtual_machine_snapshots_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void recv_get_virtual_machine_snapshots_p(std::vector<vmware_snapshot> & _return, const int32_t seqid);
  bool remove_virtual_machine_snapshot_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id, const std::string& snapshot_id);
  int32_t send_remove_virtual_machine_snapshot_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id, const std::string& snapshot_id);
  bool recv_remove_virtual_machine_snapshot_p(const int32_t seqid);
  void get_datacenter_folder_list_p(std::vector<std::string> & _return, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& datacenter);
  int32_t send_get_datacenter_folder_list_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& datacenter);
  void recv_get_datacenter_folder_list_p(std::vector<std::string> & _return, const int32_t seqid);
  void take_packer_xray_p(std::string& _return, const std::string& addr, const std::string& host);
  int32_t send_take_packer_xray_p(const std::string& addr, const std::string& host);
  void recv_take_packer_xray_p(std::string& _return, const int32_t seqid);
  void get_packer_service_info_p(service_info& _return, const std::string& addr, const std::string& host);
  int32_t send_get_packer_service_info_p(const std::string& addr, const std::string& host);
  void recv_get_packer_service_info_p(service_info& _return, const int32_t seqid);
  bool verify_management_p(const std::string& addr, const std::string& management, const int32_t port, const bool is_ssl);
  int32_t send_verify_management_p(const std::string& addr, const std::string& management, const int32_t port, const bool is_ssl);
  bool recv_verify_management_p(const int32_t seqid);
  bool verify_packer_to_carrier_p(const std::string& addr, const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl);
  int32_t send_verify_packer_to_carrier_p(const std::string& addr, const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl);
  bool recv_verify_packer_to_carrier_p(const int32_t seqid);
  void get_replica_job_create_detail(replica_job_create_detail& _return, const std::string& session_id, const std::string& job_id);
  int32_t send_get_replica_job_create_detail(const std::string& session_id, const std::string& job_id);
  void recv_get_replica_job_create_detail(replica_job_create_detail& _return, const int32_t seqid);
  void get_loader_job_create_detail(loader_job_create_detail& _return, const std::string& session_id, const std::string& job_id);
  int32_t send_get_loader_job_create_detail(const std::string& session_id, const std::string& job_id);
  void recv_get_loader_job_create_detail(loader_job_create_detail& _return, const int32_t seqid);
  void get_launcher_job_create_detail(launcher_job_create_detail& _return, const std::string& session_id, const std::string& job_id);
  int32_t send_get_launcher_job_create_detail(const std::string& session_id, const std::string& job_id);
  void recv_get_launcher_job_create_detail(launcher_job_create_detail& _return, const int32_t seqid);
  void terminate(const std::string& session_id);
  int32_t send_terminate(const std::string& session_id);
  void recv_terminate(const int32_t seqid);
  bool set_customized_id_p(const std::string& addr, const std::string& disk_addr, const std::string& disk_id);
  int32_t send_set_customized_id_p(const std::string& addr, const std::string& disk_addr, const std::string& disk_id);
  bool recv_set_customized_id_p(const int32_t seqid);
  bool unregister_packer_p(const std::string& addr);
  int32_t send_unregister_packer_p(const std::string& addr);
  bool recv_unregister_packer_p(const int32_t seqid);
  bool unregister_server_p(const std::string& addr);
  int32_t send_unregister_server_p(const std::string& addr);
  bool recv_unregister_server_p(const int32_t seqid);
  void create_vhd_disk_from_snapshot(std::string& _return, const std::string& connection_string, const std::string& container, const std::string& original_disk_name, const std::string& target_disk_name, const std::string& snapshot);
  int32_t send_create_vhd_disk_from_snapshot(const std::string& connection_string, const std::string& container, const std::string& original_disk_name, const std::string& target_disk_name, const std::string& snapshot);
  void recv_create_vhd_disk_from_snapshot(std::string& _return, const int32_t seqid);
  bool is_snapshot_vhd_disk_ready(const std::string& task_id);
  int32_t send_is_snapshot_vhd_disk_ready(const std::string& task_id);
  bool recv_is_snapshot_vhd_disk_ready(const int32_t seqid);
  bool delete_vhd_disk(const std::string& connection_string, const std::string& container, const std::string& disk_name);
  int32_t send_delete_vhd_disk(const std::string& connection_string, const std::string& container, const std::string& disk_name);
  bool recv_delete_vhd_disk(const int32_t seqid);
  bool delete_vhd_disk_snapshot(const std::string& connection_string, const std::string& container, const std::string& disk_name, const std::string& snapshot);
  int32_t send_delete_vhd_disk_snapshot(const std::string& connection_string, const std::string& container, const std::string& disk_name, const std::string& snapshot);
  bool recv_delete_vhd_disk_snapshot(const int32_t seqid);
  void get_vhd_disk_snapshots(std::vector<vhd_snapshot> & _return, const std::string& connection_string, const std::string& container, const std::string& disk_name);
  int32_t send_get_vhd_disk_snapshots(const std::string& connection_string, const std::string& container, const std::string& disk_name);
  void recv_get_vhd_disk_snapshots(std::vector<vhd_snapshot> & _return, const int32_t seqid);
  bool verify_connection_string(const std::string& connection_string);
  int32_t send_verify_connection_string(const std::string& connection_string);
  bool recv_verify_connection_string(const int32_t seqid);
};

class transport_serviceCobClient;

class transport_serviceCobClIf : virtual public physical_packer_service_proxyCobClIf {
 public:
  virtual ~transport_serviceCobClIf() {}
  virtual void generate_session(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr) = 0;
  virtual void get_package_info(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& email, const std::string& name, const std::string& key) = 0;
  virtual void active_license(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& email, const std::string& name, const std::string& key) = 0;
  virtual void add_license(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& license) = 0;
  virtual void add_license_with_key(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& key, const std::string& license) = 0;
  virtual void get_licenses(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob) = 0;
  virtual void check_license_expiration(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const int8_t days) = 0;
  virtual void is_license_valid(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& job_id) = 0;
  virtual void is_license_valid_ex(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& job_id, const bool is_recovery) = 0;
  virtual void remove_license(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& key) = 0;
  virtual void query_package_info(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& key) = 0;
  virtual void create_task(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const running_task& task) = 0;
  virtual void remove_task(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& task_id) = 0;
  virtual void ping_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr) = 0;
  virtual void get_host_detail_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const machine_detail_filter::type filter) = 0;
  virtual void get_service_list_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr) = 0;
  virtual void enumerate_disks_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const enumerate_disk_filter_style::type filter) = 0;
  virtual void verify_carrier_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& carrier, const bool is_ssl) = 0;
  virtual void take_xray_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr) = 0;
  virtual void take_xrays_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr) = 0;
  virtual void create_mutex_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& session, const int16_t timeout) = 0;
  virtual void delete_mutex_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& session) = 0;
  virtual void create_job_ex_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type) = 0;
  virtual void get_job_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& job_id, const std::string& service_type) = 0;
  virtual void interrupt_job_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& job_id, const std::string& service_type) = 0;
  virtual void resume_job_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& job_id, const std::string& service_type) = 0;
  virtual void remove_job_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& job_id, const std::string& service_type) = 0;
  virtual void running_job_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& job_id, const std::string& service_type) = 0;
  virtual void update_job_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type) = 0;
  virtual void remove_snapshot_image_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::map<std::string, image_map_info> & images, const std::string& service_type) = 0;
  virtual void test_connection_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const connection& conn, const std::string& service_type) = 0;
  virtual void add_connection_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const connection& conn, const std::string& service_type) = 0;
  virtual void remove_connection_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& connection_id, const std::string& service_type) = 0;
  virtual void modify_connection_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const connection& conn, const std::string& service_type) = 0;
  virtual void enumerate_connections_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& service_type) = 0;
  virtual void get_connection_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& connection_id, const std::string& service_type) = 0;
  virtual void get_virtual_host_info_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& host, const std::string& username, const std::string& password) = 0;
  virtual void get_virtual_hosts_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& host, const std::string& username, const std::string& password) = 0;
  virtual void get_virtual_machine_detail_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) = 0;
  virtual void get_physical_machine_detail_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& host, const machine_detail_filter::type filter) = 0;
  virtual void power_off_virtual_machine_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) = 0;
  virtual void remove_virtual_machine_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) = 0;
  virtual void get_virtual_machine_snapshots_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) = 0;
  virtual void remove_virtual_machine_snapshot_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id, const std::string& snapshot_id) = 0;
  virtual void get_datacenter_folder_list_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& datacenter) = 0;
  virtual void take_packer_xray_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& host) = 0;
  virtual void get_packer_service_info_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& host) = 0;
  virtual void verify_management_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& management, const int32_t port, const bool is_ssl) = 0;
  virtual void verify_packer_to_carrier_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl) = 0;
  virtual void get_replica_job_create_detail(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void get_loader_job_create_detail(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void get_launcher_job_create_detail(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void terminate(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& session_id) = 0;
  virtual void set_customized_id_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& disk_addr, const std::string& disk_id) = 0;
  virtual void unregister_packer_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr) = 0;
  virtual void unregister_server_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr) = 0;
  virtual void create_vhd_disk_from_snapshot(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& connection_string, const std::string& container, const std::string& original_disk_name, const std::string& target_disk_name, const std::string& snapshot) = 0;
  virtual void is_snapshot_vhd_disk_ready(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& task_id) = 0;
  virtual void delete_vhd_disk(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& connection_string, const std::string& container, const std::string& disk_name) = 0;
  virtual void delete_vhd_disk_snapshot(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& connection_string, const std::string& container, const std::string& disk_name, const std::string& snapshot) = 0;
  virtual void get_vhd_disk_snapshots(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& connection_string, const std::string& container, const std::string& disk_name) = 0;
  virtual void verify_connection_string(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& connection_string) = 0;
};

class transport_serviceCobSvIf : virtual public physical_packer_service_proxyCobSvIf {
 public:
  virtual ~transport_serviceCobSvIf() {}
  virtual void generate_session(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr) = 0;
  virtual void get_package_info(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& email, const std::string& name, const std::string& key) = 0;
  virtual void active_license(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& email, const std::string& name, const std::string& key) = 0;
  virtual void add_license(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& license) = 0;
  virtual void add_license_with_key(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& key, const std::string& license) = 0;
  virtual void get_licenses(::apache::thrift::stdcxx::function<void(license_infos const& _return)> cob) = 0;
  virtual void check_license_expiration(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, const int8_t days) = 0;
  virtual void is_license_valid(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, const std::string& job_id) = 0;
  virtual void is_license_valid_ex(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, const std::string& job_id, const bool is_recovery) = 0;
  virtual void remove_license(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, const std::string& key) = 0;
  virtual void query_package_info(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& key) = 0;
  virtual void create_task(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const running_task& task) = 0;
  virtual void remove_task(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& task_id) = 0;
  virtual void ping_p(::apache::thrift::stdcxx::function<void(service_info const& _return)> cob, const std::string& addr) = 0;
  virtual void get_host_detail_p(::apache::thrift::stdcxx::function<void(physical_machine_info const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const machine_detail_filter::type filter) = 0;
  virtual void get_service_list_p(::apache::thrift::stdcxx::function<void(std::set<service_info>  const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr) = 0;
  virtual void enumerate_disks_p(::apache::thrift::stdcxx::function<void(std::set<disk_info>  const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const enumerate_disk_filter_style::type filter) = 0;
  virtual void verify_carrier_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& carrier, const bool is_ssl) = 0;
  virtual void take_xray_p(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr) = 0;
  virtual void take_xrays_p(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr) = 0;
  virtual void create_mutex_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& session, const int16_t timeout) = 0;
  virtual void delete_mutex_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& session) = 0;
  virtual void create_job_ex_p(::apache::thrift::stdcxx::function<void(job_detail const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type) = 0;
  virtual void get_job_p(::apache::thrift::stdcxx::function<void(job_detail const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& job_id, const std::string& service_type) = 0;
  virtual void interrupt_job_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& job_id, const std::string& service_type) = 0;
  virtual void resume_job_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& job_id, const std::string& service_type) = 0;
  virtual void remove_job_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& job_id, const std::string& service_type) = 0;
  virtual void running_job_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& job_id, const std::string& service_type) = 0;
  virtual void update_job_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type) = 0;
  virtual void remove_snapshot_image_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::map<std::string, image_map_info> & images, const std::string& service_type) = 0;
  virtual void test_connection_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const connection& conn, const std::string& service_type) = 0;
  virtual void add_connection_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const connection& conn, const std::string& service_type) = 0;
  virtual void remove_connection_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& connection_id, const std::string& service_type) = 0;
  virtual void modify_connection_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const connection& conn, const std::string& service_type) = 0;
  virtual void enumerate_connections_p(::apache::thrift::stdcxx::function<void(std::vector<connection>  const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& service_type) = 0;
  virtual void get_connection_p(::apache::thrift::stdcxx::function<void(connection const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& connection_id, const std::string& service_type) = 0;
  virtual void get_virtual_host_info_p(::apache::thrift::stdcxx::function<void(virtual_host const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& host, const std::string& username, const std::string& password) = 0;
  virtual void get_virtual_hosts_p(::apache::thrift::stdcxx::function<void(std::vector<virtual_host>  const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& host, const std::string& username, const std::string& password) = 0;
  virtual void get_virtual_machine_detail_p(::apache::thrift::stdcxx::function<void(virtual_machine const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) = 0;
  virtual void get_physical_machine_detail_p(::apache::thrift::stdcxx::function<void(physical_machine_info const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& host, const machine_detail_filter::type filter) = 0;
  virtual void power_off_virtual_machine_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) = 0;
  virtual void remove_virtual_machine_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) = 0;
  virtual void get_virtual_machine_snapshots_p(::apache::thrift::stdcxx::function<void(std::vector<vmware_snapshot>  const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) = 0;
  virtual void remove_virtual_machine_snapshot_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id, const std::string& snapshot_id) = 0;
  virtual void get_datacenter_folder_list_p(::apache::thrift::stdcxx::function<void(std::vector<std::string>  const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& datacenter) = 0;
  virtual void take_packer_xray_p(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& host) = 0;
  virtual void get_packer_service_info_p(::apache::thrift::stdcxx::function<void(service_info const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& host) = 0;
  virtual void verify_management_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& management, const int32_t port, const bool is_ssl) = 0;
  virtual void verify_packer_to_carrier_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl) = 0;
  virtual void get_replica_job_create_detail(::apache::thrift::stdcxx::function<void(replica_job_create_detail const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void get_loader_job_create_detail(::apache::thrift::stdcxx::function<void(loader_job_create_detail const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void get_launcher_job_create_detail(::apache::thrift::stdcxx::function<void(launcher_job_create_detail const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void terminate(::apache::thrift::stdcxx::function<void()> cob, const std::string& session_id) = 0;
  virtual void set_customized_id_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& disk_addr, const std::string& disk_id) = 0;
  virtual void unregister_packer_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr) = 0;
  virtual void unregister_server_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr) = 0;
  virtual void create_vhd_disk_from_snapshot(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& connection_string, const std::string& container, const std::string& original_disk_name, const std::string& target_disk_name, const std::string& snapshot) = 0;
  virtual void is_snapshot_vhd_disk_ready(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& task_id) = 0;
  virtual void delete_vhd_disk(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& connection_string, const std::string& container, const std::string& disk_name) = 0;
  virtual void delete_vhd_disk_snapshot(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& connection_string, const std::string& container, const std::string& disk_name, const std::string& snapshot) = 0;
  virtual void get_vhd_disk_snapshots(::apache::thrift::stdcxx::function<void(std::vector<vhd_snapshot>  const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& connection_string, const std::string& container, const std::string& disk_name) = 0;
  virtual void verify_connection_string(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& connection_string) = 0;
};

class transport_serviceCobSvIfFactory : virtual public physical_packer_service_proxyCobSvIfFactory {
 public:
  typedef transport_serviceCobSvIf Handler;

  virtual ~transport_serviceCobSvIfFactory() {}

  virtual transport_serviceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(common_serviceCobSvIf* /* handler */) = 0;
};

class transport_serviceCobSvIfSingletonFactory : virtual public transport_serviceCobSvIfFactory {
 public:
  transport_serviceCobSvIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<transport_serviceCobSvIf>& iface) : iface_(iface) {}
  virtual ~transport_serviceCobSvIfSingletonFactory() {}

  virtual transport_serviceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(common_serviceCobSvIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<transport_serviceCobSvIf> iface_;
};

class transport_serviceCobSvNull : virtual public transport_serviceCobSvIf , virtual public physical_packer_service_proxyCobSvNull {
 public:
  virtual ~transport_serviceCobSvNull() {}
  void generate_session(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */) {
    std::string _return;
    return cob(_return);
  }
  void get_package_info(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* email */, const std::string& /* name */, const std::string& /* key */) {
    std::string _return;
    return cob(_return);
  }
  void active_license(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* email */, const std::string& /* name */, const std::string& /* key */) {
    bool _return = false;
    return cob(_return);
  }
  void add_license(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* license */) {
    bool _return = false;
    return cob(_return);
  }
  void add_license_with_key(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* key */, const std::string& /* license */) {
    bool _return = false;
    return cob(_return);
  }
  void get_licenses(::apache::thrift::stdcxx::function<void(license_infos const& _return)> cob) {
    license_infos _return;
    return cob(_return);
  }
  void check_license_expiration(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, const int8_t /* days */) {
    bool _return = false;
    return cob(_return);
  }
  void is_license_valid(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
  void is_license_valid_ex(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, const std::string& /* job_id */, const bool /* is_recovery */) {
    bool _return = false;
    return cob(_return);
  }
  void remove_license(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, const std::string& /* key */) {
    bool _return = false;
    return cob(_return);
  }
  void query_package_info(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* key */) {
    std::string _return;
    return cob(_return);
  }
  void create_task(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const running_task& /* task */) {
    bool _return = false;
    return cob(_return);
  }
  void remove_task(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* task_id */) {
    bool _return = false;
    return cob(_return);
  }
  void ping_p(::apache::thrift::stdcxx::function<void(service_info const& _return)> cob, const std::string& /* addr */) {
    service_info _return;
    return cob(_return);
  }
  void get_host_detail_p(::apache::thrift::stdcxx::function<void(physical_machine_info const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const machine_detail_filter::type /* filter */) {
    physical_machine_info _return;
    return cob(_return);
  }
  void get_service_list_p(::apache::thrift::stdcxx::function<void(std::set<service_info>  const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */) {
    std::set<service_info>  _return;
    return cob(_return);
  }
  void enumerate_disks_p(::apache::thrift::stdcxx::function<void(std::set<disk_info>  const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const enumerate_disk_filter_style::type /* filter */) {
    std::set<disk_info>  _return;
    return cob(_return);
  }
  void verify_carrier_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* carrier */, const bool /* is_ssl */) {
    bool _return = false;
    return cob(_return);
  }
  void take_xray_p(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */) {
    std::string _return;
    return cob(_return);
  }
  void take_xrays_p(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */) {
    std::string _return;
    return cob(_return);
  }
  void create_mutex_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* session */, const int16_t /* timeout */) {
    bool _return = false;
    return cob(_return);
  }
  void delete_mutex_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* session */) {
    bool _return = false;
    return cob(_return);
  }
  void create_job_ex_p(::apache::thrift::stdcxx::function<void(job_detail const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* job_id */, const create_job_detail& /* create_job */, const std::string& /* service_type */) {
    job_detail _return;
    return cob(_return);
  }
  void get_job_p(::apache::thrift::stdcxx::function<void(job_detail const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* job_id */, const std::string& /* service_type */) {
    job_detail _return;
    return cob(_return);
  }
  void interrupt_job_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* job_id */, const std::string& /* service_type */) {
    bool _return = false;
    return cob(_return);
  }
  void resume_job_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* job_id */, const std::string& /* service_type */) {
    bool _return = false;
    return cob(_return);
  }
  void remove_job_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* job_id */, const std::string& /* service_type */) {
    bool _return = false;
    return cob(_return);
  }
  void running_job_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* job_id */, const std::string& /* service_type */) {
    bool _return = false;
    return cob(_return);
  }
  void update_job_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* job_id */, const create_job_detail& /* create_job */, const std::string& /* service_type */) {
    bool _return = false;
    return cob(_return);
  }
  void remove_snapshot_image_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::map<std::string, image_map_info> & /* images */, const std::string& /* service_type */) {
    bool _return = false;
    return cob(_return);
  }
  void test_connection_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const connection& /* conn */, const std::string& /* service_type */) {
    bool _return = false;
    return cob(_return);
  }
  void add_connection_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const connection& /* conn */, const std::string& /* service_type */) {
    bool _return = false;
    return cob(_return);
  }
  void remove_connection_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* connection_id */, const std::string& /* service_type */) {
    bool _return = false;
    return cob(_return);
  }
  void modify_connection_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const connection& /* conn */, const std::string& /* service_type */) {
    bool _return = false;
    return cob(_return);
  }
  void enumerate_connections_p(::apache::thrift::stdcxx::function<void(std::vector<connection>  const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* service_type */) {
    std::vector<connection>  _return;
    return cob(_return);
  }
  void get_connection_p(::apache::thrift::stdcxx::function<void(connection const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* connection_id */, const std::string& /* service_type */) {
    connection _return;
    return cob(_return);
  }
  void get_virtual_host_info_p(::apache::thrift::stdcxx::function<void(virtual_host const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */) {
    virtual_host _return;
    return cob(_return);
  }
  void get_virtual_hosts_p(::apache::thrift::stdcxx::function<void(std::vector<virtual_host>  const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */) {
    std::vector<virtual_host>  _return;
    return cob(_return);
  }
  void get_virtual_machine_detail_p(::apache::thrift::stdcxx::function<void(virtual_machine const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */, const std::string& /* machine_id */) {
    virtual_machine _return;
    return cob(_return);
  }
  void get_physical_machine_detail_p(::apache::thrift::stdcxx::function<void(physical_machine_info const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* host */, const machine_detail_filter::type /* filter */) {
    physical_machine_info _return;
    return cob(_return);
  }
  void power_off_virtual_machine_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */, const std::string& /* machine_id */) {
    bool _return = false;
    return cob(_return);
  }
  void remove_virtual_machine_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */, const std::string& /* machine_id */) {
    bool _return = false;
    return cob(_return);
  }
  void get_virtual_machine_snapshots_p(::apache::thrift::stdcxx::function<void(std::vector<vmware_snapshot>  const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */, const std::string& /* machine_id */) {
    std::vector<vmware_snapshot>  _return;
    return cob(_return);
  }
  void remove_virtual_machine_snapshot_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */, const std::string& /* machine_id */, const std::string& /* snapshot_id */) {
    bool _return = false;
    return cob(_return);
  }
  void get_datacenter_folder_list_p(::apache::thrift::stdcxx::function<void(std::vector<std::string>  const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */, const std::string& /* datacenter */) {
    std::vector<std::string>  _return;
    return cob(_return);
  }
  void take_packer_xray_p(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* host */) {
    std::string _return;
    return cob(_return);
  }
  void get_packer_service_info_p(::apache::thrift::stdcxx::function<void(service_info const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* host */) {
    service_info _return;
    return cob(_return);
  }
  void verify_management_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* management */, const int32_t /* port */, const bool /* is_ssl */) {
    bool _return = false;
    return cob(_return);
  }
  void verify_packer_to_carrier_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* packer */, const std::string& /* carrier */, const int32_t /* port */, const bool /* is_ssl */) {
    bool _return = false;
    return cob(_return);
  }
  void get_replica_job_create_detail(::apache::thrift::stdcxx::function<void(replica_job_create_detail const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    replica_job_create_detail _return;
    return cob(_return);
  }
  void get_loader_job_create_detail(::apache::thrift::stdcxx::function<void(loader_job_create_detail const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    loader_job_create_detail _return;
    return cob(_return);
  }
  void get_launcher_job_create_detail(::apache::thrift::stdcxx::function<void(launcher_job_create_detail const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    launcher_job_create_detail _return;
    return cob(_return);
  }
  void terminate(::apache::thrift::stdcxx::function<void()> cob, const std::string& /* session_id */) {
    return cob();
  }
  void set_customized_id_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */, const std::string& /* disk_addr */, const std::string& /* disk_id */) {
    bool _return = false;
    return cob(_return);
  }
  void unregister_packer_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */) {
    bool _return = false;
    return cob(_return);
  }
  void unregister_server_p(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */) {
    bool _return = false;
    return cob(_return);
  }
  void create_vhd_disk_from_snapshot(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* connection_string */, const std::string& /* container */, const std::string& /* original_disk_name */, const std::string& /* target_disk_name */, const std::string& /* snapshot */) {
    std::string _return;
    return cob(_return);
  }
  void is_snapshot_vhd_disk_ready(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* task_id */) {
    bool _return = false;
    return cob(_return);
  }
  void delete_vhd_disk(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* connection_string */, const std::string& /* container */, const std::string& /* disk_name */) {
    bool _return = false;
    return cob(_return);
  }
  void delete_vhd_disk_snapshot(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* connection_string */, const std::string& /* container */, const std::string& /* disk_name */, const std::string& /* snapshot */) {
    bool _return = false;
    return cob(_return);
  }
  void get_vhd_disk_snapshots(::apache::thrift::stdcxx::function<void(std::vector<vhd_snapshot>  const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* connection_string */, const std::string& /* container */, const std::string& /* disk_name */) {
    std::vector<vhd_snapshot>  _return;
    return cob(_return);
  }
  void verify_connection_string(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* connection_string */) {
    bool _return = false;
    return cob(_return);
  }
};

class transport_serviceCobClient : virtual public transport_serviceCobClIf, public physical_packer_service_proxyCobClient {
 public:
  transport_serviceCobClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    physical_packer_service_proxyCobClient(channel, protocolFactory) {}
  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void generate_session(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr);
  void send_generate_session(const std::string& addr);
  void recv_generate_session(std::string& _return);
  void get_package_info(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& email, const std::string& name, const std::string& key);
  void send_get_package_info(const std::string& email, const std::string& name, const std::string& key);
  void recv_get_package_info(std::string& _return);
  void active_license(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& email, const std::string& name, const std::string& key);
  void send_active_license(const std::string& email, const std::string& name, const std::string& key);
  bool recv_active_license();
  void add_license(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& license);
  void send_add_license(const std::string& license);
  bool recv_add_license();
  void add_license_with_key(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& key, const std::string& license);
  void send_add_license_with_key(const std::string& key, const std::string& license);
  bool recv_add_license_with_key();
  void get_licenses(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob);
  void send_get_licenses();
  void recv_get_licenses(license_infos& _return);
  void check_license_expiration(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const int8_t days);
  void send_check_license_expiration(const int8_t days);
  bool recv_check_license_expiration();
  void is_license_valid(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& job_id);
  void send_is_license_valid(const std::string& job_id);
  bool recv_is_license_valid();
  void is_license_valid_ex(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& job_id, const bool is_recovery);
  void send_is_license_valid_ex(const std::string& job_id, const bool is_recovery);
  bool recv_is_license_valid_ex();
  void remove_license(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& key);
  void send_remove_license(const std::string& key);
  bool recv_remove_license();
  void query_package_info(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& key);
  void send_query_package_info(const std::string& key);
  void recv_query_package_info(std::string& _return);
  void create_task(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const running_task& task);
  void send_create_task(const running_task& task);
  bool recv_create_task();
  void remove_task(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& task_id);
  void send_remove_task(const std::string& task_id);
  bool recv_remove_task();
  void ping_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr);
  void send_ping_p(const std::string& addr);
  void recv_ping_p(service_info& _return);
  void get_host_detail_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const machine_detail_filter::type filter);
  void send_get_host_detail_p(const std::string& addr, const machine_detail_filter::type filter);
  void recv_get_host_detail_p(physical_machine_info& _return);
  void get_service_list_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr);
  void send_get_service_list_p(const std::string& addr);
  void recv_get_service_list_p(std::set<service_info> & _return);
  void enumerate_disks_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const enumerate_disk_filter_style::type filter);
  void send_enumerate_disks_p(const std::string& addr, const enumerate_disk_filter_style::type filter);
  void recv_enumerate_disks_p(std::set<disk_info> & _return);
  void verify_carrier_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& carrier, const bool is_ssl);
  void send_verify_carrier_p(const std::string& addr, const std::string& carrier, const bool is_ssl);
  bool recv_verify_carrier_p();
  void take_xray_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr);
  void send_take_xray_p(const std::string& addr);
  void recv_take_xray_p(std::string& _return);
  void take_xrays_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr);
  void send_take_xrays_p(const std::string& addr);
  void recv_take_xrays_p(std::string& _return);
  void create_mutex_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& session, const int16_t timeout);
  void send_create_mutex_p(const std::string& addr, const std::string& session, const int16_t timeout);
  bool recv_create_mutex_p();
  void delete_mutex_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& session);
  void send_delete_mutex_p(const std::string& addr, const std::string& session);
  bool recv_delete_mutex_p();
  void create_job_ex_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
  void send_create_job_ex_p(const std::string& addr, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
  void recv_create_job_ex_p(job_detail& _return);
  void get_job_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& job_id, const std::string& service_type);
  void send_get_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type);
  void recv_get_job_p(job_detail& _return);
  void interrupt_job_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& job_id, const std::string& service_type);
  void send_interrupt_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type);
  bool recv_interrupt_job_p();
  void resume_job_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& job_id, const std::string& service_type);
  void send_resume_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type);
  bool recv_resume_job_p();
  void remove_job_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& job_id, const std::string& service_type);
  void send_remove_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type);
  bool recv_remove_job_p();
  void running_job_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& job_id, const std::string& service_type);
  void send_running_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type);
  bool recv_running_job_p();
  void update_job_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
  void send_update_job_p(const std::string& addr, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
  bool recv_update_job_p();
  void remove_snapshot_image_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::map<std::string, image_map_info> & images, const std::string& service_type);
  void send_remove_snapshot_image_p(const std::string& addr, const std::map<std::string, image_map_info> & images, const std::string& service_type);
  bool recv_remove_snapshot_image_p();
  void test_connection_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const connection& conn, const std::string& service_type);
  void send_test_connection_p(const std::string& addr, const connection& conn, const std::string& service_type);
  bool recv_test_connection_p();
  void add_connection_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const connection& conn, const std::string& service_type);
  void send_add_connection_p(const std::string& addr, const connection& conn, const std::string& service_type);
  bool recv_add_connection_p();
  void remove_connection_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& connection_id, const std::string& service_type);
  void send_remove_connection_p(const std::string& addr, const std::string& connection_id, const std::string& service_type);
  bool recv_remove_connection_p();
  void modify_connection_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const connection& conn, const std::string& service_type);
  void send_modify_connection_p(const std::string& addr, const connection& conn, const std::string& service_type);
  bool recv_modify_connection_p();
  void enumerate_connections_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& service_type);
  void send_enumerate_connections_p(const std::string& addr, const std::string& service_type);
  void recv_enumerate_connections_p(std::vector<connection> & _return);
  void get_connection_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& connection_id, const std::string& service_type);
  void send_get_connection_p(const std::string& addr, const std::string& connection_id, const std::string& service_type);
  void recv_get_connection_p(connection& _return);
  void get_virtual_host_info_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& host, const std::string& username, const std::string& password);
  void send_get_virtual_host_info_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password);
  void recv_get_virtual_host_info_p(virtual_host& _return);
  void get_virtual_hosts_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& host, const std::string& username, const std::string& password);
  void send_get_virtual_hosts_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password);
  void recv_get_virtual_hosts_p(std::vector<virtual_host> & _return);
  void get_virtual_machine_detail_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void send_get_virtual_machine_detail_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void recv_get_virtual_machine_detail_p(virtual_machine& _return);
  void get_physical_machine_detail_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& host, const machine_detail_filter::type filter);
  void send_get_physical_machine_detail_p(const std::string& addr, const std::string& host, const machine_detail_filter::type filter);
  void recv_get_physical_machine_detail_p(physical_machine_info& _return);
  void power_off_virtual_machine_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void send_power_off_virtual_machine_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  bool recv_power_off_virtual_machine_p();
  void remove_virtual_machine_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void send_remove_virtual_machine_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  bool recv_remove_virtual_machine_p();
  void get_virtual_machine_snapshots_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void send_get_virtual_machine_snapshots_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void recv_get_virtual_machine_snapshots_p(std::vector<vmware_snapshot> & _return);
  void remove_virtual_machine_snapshot_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id, const std::string& snapshot_id);
  void send_remove_virtual_machine_snapshot_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id, const std::string& snapshot_id);
  bool recv_remove_virtual_machine_snapshot_p();
  void get_datacenter_folder_list_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& datacenter);
  void send_get_datacenter_folder_list_p(const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& datacenter);
  void recv_get_datacenter_folder_list_p(std::vector<std::string> & _return);
  void take_packer_xray_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& host);
  void send_take_packer_xray_p(const std::string& addr, const std::string& host);
  void recv_take_packer_xray_p(std::string& _return);
  void get_packer_service_info_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& host);
  void send_get_packer_service_info_p(const std::string& addr, const std::string& host);
  void recv_get_packer_service_info_p(service_info& _return);
  void verify_management_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& management, const int32_t port, const bool is_ssl);
  void send_verify_management_p(const std::string& addr, const std::string& management, const int32_t port, const bool is_ssl);
  bool recv_verify_management_p();
  void verify_packer_to_carrier_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl);
  void send_verify_packer_to_carrier_p(const std::string& addr, const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl);
  bool recv_verify_packer_to_carrier_p();
  void get_replica_job_create_detail(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_get_replica_job_create_detail(const std::string& session_id, const std::string& job_id);
  void recv_get_replica_job_create_detail(replica_job_create_detail& _return);
  void get_loader_job_create_detail(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_get_loader_job_create_detail(const std::string& session_id, const std::string& job_id);
  void recv_get_loader_job_create_detail(loader_job_create_detail& _return);
  void get_launcher_job_create_detail(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_get_launcher_job_create_detail(const std::string& session_id, const std::string& job_id);
  void recv_get_launcher_job_create_detail(launcher_job_create_detail& _return);
  void terminate(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& session_id);
  void send_terminate(const std::string& session_id);
  void recv_terminate();
  void set_customized_id_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr, const std::string& disk_addr, const std::string& disk_id);
  void send_set_customized_id_p(const std::string& addr, const std::string& disk_addr, const std::string& disk_id);
  bool recv_set_customized_id_p();
  void unregister_packer_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr);
  void send_unregister_packer_p(const std::string& addr);
  bool recv_unregister_packer_p();
  void unregister_server_p(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& addr);
  void send_unregister_server_p(const std::string& addr);
  bool recv_unregister_server_p();
  void create_vhd_disk_from_snapshot(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& connection_string, const std::string& container, const std::string& original_disk_name, const std::string& target_disk_name, const std::string& snapshot);
  void send_create_vhd_disk_from_snapshot(const std::string& connection_string, const std::string& container, const std::string& original_disk_name, const std::string& target_disk_name, const std::string& snapshot);
  void recv_create_vhd_disk_from_snapshot(std::string& _return);
  void is_snapshot_vhd_disk_ready(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& task_id);
  void send_is_snapshot_vhd_disk_ready(const std::string& task_id);
  bool recv_is_snapshot_vhd_disk_ready();
  void delete_vhd_disk(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& connection_string, const std::string& container, const std::string& disk_name);
  void send_delete_vhd_disk(const std::string& connection_string, const std::string& container, const std::string& disk_name);
  bool recv_delete_vhd_disk();
  void delete_vhd_disk_snapshot(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& connection_string, const std::string& container, const std::string& disk_name, const std::string& snapshot);
  void send_delete_vhd_disk_snapshot(const std::string& connection_string, const std::string& container, const std::string& disk_name, const std::string& snapshot);
  bool recv_delete_vhd_disk_snapshot();
  void get_vhd_disk_snapshots(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& connection_string, const std::string& container, const std::string& disk_name);
  void send_get_vhd_disk_snapshots(const std::string& connection_string, const std::string& container, const std::string& disk_name);
  void recv_get_vhd_disk_snapshots(std::vector<vhd_snapshot> & _return);
  void verify_connection_string(::apache::thrift::stdcxx::function<void(transport_serviceCobClient* client)> cob, const std::string& connection_string);
  void send_verify_connection_string(const std::string& connection_string);
  bool recv_verify_connection_string();
};

class transport_serviceAsyncProcessor : public physical_packer_service_proxyAsyncProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<transport_serviceCobSvIf> iface_;
  virtual void dispatchCall(::apache::thrift::stdcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (transport_serviceAsyncProcessor::*ProcessFunction)(::apache::thrift::stdcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_generate_session(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_generate_session(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::string& _return);
  void throw_generate_session(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_package_info(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_package_info(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::string& _return);
  void throw_get_package_info(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_active_license(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_active_license(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_active_license(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_add_license(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_add_license(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_add_license(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_add_license_with_key(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_add_license_with_key(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_add_license_with_key(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_licenses(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_licenses(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const license_infos& _return);
  void throw_get_licenses(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_check_license_expiration(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_check_license_expiration(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_check_license_expiration(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_is_license_valid(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_is_license_valid(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_is_license_valid(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_is_license_valid_ex(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_is_license_valid_ex(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_is_license_valid_ex(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_remove_license(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_remove_license(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_remove_license(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_query_package_info(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_query_package_info(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::string& _return);
  void throw_query_package_info(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_create_task(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_create_task(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_create_task(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_remove_task(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_remove_task(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_remove_task(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_ping_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_ping_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const service_info& _return);
  void throw_ping_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_host_detail_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_host_detail_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const physical_machine_info& _return);
  void throw_get_host_detail_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_service_list_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_service_list_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::set<service_info> & _return);
  void throw_get_service_list_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_enumerate_disks_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_enumerate_disks_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::set<disk_info> & _return);
  void throw_enumerate_disks_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_verify_carrier_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_verify_carrier_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_verify_carrier_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_take_xray_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_take_xray_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::string& _return);
  void throw_take_xray_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_take_xrays_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_take_xrays_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::string& _return);
  void throw_take_xrays_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_create_mutex_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_create_mutex_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_create_mutex_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_delete_mutex_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_delete_mutex_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_delete_mutex_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_create_job_ex_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_create_job_ex_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const job_detail& _return);
  void throw_create_job_ex_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_job_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_job_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const job_detail& _return);
  void throw_get_job_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_interrupt_job_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_interrupt_job_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_interrupt_job_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_resume_job_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_resume_job_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_resume_job_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_remove_job_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_remove_job_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_remove_job_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_running_job_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_running_job_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_running_job_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_update_job_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_update_job_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_update_job_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_remove_snapshot_image_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_remove_snapshot_image_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_remove_snapshot_image_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_test_connection_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_test_connection_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_test_connection_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_add_connection_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_add_connection_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_add_connection_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_remove_connection_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_remove_connection_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_remove_connection_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_modify_connection_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_modify_connection_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_modify_connection_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_enumerate_connections_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_enumerate_connections_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector<connection> & _return);
  void throw_enumerate_connections_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_connection_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_connection_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const connection& _return);
  void throw_get_connection_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_virtual_host_info_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_virtual_host_info_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const virtual_host& _return);
  void throw_get_virtual_host_info_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_virtual_hosts_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_virtual_hosts_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector<virtual_host> & _return);
  void throw_get_virtual_hosts_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_virtual_machine_detail_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_virtual_machine_detail_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const virtual_machine& _return);
  void throw_get_virtual_machine_detail_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_physical_machine_detail_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_physical_machine_detail_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const physical_machine_info& _return);
  void throw_get_physical_machine_detail_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_power_off_virtual_machine_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_power_off_virtual_machine_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_power_off_virtual_machine_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_remove_virtual_machine_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_remove_virtual_machine_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_remove_virtual_machine_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_virtual_machine_snapshots_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_virtual_machine_snapshots_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector<vmware_snapshot> & _return);
  void throw_get_virtual_machine_snapshots_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_remove_virtual_machine_snapshot_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_remove_virtual_machine_snapshot_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_remove_virtual_machine_snapshot_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_datacenter_folder_list_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_datacenter_folder_list_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector<std::string> & _return);
  void throw_get_datacenter_folder_list_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_take_packer_xray_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_take_packer_xray_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::string& _return);
  void throw_take_packer_xray_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_packer_service_info_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_packer_service_info_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const service_info& _return);
  void throw_get_packer_service_info_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_verify_management_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_verify_management_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_verify_management_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_verify_packer_to_carrier_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_verify_packer_to_carrier_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_verify_packer_to_carrier_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_replica_job_create_detail(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_replica_job_create_detail(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const replica_job_create_detail& _return);
  void throw_get_replica_job_create_detail(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_loader_job_create_detail(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_loader_job_create_detail(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const loader_job_create_detail& _return);
  void throw_get_loader_job_create_detail(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_launcher_job_create_detail(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_launcher_job_create_detail(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const launcher_job_create_detail& _return);
  void throw_get_launcher_job_create_detail(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_terminate(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_terminate(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx);
  void throw_terminate(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_set_customized_id_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_set_customized_id_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_set_customized_id_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_unregister_packer_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_unregister_packer_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_unregister_packer_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_unregister_server_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_unregister_server_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_unregister_server_p(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_create_vhd_disk_from_snapshot(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_create_vhd_disk_from_snapshot(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::string& _return);
  void throw_create_vhd_disk_from_snapshot(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_is_snapshot_vhd_disk_ready(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_is_snapshot_vhd_disk_ready(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_is_snapshot_vhd_disk_ready(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_delete_vhd_disk(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_delete_vhd_disk(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_delete_vhd_disk(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_delete_vhd_disk_snapshot(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_delete_vhd_disk_snapshot(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_delete_vhd_disk_snapshot(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_vhd_disk_snapshots(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_vhd_disk_snapshots(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector<vhd_snapshot> & _return);
  void throw_get_vhd_disk_snapshots(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_verify_connection_string(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_verify_connection_string(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_verify_connection_string(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  transport_serviceAsyncProcessor(::apache::thrift::stdcxx::shared_ptr<transport_serviceCobSvIf> iface) :
    physical_packer_service_proxyAsyncProcessor(iface),
    iface_(iface) {
    processMap_["generate_session"] = &transport_serviceAsyncProcessor::process_generate_session;
    processMap_["get_package_info"] = &transport_serviceAsyncProcessor::process_get_package_info;
    processMap_["active_license"] = &transport_serviceAsyncProcessor::process_active_license;
    processMap_["add_license"] = &transport_serviceAsyncProcessor::process_add_license;
    processMap_["add_license_with_key"] = &transport_serviceAsyncProcessor::process_add_license_with_key;
    processMap_["get_licenses"] = &transport_serviceAsyncProcessor::process_get_licenses;
    processMap_["check_license_expiration"] = &transport_serviceAsyncProcessor::process_check_license_expiration;
    processMap_["is_license_valid"] = &transport_serviceAsyncProcessor::process_is_license_valid;
    processMap_["is_license_valid_ex"] = &transport_serviceAsyncProcessor::process_is_license_valid_ex;
    processMap_["remove_license"] = &transport_serviceAsyncProcessor::process_remove_license;
    processMap_["query_package_info"] = &transport_serviceAsyncProcessor::process_query_package_info;
    processMap_["create_task"] = &transport_serviceAsyncProcessor::process_create_task;
    processMap_["remove_task"] = &transport_serviceAsyncProcessor::process_remove_task;
    processMap_["ping_p"] = &transport_serviceAsyncProcessor::process_ping_p;
    processMap_["get_host_detail_p"] = &transport_serviceAsyncProcessor::process_get_host_detail_p;
    processMap_["get_service_list_p"] = &transport_serviceAsyncProcessor::process_get_service_list_p;
    processMap_["enumerate_disks_p"] = &transport_serviceAsyncProcessor::process_enumerate_disks_p;
    processMap_["verify_carrier_p"] = &transport_serviceAsyncProcessor::process_verify_carrier_p;
    processMap_["take_xray_p"] = &transport_serviceAsyncProcessor::process_take_xray_p;
    processMap_["take_xrays_p"] = &transport_serviceAsyncProcessor::process_take_xrays_p;
    processMap_["create_mutex_p"] = &transport_serviceAsyncProcessor::process_create_mutex_p;
    processMap_["delete_mutex_p"] = &transport_serviceAsyncProcessor::process_delete_mutex_p;
    processMap_["create_job_ex_p"] = &transport_serviceAsyncProcessor::process_create_job_ex_p;
    processMap_["get_job_p"] = &transport_serviceAsyncProcessor::process_get_job_p;
    processMap_["interrupt_job_p"] = &transport_serviceAsyncProcessor::process_interrupt_job_p;
    processMap_["resume_job_p"] = &transport_serviceAsyncProcessor::process_resume_job_p;
    processMap_["remove_job_p"] = &transport_serviceAsyncProcessor::process_remove_job_p;
    processMap_["running_job_p"] = &transport_serviceAsyncProcessor::process_running_job_p;
    processMap_["update_job_p"] = &transport_serviceAsyncProcessor::process_update_job_p;
    processMap_["remove_snapshot_image_p"] = &transport_serviceAsyncProcessor::process_remove_snapshot_image_p;
    processMap_["test_connection_p"] = &transport_serviceAsyncProcessor::process_test_connection_p;
    processMap_["add_connection_p"] = &transport_serviceAsyncProcessor::process_add_connection_p;
    processMap_["remove_connection_p"] = &transport_serviceAsyncProcessor::process_remove_connection_p;
    processMap_["modify_connection_p"] = &transport_serviceAsyncProcessor::process_modify_connection_p;
    processMap_["enumerate_connections_p"] = &transport_serviceAsyncProcessor::process_enumerate_connections_p;
    processMap_["get_connection_p"] = &transport_serviceAsyncProcessor::process_get_connection_p;
    processMap_["get_virtual_host_info_p"] = &transport_serviceAsyncProcessor::process_get_virtual_host_info_p;
    processMap_["get_virtual_hosts_p"] = &transport_serviceAsyncProcessor::process_get_virtual_hosts_p;
    processMap_["get_virtual_machine_detail_p"] = &transport_serviceAsyncProcessor::process_get_virtual_machine_detail_p;
    processMap_["get_physical_machine_detail_p"] = &transport_serviceAsyncProcessor::process_get_physical_machine_detail_p;
    processMap_["power_off_virtual_machine_p"] = &transport_serviceAsyncProcessor::process_power_off_virtual_machine_p;
    processMap_["remove_virtual_machine_p"] = &transport_serviceAsyncProcessor::process_remove_virtual_machine_p;
    processMap_["get_virtual_machine_snapshots_p"] = &transport_serviceAsyncProcessor::process_get_virtual_machine_snapshots_p;
    processMap_["remove_virtual_machine_snapshot_p"] = &transport_serviceAsyncProcessor::process_remove_virtual_machine_snapshot_p;
    processMap_["get_datacenter_folder_list_p"] = &transport_serviceAsyncProcessor::process_get_datacenter_folder_list_p;
    processMap_["take_packer_xray_p"] = &transport_serviceAsyncProcessor::process_take_packer_xray_p;
    processMap_["get_packer_service_info_p"] = &transport_serviceAsyncProcessor::process_get_packer_service_info_p;
    processMap_["verify_management_p"] = &transport_serviceAsyncProcessor::process_verify_management_p;
    processMap_["verify_packer_to_carrier_p"] = &transport_serviceAsyncProcessor::process_verify_packer_to_carrier_p;
    processMap_["get_replica_job_create_detail"] = &transport_serviceAsyncProcessor::process_get_replica_job_create_detail;
    processMap_["get_loader_job_create_detail"] = &transport_serviceAsyncProcessor::process_get_loader_job_create_detail;
    processMap_["get_launcher_job_create_detail"] = &transport_serviceAsyncProcessor::process_get_launcher_job_create_detail;
    processMap_["terminate"] = &transport_serviceAsyncProcessor::process_terminate;
    processMap_["set_customized_id_p"] = &transport_serviceAsyncProcessor::process_set_customized_id_p;
    processMap_["unregister_packer_p"] = &transport_serviceAsyncProcessor::process_unregister_packer_p;
    processMap_["unregister_server_p"] = &transport_serviceAsyncProcessor::process_unregister_server_p;
    processMap_["create_vhd_disk_from_snapshot"] = &transport_serviceAsyncProcessor::process_create_vhd_disk_from_snapshot;
    processMap_["is_snapshot_vhd_disk_ready"] = &transport_serviceAsyncProcessor::process_is_snapshot_vhd_disk_ready;
    processMap_["delete_vhd_disk"] = &transport_serviceAsyncProcessor::process_delete_vhd_disk;
    processMap_["delete_vhd_disk_snapshot"] = &transport_serviceAsyncProcessor::process_delete_vhd_disk_snapshot;
    processMap_["get_vhd_disk_snapshots"] = &transport_serviceAsyncProcessor::process_get_vhd_disk_snapshots;
    processMap_["verify_connection_string"] = &transport_serviceAsyncProcessor::process_verify_connection_string;
  }

  virtual ~transport_serviceAsyncProcessor() {}
};

class transport_serviceAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  transport_serviceAsyncProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< transport_serviceCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< transport_serviceCobSvIfFactory > handlerFactory_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
