/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef common_service_H
#define common_service_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/stdcxx.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "saasame_types.h"

namespace saasame { namespace transport {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class common_serviceIf {
 public:
  virtual ~common_serviceIf() {}
  virtual void ping(service_info& _return) = 0;
  virtual void get_host_detail(physical_machine_info& _return, const std::string& session_id, const machine_detail_filter::type filter) = 0;
  virtual void get_service_list(std::set<service_info> & _return, const std::string& session_id) = 0;
  virtual void enumerate_disks(std::set<disk_info> & _return, const enumerate_disk_filter_style::type filter) = 0;
  virtual bool verify_carrier(const std::string& carrier, const bool is_ssl) = 0;
  virtual void take_xray(std::string& _return) = 0;
  virtual void take_xrays(std::string& _return) = 0;
  virtual bool create_mutex(const std::string& session, const int16_t timeout) = 0;
  virtual bool delete_mutex(const std::string& session) = 0;
};

class common_serviceIfFactory {
 public:
  typedef common_serviceIf Handler;

  virtual ~common_serviceIfFactory() {}

  virtual common_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(common_serviceIf* /* handler */) = 0;
};

class common_serviceIfSingletonFactory : virtual public common_serviceIfFactory {
 public:
  common_serviceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<common_serviceIf>& iface) : iface_(iface) {}
  virtual ~common_serviceIfSingletonFactory() {}

  virtual common_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(common_serviceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<common_serviceIf> iface_;
};

class common_serviceNull : virtual public common_serviceIf {
 public:
  virtual ~common_serviceNull() {}
  void ping(service_info& /* _return */) {
    return;
  }
  void get_host_detail(physical_machine_info& /* _return */, const std::string& /* session_id */, const machine_detail_filter::type /* filter */) {
    return;
  }
  void get_service_list(std::set<service_info> & /* _return */, const std::string& /* session_id */) {
    return;
  }
  void enumerate_disks(std::set<disk_info> & /* _return */, const enumerate_disk_filter_style::type /* filter */) {
    return;
  }
  bool verify_carrier(const std::string& /* carrier */, const bool /* is_ssl */) {
    bool _return = false;
    return _return;
  }
  void take_xray(std::string& /* _return */) {
    return;
  }
  void take_xrays(std::string& /* _return */) {
    return;
  }
  bool create_mutex(const std::string& /* session */, const int16_t /* timeout */) {
    bool _return = false;
    return _return;
  }
  bool delete_mutex(const std::string& /* session */) {
    bool _return = false;
    return _return;
  }
};


class common_service_ping_args {
 public:

  common_service_ping_args(const common_service_ping_args&);
  common_service_ping_args& operator=(const common_service_ping_args&);
  common_service_ping_args() {
  }

  virtual ~common_service_ping_args() throw();

  bool operator == (const common_service_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const common_service_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_service_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class common_service_ping_pargs {
 public:


  virtual ~common_service_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_service_ping_result__isset {
  _common_service_ping_result__isset() : success(false) {}
  bool success :1;
} _common_service_ping_result__isset;

class common_service_ping_result {
 public:

  common_service_ping_result(const common_service_ping_result&);
  common_service_ping_result& operator=(const common_service_ping_result&);
  common_service_ping_result() {
  }

  virtual ~common_service_ping_result() throw();
  service_info success;

  _common_service_ping_result__isset __isset;

  void __set_success(const service_info& val);

  bool operator == (const common_service_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const common_service_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_service_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_service_ping_presult__isset {
  _common_service_ping_presult__isset() : success(false) {}
  bool success :1;
} _common_service_ping_presult__isset;

class common_service_ping_presult {
 public:


  virtual ~common_service_ping_presult() throw();
  service_info* success;

  _common_service_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_service_get_host_detail_args__isset {
  _common_service_get_host_detail_args__isset() : session_id(false), filter(false) {}
  bool session_id :1;
  bool filter :1;
} _common_service_get_host_detail_args__isset;

class common_service_get_host_detail_args {
 public:

  common_service_get_host_detail_args(const common_service_get_host_detail_args&);
  common_service_get_host_detail_args& operator=(const common_service_get_host_detail_args&);
  common_service_get_host_detail_args() : session_id(), filter((machine_detail_filter::type)0) {
  }

  virtual ~common_service_get_host_detail_args() throw();
  std::string session_id;
  machine_detail_filter::type filter;

  _common_service_get_host_detail_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_filter(const machine_detail_filter::type val);

  bool operator == (const common_service_get_host_detail_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const common_service_get_host_detail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_service_get_host_detail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class common_service_get_host_detail_pargs {
 public:


  virtual ~common_service_get_host_detail_pargs() throw();
  const std::string* session_id;
  const machine_detail_filter::type* filter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_service_get_host_detail_result__isset {
  _common_service_get_host_detail_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_service_get_host_detail_result__isset;

class common_service_get_host_detail_result {
 public:

  common_service_get_host_detail_result(const common_service_get_host_detail_result&);
  common_service_get_host_detail_result& operator=(const common_service_get_host_detail_result&);
  common_service_get_host_detail_result() {
  }

  virtual ~common_service_get_host_detail_result() throw();
  physical_machine_info success;
  invalid_operation ouch;

  _common_service_get_host_detail_result__isset __isset;

  void __set_success(const physical_machine_info& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const common_service_get_host_detail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const common_service_get_host_detail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_service_get_host_detail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_service_get_host_detail_presult__isset {
  _common_service_get_host_detail_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_service_get_host_detail_presult__isset;

class common_service_get_host_detail_presult {
 public:


  virtual ~common_service_get_host_detail_presult() throw();
  physical_machine_info* success;
  invalid_operation ouch;

  _common_service_get_host_detail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_service_get_service_list_args__isset {
  _common_service_get_service_list_args__isset() : session_id(false) {}
  bool session_id :1;
} _common_service_get_service_list_args__isset;

class common_service_get_service_list_args {
 public:

  common_service_get_service_list_args(const common_service_get_service_list_args&);
  common_service_get_service_list_args& operator=(const common_service_get_service_list_args&);
  common_service_get_service_list_args() : session_id() {
  }

  virtual ~common_service_get_service_list_args() throw();
  std::string session_id;

  _common_service_get_service_list_args__isset __isset;

  void __set_session_id(const std::string& val);

  bool operator == (const common_service_get_service_list_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const common_service_get_service_list_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_service_get_service_list_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class common_service_get_service_list_pargs {
 public:


  virtual ~common_service_get_service_list_pargs() throw();
  const std::string* session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_service_get_service_list_result__isset {
  _common_service_get_service_list_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_service_get_service_list_result__isset;

class common_service_get_service_list_result {
 public:

  common_service_get_service_list_result(const common_service_get_service_list_result&);
  common_service_get_service_list_result& operator=(const common_service_get_service_list_result&);
  common_service_get_service_list_result() {
  }

  virtual ~common_service_get_service_list_result() throw();
  std::set<service_info>  success;
  invalid_operation ouch;

  _common_service_get_service_list_result__isset __isset;

  void __set_success(const std::set<service_info> & val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const common_service_get_service_list_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const common_service_get_service_list_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_service_get_service_list_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_service_get_service_list_presult__isset {
  _common_service_get_service_list_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_service_get_service_list_presult__isset;

class common_service_get_service_list_presult {
 public:


  virtual ~common_service_get_service_list_presult() throw();
  std::set<service_info> * success;
  invalid_operation ouch;

  _common_service_get_service_list_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_service_enumerate_disks_args__isset {
  _common_service_enumerate_disks_args__isset() : filter(false) {}
  bool filter :1;
} _common_service_enumerate_disks_args__isset;

class common_service_enumerate_disks_args {
 public:

  common_service_enumerate_disks_args(const common_service_enumerate_disks_args&);
  common_service_enumerate_disks_args& operator=(const common_service_enumerate_disks_args&);
  common_service_enumerate_disks_args() : filter((enumerate_disk_filter_style::type)0) {
  }

  virtual ~common_service_enumerate_disks_args() throw();
  enumerate_disk_filter_style::type filter;

  _common_service_enumerate_disks_args__isset __isset;

  void __set_filter(const enumerate_disk_filter_style::type val);

  bool operator == (const common_service_enumerate_disks_args & rhs) const
  {
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const common_service_enumerate_disks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_service_enumerate_disks_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class common_service_enumerate_disks_pargs {
 public:


  virtual ~common_service_enumerate_disks_pargs() throw();
  const enumerate_disk_filter_style::type* filter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_service_enumerate_disks_result__isset {
  _common_service_enumerate_disks_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_service_enumerate_disks_result__isset;

class common_service_enumerate_disks_result {
 public:

  common_service_enumerate_disks_result(const common_service_enumerate_disks_result&);
  common_service_enumerate_disks_result& operator=(const common_service_enumerate_disks_result&);
  common_service_enumerate_disks_result() {
  }

  virtual ~common_service_enumerate_disks_result() throw();
  std::set<disk_info>  success;
  invalid_operation ouch;

  _common_service_enumerate_disks_result__isset __isset;

  void __set_success(const std::set<disk_info> & val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const common_service_enumerate_disks_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const common_service_enumerate_disks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_service_enumerate_disks_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_service_enumerate_disks_presult__isset {
  _common_service_enumerate_disks_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_service_enumerate_disks_presult__isset;

class common_service_enumerate_disks_presult {
 public:


  virtual ~common_service_enumerate_disks_presult() throw();
  std::set<disk_info> * success;
  invalid_operation ouch;

  _common_service_enumerate_disks_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_service_verify_carrier_args__isset {
  _common_service_verify_carrier_args__isset() : carrier(false), is_ssl(false) {}
  bool carrier :1;
  bool is_ssl :1;
} _common_service_verify_carrier_args__isset;

class common_service_verify_carrier_args {
 public:

  common_service_verify_carrier_args(const common_service_verify_carrier_args&);
  common_service_verify_carrier_args& operator=(const common_service_verify_carrier_args&);
  common_service_verify_carrier_args() : carrier(), is_ssl(0) {
  }

  virtual ~common_service_verify_carrier_args() throw();
  std::string carrier;
  bool is_ssl;

  _common_service_verify_carrier_args__isset __isset;

  void __set_carrier(const std::string& val);

  void __set_is_ssl(const bool val);

  bool operator == (const common_service_verify_carrier_args & rhs) const
  {
    if (!(carrier == rhs.carrier))
      return false;
    if (!(is_ssl == rhs.is_ssl))
      return false;
    return true;
  }
  bool operator != (const common_service_verify_carrier_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_service_verify_carrier_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class common_service_verify_carrier_pargs {
 public:


  virtual ~common_service_verify_carrier_pargs() throw();
  const std::string* carrier;
  const bool* is_ssl;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_service_verify_carrier_result__isset {
  _common_service_verify_carrier_result__isset() : success(false) {}
  bool success :1;
} _common_service_verify_carrier_result__isset;

class common_service_verify_carrier_result {
 public:

  common_service_verify_carrier_result(const common_service_verify_carrier_result&);
  common_service_verify_carrier_result& operator=(const common_service_verify_carrier_result&);
  common_service_verify_carrier_result() : success(0) {
  }

  virtual ~common_service_verify_carrier_result() throw();
  bool success;

  _common_service_verify_carrier_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const common_service_verify_carrier_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const common_service_verify_carrier_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_service_verify_carrier_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_service_verify_carrier_presult__isset {
  _common_service_verify_carrier_presult__isset() : success(false) {}
  bool success :1;
} _common_service_verify_carrier_presult__isset;

class common_service_verify_carrier_presult {
 public:


  virtual ~common_service_verify_carrier_presult() throw();
  bool* success;

  _common_service_verify_carrier_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class common_service_take_xray_args {
 public:

  common_service_take_xray_args(const common_service_take_xray_args&);
  common_service_take_xray_args& operator=(const common_service_take_xray_args&);
  common_service_take_xray_args() {
  }

  virtual ~common_service_take_xray_args() throw();

  bool operator == (const common_service_take_xray_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const common_service_take_xray_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_service_take_xray_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class common_service_take_xray_pargs {
 public:


  virtual ~common_service_take_xray_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_service_take_xray_result__isset {
  _common_service_take_xray_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_service_take_xray_result__isset;

class common_service_take_xray_result {
 public:

  common_service_take_xray_result(const common_service_take_xray_result&);
  common_service_take_xray_result& operator=(const common_service_take_xray_result&);
  common_service_take_xray_result() : success() {
  }

  virtual ~common_service_take_xray_result() throw();
  std::string success;
  invalid_operation ouch;

  _common_service_take_xray_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const common_service_take_xray_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const common_service_take_xray_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_service_take_xray_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_service_take_xray_presult__isset {
  _common_service_take_xray_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_service_take_xray_presult__isset;

class common_service_take_xray_presult {
 public:


  virtual ~common_service_take_xray_presult() throw();
  std::string* success;
  invalid_operation ouch;

  _common_service_take_xray_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class common_service_take_xrays_args {
 public:

  common_service_take_xrays_args(const common_service_take_xrays_args&);
  common_service_take_xrays_args& operator=(const common_service_take_xrays_args&);
  common_service_take_xrays_args() {
  }

  virtual ~common_service_take_xrays_args() throw();

  bool operator == (const common_service_take_xrays_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const common_service_take_xrays_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_service_take_xrays_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class common_service_take_xrays_pargs {
 public:


  virtual ~common_service_take_xrays_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_service_take_xrays_result__isset {
  _common_service_take_xrays_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_service_take_xrays_result__isset;

class common_service_take_xrays_result {
 public:

  common_service_take_xrays_result(const common_service_take_xrays_result&);
  common_service_take_xrays_result& operator=(const common_service_take_xrays_result&);
  common_service_take_xrays_result() : success() {
  }

  virtual ~common_service_take_xrays_result() throw();
  std::string success;
  invalid_operation ouch;

  _common_service_take_xrays_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const common_service_take_xrays_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const common_service_take_xrays_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_service_take_xrays_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_service_take_xrays_presult__isset {
  _common_service_take_xrays_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_service_take_xrays_presult__isset;

class common_service_take_xrays_presult {
 public:


  virtual ~common_service_take_xrays_presult() throw();
  std::string* success;
  invalid_operation ouch;

  _common_service_take_xrays_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_service_create_mutex_args__isset {
  _common_service_create_mutex_args__isset() : session(false), timeout(false) {}
  bool session :1;
  bool timeout :1;
} _common_service_create_mutex_args__isset;

class common_service_create_mutex_args {
 public:

  common_service_create_mutex_args(const common_service_create_mutex_args&);
  common_service_create_mutex_args& operator=(const common_service_create_mutex_args&);
  common_service_create_mutex_args() : session(), timeout(0) {
  }

  virtual ~common_service_create_mutex_args() throw();
  std::string session;
  int16_t timeout;

  _common_service_create_mutex_args__isset __isset;

  void __set_session(const std::string& val);

  void __set_timeout(const int16_t val);

  bool operator == (const common_service_create_mutex_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(timeout == rhs.timeout))
      return false;
    return true;
  }
  bool operator != (const common_service_create_mutex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_service_create_mutex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class common_service_create_mutex_pargs {
 public:


  virtual ~common_service_create_mutex_pargs() throw();
  const std::string* session;
  const int16_t* timeout;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_service_create_mutex_result__isset {
  _common_service_create_mutex_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_service_create_mutex_result__isset;

class common_service_create_mutex_result {
 public:

  common_service_create_mutex_result(const common_service_create_mutex_result&);
  common_service_create_mutex_result& operator=(const common_service_create_mutex_result&);
  common_service_create_mutex_result() : success(0) {
  }

  virtual ~common_service_create_mutex_result() throw();
  bool success;
  invalid_operation ouch;

  _common_service_create_mutex_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const common_service_create_mutex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const common_service_create_mutex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_service_create_mutex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_service_create_mutex_presult__isset {
  _common_service_create_mutex_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_service_create_mutex_presult__isset;

class common_service_create_mutex_presult {
 public:


  virtual ~common_service_create_mutex_presult() throw();
  bool* success;
  invalid_operation ouch;

  _common_service_create_mutex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_service_delete_mutex_args__isset {
  _common_service_delete_mutex_args__isset() : session(false) {}
  bool session :1;
} _common_service_delete_mutex_args__isset;

class common_service_delete_mutex_args {
 public:

  common_service_delete_mutex_args(const common_service_delete_mutex_args&);
  common_service_delete_mutex_args& operator=(const common_service_delete_mutex_args&);
  common_service_delete_mutex_args() : session() {
  }

  virtual ~common_service_delete_mutex_args() throw();
  std::string session;

  _common_service_delete_mutex_args__isset __isset;

  void __set_session(const std::string& val);

  bool operator == (const common_service_delete_mutex_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const common_service_delete_mutex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_service_delete_mutex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class common_service_delete_mutex_pargs {
 public:


  virtual ~common_service_delete_mutex_pargs() throw();
  const std::string* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_service_delete_mutex_result__isset {
  _common_service_delete_mutex_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_service_delete_mutex_result__isset;

class common_service_delete_mutex_result {
 public:

  common_service_delete_mutex_result(const common_service_delete_mutex_result&);
  common_service_delete_mutex_result& operator=(const common_service_delete_mutex_result&);
  common_service_delete_mutex_result() : success(0) {
  }

  virtual ~common_service_delete_mutex_result() throw();
  bool success;
  invalid_operation ouch;

  _common_service_delete_mutex_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const common_service_delete_mutex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const common_service_delete_mutex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_service_delete_mutex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _common_service_delete_mutex_presult__isset {
  _common_service_delete_mutex_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _common_service_delete_mutex_presult__isset;

class common_service_delete_mutex_presult {
 public:


  virtual ~common_service_delete_mutex_presult() throw();
  bool* success;
  invalid_operation ouch;

  _common_service_delete_mutex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class common_serviceClient : virtual public common_serviceIf {
 public:
  common_serviceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  common_serviceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(service_info& _return);
  void send_ping();
  void recv_ping(service_info& _return);
  void get_host_detail(physical_machine_info& _return, const std::string& session_id, const machine_detail_filter::type filter);
  void send_get_host_detail(const std::string& session_id, const machine_detail_filter::type filter);
  void recv_get_host_detail(physical_machine_info& _return);
  void get_service_list(std::set<service_info> & _return, const std::string& session_id);
  void send_get_service_list(const std::string& session_id);
  void recv_get_service_list(std::set<service_info> & _return);
  void enumerate_disks(std::set<disk_info> & _return, const enumerate_disk_filter_style::type filter);
  void send_enumerate_disks(const enumerate_disk_filter_style::type filter);
  void recv_enumerate_disks(std::set<disk_info> & _return);
  bool verify_carrier(const std::string& carrier, const bool is_ssl);
  void send_verify_carrier(const std::string& carrier, const bool is_ssl);
  bool recv_verify_carrier();
  void take_xray(std::string& _return);
  void send_take_xray();
  void recv_take_xray(std::string& _return);
  void take_xrays(std::string& _return);
  void send_take_xrays();
  void recv_take_xrays(std::string& _return);
  bool create_mutex(const std::string& session, const int16_t timeout);
  void send_create_mutex(const std::string& session, const int16_t timeout);
  bool recv_create_mutex();
  bool delete_mutex(const std::string& session);
  void send_delete_mutex(const std::string& session);
  bool recv_delete_mutex();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class common_serviceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<common_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (common_serviceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_host_detail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_service_list(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_enumerate_disks(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verify_carrier(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_take_xray(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_take_xrays(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_mutex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_mutex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  common_serviceProcessor(::apache::thrift::stdcxx::shared_ptr<common_serviceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &common_serviceProcessor::process_ping;
    processMap_["get_host_detail"] = &common_serviceProcessor::process_get_host_detail;
    processMap_["get_service_list"] = &common_serviceProcessor::process_get_service_list;
    processMap_["enumerate_disks"] = &common_serviceProcessor::process_enumerate_disks;
    processMap_["verify_carrier"] = &common_serviceProcessor::process_verify_carrier;
    processMap_["take_xray"] = &common_serviceProcessor::process_take_xray;
    processMap_["take_xrays"] = &common_serviceProcessor::process_take_xrays;
    processMap_["create_mutex"] = &common_serviceProcessor::process_create_mutex;
    processMap_["delete_mutex"] = &common_serviceProcessor::process_delete_mutex;
  }

  virtual ~common_serviceProcessor() {}
};

class common_serviceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  common_serviceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< common_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< common_serviceIfFactory > handlerFactory_;
};

class common_serviceMultiface : virtual public common_serviceIf {
 public:
  common_serviceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<common_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~common_serviceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<common_serviceIf> > ifaces_;
  common_serviceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<common_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping(service_info& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return);
    }
    ifaces_[i]->ping(_return);
    return;
  }

  void get_host_detail(physical_machine_info& _return, const std::string& session_id, const machine_detail_filter::type filter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_host_detail(_return, session_id, filter);
    }
    ifaces_[i]->get_host_detail(_return, session_id, filter);
    return;
  }

  void get_service_list(std::set<service_info> & _return, const std::string& session_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_service_list(_return, session_id);
    }
    ifaces_[i]->get_service_list(_return, session_id);
    return;
  }

  void enumerate_disks(std::set<disk_info> & _return, const enumerate_disk_filter_style::type filter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->enumerate_disks(_return, filter);
    }
    ifaces_[i]->enumerate_disks(_return, filter);
    return;
  }

  bool verify_carrier(const std::string& carrier, const bool is_ssl) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verify_carrier(carrier, is_ssl);
    }
    return ifaces_[i]->verify_carrier(carrier, is_ssl);
  }

  void take_xray(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->take_xray(_return);
    }
    ifaces_[i]->take_xray(_return);
    return;
  }

  void take_xrays(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->take_xrays(_return);
    }
    ifaces_[i]->take_xrays(_return);
    return;
  }

  bool create_mutex(const std::string& session, const int16_t timeout) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_mutex(session, timeout);
    }
    return ifaces_[i]->create_mutex(session, timeout);
  }

  bool delete_mutex(const std::string& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_mutex(session);
    }
    return ifaces_[i]->delete_mutex(session);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class common_serviceConcurrentClient : virtual public common_serviceIf {
 public:
  common_serviceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  common_serviceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(service_info& _return);
  int32_t send_ping();
  void recv_ping(service_info& _return, const int32_t seqid);
  void get_host_detail(physical_machine_info& _return, const std::string& session_id, const machine_detail_filter::type filter);
  int32_t send_get_host_detail(const std::string& session_id, const machine_detail_filter::type filter);
  void recv_get_host_detail(physical_machine_info& _return, const int32_t seqid);
  void get_service_list(std::set<service_info> & _return, const std::string& session_id);
  int32_t send_get_service_list(const std::string& session_id);
  void recv_get_service_list(std::set<service_info> & _return, const int32_t seqid);
  void enumerate_disks(std::set<disk_info> & _return, const enumerate_disk_filter_style::type filter);
  int32_t send_enumerate_disks(const enumerate_disk_filter_style::type filter);
  void recv_enumerate_disks(std::set<disk_info> & _return, const int32_t seqid);
  bool verify_carrier(const std::string& carrier, const bool is_ssl);
  int32_t send_verify_carrier(const std::string& carrier, const bool is_ssl);
  bool recv_verify_carrier(const int32_t seqid);
  void take_xray(std::string& _return);
  int32_t send_take_xray();
  void recv_take_xray(std::string& _return, const int32_t seqid);
  void take_xrays(std::string& _return);
  int32_t send_take_xrays();
  void recv_take_xrays(std::string& _return, const int32_t seqid);
  bool create_mutex(const std::string& session, const int16_t timeout);
  int32_t send_create_mutex(const std::string& session, const int16_t timeout);
  bool recv_create_mutex(const int32_t seqid);
  bool delete_mutex(const std::string& session);
  int32_t send_delete_mutex(const std::string& session);
  bool recv_delete_mutex(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

class common_serviceCobClient;

class common_serviceCobClIf {
 public:
  virtual ~common_serviceCobClIf() {}
  virtual void ping(::apache::thrift::stdcxx::function<void(common_serviceCobClient* client)> cob) = 0;
  virtual void get_host_detail(::apache::thrift::stdcxx::function<void(common_serviceCobClient* client)> cob, const std::string& session_id, const machine_detail_filter::type filter) = 0;
  virtual void get_service_list(::apache::thrift::stdcxx::function<void(common_serviceCobClient* client)> cob, const std::string& session_id) = 0;
  virtual void enumerate_disks(::apache::thrift::stdcxx::function<void(common_serviceCobClient* client)> cob, const enumerate_disk_filter_style::type filter) = 0;
  virtual void verify_carrier(::apache::thrift::stdcxx::function<void(common_serviceCobClient* client)> cob, const std::string& carrier, const bool is_ssl) = 0;
  virtual void take_xray(::apache::thrift::stdcxx::function<void(common_serviceCobClient* client)> cob) = 0;
  virtual void take_xrays(::apache::thrift::stdcxx::function<void(common_serviceCobClient* client)> cob) = 0;
  virtual void create_mutex(::apache::thrift::stdcxx::function<void(common_serviceCobClient* client)> cob, const std::string& session, const int16_t timeout) = 0;
  virtual void delete_mutex(::apache::thrift::stdcxx::function<void(common_serviceCobClient* client)> cob, const std::string& session) = 0;
};

class common_serviceCobSvIf {
 public:
  virtual ~common_serviceCobSvIf() {}
  virtual void ping(::apache::thrift::stdcxx::function<void(service_info const& _return)> cob) = 0;
  virtual void get_host_detail(::apache::thrift::stdcxx::function<void(physical_machine_info const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const machine_detail_filter::type filter) = 0;
  virtual void get_service_list(::apache::thrift::stdcxx::function<void(std::set<service_info>  const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id) = 0;
  virtual void enumerate_disks(::apache::thrift::stdcxx::function<void(std::set<disk_info>  const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const enumerate_disk_filter_style::type filter) = 0;
  virtual void verify_carrier(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, const std::string& carrier, const bool is_ssl) = 0;
  virtual void take_xray(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */) = 0;
  virtual void take_xrays(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */) = 0;
  virtual void create_mutex(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session, const int16_t timeout) = 0;
  virtual void delete_mutex(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session) = 0;
};

class common_serviceCobSvIfFactory {
 public:
  typedef common_serviceCobSvIf Handler;

  virtual ~common_serviceCobSvIfFactory() {}

  virtual common_serviceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(common_serviceCobSvIf* /* handler */) = 0;
};

class common_serviceCobSvIfSingletonFactory : virtual public common_serviceCobSvIfFactory {
 public:
  common_serviceCobSvIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<common_serviceCobSvIf>& iface) : iface_(iface) {}
  virtual ~common_serviceCobSvIfSingletonFactory() {}

  virtual common_serviceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(common_serviceCobSvIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<common_serviceCobSvIf> iface_;
};

class common_serviceCobSvNull : virtual public common_serviceCobSvIf {
 public:
  virtual ~common_serviceCobSvNull() {}
  void ping(::apache::thrift::stdcxx::function<void(service_info const& _return)> cob) {
    service_info _return;
    return cob(_return);
  }
  void get_host_detail(::apache::thrift::stdcxx::function<void(physical_machine_info const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const machine_detail_filter::type /* filter */) {
    physical_machine_info _return;
    return cob(_return);
  }
  void get_service_list(::apache::thrift::stdcxx::function<void(std::set<service_info>  const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */) {
    std::set<service_info>  _return;
    return cob(_return);
  }
  void enumerate_disks(::apache::thrift::stdcxx::function<void(std::set<disk_info>  const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const enumerate_disk_filter_style::type /* filter */) {
    std::set<disk_info>  _return;
    return cob(_return);
  }
  void verify_carrier(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, const std::string& /* carrier */, const bool /* is_ssl */) {
    bool _return = false;
    return cob(_return);
  }
  void take_xray(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */) {
    std::string _return;
    return cob(_return);
  }
  void take_xrays(::apache::thrift::stdcxx::function<void(std::string const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */) {
    std::string _return;
    return cob(_return);
  }
  void create_mutex(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session */, const int16_t /* timeout */) {
    bool _return = false;
    return cob(_return);
  }
  void delete_mutex(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session */) {
    bool _return = false;
    return cob(_return);
  }
};

class common_serviceCobClient : virtual public common_serviceCobClIf {
 public:
  common_serviceCobClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    channel_(channel),
    itrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    otrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    piprot_(protocolFactory->getProtocol(itrans_)),
    poprot_(protocolFactory->getProtocol(otrans_)) {
    iprot_ = piprot_.get();
    oprot_ = poprot_.get();
  }
  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void ping(::apache::thrift::stdcxx::function<void(common_serviceCobClient* client)> cob);
  void send_ping();
  void recv_ping(service_info& _return);
  void get_host_detail(::apache::thrift::stdcxx::function<void(common_serviceCobClient* client)> cob, const std::string& session_id, const machine_detail_filter::type filter);
  void send_get_host_detail(const std::string& session_id, const machine_detail_filter::type filter);
  void recv_get_host_detail(physical_machine_info& _return);
  void get_service_list(::apache::thrift::stdcxx::function<void(common_serviceCobClient* client)> cob, const std::string& session_id);
  void send_get_service_list(const std::string& session_id);
  void recv_get_service_list(std::set<service_info> & _return);
  void enumerate_disks(::apache::thrift::stdcxx::function<void(common_serviceCobClient* client)> cob, const enumerate_disk_filter_style::type filter);
  void send_enumerate_disks(const enumerate_disk_filter_style::type filter);
  void recv_enumerate_disks(std::set<disk_info> & _return);
  void verify_carrier(::apache::thrift::stdcxx::function<void(common_serviceCobClient* client)> cob, const std::string& carrier, const bool is_ssl);
  void send_verify_carrier(const std::string& carrier, const bool is_ssl);
  bool recv_verify_carrier();
  void take_xray(::apache::thrift::stdcxx::function<void(common_serviceCobClient* client)> cob);
  void send_take_xray();
  void recv_take_xray(std::string& _return);
  void take_xrays(::apache::thrift::stdcxx::function<void(common_serviceCobClient* client)> cob);
  void send_take_xrays();
  void recv_take_xrays(std::string& _return);
  void create_mutex(::apache::thrift::stdcxx::function<void(common_serviceCobClient* client)> cob, const std::string& session, const int16_t timeout);
  void send_create_mutex(const std::string& session, const int16_t timeout);
  bool recv_create_mutex();
  void delete_mutex(::apache::thrift::stdcxx::function<void(common_serviceCobClient* client)> cob, const std::string& session);
  void send_delete_mutex(const std::string& session);
  bool recv_delete_mutex();
 protected:
  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel_;
  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> itrans_;
  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> otrans_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class common_serviceAsyncProcessor : public ::apache::thrift::async::TAsyncDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<common_serviceCobSvIf> iface_;
  virtual void dispatchCall(::apache::thrift::stdcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (common_serviceAsyncProcessor::*ProcessFunction)(::apache::thrift::stdcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_ping(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const service_info& _return);
  void throw_ping(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_host_detail(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_host_detail(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const physical_machine_info& _return);
  void throw_get_host_detail(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_service_list(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_service_list(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::set<service_info> & _return);
  void throw_get_service_list(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_enumerate_disks(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_enumerate_disks(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::set<disk_info> & _return);
  void throw_enumerate_disks(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_verify_carrier(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_verify_carrier(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_verify_carrier(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_take_xray(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_take_xray(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::string& _return);
  void throw_take_xray(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_take_xrays(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_take_xrays(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::string& _return);
  void throw_take_xrays(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_create_mutex(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_create_mutex(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_create_mutex(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_delete_mutex(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_delete_mutex(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_delete_mutex(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  common_serviceAsyncProcessor(::apache::thrift::stdcxx::shared_ptr<common_serviceCobSvIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &common_serviceAsyncProcessor::process_ping;
    processMap_["get_host_detail"] = &common_serviceAsyncProcessor::process_get_host_detail;
    processMap_["get_service_list"] = &common_serviceAsyncProcessor::process_get_service_list;
    processMap_["enumerate_disks"] = &common_serviceAsyncProcessor::process_enumerate_disks;
    processMap_["verify_carrier"] = &common_serviceAsyncProcessor::process_verify_carrier;
    processMap_["take_xray"] = &common_serviceAsyncProcessor::process_take_xray;
    processMap_["take_xrays"] = &common_serviceAsyncProcessor::process_take_xrays;
    processMap_["create_mutex"] = &common_serviceAsyncProcessor::process_create_mutex;
    processMap_["delete_mutex"] = &common_serviceAsyncProcessor::process_delete_mutex;
  }

  virtual ~common_serviceAsyncProcessor() {}
};

class common_serviceAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  common_serviceAsyncProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< common_serviceCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< common_serviceCobSvIfFactory > handlerFactory_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
