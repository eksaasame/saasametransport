// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "reverse_transport.h"
#include <thrift/protocol/TBinaryProtocol.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

using boost::shared_ptr;

using namespace  ::saasame::transport;

class reverse_transportAsyncHandler : public reverse_transportCobSvIf {
 public:
  reverse_transportAsyncHandler() {
    syncHandler_ = std::auto_ptr<reverse_transportHandler>(new reverse_transportHandler);
    // Your initialization goes here
  }
  virtual ~reverse_transportAsyncHandler();

  void ping(tcxx::function<void(service_info const& _return)> cob) {
    service_info _return;
    syncHandler_->ping(_return);
    return cob(_return);
  }

  void generate_session(tcxx::function<void(std::string const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr) {
    std::string _return;
    syncHandler_->generate_session(_return, addr);
    return cob(_return);
  }

  void receive(tcxx::function<void(transport_message const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session, const std::string& addr, const std::string& name) {
    transport_message _return;
    syncHandler_->receive(_return, session, addr, name);
    return cob(_return);
  }

  void response(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session, const std::string& addr, const transport_message& response) {
    bool _return = false;
    _return = syncHandler_->response(session, addr, response);
    return cob(_return);
  }

 protected:
  std::auto_ptr<reverse_transportHandler> syncHandler_;
};

