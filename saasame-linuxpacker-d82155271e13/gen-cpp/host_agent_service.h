/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef host_agent_service_H
#define host_agent_service_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/cxxfunctional.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "saasame_types.h"

namespace saasame { namespace transport {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class host_agent_serviceIf {
 public:
  virtual ~host_agent_serviceIf() {}
  virtual void get_client_info(client_info& _return, const std::string& session_id) = 0;
  virtual void take_snapshots(snapshot_result& _return, const std::string& session_id, const std::set<int32_t> & disks) = 0;
  virtual void get_latest_snapshots_info(snapshot_result& _return, const std::string& session_id) = 0;
  virtual void replicate_disk(replication_result& _return, const std::string& session_id, const int32_t disk, const int64_t start, const int32_t length, const bool be_compressed) = 0;
  virtual void replicate_snapshot(replication_result& _return, const std::string& session_id, const std::string& snapshot_id, const int64_t start, const int32_t length, const bool be_compressed) = 0;
  virtual void get_snapshot_bit_map(volume_bit_map& _return, const std::string& session_id, const std::string& snapshot_id, const int64_t start, const bool be_compressed) = 0;
  virtual void delete_snapshot(delete_snapshot_result& _return, const std::string& session_id, const std::string& snapshot_id) = 0;
  virtual void delete_snapshot_set(delete_snapshot_result& _return, const std::string& session_id, const std::string& snapshot_set_id) = 0;
  virtual void exit(const std::string& session_id) = 0;
};

class host_agent_serviceIfFactory {
 public:
  typedef host_agent_serviceIf Handler;

  virtual ~host_agent_serviceIfFactory() {}

  virtual host_agent_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(host_agent_serviceIf* /* handler */) = 0;
};

class host_agent_serviceIfSingletonFactory : virtual public host_agent_serviceIfFactory {
 public:
  host_agent_serviceIfSingletonFactory(const boost::shared_ptr<host_agent_serviceIf>& iface) : iface_(iface) {}
  virtual ~host_agent_serviceIfSingletonFactory() {}

  virtual host_agent_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(host_agent_serviceIf* /* handler */) {}

 protected:
  boost::shared_ptr<host_agent_serviceIf> iface_;
};

class host_agent_serviceNull : virtual public host_agent_serviceIf {
 public:
  virtual ~host_agent_serviceNull() {}
  void get_client_info(client_info& /* _return */, const std::string& /* session_id */) {
    return;
  }
  void take_snapshots(snapshot_result& /* _return */, const std::string& /* session_id */, const std::set<int32_t> & /* disks */) {
    return;
  }
  void get_latest_snapshots_info(snapshot_result& /* _return */, const std::string& /* session_id */) {
    return;
  }
  void replicate_disk(replication_result& /* _return */, const std::string& /* session_id */, const int32_t /* disk */, const int64_t /* start */, const int32_t /* length */, const bool /* be_compressed */) {
    return;
  }
  void replicate_snapshot(replication_result& /* _return */, const std::string& /* session_id */, const std::string& /* snapshot_id */, const int64_t /* start */, const int32_t /* length */, const bool /* be_compressed */) {
    return;
  }
  void get_snapshot_bit_map(volume_bit_map& /* _return */, const std::string& /* session_id */, const std::string& /* snapshot_id */, const int64_t /* start */, const bool /* be_compressed */) {
    return;
  }
  void delete_snapshot(delete_snapshot_result& /* _return */, const std::string& /* session_id */, const std::string& /* snapshot_id */) {
    return;
  }
  void delete_snapshot_set(delete_snapshot_result& /* _return */, const std::string& /* session_id */, const std::string& /* snapshot_set_id */) {
    return;
  }
  void exit(const std::string& /* session_id */) {
    return;
  }
};

typedef struct _host_agent_service_get_client_info_args__isset {
  _host_agent_service_get_client_info_args__isset() : session_id(false) {}
  bool session_id :1;
} _host_agent_service_get_client_info_args__isset;

class host_agent_service_get_client_info_args {
 public:

  host_agent_service_get_client_info_args(const host_agent_service_get_client_info_args&);
  host_agent_service_get_client_info_args& operator=(const host_agent_service_get_client_info_args&);
  host_agent_service_get_client_info_args() : session_id() {
  }

  virtual ~host_agent_service_get_client_info_args() throw();
  std::string session_id;

  _host_agent_service_get_client_info_args__isset __isset;

  void __set_session_id(const std::string& val);

  bool operator == (const host_agent_service_get_client_info_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const host_agent_service_get_client_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const host_agent_service_get_client_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class host_agent_service_get_client_info_pargs {
 public:


  virtual ~host_agent_service_get_client_info_pargs() throw();
  const std::string* session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _host_agent_service_get_client_info_result__isset {
  _host_agent_service_get_client_info_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _host_agent_service_get_client_info_result__isset;

class host_agent_service_get_client_info_result {
 public:

  host_agent_service_get_client_info_result(const host_agent_service_get_client_info_result&);
  host_agent_service_get_client_info_result& operator=(const host_agent_service_get_client_info_result&);
  host_agent_service_get_client_info_result() {
  }

  virtual ~host_agent_service_get_client_info_result() throw();
  client_info success;
  invalid_operation ouch;

  _host_agent_service_get_client_info_result__isset __isset;

  void __set_success(const client_info& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const host_agent_service_get_client_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const host_agent_service_get_client_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const host_agent_service_get_client_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _host_agent_service_get_client_info_presult__isset {
  _host_agent_service_get_client_info_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _host_agent_service_get_client_info_presult__isset;

class host_agent_service_get_client_info_presult {
 public:


  virtual ~host_agent_service_get_client_info_presult() throw();
  client_info* success;
  invalid_operation ouch;

  _host_agent_service_get_client_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _host_agent_service_take_snapshots_args__isset {
  _host_agent_service_take_snapshots_args__isset() : session_id(false), disks(false) {}
  bool session_id :1;
  bool disks :1;
} _host_agent_service_take_snapshots_args__isset;

class host_agent_service_take_snapshots_args {
 public:

  host_agent_service_take_snapshots_args(const host_agent_service_take_snapshots_args&);
  host_agent_service_take_snapshots_args& operator=(const host_agent_service_take_snapshots_args&);
  host_agent_service_take_snapshots_args() : session_id() {
  }

  virtual ~host_agent_service_take_snapshots_args() throw();
  std::string session_id;
  std::set<int32_t>  disks;

  _host_agent_service_take_snapshots_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_disks(const std::set<int32_t> & val);

  bool operator == (const host_agent_service_take_snapshots_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(disks == rhs.disks))
      return false;
    return true;
  }
  bool operator != (const host_agent_service_take_snapshots_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const host_agent_service_take_snapshots_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class host_agent_service_take_snapshots_pargs {
 public:


  virtual ~host_agent_service_take_snapshots_pargs() throw();
  const std::string* session_id;
  const std::set<int32_t> * disks;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _host_agent_service_take_snapshots_result__isset {
  _host_agent_service_take_snapshots_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _host_agent_service_take_snapshots_result__isset;

class host_agent_service_take_snapshots_result {
 public:

  host_agent_service_take_snapshots_result(const host_agent_service_take_snapshots_result&);
  host_agent_service_take_snapshots_result& operator=(const host_agent_service_take_snapshots_result&);
  host_agent_service_take_snapshots_result() {
  }

  virtual ~host_agent_service_take_snapshots_result() throw();
  snapshot_result success;
  invalid_operation ouch;

  _host_agent_service_take_snapshots_result__isset __isset;

  void __set_success(const snapshot_result& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const host_agent_service_take_snapshots_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const host_agent_service_take_snapshots_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const host_agent_service_take_snapshots_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _host_agent_service_take_snapshots_presult__isset {
  _host_agent_service_take_snapshots_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _host_agent_service_take_snapshots_presult__isset;

class host_agent_service_take_snapshots_presult {
 public:


  virtual ~host_agent_service_take_snapshots_presult() throw();
  snapshot_result* success;
  invalid_operation ouch;

  _host_agent_service_take_snapshots_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _host_agent_service_get_latest_snapshots_info_args__isset {
  _host_agent_service_get_latest_snapshots_info_args__isset() : session_id(false) {}
  bool session_id :1;
} _host_agent_service_get_latest_snapshots_info_args__isset;

class host_agent_service_get_latest_snapshots_info_args {
 public:

  host_agent_service_get_latest_snapshots_info_args(const host_agent_service_get_latest_snapshots_info_args&);
  host_agent_service_get_latest_snapshots_info_args& operator=(const host_agent_service_get_latest_snapshots_info_args&);
  host_agent_service_get_latest_snapshots_info_args() : session_id() {
  }

  virtual ~host_agent_service_get_latest_snapshots_info_args() throw();
  std::string session_id;

  _host_agent_service_get_latest_snapshots_info_args__isset __isset;

  void __set_session_id(const std::string& val);

  bool operator == (const host_agent_service_get_latest_snapshots_info_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const host_agent_service_get_latest_snapshots_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const host_agent_service_get_latest_snapshots_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class host_agent_service_get_latest_snapshots_info_pargs {
 public:


  virtual ~host_agent_service_get_latest_snapshots_info_pargs() throw();
  const std::string* session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _host_agent_service_get_latest_snapshots_info_result__isset {
  _host_agent_service_get_latest_snapshots_info_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _host_agent_service_get_latest_snapshots_info_result__isset;

class host_agent_service_get_latest_snapshots_info_result {
 public:

  host_agent_service_get_latest_snapshots_info_result(const host_agent_service_get_latest_snapshots_info_result&);
  host_agent_service_get_latest_snapshots_info_result& operator=(const host_agent_service_get_latest_snapshots_info_result&);
  host_agent_service_get_latest_snapshots_info_result() {
  }

  virtual ~host_agent_service_get_latest_snapshots_info_result() throw();
  snapshot_result success;
  invalid_operation ouch;

  _host_agent_service_get_latest_snapshots_info_result__isset __isset;

  void __set_success(const snapshot_result& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const host_agent_service_get_latest_snapshots_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const host_agent_service_get_latest_snapshots_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const host_agent_service_get_latest_snapshots_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _host_agent_service_get_latest_snapshots_info_presult__isset {
  _host_agent_service_get_latest_snapshots_info_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _host_agent_service_get_latest_snapshots_info_presult__isset;

class host_agent_service_get_latest_snapshots_info_presult {
 public:


  virtual ~host_agent_service_get_latest_snapshots_info_presult() throw();
  snapshot_result* success;
  invalid_operation ouch;

  _host_agent_service_get_latest_snapshots_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _host_agent_service_replicate_disk_args__isset {
  _host_agent_service_replicate_disk_args__isset() : session_id(false), disk(false), start(false), length(false), be_compressed(false) {}
  bool session_id :1;
  bool disk :1;
  bool start :1;
  bool length :1;
  bool be_compressed :1;
} _host_agent_service_replicate_disk_args__isset;

class host_agent_service_replicate_disk_args {
 public:

  host_agent_service_replicate_disk_args(const host_agent_service_replicate_disk_args&);
  host_agent_service_replicate_disk_args& operator=(const host_agent_service_replicate_disk_args&);
  host_agent_service_replicate_disk_args() : session_id(), disk(0), start(0), length(0), be_compressed(0) {
  }

  virtual ~host_agent_service_replicate_disk_args() throw();
  std::string session_id;
  int32_t disk;
  int64_t start;
  int32_t length;
  bool be_compressed;

  _host_agent_service_replicate_disk_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_disk(const int32_t val);

  void __set_start(const int64_t val);

  void __set_length(const int32_t val);

  void __set_be_compressed(const bool val);

  bool operator == (const host_agent_service_replicate_disk_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(disk == rhs.disk))
      return false;
    if (!(start == rhs.start))
      return false;
    if (!(length == rhs.length))
      return false;
    if (!(be_compressed == rhs.be_compressed))
      return false;
    return true;
  }
  bool operator != (const host_agent_service_replicate_disk_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const host_agent_service_replicate_disk_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class host_agent_service_replicate_disk_pargs {
 public:


  virtual ~host_agent_service_replicate_disk_pargs() throw();
  const std::string* session_id;
  const int32_t* disk;
  const int64_t* start;
  const int32_t* length;
  const bool* be_compressed;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _host_agent_service_replicate_disk_result__isset {
  _host_agent_service_replicate_disk_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _host_agent_service_replicate_disk_result__isset;

class host_agent_service_replicate_disk_result {
 public:

  host_agent_service_replicate_disk_result(const host_agent_service_replicate_disk_result&);
  host_agent_service_replicate_disk_result& operator=(const host_agent_service_replicate_disk_result&);
  host_agent_service_replicate_disk_result() {
  }

  virtual ~host_agent_service_replicate_disk_result() throw();
  replication_result success;
  invalid_operation ouch;

  _host_agent_service_replicate_disk_result__isset __isset;

  void __set_success(const replication_result& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const host_agent_service_replicate_disk_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const host_agent_service_replicate_disk_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const host_agent_service_replicate_disk_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _host_agent_service_replicate_disk_presult__isset {
  _host_agent_service_replicate_disk_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _host_agent_service_replicate_disk_presult__isset;

class host_agent_service_replicate_disk_presult {
 public:


  virtual ~host_agent_service_replicate_disk_presult() throw();
  replication_result* success;
  invalid_operation ouch;

  _host_agent_service_replicate_disk_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _host_agent_service_replicate_snapshot_args__isset {
  _host_agent_service_replicate_snapshot_args__isset() : session_id(false), snapshot_id(false), start(false), length(false), be_compressed(false) {}
  bool session_id :1;
  bool snapshot_id :1;
  bool start :1;
  bool length :1;
  bool be_compressed :1;
} _host_agent_service_replicate_snapshot_args__isset;

class host_agent_service_replicate_snapshot_args {
 public:

  host_agent_service_replicate_snapshot_args(const host_agent_service_replicate_snapshot_args&);
  host_agent_service_replicate_snapshot_args& operator=(const host_agent_service_replicate_snapshot_args&);
  host_agent_service_replicate_snapshot_args() : session_id(), snapshot_id(), start(0), length(0), be_compressed(0) {
  }

  virtual ~host_agent_service_replicate_snapshot_args() throw();
  std::string session_id;
  std::string snapshot_id;
  int64_t start;
  int32_t length;
  bool be_compressed;

  _host_agent_service_replicate_snapshot_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_snapshot_id(const std::string& val);

  void __set_start(const int64_t val);

  void __set_length(const int32_t val);

  void __set_be_compressed(const bool val);

  bool operator == (const host_agent_service_replicate_snapshot_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(snapshot_id == rhs.snapshot_id))
      return false;
    if (!(start == rhs.start))
      return false;
    if (!(length == rhs.length))
      return false;
    if (!(be_compressed == rhs.be_compressed))
      return false;
    return true;
  }
  bool operator != (const host_agent_service_replicate_snapshot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const host_agent_service_replicate_snapshot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class host_agent_service_replicate_snapshot_pargs {
 public:


  virtual ~host_agent_service_replicate_snapshot_pargs() throw();
  const std::string* session_id;
  const std::string* snapshot_id;
  const int64_t* start;
  const int32_t* length;
  const bool* be_compressed;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _host_agent_service_replicate_snapshot_result__isset {
  _host_agent_service_replicate_snapshot_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _host_agent_service_replicate_snapshot_result__isset;

class host_agent_service_replicate_snapshot_result {
 public:

  host_agent_service_replicate_snapshot_result(const host_agent_service_replicate_snapshot_result&);
  host_agent_service_replicate_snapshot_result& operator=(const host_agent_service_replicate_snapshot_result&);
  host_agent_service_replicate_snapshot_result() {
  }

  virtual ~host_agent_service_replicate_snapshot_result() throw();
  replication_result success;
  invalid_operation ouch;

  _host_agent_service_replicate_snapshot_result__isset __isset;

  void __set_success(const replication_result& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const host_agent_service_replicate_snapshot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const host_agent_service_replicate_snapshot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const host_agent_service_replicate_snapshot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _host_agent_service_replicate_snapshot_presult__isset {
  _host_agent_service_replicate_snapshot_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _host_agent_service_replicate_snapshot_presult__isset;

class host_agent_service_replicate_snapshot_presult {
 public:


  virtual ~host_agent_service_replicate_snapshot_presult() throw();
  replication_result* success;
  invalid_operation ouch;

  _host_agent_service_replicate_snapshot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _host_agent_service_get_snapshot_bit_map_args__isset {
  _host_agent_service_get_snapshot_bit_map_args__isset() : session_id(false), snapshot_id(false), start(false), be_compressed(false) {}
  bool session_id :1;
  bool snapshot_id :1;
  bool start :1;
  bool be_compressed :1;
} _host_agent_service_get_snapshot_bit_map_args__isset;

class host_agent_service_get_snapshot_bit_map_args {
 public:

  host_agent_service_get_snapshot_bit_map_args(const host_agent_service_get_snapshot_bit_map_args&);
  host_agent_service_get_snapshot_bit_map_args& operator=(const host_agent_service_get_snapshot_bit_map_args&);
  host_agent_service_get_snapshot_bit_map_args() : session_id(), snapshot_id(), start(0), be_compressed(0) {
  }

  virtual ~host_agent_service_get_snapshot_bit_map_args() throw();
  std::string session_id;
  std::string snapshot_id;
  int64_t start;
  bool be_compressed;

  _host_agent_service_get_snapshot_bit_map_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_snapshot_id(const std::string& val);

  void __set_start(const int64_t val);

  void __set_be_compressed(const bool val);

  bool operator == (const host_agent_service_get_snapshot_bit_map_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(snapshot_id == rhs.snapshot_id))
      return false;
    if (!(start == rhs.start))
      return false;
    if (!(be_compressed == rhs.be_compressed))
      return false;
    return true;
  }
  bool operator != (const host_agent_service_get_snapshot_bit_map_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const host_agent_service_get_snapshot_bit_map_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class host_agent_service_get_snapshot_bit_map_pargs {
 public:


  virtual ~host_agent_service_get_snapshot_bit_map_pargs() throw();
  const std::string* session_id;
  const std::string* snapshot_id;
  const int64_t* start;
  const bool* be_compressed;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _host_agent_service_get_snapshot_bit_map_result__isset {
  _host_agent_service_get_snapshot_bit_map_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _host_agent_service_get_snapshot_bit_map_result__isset;

class host_agent_service_get_snapshot_bit_map_result {
 public:

  host_agent_service_get_snapshot_bit_map_result(const host_agent_service_get_snapshot_bit_map_result&);
  host_agent_service_get_snapshot_bit_map_result& operator=(const host_agent_service_get_snapshot_bit_map_result&);
  host_agent_service_get_snapshot_bit_map_result() {
  }

  virtual ~host_agent_service_get_snapshot_bit_map_result() throw();
  volume_bit_map success;
  invalid_operation ouch;

  _host_agent_service_get_snapshot_bit_map_result__isset __isset;

  void __set_success(const volume_bit_map& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const host_agent_service_get_snapshot_bit_map_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const host_agent_service_get_snapshot_bit_map_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const host_agent_service_get_snapshot_bit_map_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _host_agent_service_get_snapshot_bit_map_presult__isset {
  _host_agent_service_get_snapshot_bit_map_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _host_agent_service_get_snapshot_bit_map_presult__isset;

class host_agent_service_get_snapshot_bit_map_presult {
 public:


  virtual ~host_agent_service_get_snapshot_bit_map_presult() throw();
  volume_bit_map* success;
  invalid_operation ouch;

  _host_agent_service_get_snapshot_bit_map_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _host_agent_service_delete_snapshot_args__isset {
  _host_agent_service_delete_snapshot_args__isset() : session_id(false), snapshot_id(false) {}
  bool session_id :1;
  bool snapshot_id :1;
} _host_agent_service_delete_snapshot_args__isset;

class host_agent_service_delete_snapshot_args {
 public:

  host_agent_service_delete_snapshot_args(const host_agent_service_delete_snapshot_args&);
  host_agent_service_delete_snapshot_args& operator=(const host_agent_service_delete_snapshot_args&);
  host_agent_service_delete_snapshot_args() : session_id(), snapshot_id() {
  }

  virtual ~host_agent_service_delete_snapshot_args() throw();
  std::string session_id;
  std::string snapshot_id;

  _host_agent_service_delete_snapshot_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_snapshot_id(const std::string& val);

  bool operator == (const host_agent_service_delete_snapshot_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(snapshot_id == rhs.snapshot_id))
      return false;
    return true;
  }
  bool operator != (const host_agent_service_delete_snapshot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const host_agent_service_delete_snapshot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class host_agent_service_delete_snapshot_pargs {
 public:


  virtual ~host_agent_service_delete_snapshot_pargs() throw();
  const std::string* session_id;
  const std::string* snapshot_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _host_agent_service_delete_snapshot_result__isset {
  _host_agent_service_delete_snapshot_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _host_agent_service_delete_snapshot_result__isset;

class host_agent_service_delete_snapshot_result {
 public:

  host_agent_service_delete_snapshot_result(const host_agent_service_delete_snapshot_result&);
  host_agent_service_delete_snapshot_result& operator=(const host_agent_service_delete_snapshot_result&);
  host_agent_service_delete_snapshot_result() {
  }

  virtual ~host_agent_service_delete_snapshot_result() throw();
  delete_snapshot_result success;
  invalid_operation ouch;

  _host_agent_service_delete_snapshot_result__isset __isset;

  void __set_success(const delete_snapshot_result& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const host_agent_service_delete_snapshot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const host_agent_service_delete_snapshot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const host_agent_service_delete_snapshot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _host_agent_service_delete_snapshot_presult__isset {
  _host_agent_service_delete_snapshot_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _host_agent_service_delete_snapshot_presult__isset;

class host_agent_service_delete_snapshot_presult {
 public:


  virtual ~host_agent_service_delete_snapshot_presult() throw();
  delete_snapshot_result* success;
  invalid_operation ouch;

  _host_agent_service_delete_snapshot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _host_agent_service_delete_snapshot_set_args__isset {
  _host_agent_service_delete_snapshot_set_args__isset() : session_id(false), snapshot_set_id(false) {}
  bool session_id :1;
  bool snapshot_set_id :1;
} _host_agent_service_delete_snapshot_set_args__isset;

class host_agent_service_delete_snapshot_set_args {
 public:

  host_agent_service_delete_snapshot_set_args(const host_agent_service_delete_snapshot_set_args&);
  host_agent_service_delete_snapshot_set_args& operator=(const host_agent_service_delete_snapshot_set_args&);
  host_agent_service_delete_snapshot_set_args() : session_id(), snapshot_set_id() {
  }

  virtual ~host_agent_service_delete_snapshot_set_args() throw();
  std::string session_id;
  std::string snapshot_set_id;

  _host_agent_service_delete_snapshot_set_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_snapshot_set_id(const std::string& val);

  bool operator == (const host_agent_service_delete_snapshot_set_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(snapshot_set_id == rhs.snapshot_set_id))
      return false;
    return true;
  }
  bool operator != (const host_agent_service_delete_snapshot_set_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const host_agent_service_delete_snapshot_set_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class host_agent_service_delete_snapshot_set_pargs {
 public:


  virtual ~host_agent_service_delete_snapshot_set_pargs() throw();
  const std::string* session_id;
  const std::string* snapshot_set_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _host_agent_service_delete_snapshot_set_result__isset {
  _host_agent_service_delete_snapshot_set_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _host_agent_service_delete_snapshot_set_result__isset;

class host_agent_service_delete_snapshot_set_result {
 public:

  host_agent_service_delete_snapshot_set_result(const host_agent_service_delete_snapshot_set_result&);
  host_agent_service_delete_snapshot_set_result& operator=(const host_agent_service_delete_snapshot_set_result&);
  host_agent_service_delete_snapshot_set_result() {
  }

  virtual ~host_agent_service_delete_snapshot_set_result() throw();
  delete_snapshot_result success;
  invalid_operation ouch;

  _host_agent_service_delete_snapshot_set_result__isset __isset;

  void __set_success(const delete_snapshot_result& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const host_agent_service_delete_snapshot_set_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const host_agent_service_delete_snapshot_set_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const host_agent_service_delete_snapshot_set_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _host_agent_service_delete_snapshot_set_presult__isset {
  _host_agent_service_delete_snapshot_set_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _host_agent_service_delete_snapshot_set_presult__isset;

class host_agent_service_delete_snapshot_set_presult {
 public:


  virtual ~host_agent_service_delete_snapshot_set_presult() throw();
  delete_snapshot_result* success;
  invalid_operation ouch;

  _host_agent_service_delete_snapshot_set_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _host_agent_service_exit_args__isset {
  _host_agent_service_exit_args__isset() : session_id(false) {}
  bool session_id :1;
} _host_agent_service_exit_args__isset;

class host_agent_service_exit_args {
 public:

  host_agent_service_exit_args(const host_agent_service_exit_args&);
  host_agent_service_exit_args& operator=(const host_agent_service_exit_args&);
  host_agent_service_exit_args() : session_id() {
  }

  virtual ~host_agent_service_exit_args() throw();
  std::string session_id;

  _host_agent_service_exit_args__isset __isset;

  void __set_session_id(const std::string& val);

  bool operator == (const host_agent_service_exit_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const host_agent_service_exit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const host_agent_service_exit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class host_agent_service_exit_pargs {
 public:


  virtual ~host_agent_service_exit_pargs() throw();
  const std::string* session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class host_agent_service_exit_result {
 public:

  host_agent_service_exit_result(const host_agent_service_exit_result&);
  host_agent_service_exit_result& operator=(const host_agent_service_exit_result&);
  host_agent_service_exit_result() {
  }

  virtual ~host_agent_service_exit_result() throw();

  bool operator == (const host_agent_service_exit_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const host_agent_service_exit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const host_agent_service_exit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class host_agent_service_exit_presult {
 public:


  virtual ~host_agent_service_exit_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class host_agent_serviceClient : virtual public host_agent_serviceIf {
 public:
  host_agent_serviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  host_agent_serviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_client_info(client_info& _return, const std::string& session_id);
  void send_get_client_info(const std::string& session_id);
  void recv_get_client_info(client_info& _return);
  void take_snapshots(snapshot_result& _return, const std::string& session_id, const std::set<int32_t> & disks);
  void send_take_snapshots(const std::string& session_id, const std::set<int32_t> & disks);
  void recv_take_snapshots(snapshot_result& _return);
  void get_latest_snapshots_info(snapshot_result& _return, const std::string& session_id);
  void send_get_latest_snapshots_info(const std::string& session_id);
  void recv_get_latest_snapshots_info(snapshot_result& _return);
  void replicate_disk(replication_result& _return, const std::string& session_id, const int32_t disk, const int64_t start, const int32_t length, const bool be_compressed);
  void send_replicate_disk(const std::string& session_id, const int32_t disk, const int64_t start, const int32_t length, const bool be_compressed);
  void recv_replicate_disk(replication_result& _return);
  void replicate_snapshot(replication_result& _return, const std::string& session_id, const std::string& snapshot_id, const int64_t start, const int32_t length, const bool be_compressed);
  void send_replicate_snapshot(const std::string& session_id, const std::string& snapshot_id, const int64_t start, const int32_t length, const bool be_compressed);
  void recv_replicate_snapshot(replication_result& _return);
  void get_snapshot_bit_map(volume_bit_map& _return, const std::string& session_id, const std::string& snapshot_id, const int64_t start, const bool be_compressed);
  void send_get_snapshot_bit_map(const std::string& session_id, const std::string& snapshot_id, const int64_t start, const bool be_compressed);
  void recv_get_snapshot_bit_map(volume_bit_map& _return);
  void delete_snapshot(delete_snapshot_result& _return, const std::string& session_id, const std::string& snapshot_id);
  void send_delete_snapshot(const std::string& session_id, const std::string& snapshot_id);
  void recv_delete_snapshot(delete_snapshot_result& _return);
  void delete_snapshot_set(delete_snapshot_result& _return, const std::string& session_id, const std::string& snapshot_set_id);
  void send_delete_snapshot_set(const std::string& session_id, const std::string& snapshot_set_id);
  void recv_delete_snapshot_set(delete_snapshot_result& _return);
  void exit(const std::string& session_id);
  void send_exit(const std::string& session_id);
  void recv_exit();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class host_agent_serviceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<host_agent_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (host_agent_serviceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_client_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_take_snapshots(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_latest_snapshots_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_replicate_disk(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_replicate_snapshot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_snapshot_bit_map(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_snapshot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_snapshot_set(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_exit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  host_agent_serviceProcessor(boost::shared_ptr<host_agent_serviceIf> iface) :
    iface_(iface) {
    processMap_["get_client_info"] = &host_agent_serviceProcessor::process_get_client_info;
    processMap_["take_snapshots"] = &host_agent_serviceProcessor::process_take_snapshots;
    processMap_["get_latest_snapshots_info"] = &host_agent_serviceProcessor::process_get_latest_snapshots_info;
    processMap_["replicate_disk"] = &host_agent_serviceProcessor::process_replicate_disk;
    processMap_["replicate_snapshot"] = &host_agent_serviceProcessor::process_replicate_snapshot;
    processMap_["get_snapshot_bit_map"] = &host_agent_serviceProcessor::process_get_snapshot_bit_map;
    processMap_["delete_snapshot"] = &host_agent_serviceProcessor::process_delete_snapshot;
    processMap_["delete_snapshot_set"] = &host_agent_serviceProcessor::process_delete_snapshot_set;
    processMap_["exit"] = &host_agent_serviceProcessor::process_exit;
  }

  virtual ~host_agent_serviceProcessor() {}
};

class host_agent_serviceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  host_agent_serviceProcessorFactory(const ::boost::shared_ptr< host_agent_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< host_agent_serviceIfFactory > handlerFactory_;
};

class host_agent_serviceMultiface : virtual public host_agent_serviceIf {
 public:
  host_agent_serviceMultiface(std::vector<boost::shared_ptr<host_agent_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~host_agent_serviceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<host_agent_serviceIf> > ifaces_;
  host_agent_serviceMultiface() {}
  void add(boost::shared_ptr<host_agent_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get_client_info(client_info& _return, const std::string& session_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_client_info(_return, session_id);
    }
    ifaces_[i]->get_client_info(_return, session_id);
    return;
  }

  void take_snapshots(snapshot_result& _return, const std::string& session_id, const std::set<int32_t> & disks) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->take_snapshots(_return, session_id, disks);
    }
    ifaces_[i]->take_snapshots(_return, session_id, disks);
    return;
  }

  void get_latest_snapshots_info(snapshot_result& _return, const std::string& session_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_latest_snapshots_info(_return, session_id);
    }
    ifaces_[i]->get_latest_snapshots_info(_return, session_id);
    return;
  }

  void replicate_disk(replication_result& _return, const std::string& session_id, const int32_t disk, const int64_t start, const int32_t length, const bool be_compressed) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->replicate_disk(_return, session_id, disk, start, length, be_compressed);
    }
    ifaces_[i]->replicate_disk(_return, session_id, disk, start, length, be_compressed);
    return;
  }

  void replicate_snapshot(replication_result& _return, const std::string& session_id, const std::string& snapshot_id, const int64_t start, const int32_t length, const bool be_compressed) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->replicate_snapshot(_return, session_id, snapshot_id, start, length, be_compressed);
    }
    ifaces_[i]->replicate_snapshot(_return, session_id, snapshot_id, start, length, be_compressed);
    return;
  }

  void get_snapshot_bit_map(volume_bit_map& _return, const std::string& session_id, const std::string& snapshot_id, const int64_t start, const bool be_compressed) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_snapshot_bit_map(_return, session_id, snapshot_id, start, be_compressed);
    }
    ifaces_[i]->get_snapshot_bit_map(_return, session_id, snapshot_id, start, be_compressed);
    return;
  }

  void delete_snapshot(delete_snapshot_result& _return, const std::string& session_id, const std::string& snapshot_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_snapshot(_return, session_id, snapshot_id);
    }
    ifaces_[i]->delete_snapshot(_return, session_id, snapshot_id);
    return;
  }

  void delete_snapshot_set(delete_snapshot_result& _return, const std::string& session_id, const std::string& snapshot_set_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_snapshot_set(_return, session_id, snapshot_set_id);
    }
    ifaces_[i]->delete_snapshot_set(_return, session_id, snapshot_set_id);
    return;
  }

  void exit(const std::string& session_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->exit(session_id);
    }
    ifaces_[i]->exit(session_id);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class host_agent_serviceConcurrentClient : virtual public host_agent_serviceIf {
 public:
  host_agent_serviceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  host_agent_serviceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_client_info(client_info& _return, const std::string& session_id);
  int32_t send_get_client_info(const std::string& session_id);
  void recv_get_client_info(client_info& _return, const int32_t seqid);
  void take_snapshots(snapshot_result& _return, const std::string& session_id, const std::set<int32_t> & disks);
  int32_t send_take_snapshots(const std::string& session_id, const std::set<int32_t> & disks);
  void recv_take_snapshots(snapshot_result& _return, const int32_t seqid);
  void get_latest_snapshots_info(snapshot_result& _return, const std::string& session_id);
  int32_t send_get_latest_snapshots_info(const std::string& session_id);
  void recv_get_latest_snapshots_info(snapshot_result& _return, const int32_t seqid);
  void replicate_disk(replication_result& _return, const std::string& session_id, const int32_t disk, const int64_t start, const int32_t length, const bool be_compressed);
  int32_t send_replicate_disk(const std::string& session_id, const int32_t disk, const int64_t start, const int32_t length, const bool be_compressed);
  void recv_replicate_disk(replication_result& _return, const int32_t seqid);
  void replicate_snapshot(replication_result& _return, const std::string& session_id, const std::string& snapshot_id, const int64_t start, const int32_t length, const bool be_compressed);
  int32_t send_replicate_snapshot(const std::string& session_id, const std::string& snapshot_id, const int64_t start, const int32_t length, const bool be_compressed);
  void recv_replicate_snapshot(replication_result& _return, const int32_t seqid);
  void get_snapshot_bit_map(volume_bit_map& _return, const std::string& session_id, const std::string& snapshot_id, const int64_t start, const bool be_compressed);
  int32_t send_get_snapshot_bit_map(const std::string& session_id, const std::string& snapshot_id, const int64_t start, const bool be_compressed);
  void recv_get_snapshot_bit_map(volume_bit_map& _return, const int32_t seqid);
  void delete_snapshot(delete_snapshot_result& _return, const std::string& session_id, const std::string& snapshot_id);
  int32_t send_delete_snapshot(const std::string& session_id, const std::string& snapshot_id);
  void recv_delete_snapshot(delete_snapshot_result& _return, const int32_t seqid);
  void delete_snapshot_set(delete_snapshot_result& _return, const std::string& session_id, const std::string& snapshot_set_id);
  int32_t send_delete_snapshot_set(const std::string& session_id, const std::string& snapshot_set_id);
  void recv_delete_snapshot_set(delete_snapshot_result& _return, const int32_t seqid);
  void exit(const std::string& session_id);
  int32_t send_exit(const std::string& session_id);
  void recv_exit(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

class host_agent_serviceCobClient;

class host_agent_serviceCobClIf {
 public:
  virtual ~host_agent_serviceCobClIf() {}
  virtual void get_client_info(tcxx::function<void(host_agent_serviceCobClient* client)> cob, const std::string& session_id) = 0;
  virtual void take_snapshots(tcxx::function<void(host_agent_serviceCobClient* client)> cob, const std::string& session_id, const std::set<int32_t> & disks) = 0;
  virtual void get_latest_snapshots_info(tcxx::function<void(host_agent_serviceCobClient* client)> cob, const std::string& session_id) = 0;
  virtual void replicate_disk(tcxx::function<void(host_agent_serviceCobClient* client)> cob, const std::string& session_id, const int32_t disk, const int64_t start, const int32_t length, const bool be_compressed) = 0;
  virtual void replicate_snapshot(tcxx::function<void(host_agent_serviceCobClient* client)> cob, const std::string& session_id, const std::string& snapshot_id, const int64_t start, const int32_t length, const bool be_compressed) = 0;
  virtual void get_snapshot_bit_map(tcxx::function<void(host_agent_serviceCobClient* client)> cob, const std::string& session_id, const std::string& snapshot_id, const int64_t start, const bool be_compressed) = 0;
  virtual void delete_snapshot(tcxx::function<void(host_agent_serviceCobClient* client)> cob, const std::string& session_id, const std::string& snapshot_id) = 0;
  virtual void delete_snapshot_set(tcxx::function<void(host_agent_serviceCobClient* client)> cob, const std::string& session_id, const std::string& snapshot_set_id) = 0;
  virtual void exit(tcxx::function<void(host_agent_serviceCobClient* client)> cob, const std::string& session_id) = 0;
};

class host_agent_serviceCobSvIf {
 public:
  virtual ~host_agent_serviceCobSvIf() {}
  virtual void get_client_info(tcxx::function<void(client_info const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id) = 0;
  virtual void take_snapshots(tcxx::function<void(snapshot_result const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::set<int32_t> & disks) = 0;
  virtual void get_latest_snapshots_info(tcxx::function<void(snapshot_result const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id) = 0;
  virtual void replicate_disk(tcxx::function<void(replication_result const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const int32_t disk, const int64_t start, const int32_t length, const bool be_compressed) = 0;
  virtual void replicate_snapshot(tcxx::function<void(replication_result const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& snapshot_id, const int64_t start, const int32_t length, const bool be_compressed) = 0;
  virtual void get_snapshot_bit_map(tcxx::function<void(volume_bit_map const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& snapshot_id, const int64_t start, const bool be_compressed) = 0;
  virtual void delete_snapshot(tcxx::function<void(delete_snapshot_result const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& snapshot_id) = 0;
  virtual void delete_snapshot_set(tcxx::function<void(delete_snapshot_result const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& snapshot_set_id) = 0;
  virtual void exit(tcxx::function<void()> cob, const std::string& session_id) = 0;
};

class host_agent_serviceCobSvIfFactory {
 public:
  typedef host_agent_serviceCobSvIf Handler;

  virtual ~host_agent_serviceCobSvIfFactory() {}

  virtual host_agent_serviceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(host_agent_serviceCobSvIf* /* handler */) = 0;
};

class host_agent_serviceCobSvIfSingletonFactory : virtual public host_agent_serviceCobSvIfFactory {
 public:
  host_agent_serviceCobSvIfSingletonFactory(const boost::shared_ptr<host_agent_serviceCobSvIf>& iface) : iface_(iface) {}
  virtual ~host_agent_serviceCobSvIfSingletonFactory() {}

  virtual host_agent_serviceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(host_agent_serviceCobSvIf* /* handler */) {}

 protected:
  boost::shared_ptr<host_agent_serviceCobSvIf> iface_;
};

class host_agent_serviceCobSvNull : virtual public host_agent_serviceCobSvIf {
 public:
  virtual ~host_agent_serviceCobSvNull() {}
  void get_client_info(tcxx::function<void(client_info const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */) {
    client_info _return;
    return cob(_return);
  }
  void take_snapshots(tcxx::function<void(snapshot_result const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::set<int32_t> & /* disks */) {
    snapshot_result _return;
    return cob(_return);
  }
  void get_latest_snapshots_info(tcxx::function<void(snapshot_result const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */) {
    snapshot_result _return;
    return cob(_return);
  }
  void replicate_disk(tcxx::function<void(replication_result const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const int32_t /* disk */, const int64_t /* start */, const int32_t /* length */, const bool /* be_compressed */) {
    replication_result _return;
    return cob(_return);
  }
  void replicate_snapshot(tcxx::function<void(replication_result const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* snapshot_id */, const int64_t /* start */, const int32_t /* length */, const bool /* be_compressed */) {
    replication_result _return;
    return cob(_return);
  }
  void get_snapshot_bit_map(tcxx::function<void(volume_bit_map const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* snapshot_id */, const int64_t /* start */, const bool /* be_compressed */) {
    volume_bit_map _return;
    return cob(_return);
  }
  void delete_snapshot(tcxx::function<void(delete_snapshot_result const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* snapshot_id */) {
    delete_snapshot_result _return;
    return cob(_return);
  }
  void delete_snapshot_set(tcxx::function<void(delete_snapshot_result const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* snapshot_set_id */) {
    delete_snapshot_result _return;
    return cob(_return);
  }
  void exit(tcxx::function<void()> cob, const std::string& /* session_id */) {
    return cob();
  }
};

class host_agent_serviceCobClient : virtual public host_agent_serviceCobClIf {
 public:
  host_agent_serviceCobClient(boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    channel_(channel),
    itrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    otrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    piprot_(protocolFactory->getProtocol(itrans_)),
    poprot_(protocolFactory->getProtocol(otrans_)) {
    iprot_ = piprot_.get();
    oprot_ = poprot_.get();
  }
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void get_client_info(tcxx::function<void(host_agent_serviceCobClient* client)> cob, const std::string& session_id);
  void send_get_client_info(const std::string& session_id);
  void recv_get_client_info(client_info& _return);
  void take_snapshots(tcxx::function<void(host_agent_serviceCobClient* client)> cob, const std::string& session_id, const std::set<int32_t> & disks);
  void send_take_snapshots(const std::string& session_id, const std::set<int32_t> & disks);
  void recv_take_snapshots(snapshot_result& _return);
  void get_latest_snapshots_info(tcxx::function<void(host_agent_serviceCobClient* client)> cob, const std::string& session_id);
  void send_get_latest_snapshots_info(const std::string& session_id);
  void recv_get_latest_snapshots_info(snapshot_result& _return);
  void replicate_disk(tcxx::function<void(host_agent_serviceCobClient* client)> cob, const std::string& session_id, const int32_t disk, const int64_t start, const int32_t length, const bool be_compressed);
  void send_replicate_disk(const std::string& session_id, const int32_t disk, const int64_t start, const int32_t length, const bool be_compressed);
  void recv_replicate_disk(replication_result& _return);
  void replicate_snapshot(tcxx::function<void(host_agent_serviceCobClient* client)> cob, const std::string& session_id, const std::string& snapshot_id, const int64_t start, const int32_t length, const bool be_compressed);
  void send_replicate_snapshot(const std::string& session_id, const std::string& snapshot_id, const int64_t start, const int32_t length, const bool be_compressed);
  void recv_replicate_snapshot(replication_result& _return);
  void get_snapshot_bit_map(tcxx::function<void(host_agent_serviceCobClient* client)> cob, const std::string& session_id, const std::string& snapshot_id, const int64_t start, const bool be_compressed);
  void send_get_snapshot_bit_map(const std::string& session_id, const std::string& snapshot_id, const int64_t start, const bool be_compressed);
  void recv_get_snapshot_bit_map(volume_bit_map& _return);
  void delete_snapshot(tcxx::function<void(host_agent_serviceCobClient* client)> cob, const std::string& session_id, const std::string& snapshot_id);
  void send_delete_snapshot(const std::string& session_id, const std::string& snapshot_id);
  void recv_delete_snapshot(delete_snapshot_result& _return);
  void delete_snapshot_set(tcxx::function<void(host_agent_serviceCobClient* client)> cob, const std::string& session_id, const std::string& snapshot_set_id);
  void send_delete_snapshot_set(const std::string& session_id, const std::string& snapshot_set_id);
  void recv_delete_snapshot_set(delete_snapshot_result& _return);
  void exit(tcxx::function<void(host_agent_serviceCobClient* client)> cob, const std::string& session_id);
  void send_exit(const std::string& session_id);
  void recv_exit();
 protected:
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> itrans_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> otrans_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class host_agent_serviceAsyncProcessor : public ::apache::thrift::async::TAsyncDispatchProcessor {
 protected:
  boost::shared_ptr<host_agent_serviceCobSvIf> iface_;
  virtual void dispatchCall(tcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (host_agent_serviceAsyncProcessor::*ProcessFunction)(tcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_client_info(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_client_info(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const client_info& _return);
  void throw_get_client_info(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_take_snapshots(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_take_snapshots(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const snapshot_result& _return);
  void throw_take_snapshots(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_latest_snapshots_info(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_latest_snapshots_info(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const snapshot_result& _return);
  void throw_get_latest_snapshots_info(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_replicate_disk(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_replicate_disk(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const replication_result& _return);
  void throw_replicate_disk(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_replicate_snapshot(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_replicate_snapshot(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const replication_result& _return);
  void throw_replicate_snapshot(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_snapshot_bit_map(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_snapshot_bit_map(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const volume_bit_map& _return);
  void throw_get_snapshot_bit_map(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_delete_snapshot(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_delete_snapshot(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const delete_snapshot_result& _return);
  void throw_delete_snapshot(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_delete_snapshot_set(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_delete_snapshot_set(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const delete_snapshot_result& _return);
  void throw_delete_snapshot_set(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_exit(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_exit(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx);
  void throw_exit(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  host_agent_serviceAsyncProcessor(boost::shared_ptr<host_agent_serviceCobSvIf> iface) :
    iface_(iface) {
    processMap_["get_client_info"] = &host_agent_serviceAsyncProcessor::process_get_client_info;
    processMap_["take_snapshots"] = &host_agent_serviceAsyncProcessor::process_take_snapshots;
    processMap_["get_latest_snapshots_info"] = &host_agent_serviceAsyncProcessor::process_get_latest_snapshots_info;
    processMap_["replicate_disk"] = &host_agent_serviceAsyncProcessor::process_replicate_disk;
    processMap_["replicate_snapshot"] = &host_agent_serviceAsyncProcessor::process_replicate_snapshot;
    processMap_["get_snapshot_bit_map"] = &host_agent_serviceAsyncProcessor::process_get_snapshot_bit_map;
    processMap_["delete_snapshot"] = &host_agent_serviceAsyncProcessor::process_delete_snapshot;
    processMap_["delete_snapshot_set"] = &host_agent_serviceAsyncProcessor::process_delete_snapshot_set;
    processMap_["exit"] = &host_agent_serviceAsyncProcessor::process_exit;
  }

  virtual ~host_agent_serviceAsyncProcessor() {}
};

class host_agent_serviceAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  host_agent_serviceAsyncProcessorFactory(const ::boost::shared_ptr< host_agent_serviceCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< host_agent_serviceCobSvIfFactory > handlerFactory_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}} // namespace

#endif
