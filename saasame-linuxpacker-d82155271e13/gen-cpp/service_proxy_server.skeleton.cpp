// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "service_proxy.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::saasame::transport;

class service_proxyHandler : virtual public service_proxyIf {
 public:
  service_proxyHandler() {
    // Your initialization goes here
  }

  void create_job_ex_p(job_detail& _return, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type) {
    // Your implementation goes here
    printf("create_job_ex_p\n");
  }

  void get_job_p(job_detail& _return, const std::string& session_id, const std::string& job_id, const std::string& service_type) {
    // Your implementation goes here
    printf("get_job_p\n");
  }

  bool interrupt_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type) {
    // Your implementation goes here
    printf("interrupt_job_p\n");
  }

  bool resume_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type) {
    // Your implementation goes here
    printf("resume_job_p\n");
  }

  bool remove_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type) {
    // Your implementation goes here
    printf("remove_job_p\n");
  }

  bool running_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type) {
    // Your implementation goes here
    printf("running_job_p\n");
  }

  bool update_job_p(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type) {
    // Your implementation goes here
    printf("update_job_p\n");
  }

  bool remove_snapshot_image_p(const std::string& session_id, const std::map<std::string, image_map_info> & images, const std::string& service_type) {
    // Your implementation goes here
    printf("remove_snapshot_image_p\n");
  }

  bool test_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type) {
    // Your implementation goes here
    printf("test_connection_p\n");
  }

  bool add_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type) {
    // Your implementation goes here
    printf("add_connection_p\n");
  }

  bool remove_connection_p(const std::string& session_id, const std::string& connection_id, const std::string& service_type) {
    // Your implementation goes here
    printf("remove_connection_p\n");
  }

  bool modify_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type) {
    // Your implementation goes here
    printf("modify_connection_p\n");
  }

  void enumerate_connections_p(std::vector<connection> & _return, const std::string& session_id, const std::string& service_type) {
    // Your implementation goes here
    printf("enumerate_connections_p\n");
  }

  void get_connection_p(connection& _return, const std::string& session_id, const std::string& connection_id, const std::string& service_type) {
    // Your implementation goes here
    printf("get_connection_p\n");
  }

  void get_virtual_host_info_p(virtual_host& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) {
    // Your implementation goes here
    printf("get_virtual_host_info_p\n");
  }

  void get_virtual_machine_detail_p(virtual_machine& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) {
    // Your implementation goes here
    printf("get_virtual_machine_detail_p\n");
  }

  void get_physical_machine_detail_p(physical_machine_info& _return, const std::string& session_id, const std::string& host, const machine_detail_filter::type filter) {
    // Your implementation goes here
    printf("get_physical_machine_detail_p\n");
  }

  bool verify_packer_to_carrier_p(const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl) {
    // Your implementation goes here
    printf("verify_packer_to_carrier_p\n");
  }

  void take_packer_xray_p(std::string& _return, const std::string& session_id, const std::string& host) {
    // Your implementation goes here
    printf("take_packer_xray_p\n");
  }

  void get_packer_service_info_p(service_info& _return, const std::string& session_id, const std::string& host) {
    // Your implementation goes here
    printf("get_packer_service_info_p\n");
  }

  bool set_customized_id_p(const std::string& session_id, const std::string& disk_addr, const std::string& disk_id) {
    // Your implementation goes here
    printf("set_customized_id_p\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<service_proxyHandler> handler(new service_proxyHandler());
  shared_ptr<TProcessor> processor(new service_proxyProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

