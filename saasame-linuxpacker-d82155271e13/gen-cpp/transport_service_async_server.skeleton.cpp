// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "transport_service.h"
#include <thrift/protocol/TBinaryProtocol.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

using boost::shared_ptr;

using namespace  ::saasame::transport;

class transport_serviceAsyncHandler : public transport_serviceCobSvIf {
 public:
  transport_serviceAsyncHandler() {
    syncHandler_ = std::auto_ptr<transport_serviceHandler>(new transport_serviceHandler);
    // Your initialization goes here
  }
  virtual ~transport_serviceAsyncHandler();

  void generate_session(tcxx::function<void(std::string const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr) {
    std::string _return;
    syncHandler_->generate_session(_return, addr);
    return cob(_return);
  }

  void get_package_info(tcxx::function<void(std::string const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& email, const std::string& name, const std::string& key) {
    std::string _return;
    syncHandler_->get_package_info(_return, email, name, key);
    return cob(_return);
  }

  void active_license(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& email, const std::string& name, const std::string& key) {
    bool _return = false;
    _return = syncHandler_->active_license(email, name, key);
    return cob(_return);
  }

  void add_license(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& license) {
    bool _return = false;
    _return = syncHandler_->add_license(license);
    return cob(_return);
  }

  void add_license_with_key(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& key, const std::string& license) {
    bool _return = false;
    _return = syncHandler_->add_license_with_key(key, license);
    return cob(_return);
  }

  void get_licenses(tcxx::function<void(license_infos const& _return)> cob) {
    license_infos _return;
    syncHandler_->get_licenses(_return);
    return cob(_return);
  }

  void check_license_expiration(tcxx::function<void(bool const& _return)> cob, const int8_t days) {
    bool _return = false;
    _return = syncHandler_->check_license_expiration(days);
    return cob(_return);
  }

  void is_license_valid(tcxx::function<void(bool const& _return)> cob, const std::string& job_id) {
    bool _return = false;
    _return = syncHandler_->is_license_valid(job_id);
    return cob(_return);
  }

  void is_license_valid_ex(tcxx::function<void(bool const& _return)> cob, const std::string& job_id, const bool is_recovery) {
    bool _return = false;
    _return = syncHandler_->is_license_valid_ex(job_id, is_recovery);
    return cob(_return);
  }

  void remove_license(tcxx::function<void(bool const& _return)> cob, const std::string& key) {
    bool _return = false;
    _return = syncHandler_->remove_license(key);
    return cob(_return);
  }

  void query_package_info(tcxx::function<void(std::string const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& key) {
    std::string _return;
    syncHandler_->query_package_info(_return, key);
    return cob(_return);
  }

  void create_task(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const running_task& task) {
    bool _return = false;
    _return = syncHandler_->create_task(task);
    return cob(_return);
  }

  void remove_task(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& task_id) {
    bool _return = false;
    _return = syncHandler_->remove_task(task_id);
    return cob(_return);
  }

  void ping_p(tcxx::function<void(service_info const& _return)> cob, const std::string& addr) {
    service_info _return;
    syncHandler_->ping_p(_return, addr);
    return cob(_return);
  }

  void get_host_detail_p(tcxx::function<void(physical_machine_info const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const machine_detail_filter::type filter) {
    physical_machine_info _return;
    syncHandler_->get_host_detail_p(_return, addr, filter);
    return cob(_return);
  }

  void get_service_list_p(tcxx::function<void(std::set<service_info>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr) {
    std::set<service_info>  _return;
    syncHandler_->get_service_list_p(_return, addr);
    return cob(_return);
  }

  void enumerate_disks_p(tcxx::function<void(std::set<disk_info>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const enumerate_disk_filter_style::type filter) {
    std::set<disk_info>  _return;
    syncHandler_->enumerate_disks_p(_return, addr, filter);
    return cob(_return);
  }

  void verify_carrier_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& carrier, const bool is_ssl) {
    bool _return = false;
    _return = syncHandler_->verify_carrier_p(addr, carrier, is_ssl);
    return cob(_return);
  }

  void take_xray_p(tcxx::function<void(std::string const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr) {
    std::string _return;
    syncHandler_->take_xray_p(_return, addr);
    return cob(_return);
  }

  void take_xrays_p(tcxx::function<void(std::string const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr) {
    std::string _return;
    syncHandler_->take_xrays_p(_return, addr);
    return cob(_return);
  }

  void create_mutex_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& session, const int16_t timeout) {
    bool _return = false;
    _return = syncHandler_->create_mutex_p(addr, session, timeout);
    return cob(_return);
  }

  void delete_mutex_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& session) {
    bool _return = false;
    _return = syncHandler_->delete_mutex_p(addr, session);
    return cob(_return);
  }

  void create_job_ex_p(tcxx::function<void(job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type) {
    job_detail _return;
    syncHandler_->create_job_ex_p(_return, addr, job_id, create_job, service_type);
    return cob(_return);
  }

  void get_job_p(tcxx::function<void(job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& job_id, const std::string& service_type) {
    job_detail _return;
    syncHandler_->get_job_p(_return, addr, job_id, service_type);
    return cob(_return);
  }

  void interrupt_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& job_id, const std::string& service_type) {
    bool _return = false;
    _return = syncHandler_->interrupt_job_p(addr, job_id, service_type);
    return cob(_return);
  }

  void resume_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& job_id, const std::string& service_type) {
    bool _return = false;
    _return = syncHandler_->resume_job_p(addr, job_id, service_type);
    return cob(_return);
  }

  void remove_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& job_id, const std::string& service_type) {
    bool _return = false;
    _return = syncHandler_->remove_job_p(addr, job_id, service_type);
    return cob(_return);
  }

  void running_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& job_id, const std::string& service_type) {
    bool _return = false;
    _return = syncHandler_->running_job_p(addr, job_id, service_type);
    return cob(_return);
  }

  void update_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type) {
    bool _return = false;
    _return = syncHandler_->update_job_p(addr, job_id, create_job, service_type);
    return cob(_return);
  }

  void remove_snapshot_image_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::map<std::string, image_map_info> & images, const std::string& service_type) {
    bool _return = false;
    _return = syncHandler_->remove_snapshot_image_p(addr, images, service_type);
    return cob(_return);
  }

  void test_connection_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const connection& conn, const std::string& service_type) {
    bool _return = false;
    _return = syncHandler_->test_connection_p(addr, conn, service_type);
    return cob(_return);
  }

  void add_connection_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const connection& conn, const std::string& service_type) {
    bool _return = false;
    _return = syncHandler_->add_connection_p(addr, conn, service_type);
    return cob(_return);
  }

  void remove_connection_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& connection_id, const std::string& service_type) {
    bool _return = false;
    _return = syncHandler_->remove_connection_p(addr, connection_id, service_type);
    return cob(_return);
  }

  void modify_connection_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const connection& conn, const std::string& service_type) {
    bool _return = false;
    _return = syncHandler_->modify_connection_p(addr, conn, service_type);
    return cob(_return);
  }

  void enumerate_connections_p(tcxx::function<void(std::vector<connection>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& service_type) {
    std::vector<connection>  _return;
    syncHandler_->enumerate_connections_p(_return, addr, service_type);
    return cob(_return);
  }

  void get_connection_p(tcxx::function<void(connection const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& connection_id, const std::string& service_type) {
    connection _return;
    syncHandler_->get_connection_p(_return, addr, connection_id, service_type);
    return cob(_return);
  }

  void get_virtual_host_info_p(tcxx::function<void(virtual_host const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& host, const std::string& username, const std::string& password) {
    virtual_host _return;
    syncHandler_->get_virtual_host_info_p(_return, addr, host, username, password);
    return cob(_return);
  }

  void get_virtual_machine_detail_p(tcxx::function<void(virtual_machine const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) {
    virtual_machine _return;
    syncHandler_->get_virtual_machine_detail_p(_return, addr, host, username, password, machine_id);
    return cob(_return);
  }

  void get_physical_machine_detail_p(tcxx::function<void(physical_machine_info const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& host, const machine_detail_filter::type filter) {
    physical_machine_info _return;
    syncHandler_->get_physical_machine_detail_p(_return, addr, host, filter);
    return cob(_return);
  }

  void take_packer_xray_p(tcxx::function<void(std::string const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& host) {
    std::string _return;
    syncHandler_->take_packer_xray_p(_return, addr, host);
    return cob(_return);
  }

  void get_packer_service_info_p(tcxx::function<void(service_info const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& host) {
    service_info _return;
    syncHandler_->get_packer_service_info_p(_return, addr, host);
    return cob(_return);
  }

  void verify_management_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& management, const int32_t port, const bool is_ssl) {
    bool _return = false;
    _return = syncHandler_->verify_management_p(addr, management, port, is_ssl);
    return cob(_return);
  }

  void verify_packer_to_carrier_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl) {
    bool _return = false;
    _return = syncHandler_->verify_packer_to_carrier_p(addr, packer, carrier, port, is_ssl);
    return cob(_return);
  }

  void get_replica_job_create_detail(tcxx::function<void(replica_job_create_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) {
    replica_job_create_detail _return;
    syncHandler_->get_replica_job_create_detail(_return, session_id, job_id);
    return cob(_return);
  }

  void get_loader_job_create_detail(tcxx::function<void(loader_job_create_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) {
    loader_job_create_detail _return;
    syncHandler_->get_loader_job_create_detail(_return, session_id, job_id);
    return cob(_return);
  }

  void get_launcher_job_create_detail(tcxx::function<void(launcher_job_create_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) {
    launcher_job_create_detail _return;
    syncHandler_->get_launcher_job_create_detail(_return, session_id, job_id);
    return cob(_return);
  }

  void terminate(tcxx::function<void()> cob, const std::string& session_id) {
    syncHandler_->terminate(session_id);
    return cob();
  }

  void set_customized_id_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr, const std::string& disk_addr, const std::string& disk_id) {
    bool _return = false;
    _return = syncHandler_->set_customized_id_p(addr, disk_addr, disk_id);
    return cob(_return);
  }

  void unregister_packer_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr) {
    bool _return = false;
    _return = syncHandler_->unregister_packer_p(addr);
    return cob(_return);
  }

  void unregister_server_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr) {
    bool _return = false;
    _return = syncHandler_->unregister_server_p(addr);
    return cob(_return);
  }

  void create_vhd_disk_from_snapshot(tcxx::function<void(std::string const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& connection_string, const std::string& container, const std::string& original_disk_name, const std::string& target_disk_name, const std::string& snapshot) {
    std::string _return;
    syncHandler_->create_vhd_disk_from_snapshot(_return, connection_string, container, original_disk_name, target_disk_name, snapshot);
    return cob(_return);
  }

  void is_snapshot_vhd_disk_ready(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& task_id) {
    bool _return = false;
    _return = syncHandler_->is_snapshot_vhd_disk_ready(task_id);
    return cob(_return);
  }

  void delete_vhd_disk(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& connection_string, const std::string& container, const std::string& disk_name) {
    bool _return = false;
    _return = syncHandler_->delete_vhd_disk(connection_string, container, disk_name);
    return cob(_return);
  }

  void delete_vhd_disk_snapshot(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& connection_string, const std::string& container, const std::string& disk_name, const std::string& snapshot) {
    bool _return = false;
    _return = syncHandler_->delete_vhd_disk_snapshot(connection_string, container, disk_name, snapshot);
    return cob(_return);
  }

  void get_vhd_disk_snapshots(tcxx::function<void(std::vector<vhd_snapshot>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& connection_string, const std::string& container, const std::string& disk_name) {
    std::vector<vhd_snapshot>  _return;
    syncHandler_->get_vhd_disk_snapshots(_return, connection_string, container, disk_name);
    return cob(_return);
  }

  void verify_connection_string(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& connection_string) {
    bool _return = false;
    _return = syncHandler_->verify_connection_string(connection_string);
    return cob(_return);
  }

 protected:
  std::auto_ptr<transport_serviceHandler> syncHandler_;
};

