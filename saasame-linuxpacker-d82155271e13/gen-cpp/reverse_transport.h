/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef reverse_transport_H
#define reverse_transport_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/cxxfunctional.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "saasame_types.h"

namespace saasame { namespace transport {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class reverse_transportIf {
 public:
  virtual ~reverse_transportIf() {}
  virtual void ping(service_info& _return) = 0;
  virtual void generate_session(std::string& _return, const std::string& addr) = 0;
  virtual void receive(transport_message& _return, const std::string& session, const std::string& addr, const std::string& name) = 0;
  virtual bool response(const std::string& session, const std::string& addr, const transport_message& response) = 0;
};

class reverse_transportIfFactory {
 public:
  typedef reverse_transportIf Handler;

  virtual ~reverse_transportIfFactory() {}

  virtual reverse_transportIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(reverse_transportIf* /* handler */) = 0;
};

class reverse_transportIfSingletonFactory : virtual public reverse_transportIfFactory {
 public:
  reverse_transportIfSingletonFactory(const boost::shared_ptr<reverse_transportIf>& iface) : iface_(iface) {}
  virtual ~reverse_transportIfSingletonFactory() {}

  virtual reverse_transportIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(reverse_transportIf* /* handler */) {}

 protected:
  boost::shared_ptr<reverse_transportIf> iface_;
};

class reverse_transportNull : virtual public reverse_transportIf {
 public:
  virtual ~reverse_transportNull() {}
  void ping(service_info& /* _return */) {
    return;
  }
  void generate_session(std::string& /* _return */, const std::string& /* addr */) {
    return;
  }
  void receive(transport_message& /* _return */, const std::string& /* session */, const std::string& /* addr */, const std::string& /* name */) {
    return;
  }
  bool response(const std::string& /* session */, const std::string& /* addr */, const transport_message& /* response */) {
    bool _return = false;
    return _return;
  }
};


class reverse_transport_ping_args {
 public:

  reverse_transport_ping_args(const reverse_transport_ping_args&);
  reverse_transport_ping_args& operator=(const reverse_transport_ping_args&);
  reverse_transport_ping_args() {
  }

  virtual ~reverse_transport_ping_args() throw();

  bool operator == (const reverse_transport_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const reverse_transport_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const reverse_transport_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class reverse_transport_ping_pargs {
 public:


  virtual ~reverse_transport_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _reverse_transport_ping_result__isset {
  _reverse_transport_ping_result__isset() : success(false) {}
  bool success :1;
} _reverse_transport_ping_result__isset;

class reverse_transport_ping_result {
 public:

  reverse_transport_ping_result(const reverse_transport_ping_result&);
  reverse_transport_ping_result& operator=(const reverse_transport_ping_result&);
  reverse_transport_ping_result() {
  }

  virtual ~reverse_transport_ping_result() throw();
  service_info success;

  _reverse_transport_ping_result__isset __isset;

  void __set_success(const service_info& val);

  bool operator == (const reverse_transport_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const reverse_transport_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const reverse_transport_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _reverse_transport_ping_presult__isset {
  _reverse_transport_ping_presult__isset() : success(false) {}
  bool success :1;
} _reverse_transport_ping_presult__isset;

class reverse_transport_ping_presult {
 public:


  virtual ~reverse_transport_ping_presult() throw();
  service_info* success;

  _reverse_transport_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _reverse_transport_generate_session_args__isset {
  _reverse_transport_generate_session_args__isset() : addr(false) {}
  bool addr :1;
} _reverse_transport_generate_session_args__isset;

class reverse_transport_generate_session_args {
 public:

  reverse_transport_generate_session_args(const reverse_transport_generate_session_args&);
  reverse_transport_generate_session_args& operator=(const reverse_transport_generate_session_args&);
  reverse_transport_generate_session_args() : addr() {
  }

  virtual ~reverse_transport_generate_session_args() throw();
  std::string addr;

  _reverse_transport_generate_session_args__isset __isset;

  void __set_addr(const std::string& val);

  bool operator == (const reverse_transport_generate_session_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    return true;
  }
  bool operator != (const reverse_transport_generate_session_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const reverse_transport_generate_session_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class reverse_transport_generate_session_pargs {
 public:


  virtual ~reverse_transport_generate_session_pargs() throw();
  const std::string* addr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _reverse_transport_generate_session_result__isset {
  _reverse_transport_generate_session_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _reverse_transport_generate_session_result__isset;

class reverse_transport_generate_session_result {
 public:

  reverse_transport_generate_session_result(const reverse_transport_generate_session_result&);
  reverse_transport_generate_session_result& operator=(const reverse_transport_generate_session_result&);
  reverse_transport_generate_session_result() : success() {
  }

  virtual ~reverse_transport_generate_session_result() throw();
  std::string success;
  invalid_operation ouch;

  _reverse_transport_generate_session_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const reverse_transport_generate_session_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const reverse_transport_generate_session_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const reverse_transport_generate_session_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _reverse_transport_generate_session_presult__isset {
  _reverse_transport_generate_session_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _reverse_transport_generate_session_presult__isset;

class reverse_transport_generate_session_presult {
 public:


  virtual ~reverse_transport_generate_session_presult() throw();
  std::string* success;
  invalid_operation ouch;

  _reverse_transport_generate_session_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _reverse_transport_receive_args__isset {
  _reverse_transport_receive_args__isset() : session(false), addr(false), name(false) {}
  bool session :1;
  bool addr :1;
  bool name :1;
} _reverse_transport_receive_args__isset;

class reverse_transport_receive_args {
 public:

  reverse_transport_receive_args(const reverse_transport_receive_args&);
  reverse_transport_receive_args& operator=(const reverse_transport_receive_args&);
  reverse_transport_receive_args() : session(), addr(), name() {
  }

  virtual ~reverse_transport_receive_args() throw();
  std::string session;
  std::string addr;
  std::string name;

  _reverse_transport_receive_args__isset __isset;

  void __set_session(const std::string& val);

  void __set_addr(const std::string& val);

  void __set_name(const std::string& val);

  bool operator == (const reverse_transport_receive_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(addr == rhs.addr))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const reverse_transport_receive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const reverse_transport_receive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class reverse_transport_receive_pargs {
 public:


  virtual ~reverse_transport_receive_pargs() throw();
  const std::string* session;
  const std::string* addr;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _reverse_transport_receive_result__isset {
  _reverse_transport_receive_result__isset() : success(false), ouch(false), empty(false), invalid(false) {}
  bool success :1;
  bool ouch :1;
  bool empty :1;
  bool invalid :1;
} _reverse_transport_receive_result__isset;

class reverse_transport_receive_result {
 public:

  reverse_transport_receive_result(const reverse_transport_receive_result&);
  reverse_transport_receive_result& operator=(const reverse_transport_receive_result&);
  reverse_transport_receive_result() {
  }

  virtual ~reverse_transport_receive_result() throw();
  transport_message success;
  invalid_operation ouch;
  command_empty empty;
  invalid_session invalid;

  _reverse_transport_receive_result__isset __isset;

  void __set_success(const transport_message& val);

  void __set_ouch(const invalid_operation& val);

  void __set_empty(const command_empty& val);

  void __set_invalid(const invalid_session& val);

  bool operator == (const reverse_transport_receive_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    if (!(empty == rhs.empty))
      return false;
    if (!(invalid == rhs.invalid))
      return false;
    return true;
  }
  bool operator != (const reverse_transport_receive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const reverse_transport_receive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _reverse_transport_receive_presult__isset {
  _reverse_transport_receive_presult__isset() : success(false), ouch(false), empty(false), invalid(false) {}
  bool success :1;
  bool ouch :1;
  bool empty :1;
  bool invalid :1;
} _reverse_transport_receive_presult__isset;

class reverse_transport_receive_presult {
 public:


  virtual ~reverse_transport_receive_presult() throw();
  transport_message* success;
  invalid_operation ouch;
  command_empty empty;
  invalid_session invalid;

  _reverse_transport_receive_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _reverse_transport_response_args__isset {
  _reverse_transport_response_args__isset() : session(false), addr(false), response(false) {}
  bool session :1;
  bool addr :1;
  bool response :1;
} _reverse_transport_response_args__isset;

class reverse_transport_response_args {
 public:

  reverse_transport_response_args(const reverse_transport_response_args&);
  reverse_transport_response_args& operator=(const reverse_transport_response_args&);
  reverse_transport_response_args() : session(), addr() {
  }

  virtual ~reverse_transport_response_args() throw();
  std::string session;
  std::string addr;
  transport_message response;

  _reverse_transport_response_args__isset __isset;

  void __set_session(const std::string& val);

  void __set_addr(const std::string& val);

  void __set_response(const transport_message& val);

  bool operator == (const reverse_transport_response_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(addr == rhs.addr))
      return false;
    if (!(response == rhs.response))
      return false;
    return true;
  }
  bool operator != (const reverse_transport_response_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const reverse_transport_response_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class reverse_transport_response_pargs {
 public:


  virtual ~reverse_transport_response_pargs() throw();
  const std::string* session;
  const std::string* addr;
  const transport_message* response;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _reverse_transport_response_result__isset {
  _reverse_transport_response_result__isset() : success(false), ouch(false), empty(false), invalid(false) {}
  bool success :1;
  bool ouch :1;
  bool empty :1;
  bool invalid :1;
} _reverse_transport_response_result__isset;

class reverse_transport_response_result {
 public:

  reverse_transport_response_result(const reverse_transport_response_result&);
  reverse_transport_response_result& operator=(const reverse_transport_response_result&);
  reverse_transport_response_result() : success(0) {
  }

  virtual ~reverse_transport_response_result() throw();
  bool success;
  invalid_operation ouch;
  command_empty empty;
  invalid_session invalid;

  _reverse_transport_response_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  void __set_empty(const command_empty& val);

  void __set_invalid(const invalid_session& val);

  bool operator == (const reverse_transport_response_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    if (!(empty == rhs.empty))
      return false;
    if (!(invalid == rhs.invalid))
      return false;
    return true;
  }
  bool operator != (const reverse_transport_response_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const reverse_transport_response_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _reverse_transport_response_presult__isset {
  _reverse_transport_response_presult__isset() : success(false), ouch(false), empty(false), invalid(false) {}
  bool success :1;
  bool ouch :1;
  bool empty :1;
  bool invalid :1;
} _reverse_transport_response_presult__isset;

class reverse_transport_response_presult {
 public:


  virtual ~reverse_transport_response_presult() throw();
  bool* success;
  invalid_operation ouch;
  command_empty empty;
  invalid_session invalid;

  _reverse_transport_response_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class reverse_transportClient : virtual public reverse_transportIf {
 public:
  reverse_transportClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  reverse_transportClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(service_info& _return);
  void send_ping();
  void recv_ping(service_info& _return);
  void generate_session(std::string& _return, const std::string& addr);
  void send_generate_session(const std::string& addr);
  void recv_generate_session(std::string& _return);
  void receive(transport_message& _return, const std::string& session, const std::string& addr, const std::string& name);
  void send_receive(const std::string& session, const std::string& addr, const std::string& name);
  void recv_receive(transport_message& _return);
  bool response(const std::string& session, const std::string& addr, const transport_message& response);
  void send_response(const std::string& session, const std::string& addr, const transport_message& response);
  bool recv_response();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class reverse_transportProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<reverse_transportIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (reverse_transportProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_generate_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_receive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_response(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  reverse_transportProcessor(boost::shared_ptr<reverse_transportIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &reverse_transportProcessor::process_ping;
    processMap_["generate_session"] = &reverse_transportProcessor::process_generate_session;
    processMap_["receive"] = &reverse_transportProcessor::process_receive;
    processMap_["response"] = &reverse_transportProcessor::process_response;
  }

  virtual ~reverse_transportProcessor() {}
};

class reverse_transportProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  reverse_transportProcessorFactory(const ::boost::shared_ptr< reverse_transportIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< reverse_transportIfFactory > handlerFactory_;
};

class reverse_transportMultiface : virtual public reverse_transportIf {
 public:
  reverse_transportMultiface(std::vector<boost::shared_ptr<reverse_transportIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~reverse_transportMultiface() {}
 protected:
  std::vector<boost::shared_ptr<reverse_transportIf> > ifaces_;
  reverse_transportMultiface() {}
  void add(boost::shared_ptr<reverse_transportIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping(service_info& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return);
    }
    ifaces_[i]->ping(_return);
    return;
  }

  void generate_session(std::string& _return, const std::string& addr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->generate_session(_return, addr);
    }
    ifaces_[i]->generate_session(_return, addr);
    return;
  }

  void receive(transport_message& _return, const std::string& session, const std::string& addr, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->receive(_return, session, addr, name);
    }
    ifaces_[i]->receive(_return, session, addr, name);
    return;
  }

  bool response(const std::string& session, const std::string& addr, const transport_message& response) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->response(session, addr, response);
    }
    return ifaces_[i]->response(session, addr, response);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class reverse_transportConcurrentClient : virtual public reverse_transportIf {
 public:
  reverse_transportConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  reverse_transportConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(service_info& _return);
  int32_t send_ping();
  void recv_ping(service_info& _return, const int32_t seqid);
  void generate_session(std::string& _return, const std::string& addr);
  int32_t send_generate_session(const std::string& addr);
  void recv_generate_session(std::string& _return, const int32_t seqid);
  void receive(transport_message& _return, const std::string& session, const std::string& addr, const std::string& name);
  int32_t send_receive(const std::string& session, const std::string& addr, const std::string& name);
  void recv_receive(transport_message& _return, const int32_t seqid);
  bool response(const std::string& session, const std::string& addr, const transport_message& response);
  int32_t send_response(const std::string& session, const std::string& addr, const transport_message& response);
  bool recv_response(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

class reverse_transportCobClient;

class reverse_transportCobClIf {
 public:
  virtual ~reverse_transportCobClIf() {}
  virtual void ping(tcxx::function<void(reverse_transportCobClient* client)> cob) = 0;
  virtual void generate_session(tcxx::function<void(reverse_transportCobClient* client)> cob, const std::string& addr) = 0;
  virtual void receive(tcxx::function<void(reverse_transportCobClient* client)> cob, const std::string& session, const std::string& addr, const std::string& name) = 0;
  virtual void response(tcxx::function<void(reverse_transportCobClient* client)> cob, const std::string& session, const std::string& addr, const transport_message& response) = 0;
};

class reverse_transportCobSvIf {
 public:
  virtual ~reverse_transportCobSvIf() {}
  virtual void ping(tcxx::function<void(service_info const& _return)> cob) = 0;
  virtual void generate_session(tcxx::function<void(std::string const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& addr) = 0;
  virtual void receive(tcxx::function<void(transport_message const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session, const std::string& addr, const std::string& name) = 0;
  virtual void response(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session, const std::string& addr, const transport_message& response) = 0;
};

class reverse_transportCobSvIfFactory {
 public:
  typedef reverse_transportCobSvIf Handler;

  virtual ~reverse_transportCobSvIfFactory() {}

  virtual reverse_transportCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(reverse_transportCobSvIf* /* handler */) = 0;
};

class reverse_transportCobSvIfSingletonFactory : virtual public reverse_transportCobSvIfFactory {
 public:
  reverse_transportCobSvIfSingletonFactory(const boost::shared_ptr<reverse_transportCobSvIf>& iface) : iface_(iface) {}
  virtual ~reverse_transportCobSvIfSingletonFactory() {}

  virtual reverse_transportCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(reverse_transportCobSvIf* /* handler */) {}

 protected:
  boost::shared_ptr<reverse_transportCobSvIf> iface_;
};

class reverse_transportCobSvNull : virtual public reverse_transportCobSvIf {
 public:
  virtual ~reverse_transportCobSvNull() {}
  void ping(tcxx::function<void(service_info const& _return)> cob) {
    service_info _return;
    return cob(_return);
  }
  void generate_session(tcxx::function<void(std::string const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* addr */) {
    std::string _return;
    return cob(_return);
  }
  void receive(tcxx::function<void(transport_message const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session */, const std::string& /* addr */, const std::string& /* name */) {
    transport_message _return;
    return cob(_return);
  }
  void response(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session */, const std::string& /* addr */, const transport_message& /* response */) {
    bool _return = false;
    return cob(_return);
  }
};

class reverse_transportCobClient : virtual public reverse_transportCobClIf {
 public:
  reverse_transportCobClient(boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    channel_(channel),
    itrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    otrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    piprot_(protocolFactory->getProtocol(itrans_)),
    poprot_(protocolFactory->getProtocol(otrans_)) {
    iprot_ = piprot_.get();
    oprot_ = poprot_.get();
  }
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void ping(tcxx::function<void(reverse_transportCobClient* client)> cob);
  void send_ping();
  void recv_ping(service_info& _return);
  void generate_session(tcxx::function<void(reverse_transportCobClient* client)> cob, const std::string& addr);
  void send_generate_session(const std::string& addr);
  void recv_generate_session(std::string& _return);
  void receive(tcxx::function<void(reverse_transportCobClient* client)> cob, const std::string& session, const std::string& addr, const std::string& name);
  void send_receive(const std::string& session, const std::string& addr, const std::string& name);
  void recv_receive(transport_message& _return);
  void response(tcxx::function<void(reverse_transportCobClient* client)> cob, const std::string& session, const std::string& addr, const transport_message& response);
  void send_response(const std::string& session, const std::string& addr, const transport_message& response);
  bool recv_response();
 protected:
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> itrans_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> otrans_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class reverse_transportAsyncProcessor : public ::apache::thrift::async::TAsyncDispatchProcessor {
 protected:
  boost::shared_ptr<reverse_transportCobSvIf> iface_;
  virtual void dispatchCall(tcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (reverse_transportAsyncProcessor::*ProcessFunction)(tcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_ping(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const service_info& _return);
  void throw_ping(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_generate_session(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_generate_session(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::string& _return);
  void throw_generate_session(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_receive(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_receive(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const transport_message& _return);
  void throw_receive(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_response(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_response(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_response(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  reverse_transportAsyncProcessor(boost::shared_ptr<reverse_transportCobSvIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &reverse_transportAsyncProcessor::process_ping;
    processMap_["generate_session"] = &reverse_transportAsyncProcessor::process_generate_session;
    processMap_["receive"] = &reverse_transportAsyncProcessor::process_receive;
    processMap_["response"] = &reverse_transportAsyncProcessor::process_response;
  }

  virtual ~reverse_transportAsyncProcessor() {}
};

class reverse_transportAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  reverse_transportAsyncProcessorFactory(const ::boost::shared_ptr< reverse_transportCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< reverse_transportCobSvIfFactory > handlerFactory_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}} // namespace

#endif
