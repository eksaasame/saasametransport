// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "common_connection_service.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::saasame::transport;

class common_connection_serviceHandler : virtual public common_connection_serviceIf {
 public:
  common_connection_serviceHandler() {
    // Your initialization goes here
  }

  bool test_connection(const std::string& session_id, const connection& conn) {
    // Your implementation goes here
    printf("test_connection\n");
  }

  bool add_connection(const std::string& session_id, const connection& conn) {
    // Your implementation goes here
    printf("add_connection\n");
  }

  bool remove_connection(const std::string& session_id, const std::string& connection_id) {
    // Your implementation goes here
    printf("remove_connection\n");
  }

  bool modify_connection(const std::string& session_id, const connection& conn) {
    // Your implementation goes here
    printf("modify_connection\n");
  }

  void enumerate_connections(std::vector<connection> & _return, const std::string& session_id) {
    // Your implementation goes here
    printf("enumerate_connections\n");
  }

  void get_connection(connection& _return, const std::string& session_id, const std::string& connection_id) {
    // Your implementation goes here
    printf("get_connection\n");
  }

  int64_t get_available_bytes(const std::string& session_id, const std::string& connection_id) {
    // Your implementation goes here
    printf("get_available_bytes\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<common_connection_serviceHandler> handler(new common_connection_serviceHandler());
  shared_ptr<TProcessor> processor(new common_connection_serviceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

