// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "physical_packer_service_proxy.h"
#include <thrift/protocol/TBinaryProtocol.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

using boost::shared_ptr;

using namespace  ::saasame::transport;

class physical_packer_service_proxyAsyncHandler : public physical_packer_service_proxyCobSvIf {
 public:
  physical_packer_service_proxyAsyncHandler() {
    syncHandler_ = std::auto_ptr<physical_packer_service_proxyHandler>(new physical_packer_service_proxyHandler);
    // Your initialization goes here
  }
  virtual ~physical_packer_service_proxyAsyncHandler();

  void packer_ping_p(tcxx::function<void(service_info const& _return)> cob, const std::string& session_id, const std::string& addr) {
    service_info _return;
    syncHandler_->packer_ping_p(_return, session_id, addr);
    return cob(_return);
  }

  void take_snapshots_p(tcxx::function<void(std::vector<snapshot>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const std::set<std::string> & disks) {
    std::vector<snapshot>  _return;
    syncHandler_->take_snapshots_p(_return, session_id, addr, disks);
    return cob(_return);
  }

  void take_snapshots_ex_p(tcxx::function<void(std::vector<snapshot>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const std::set<std::string> & disks, const std::string& pre_script, const std::string& post_script) {
    std::vector<snapshot>  _return;
    syncHandler_->take_snapshots_ex_p(_return, session_id, addr, disks, pre_script, post_script);
    return cob(_return);
  }

  void delete_snapshot_p(tcxx::function<void(delete_snapshot_result const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const std::string& snapshot_id) {
    delete_snapshot_result _return;
    syncHandler_->delete_snapshot_p(_return, session_id, addr, snapshot_id);
    return cob(_return);
  }

  void delete_snapshot_set_p(tcxx::function<void(delete_snapshot_result const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const std::string& snapshot_set_id) {
    delete_snapshot_result _return;
    syncHandler_->delete_snapshot_set_p(_return, session_id, addr, snapshot_set_id);
    return cob(_return);
  }

  void get_all_snapshots_p(tcxx::function<void(std::map<std::string, std::vector<snapshot> >  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr) {
    std::map<std::string, std::vector<snapshot> >  _return;
    syncHandler_->get_all_snapshots_p(_return, session_id, addr);
    return cob(_return);
  }

  void create_packer_job_ex_p(tcxx::function<void(packer_job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const std::string& job_id, const create_packer_job_detail& create_job) {
    packer_job_detail _return;
    syncHandler_->create_packer_job_ex_p(_return, session_id, addr, job_id, create_job);
    return cob(_return);
  }

  void get_packer_job_p(tcxx::function<void(packer_job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const std::string& job_id, const std::string& previous_updated_time) {
    packer_job_detail _return;
    syncHandler_->get_packer_job_p(_return, session_id, addr, job_id, previous_updated_time);
    return cob(_return);
  }

  void interrupt_packer_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const std::string& job_id) {
    bool _return = false;
    _return = syncHandler_->interrupt_packer_job_p(session_id, addr, job_id);
    return cob(_return);
  }

  void resume_packer_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const std::string& job_id) {
    bool _return = false;
    _return = syncHandler_->resume_packer_job_p(session_id, addr, job_id);
    return cob(_return);
  }

  void remove_packer_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const std::string& job_id) {
    bool _return = false;
    _return = syncHandler_->remove_packer_job_p(session_id, addr, job_id);
    return cob(_return);
  }

  void running_packer_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const std::string& job_id) {
    bool _return = false;
    _return = syncHandler_->running_packer_job_p(session_id, addr, job_id);
    return cob(_return);
  }

  void enumerate_packer_disks_p(tcxx::function<void(std::set<disk_info>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const enumerate_disk_filter_style::type filter) {
    std::set<disk_info>  _return;
    syncHandler_->enumerate_packer_disks_p(_return, session_id, addr, filter);
    return cob(_return);
  }

  void verify_packer_carrier_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const std::string& carrier, const bool is_ssl) {
    bool _return = false;
    _return = syncHandler_->verify_packer_carrier_p(session_id, addr, carrier, is_ssl);
    return cob(_return);
  }

  void get_packer_host_detail_p(tcxx::function<void(physical_machine_info const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const machine_detail_filter::type filter) {
    physical_machine_info _return;
    syncHandler_->get_packer_host_detail_p(_return, session_id, addr, filter);
    return cob(_return);
  }

 protected:
  std::auto_ptr<physical_packer_service_proxyHandler> syncHandler_;
};

