// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "transport_service.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::saasame::transport;

class transport_serviceHandler : virtual public transport_serviceIf {
 public:
  transport_serviceHandler() {
    // Your initialization goes here
  }

  void generate_session(std::string& _return, const std::string& addr) {
    // Your implementation goes here
    printf("generate_session\n");
  }

  void get_package_info(std::string& _return, const std::string& email, const std::string& name, const std::string& key) {
    // Your implementation goes here
    printf("get_package_info\n");
  }

  bool active_license(const std::string& email, const std::string& name, const std::string& key) {
    // Your implementation goes here
    printf("active_license\n");
  }

  bool add_license(const std::string& license) {
    // Your implementation goes here
    printf("add_license\n");
  }

  bool add_license_with_key(const std::string& key, const std::string& license) {
    // Your implementation goes here
    printf("add_license_with_key\n");
  }

  void get_licenses(license_infos& _return) {
    // Your implementation goes here
    printf("get_licenses\n");
  }

  bool check_license_expiration(const int8_t days) {
    // Your implementation goes here
    printf("check_license_expiration\n");
  }

  bool is_license_valid(const std::string& job_id) {
    // Your implementation goes here
    printf("is_license_valid\n");
  }

  bool is_license_valid_ex(const std::string& job_id, const bool is_recovery) {
    // Your implementation goes here
    printf("is_license_valid_ex\n");
  }

  bool remove_license(const std::string& key) {
    // Your implementation goes here
    printf("remove_license\n");
  }

  void query_package_info(std::string& _return, const std::string& key) {
    // Your implementation goes here
    printf("query_package_info\n");
  }

  bool create_task(const running_task& task) {
    // Your implementation goes here
    printf("create_task\n");
  }

  bool remove_task(const std::string& task_id) {
    // Your implementation goes here
    printf("remove_task\n");
  }

  void ping_p(service_info& _return, const std::string& addr) {
    // Your implementation goes here
    printf("ping_p\n");
  }

  void get_host_detail_p(physical_machine_info& _return, const std::string& addr, const machine_detail_filter::type filter) {
    // Your implementation goes here
    printf("get_host_detail_p\n");
  }

  void get_service_list_p(std::set<service_info> & _return, const std::string& addr) {
    // Your implementation goes here
    printf("get_service_list_p\n");
  }

  void enumerate_disks_p(std::set<disk_info> & _return, const std::string& addr, const enumerate_disk_filter_style::type filter) {
    // Your implementation goes here
    printf("enumerate_disks_p\n");
  }

  bool verify_carrier_p(const std::string& addr, const std::string& carrier, const bool is_ssl) {
    // Your implementation goes here
    printf("verify_carrier_p\n");
  }

  void take_xray_p(std::string& _return, const std::string& addr) {
    // Your implementation goes here
    printf("take_xray_p\n");
  }

  void take_xrays_p(std::string& _return, const std::string& addr) {
    // Your implementation goes here
    printf("take_xrays_p\n");
  }

  bool create_mutex_p(const std::string& addr, const std::string& session, const int16_t timeout) {
    // Your implementation goes here
    printf("create_mutex_p\n");
  }

  bool delete_mutex_p(const std::string& addr, const std::string& session) {
    // Your implementation goes here
    printf("delete_mutex_p\n");
  }

  void create_job_ex_p(job_detail& _return, const std::string& addr, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type) {
    // Your implementation goes here
    printf("create_job_ex_p\n");
  }

  void get_job_p(job_detail& _return, const std::string& addr, const std::string& job_id, const std::string& service_type) {
    // Your implementation goes here
    printf("get_job_p\n");
  }

  bool interrupt_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type) {
    // Your implementation goes here
    printf("interrupt_job_p\n");
  }

  bool resume_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type) {
    // Your implementation goes here
    printf("resume_job_p\n");
  }

  bool remove_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type) {
    // Your implementation goes here
    printf("remove_job_p\n");
  }

  bool running_job_p(const std::string& addr, const std::string& job_id, const std::string& service_type) {
    // Your implementation goes here
    printf("running_job_p\n");
  }

  bool update_job_p(const std::string& addr, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type) {
    // Your implementation goes here
    printf("update_job_p\n");
  }

  bool remove_snapshot_image_p(const std::string& addr, const std::map<std::string, image_map_info> & images, const std::string& service_type) {
    // Your implementation goes here
    printf("remove_snapshot_image_p\n");
  }

  bool test_connection_p(const std::string& addr, const connection& conn, const std::string& service_type) {
    // Your implementation goes here
    printf("test_connection_p\n");
  }

  bool add_connection_p(const std::string& addr, const connection& conn, const std::string& service_type) {
    // Your implementation goes here
    printf("add_connection_p\n");
  }

  bool remove_connection_p(const std::string& addr, const std::string& connection_id, const std::string& service_type) {
    // Your implementation goes here
    printf("remove_connection_p\n");
  }

  bool modify_connection_p(const std::string& addr, const connection& conn, const std::string& service_type) {
    // Your implementation goes here
    printf("modify_connection_p\n");
  }

  void enumerate_connections_p(std::vector<connection> & _return, const std::string& addr, const std::string& service_type) {
    // Your implementation goes here
    printf("enumerate_connections_p\n");
  }

  void get_connection_p(connection& _return, const std::string& addr, const std::string& connection_id, const std::string& service_type) {
    // Your implementation goes here
    printf("get_connection_p\n");
  }

  void get_virtual_host_info_p(virtual_host& _return, const std::string& addr, const std::string& host, const std::string& username, const std::string& password) {
    // Your implementation goes here
    printf("get_virtual_host_info_p\n");
  }

  void get_virtual_machine_detail_p(virtual_machine& _return, const std::string& addr, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) {
    // Your implementation goes here
    printf("get_virtual_machine_detail_p\n");
  }

  void get_physical_machine_detail_p(physical_machine_info& _return, const std::string& addr, const std::string& host, const machine_detail_filter::type filter) {
    // Your implementation goes here
    printf("get_physical_machine_detail_p\n");
  }

  void take_packer_xray_p(std::string& _return, const std::string& addr, const std::string& host) {
    // Your implementation goes here
    printf("take_packer_xray_p\n");
  }

  void get_packer_service_info_p(service_info& _return, const std::string& addr, const std::string& host) {
    // Your implementation goes here
    printf("get_packer_service_info_p\n");
  }

  bool verify_management_p(const std::string& addr, const std::string& management, const int32_t port, const bool is_ssl) {
    // Your implementation goes here
    printf("verify_management_p\n");
  }

  bool verify_packer_to_carrier_p(const std::string& addr, const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl) {
    // Your implementation goes here
    printf("verify_packer_to_carrier_p\n");
  }

  void get_replica_job_create_detail(replica_job_create_detail& _return, const std::string& session_id, const std::string& job_id) {
    // Your implementation goes here
    printf("get_replica_job_create_detail\n");
  }

  void get_loader_job_create_detail(loader_job_create_detail& _return, const std::string& session_id, const std::string& job_id) {
    // Your implementation goes here
    printf("get_loader_job_create_detail\n");
  }

  void get_launcher_job_create_detail(launcher_job_create_detail& _return, const std::string& session_id, const std::string& job_id) {
    // Your implementation goes here
    printf("get_launcher_job_create_detail\n");
  }

  void terminate(const std::string& session_id) {
    // Your implementation goes here
    printf("terminate\n");
  }

  bool set_customized_id_p(const std::string& addr, const std::string& disk_addr, const std::string& disk_id) {
    // Your implementation goes here
    printf("set_customized_id_p\n");
  }

  bool unregister_packer_p(const std::string& addr) {
    // Your implementation goes here
    printf("unregister_packer_p\n");
  }

  bool unregister_server_p(const std::string& addr) {
    // Your implementation goes here
    printf("unregister_server_p\n");
  }

  void create_vhd_disk_from_snapshot(std::string& _return, const std::string& connection_string, const std::string& container, const std::string& original_disk_name, const std::string& target_disk_name, const std::string& snapshot) {
    // Your implementation goes here
    printf("create_vhd_disk_from_snapshot\n");
  }

  bool is_snapshot_vhd_disk_ready(const std::string& task_id) {
    // Your implementation goes here
    printf("is_snapshot_vhd_disk_ready\n");
  }

  bool delete_vhd_disk(const std::string& connection_string, const std::string& container, const std::string& disk_name) {
    // Your implementation goes here
    printf("delete_vhd_disk\n");
  }

  bool delete_vhd_disk_snapshot(const std::string& connection_string, const std::string& container, const std::string& disk_name, const std::string& snapshot) {
    // Your implementation goes here
    printf("delete_vhd_disk_snapshot\n");
  }

  void get_vhd_disk_snapshots(std::vector<vhd_snapshot> & _return, const std::string& connection_string, const std::string& container, const std::string& disk_name) {
    // Your implementation goes here
    printf("get_vhd_disk_snapshots\n");
  }

  bool verify_connection_string(const std::string& connection_string) {
    // Your implementation goes here
    printf("verify_connection_string\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<transport_serviceHandler> handler(new transport_serviceHandler());
  shared_ptr<TProcessor> processor(new transport_serviceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

