// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "carrier_service.h"
#include <thrift/protocol/TBinaryProtocol.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

using boost::shared_ptr;

using namespace  ::saasame::transport;

class carrier_serviceAsyncHandler : public carrier_serviceCobSvIf {
 public:
  carrier_serviceAsyncHandler() {
    syncHandler_ = std::auto_ptr<carrier_serviceHandler>(new carrier_serviceHandler);
    // Your initialization goes here
  }
  virtual ~carrier_serviceAsyncHandler();

  void create(tcxx::function<void(std::string const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const create_image_info& image) {
    std::string _return;
    syncHandler_->create(_return, session_id, image);
    return cob(_return);
  }

  void create_ex(tcxx::function<void(std::string const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::set<std::string> & connection_ids, const std::string& base_name, const std::string& name, const int64_t size, const int32_t block_size, const std::string& parent, const bool checksum_verify) {
    std::string _return;
    syncHandler_->create_ex(_return, session_id, connection_ids, base_name, name, size, block_size, parent, checksum_verify);
    return cob(_return);
  }

  void open(tcxx::function<void(std::string const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::set<std::string> & connection_ids, const std::string& base_name, const std::string& name) {
    std::string _return;
    syncHandler_->open(_return, session_id, connection_ids, base_name, name);
    return cob(_return);
  }

  void read(tcxx::function<void(std::string const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& image_id, const int64_t start, const int32_t number_of_bytes_to_read) {
    std::string _return;
    syncHandler_->read(_return, session_id, image_id, start, number_of_bytes_to_read);
    return cob(_return);
  }

  void write(tcxx::function<void(int32_t const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& image_id, const int64_t start, const std::string& buffer, const int32_t number_of_bytes_to_write) {
    int32_t _return = 0;
    _return = syncHandler_->write(session_id, image_id, start, buffer, number_of_bytes_to_write);
    return cob(_return);
  }

  void write_ex(tcxx::function<void(int32_t const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& image_id, const int64_t start, const std::string& buffer, const int32_t number_of_bytes_to_write, const bool is_compressed) {
    int32_t _return = 0;
    _return = syncHandler_->write_ex(session_id, image_id, start, buffer, number_of_bytes_to_write, is_compressed);
    return cob(_return);
  }

  void close(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& image_id, const bool is_cancel) {
    bool _return = false;
    _return = syncHandler_->close(session_id, image_id, is_cancel);
    return cob(_return);
  }

  void remove_base_image(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::set<std::string> & base_images) {
    bool _return = false;
    _return = syncHandler_->remove_base_image(session_id, base_images);
    return cob(_return);
  }

  void remove_snapshot_image(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::map<std::string, image_map_info> & images) {
    bool _return = false;
    _return = syncHandler_->remove_snapshot_image(session_id, images);
    return cob(_return);
  }

  void verify_management(tcxx::function<void(bool const& _return)> cob, const std::string& management, const int32_t port, const bool is_ssl) {
    bool _return = false;
    _return = syncHandler_->verify_management(management, port, is_ssl);
    return cob(_return);
  }

  void set_buffer_size(tcxx::function<void(bool const& _return)> cob, const std::string& session_id, const int32_t size) {
    bool _return = false;
    _return = syncHandler_->set_buffer_size(session_id, size);
    return cob(_return);
  }

  void is_buffer_free(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& image_id) {
    bool _return = false;
    _return = syncHandler_->is_buffer_free(session_id, image_id);
    return cob(_return);
  }

  void is_image_replicated(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::set<std::string> & connection_ids, const std::string& image_name) {
    bool _return = false;
    _return = syncHandler_->is_image_replicated(session_id, connection_ids, image_name);
    return cob(_return);
  }

 protected:
  std::auto_ptr<carrier_serviceHandler> syncHandler_;
};

