/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef physical_packer_service_proxy_H
#define physical_packer_service_proxy_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/cxxfunctional.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "saasame_types.h"
#include "common_service.h"

namespace saasame { namespace transport {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class physical_packer_service_proxyIf : virtual public common_serviceIf {
 public:
  virtual ~physical_packer_service_proxyIf() {}
  virtual void packer_ping_p(service_info& _return, const std::string& session_id, const std::string& addr) = 0;
  virtual void take_snapshots_p(std::vector<snapshot> & _return, const std::string& session_id, const std::string& addr, const std::set<std::string> & disks) = 0;
  virtual void take_snapshots_ex_p(std::vector<snapshot> & _return, const std::string& session_id, const std::string& addr, const std::set<std::string> & disks, const std::string& pre_script, const std::string& post_script) = 0;
  virtual void delete_snapshot_p(delete_snapshot_result& _return, const std::string& session_id, const std::string& addr, const std::string& snapshot_id) = 0;
  virtual void delete_snapshot_set_p(delete_snapshot_result& _return, const std::string& session_id, const std::string& addr, const std::string& snapshot_set_id) = 0;
  virtual void get_all_snapshots_p(std::map<std::string, std::vector<snapshot> > & _return, const std::string& session_id, const std::string& addr) = 0;
  virtual void create_packer_job_ex_p(packer_job_detail& _return, const std::string& session_id, const std::string& addr, const std::string& job_id, const create_packer_job_detail& create_job) = 0;
  virtual void get_packer_job_p(packer_job_detail& _return, const std::string& session_id, const std::string& addr, const std::string& job_id, const std::string& previous_updated_time) = 0;
  virtual bool interrupt_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id) = 0;
  virtual bool resume_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id) = 0;
  virtual bool remove_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id) = 0;
  virtual bool running_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id) = 0;
  virtual void enumerate_packer_disks_p(std::set<disk_info> & _return, const std::string& session_id, const std::string& addr, const enumerate_disk_filter_style::type filter) = 0;
  virtual bool verify_packer_carrier_p(const std::string& session_id, const std::string& addr, const std::string& carrier, const bool is_ssl) = 0;
  virtual void get_packer_host_detail_p(physical_machine_info& _return, const std::string& session_id, const std::string& addr, const machine_detail_filter::type filter) = 0;
};

class physical_packer_service_proxyIfFactory : virtual public common_serviceIfFactory {
 public:
  typedef physical_packer_service_proxyIf Handler;

  virtual ~physical_packer_service_proxyIfFactory() {}

  virtual physical_packer_service_proxyIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(common_serviceIf* /* handler */) = 0;
};

class physical_packer_service_proxyIfSingletonFactory : virtual public physical_packer_service_proxyIfFactory {
 public:
  physical_packer_service_proxyIfSingletonFactory(const boost::shared_ptr<physical_packer_service_proxyIf>& iface) : iface_(iface) {}
  virtual ~physical_packer_service_proxyIfSingletonFactory() {}

  virtual physical_packer_service_proxyIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(common_serviceIf* /* handler */) {}

 protected:
  boost::shared_ptr<physical_packer_service_proxyIf> iface_;
};

class physical_packer_service_proxyNull : virtual public physical_packer_service_proxyIf , virtual public common_serviceNull {
 public:
  virtual ~physical_packer_service_proxyNull() {}
  void packer_ping_p(service_info& /* _return */, const std::string& /* session_id */, const std::string& /* addr */) {
    return;
  }
  void take_snapshots_p(std::vector<snapshot> & /* _return */, const std::string& /* session_id */, const std::string& /* addr */, const std::set<std::string> & /* disks */) {
    return;
  }
  void take_snapshots_ex_p(std::vector<snapshot> & /* _return */, const std::string& /* session_id */, const std::string& /* addr */, const std::set<std::string> & /* disks */, const std::string& /* pre_script */, const std::string& /* post_script */) {
    return;
  }
  void delete_snapshot_p(delete_snapshot_result& /* _return */, const std::string& /* session_id */, const std::string& /* addr */, const std::string& /* snapshot_id */) {
    return;
  }
  void delete_snapshot_set_p(delete_snapshot_result& /* _return */, const std::string& /* session_id */, const std::string& /* addr */, const std::string& /* snapshot_set_id */) {
    return;
  }
  void get_all_snapshots_p(std::map<std::string, std::vector<snapshot> > & /* _return */, const std::string& /* session_id */, const std::string& /* addr */) {
    return;
  }
  void create_packer_job_ex_p(packer_job_detail& /* _return */, const std::string& /* session_id */, const std::string& /* addr */, const std::string& /* job_id */, const create_packer_job_detail& /* create_job */) {
    return;
  }
  void get_packer_job_p(packer_job_detail& /* _return */, const std::string& /* session_id */, const std::string& /* addr */, const std::string& /* job_id */, const std::string& /* previous_updated_time */) {
    return;
  }
  bool interrupt_packer_job_p(const std::string& /* session_id */, const std::string& /* addr */, const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
  bool resume_packer_job_p(const std::string& /* session_id */, const std::string& /* addr */, const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
  bool remove_packer_job_p(const std::string& /* session_id */, const std::string& /* addr */, const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
  bool running_packer_job_p(const std::string& /* session_id */, const std::string& /* addr */, const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
  void enumerate_packer_disks_p(std::set<disk_info> & /* _return */, const std::string& /* session_id */, const std::string& /* addr */, const enumerate_disk_filter_style::type /* filter */) {
    return;
  }
  bool verify_packer_carrier_p(const std::string& /* session_id */, const std::string& /* addr */, const std::string& /* carrier */, const bool /* is_ssl */) {
    bool _return = false;
    return _return;
  }
  void get_packer_host_detail_p(physical_machine_info& /* _return */, const std::string& /* session_id */, const std::string& /* addr */, const machine_detail_filter::type /* filter */) {
    return;
  }
};

typedef struct _physical_packer_service_proxy_packer_ping_p_args__isset {
  _physical_packer_service_proxy_packer_ping_p_args__isset() : session_id(false), addr(false) {}
  bool session_id :1;
  bool addr :1;
} _physical_packer_service_proxy_packer_ping_p_args__isset;

class physical_packer_service_proxy_packer_ping_p_args {
 public:

  physical_packer_service_proxy_packer_ping_p_args(const physical_packer_service_proxy_packer_ping_p_args&);
  physical_packer_service_proxy_packer_ping_p_args& operator=(const physical_packer_service_proxy_packer_ping_p_args&);
  physical_packer_service_proxy_packer_ping_p_args() : session_id(), addr() {
  }

  virtual ~physical_packer_service_proxy_packer_ping_p_args() throw();
  std::string session_id;
  std::string addr;

  _physical_packer_service_proxy_packer_ping_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_addr(const std::string& val);

  bool operator == (const physical_packer_service_proxy_packer_ping_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(addr == rhs.addr))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_packer_ping_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_packer_ping_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class physical_packer_service_proxy_packer_ping_p_pargs {
 public:


  virtual ~physical_packer_service_proxy_packer_ping_p_pargs() throw();
  const std::string* session_id;
  const std::string* addr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_packer_ping_p_result__isset {
  _physical_packer_service_proxy_packer_ping_p_result__isset() : success(false) {}
  bool success :1;
} _physical_packer_service_proxy_packer_ping_p_result__isset;

class physical_packer_service_proxy_packer_ping_p_result {
 public:

  physical_packer_service_proxy_packer_ping_p_result(const physical_packer_service_proxy_packer_ping_p_result&);
  physical_packer_service_proxy_packer_ping_p_result& operator=(const physical_packer_service_proxy_packer_ping_p_result&);
  physical_packer_service_proxy_packer_ping_p_result() {
  }

  virtual ~physical_packer_service_proxy_packer_ping_p_result() throw();
  service_info success;

  _physical_packer_service_proxy_packer_ping_p_result__isset __isset;

  void __set_success(const service_info& val);

  bool operator == (const physical_packer_service_proxy_packer_ping_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_packer_ping_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_packer_ping_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_packer_ping_p_presult__isset {
  _physical_packer_service_proxy_packer_ping_p_presult__isset() : success(false) {}
  bool success :1;
} _physical_packer_service_proxy_packer_ping_p_presult__isset;

class physical_packer_service_proxy_packer_ping_p_presult {
 public:


  virtual ~physical_packer_service_proxy_packer_ping_p_presult() throw();
  service_info* success;

  _physical_packer_service_proxy_packer_ping_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_take_snapshots_p_args__isset {
  _physical_packer_service_proxy_take_snapshots_p_args__isset() : session_id(false), addr(false), disks(false) {}
  bool session_id :1;
  bool addr :1;
  bool disks :1;
} _physical_packer_service_proxy_take_snapshots_p_args__isset;

class physical_packer_service_proxy_take_snapshots_p_args {
 public:

  physical_packer_service_proxy_take_snapshots_p_args(const physical_packer_service_proxy_take_snapshots_p_args&);
  physical_packer_service_proxy_take_snapshots_p_args& operator=(const physical_packer_service_proxy_take_snapshots_p_args&);
  physical_packer_service_proxy_take_snapshots_p_args() : session_id(), addr() {
  }

  virtual ~physical_packer_service_proxy_take_snapshots_p_args() throw();
  std::string session_id;
  std::string addr;
  std::set<std::string>  disks;

  _physical_packer_service_proxy_take_snapshots_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_addr(const std::string& val);

  void __set_disks(const std::set<std::string> & val);

  bool operator == (const physical_packer_service_proxy_take_snapshots_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(addr == rhs.addr))
      return false;
    if (!(disks == rhs.disks))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_take_snapshots_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_take_snapshots_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class physical_packer_service_proxy_take_snapshots_p_pargs {
 public:


  virtual ~physical_packer_service_proxy_take_snapshots_p_pargs() throw();
  const std::string* session_id;
  const std::string* addr;
  const std::set<std::string> * disks;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_take_snapshots_p_result__isset {
  _physical_packer_service_proxy_take_snapshots_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_take_snapshots_p_result__isset;

class physical_packer_service_proxy_take_snapshots_p_result {
 public:

  physical_packer_service_proxy_take_snapshots_p_result(const physical_packer_service_proxy_take_snapshots_p_result&);
  physical_packer_service_proxy_take_snapshots_p_result& operator=(const physical_packer_service_proxy_take_snapshots_p_result&);
  physical_packer_service_proxy_take_snapshots_p_result() {
  }

  virtual ~physical_packer_service_proxy_take_snapshots_p_result() throw();
  std::vector<snapshot>  success;
  invalid_operation ouch;

  _physical_packer_service_proxy_take_snapshots_p_result__isset __isset;

  void __set_success(const std::vector<snapshot> & val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const physical_packer_service_proxy_take_snapshots_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_take_snapshots_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_take_snapshots_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_take_snapshots_p_presult__isset {
  _physical_packer_service_proxy_take_snapshots_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_take_snapshots_p_presult__isset;

class physical_packer_service_proxy_take_snapshots_p_presult {
 public:


  virtual ~physical_packer_service_proxy_take_snapshots_p_presult() throw();
  std::vector<snapshot> * success;
  invalid_operation ouch;

  _physical_packer_service_proxy_take_snapshots_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_take_snapshots_ex_p_args__isset {
  _physical_packer_service_proxy_take_snapshots_ex_p_args__isset() : session_id(false), addr(false), disks(false), pre_script(false), post_script(false) {}
  bool session_id :1;
  bool addr :1;
  bool disks :1;
  bool pre_script :1;
  bool post_script :1;
} _physical_packer_service_proxy_take_snapshots_ex_p_args__isset;

class physical_packer_service_proxy_take_snapshots_ex_p_args {
 public:

  physical_packer_service_proxy_take_snapshots_ex_p_args(const physical_packer_service_proxy_take_snapshots_ex_p_args&);
  physical_packer_service_proxy_take_snapshots_ex_p_args& operator=(const physical_packer_service_proxy_take_snapshots_ex_p_args&);
  physical_packer_service_proxy_take_snapshots_ex_p_args() : session_id(), addr(), pre_script(), post_script() {
  }

  virtual ~physical_packer_service_proxy_take_snapshots_ex_p_args() throw();
  std::string session_id;
  std::string addr;
  std::set<std::string>  disks;
  std::string pre_script;
  std::string post_script;

  _physical_packer_service_proxy_take_snapshots_ex_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_addr(const std::string& val);

  void __set_disks(const std::set<std::string> & val);

  void __set_pre_script(const std::string& val);

  void __set_post_script(const std::string& val);

  bool operator == (const physical_packer_service_proxy_take_snapshots_ex_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(addr == rhs.addr))
      return false;
    if (!(disks == rhs.disks))
      return false;
    if (!(pre_script == rhs.pre_script))
      return false;
    if (!(post_script == rhs.post_script))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_take_snapshots_ex_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_take_snapshots_ex_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class physical_packer_service_proxy_take_snapshots_ex_p_pargs {
 public:


  virtual ~physical_packer_service_proxy_take_snapshots_ex_p_pargs() throw();
  const std::string* session_id;
  const std::string* addr;
  const std::set<std::string> * disks;
  const std::string* pre_script;
  const std::string* post_script;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_take_snapshots_ex_p_result__isset {
  _physical_packer_service_proxy_take_snapshots_ex_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_take_snapshots_ex_p_result__isset;

class physical_packer_service_proxy_take_snapshots_ex_p_result {
 public:

  physical_packer_service_proxy_take_snapshots_ex_p_result(const physical_packer_service_proxy_take_snapshots_ex_p_result&);
  physical_packer_service_proxy_take_snapshots_ex_p_result& operator=(const physical_packer_service_proxy_take_snapshots_ex_p_result&);
  physical_packer_service_proxy_take_snapshots_ex_p_result() {
  }

  virtual ~physical_packer_service_proxy_take_snapshots_ex_p_result() throw();
  std::vector<snapshot>  success;
  invalid_operation ouch;

  _physical_packer_service_proxy_take_snapshots_ex_p_result__isset __isset;

  void __set_success(const std::vector<snapshot> & val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const physical_packer_service_proxy_take_snapshots_ex_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_take_snapshots_ex_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_take_snapshots_ex_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_take_snapshots_ex_p_presult__isset {
  _physical_packer_service_proxy_take_snapshots_ex_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_take_snapshots_ex_p_presult__isset;

class physical_packer_service_proxy_take_snapshots_ex_p_presult {
 public:


  virtual ~physical_packer_service_proxy_take_snapshots_ex_p_presult() throw();
  std::vector<snapshot> * success;
  invalid_operation ouch;

  _physical_packer_service_proxy_take_snapshots_ex_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_delete_snapshot_p_args__isset {
  _physical_packer_service_proxy_delete_snapshot_p_args__isset() : session_id(false), addr(false), snapshot_id(false) {}
  bool session_id :1;
  bool addr :1;
  bool snapshot_id :1;
} _physical_packer_service_proxy_delete_snapshot_p_args__isset;

class physical_packer_service_proxy_delete_snapshot_p_args {
 public:

  physical_packer_service_proxy_delete_snapshot_p_args(const physical_packer_service_proxy_delete_snapshot_p_args&);
  physical_packer_service_proxy_delete_snapshot_p_args& operator=(const physical_packer_service_proxy_delete_snapshot_p_args&);
  physical_packer_service_proxy_delete_snapshot_p_args() : session_id(), addr(), snapshot_id() {
  }

  virtual ~physical_packer_service_proxy_delete_snapshot_p_args() throw();
  std::string session_id;
  std::string addr;
  std::string snapshot_id;

  _physical_packer_service_proxy_delete_snapshot_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_addr(const std::string& val);

  void __set_snapshot_id(const std::string& val);

  bool operator == (const physical_packer_service_proxy_delete_snapshot_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(addr == rhs.addr))
      return false;
    if (!(snapshot_id == rhs.snapshot_id))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_delete_snapshot_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_delete_snapshot_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class physical_packer_service_proxy_delete_snapshot_p_pargs {
 public:


  virtual ~physical_packer_service_proxy_delete_snapshot_p_pargs() throw();
  const std::string* session_id;
  const std::string* addr;
  const std::string* snapshot_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_delete_snapshot_p_result__isset {
  _physical_packer_service_proxy_delete_snapshot_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_delete_snapshot_p_result__isset;

class physical_packer_service_proxy_delete_snapshot_p_result {
 public:

  physical_packer_service_proxy_delete_snapshot_p_result(const physical_packer_service_proxy_delete_snapshot_p_result&);
  physical_packer_service_proxy_delete_snapshot_p_result& operator=(const physical_packer_service_proxy_delete_snapshot_p_result&);
  physical_packer_service_proxy_delete_snapshot_p_result() {
  }

  virtual ~physical_packer_service_proxy_delete_snapshot_p_result() throw();
  delete_snapshot_result success;
  invalid_operation ouch;

  _physical_packer_service_proxy_delete_snapshot_p_result__isset __isset;

  void __set_success(const delete_snapshot_result& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const physical_packer_service_proxy_delete_snapshot_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_delete_snapshot_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_delete_snapshot_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_delete_snapshot_p_presult__isset {
  _physical_packer_service_proxy_delete_snapshot_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_delete_snapshot_p_presult__isset;

class physical_packer_service_proxy_delete_snapshot_p_presult {
 public:


  virtual ~physical_packer_service_proxy_delete_snapshot_p_presult() throw();
  delete_snapshot_result* success;
  invalid_operation ouch;

  _physical_packer_service_proxy_delete_snapshot_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_delete_snapshot_set_p_args__isset {
  _physical_packer_service_proxy_delete_snapshot_set_p_args__isset() : session_id(false), addr(false), snapshot_set_id(false) {}
  bool session_id :1;
  bool addr :1;
  bool snapshot_set_id :1;
} _physical_packer_service_proxy_delete_snapshot_set_p_args__isset;

class physical_packer_service_proxy_delete_snapshot_set_p_args {
 public:

  physical_packer_service_proxy_delete_snapshot_set_p_args(const physical_packer_service_proxy_delete_snapshot_set_p_args&);
  physical_packer_service_proxy_delete_snapshot_set_p_args& operator=(const physical_packer_service_proxy_delete_snapshot_set_p_args&);
  physical_packer_service_proxy_delete_snapshot_set_p_args() : session_id(), addr(), snapshot_set_id() {
  }

  virtual ~physical_packer_service_proxy_delete_snapshot_set_p_args() throw();
  std::string session_id;
  std::string addr;
  std::string snapshot_set_id;

  _physical_packer_service_proxy_delete_snapshot_set_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_addr(const std::string& val);

  void __set_snapshot_set_id(const std::string& val);

  bool operator == (const physical_packer_service_proxy_delete_snapshot_set_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(addr == rhs.addr))
      return false;
    if (!(snapshot_set_id == rhs.snapshot_set_id))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_delete_snapshot_set_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_delete_snapshot_set_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class physical_packer_service_proxy_delete_snapshot_set_p_pargs {
 public:


  virtual ~physical_packer_service_proxy_delete_snapshot_set_p_pargs() throw();
  const std::string* session_id;
  const std::string* addr;
  const std::string* snapshot_set_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_delete_snapshot_set_p_result__isset {
  _physical_packer_service_proxy_delete_snapshot_set_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_delete_snapshot_set_p_result__isset;

class physical_packer_service_proxy_delete_snapshot_set_p_result {
 public:

  physical_packer_service_proxy_delete_snapshot_set_p_result(const physical_packer_service_proxy_delete_snapshot_set_p_result&);
  physical_packer_service_proxy_delete_snapshot_set_p_result& operator=(const physical_packer_service_proxy_delete_snapshot_set_p_result&);
  physical_packer_service_proxy_delete_snapshot_set_p_result() {
  }

  virtual ~physical_packer_service_proxy_delete_snapshot_set_p_result() throw();
  delete_snapshot_result success;
  invalid_operation ouch;

  _physical_packer_service_proxy_delete_snapshot_set_p_result__isset __isset;

  void __set_success(const delete_snapshot_result& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const physical_packer_service_proxy_delete_snapshot_set_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_delete_snapshot_set_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_delete_snapshot_set_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_delete_snapshot_set_p_presult__isset {
  _physical_packer_service_proxy_delete_snapshot_set_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_delete_snapshot_set_p_presult__isset;

class physical_packer_service_proxy_delete_snapshot_set_p_presult {
 public:


  virtual ~physical_packer_service_proxy_delete_snapshot_set_p_presult() throw();
  delete_snapshot_result* success;
  invalid_operation ouch;

  _physical_packer_service_proxy_delete_snapshot_set_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_get_all_snapshots_p_args__isset {
  _physical_packer_service_proxy_get_all_snapshots_p_args__isset() : session_id(false), addr(false) {}
  bool session_id :1;
  bool addr :1;
} _physical_packer_service_proxy_get_all_snapshots_p_args__isset;

class physical_packer_service_proxy_get_all_snapshots_p_args {
 public:

  physical_packer_service_proxy_get_all_snapshots_p_args(const physical_packer_service_proxy_get_all_snapshots_p_args&);
  physical_packer_service_proxy_get_all_snapshots_p_args& operator=(const physical_packer_service_proxy_get_all_snapshots_p_args&);
  physical_packer_service_proxy_get_all_snapshots_p_args() : session_id(), addr() {
  }

  virtual ~physical_packer_service_proxy_get_all_snapshots_p_args() throw();
  std::string session_id;
  std::string addr;

  _physical_packer_service_proxy_get_all_snapshots_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_addr(const std::string& val);

  bool operator == (const physical_packer_service_proxy_get_all_snapshots_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(addr == rhs.addr))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_get_all_snapshots_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_get_all_snapshots_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class physical_packer_service_proxy_get_all_snapshots_p_pargs {
 public:


  virtual ~physical_packer_service_proxy_get_all_snapshots_p_pargs() throw();
  const std::string* session_id;
  const std::string* addr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_get_all_snapshots_p_result__isset {
  _physical_packer_service_proxy_get_all_snapshots_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_get_all_snapshots_p_result__isset;

class physical_packer_service_proxy_get_all_snapshots_p_result {
 public:

  physical_packer_service_proxy_get_all_snapshots_p_result(const physical_packer_service_proxy_get_all_snapshots_p_result&);
  physical_packer_service_proxy_get_all_snapshots_p_result& operator=(const physical_packer_service_proxy_get_all_snapshots_p_result&);
  physical_packer_service_proxy_get_all_snapshots_p_result() {
  }

  virtual ~physical_packer_service_proxy_get_all_snapshots_p_result() throw();
  std::map<std::string, std::vector<snapshot> >  success;
  invalid_operation ouch;

  _physical_packer_service_proxy_get_all_snapshots_p_result__isset __isset;

  void __set_success(const std::map<std::string, std::vector<snapshot> > & val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const physical_packer_service_proxy_get_all_snapshots_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_get_all_snapshots_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_get_all_snapshots_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_get_all_snapshots_p_presult__isset {
  _physical_packer_service_proxy_get_all_snapshots_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_get_all_snapshots_p_presult__isset;

class physical_packer_service_proxy_get_all_snapshots_p_presult {
 public:


  virtual ~physical_packer_service_proxy_get_all_snapshots_p_presult() throw();
  std::map<std::string, std::vector<snapshot> > * success;
  invalid_operation ouch;

  _physical_packer_service_proxy_get_all_snapshots_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_create_packer_job_ex_p_args__isset {
  _physical_packer_service_proxy_create_packer_job_ex_p_args__isset() : session_id(false), addr(false), job_id(false), create_job(false) {}
  bool session_id :1;
  bool addr :1;
  bool job_id :1;
  bool create_job :1;
} _physical_packer_service_proxy_create_packer_job_ex_p_args__isset;

class physical_packer_service_proxy_create_packer_job_ex_p_args {
 public:

  physical_packer_service_proxy_create_packer_job_ex_p_args(const physical_packer_service_proxy_create_packer_job_ex_p_args&);
  physical_packer_service_proxy_create_packer_job_ex_p_args& operator=(const physical_packer_service_proxy_create_packer_job_ex_p_args&);
  physical_packer_service_proxy_create_packer_job_ex_p_args() : session_id(), addr(), job_id() {
  }

  virtual ~physical_packer_service_proxy_create_packer_job_ex_p_args() throw();
  std::string session_id;
  std::string addr;
  std::string job_id;
  create_packer_job_detail create_job;

  _physical_packer_service_proxy_create_packer_job_ex_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_addr(const std::string& val);

  void __set_job_id(const std::string& val);

  void __set_create_job(const create_packer_job_detail& val);

  bool operator == (const physical_packer_service_proxy_create_packer_job_ex_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(addr == rhs.addr))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    if (!(create_job == rhs.create_job))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_create_packer_job_ex_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_create_packer_job_ex_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class physical_packer_service_proxy_create_packer_job_ex_p_pargs {
 public:


  virtual ~physical_packer_service_proxy_create_packer_job_ex_p_pargs() throw();
  const std::string* session_id;
  const std::string* addr;
  const std::string* job_id;
  const create_packer_job_detail* create_job;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_create_packer_job_ex_p_result__isset {
  _physical_packer_service_proxy_create_packer_job_ex_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_create_packer_job_ex_p_result__isset;

class physical_packer_service_proxy_create_packer_job_ex_p_result {
 public:

  physical_packer_service_proxy_create_packer_job_ex_p_result(const physical_packer_service_proxy_create_packer_job_ex_p_result&);
  physical_packer_service_proxy_create_packer_job_ex_p_result& operator=(const physical_packer_service_proxy_create_packer_job_ex_p_result&);
  physical_packer_service_proxy_create_packer_job_ex_p_result() {
  }

  virtual ~physical_packer_service_proxy_create_packer_job_ex_p_result() throw();
  packer_job_detail success;
  invalid_operation ouch;

  _physical_packer_service_proxy_create_packer_job_ex_p_result__isset __isset;

  void __set_success(const packer_job_detail& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const physical_packer_service_proxy_create_packer_job_ex_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_create_packer_job_ex_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_create_packer_job_ex_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_create_packer_job_ex_p_presult__isset {
  _physical_packer_service_proxy_create_packer_job_ex_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_create_packer_job_ex_p_presult__isset;

class physical_packer_service_proxy_create_packer_job_ex_p_presult {
 public:


  virtual ~physical_packer_service_proxy_create_packer_job_ex_p_presult() throw();
  packer_job_detail* success;
  invalid_operation ouch;

  _physical_packer_service_proxy_create_packer_job_ex_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_get_packer_job_p_args__isset {
  _physical_packer_service_proxy_get_packer_job_p_args__isset() : session_id(false), addr(false), job_id(false), previous_updated_time(false) {}
  bool session_id :1;
  bool addr :1;
  bool job_id :1;
  bool previous_updated_time :1;
} _physical_packer_service_proxy_get_packer_job_p_args__isset;

class physical_packer_service_proxy_get_packer_job_p_args {
 public:

  physical_packer_service_proxy_get_packer_job_p_args(const physical_packer_service_proxy_get_packer_job_p_args&);
  physical_packer_service_proxy_get_packer_job_p_args& operator=(const physical_packer_service_proxy_get_packer_job_p_args&);
  physical_packer_service_proxy_get_packer_job_p_args() : session_id(), addr(), job_id(), previous_updated_time() {
  }

  virtual ~physical_packer_service_proxy_get_packer_job_p_args() throw();
  std::string session_id;
  std::string addr;
  std::string job_id;
  std::string previous_updated_time;

  _physical_packer_service_proxy_get_packer_job_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_addr(const std::string& val);

  void __set_job_id(const std::string& val);

  void __set_previous_updated_time(const std::string& val);

  bool operator == (const physical_packer_service_proxy_get_packer_job_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(addr == rhs.addr))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    if (!(previous_updated_time == rhs.previous_updated_time))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_get_packer_job_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_get_packer_job_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class physical_packer_service_proxy_get_packer_job_p_pargs {
 public:


  virtual ~physical_packer_service_proxy_get_packer_job_p_pargs() throw();
  const std::string* session_id;
  const std::string* addr;
  const std::string* job_id;
  const std::string* previous_updated_time;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_get_packer_job_p_result__isset {
  _physical_packer_service_proxy_get_packer_job_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_get_packer_job_p_result__isset;

class physical_packer_service_proxy_get_packer_job_p_result {
 public:

  physical_packer_service_proxy_get_packer_job_p_result(const physical_packer_service_proxy_get_packer_job_p_result&);
  physical_packer_service_proxy_get_packer_job_p_result& operator=(const physical_packer_service_proxy_get_packer_job_p_result&);
  physical_packer_service_proxy_get_packer_job_p_result() {
  }

  virtual ~physical_packer_service_proxy_get_packer_job_p_result() throw();
  packer_job_detail success;
  invalid_operation ouch;

  _physical_packer_service_proxy_get_packer_job_p_result__isset __isset;

  void __set_success(const packer_job_detail& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const physical_packer_service_proxy_get_packer_job_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_get_packer_job_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_get_packer_job_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_get_packer_job_p_presult__isset {
  _physical_packer_service_proxy_get_packer_job_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_get_packer_job_p_presult__isset;

class physical_packer_service_proxy_get_packer_job_p_presult {
 public:


  virtual ~physical_packer_service_proxy_get_packer_job_p_presult() throw();
  packer_job_detail* success;
  invalid_operation ouch;

  _physical_packer_service_proxy_get_packer_job_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_interrupt_packer_job_p_args__isset {
  _physical_packer_service_proxy_interrupt_packer_job_p_args__isset() : session_id(false), addr(false), job_id(false) {}
  bool session_id :1;
  bool addr :1;
  bool job_id :1;
} _physical_packer_service_proxy_interrupt_packer_job_p_args__isset;

class physical_packer_service_proxy_interrupt_packer_job_p_args {
 public:

  physical_packer_service_proxy_interrupt_packer_job_p_args(const physical_packer_service_proxy_interrupt_packer_job_p_args&);
  physical_packer_service_proxy_interrupt_packer_job_p_args& operator=(const physical_packer_service_proxy_interrupt_packer_job_p_args&);
  physical_packer_service_proxy_interrupt_packer_job_p_args() : session_id(), addr(), job_id() {
  }

  virtual ~physical_packer_service_proxy_interrupt_packer_job_p_args() throw();
  std::string session_id;
  std::string addr;
  std::string job_id;

  _physical_packer_service_proxy_interrupt_packer_job_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_addr(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const physical_packer_service_proxy_interrupt_packer_job_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(addr == rhs.addr))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_interrupt_packer_job_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_interrupt_packer_job_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class physical_packer_service_proxy_interrupt_packer_job_p_pargs {
 public:


  virtual ~physical_packer_service_proxy_interrupt_packer_job_p_pargs() throw();
  const std::string* session_id;
  const std::string* addr;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_interrupt_packer_job_p_result__isset {
  _physical_packer_service_proxy_interrupt_packer_job_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_interrupt_packer_job_p_result__isset;

class physical_packer_service_proxy_interrupt_packer_job_p_result {
 public:

  physical_packer_service_proxy_interrupt_packer_job_p_result(const physical_packer_service_proxy_interrupt_packer_job_p_result&);
  physical_packer_service_proxy_interrupt_packer_job_p_result& operator=(const physical_packer_service_proxy_interrupt_packer_job_p_result&);
  physical_packer_service_proxy_interrupt_packer_job_p_result() : success(0) {
  }

  virtual ~physical_packer_service_proxy_interrupt_packer_job_p_result() throw();
  bool success;
  invalid_operation ouch;

  _physical_packer_service_proxy_interrupt_packer_job_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const physical_packer_service_proxy_interrupt_packer_job_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_interrupt_packer_job_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_interrupt_packer_job_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_interrupt_packer_job_p_presult__isset {
  _physical_packer_service_proxy_interrupt_packer_job_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_interrupt_packer_job_p_presult__isset;

class physical_packer_service_proxy_interrupt_packer_job_p_presult {
 public:


  virtual ~physical_packer_service_proxy_interrupt_packer_job_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _physical_packer_service_proxy_interrupt_packer_job_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_resume_packer_job_p_args__isset {
  _physical_packer_service_proxy_resume_packer_job_p_args__isset() : session_id(false), addr(false), job_id(false) {}
  bool session_id :1;
  bool addr :1;
  bool job_id :1;
} _physical_packer_service_proxy_resume_packer_job_p_args__isset;

class physical_packer_service_proxy_resume_packer_job_p_args {
 public:

  physical_packer_service_proxy_resume_packer_job_p_args(const physical_packer_service_proxy_resume_packer_job_p_args&);
  physical_packer_service_proxy_resume_packer_job_p_args& operator=(const physical_packer_service_proxy_resume_packer_job_p_args&);
  physical_packer_service_proxy_resume_packer_job_p_args() : session_id(), addr(), job_id() {
  }

  virtual ~physical_packer_service_proxy_resume_packer_job_p_args() throw();
  std::string session_id;
  std::string addr;
  std::string job_id;

  _physical_packer_service_proxy_resume_packer_job_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_addr(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const physical_packer_service_proxy_resume_packer_job_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(addr == rhs.addr))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_resume_packer_job_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_resume_packer_job_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class physical_packer_service_proxy_resume_packer_job_p_pargs {
 public:


  virtual ~physical_packer_service_proxy_resume_packer_job_p_pargs() throw();
  const std::string* session_id;
  const std::string* addr;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_resume_packer_job_p_result__isset {
  _physical_packer_service_proxy_resume_packer_job_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_resume_packer_job_p_result__isset;

class physical_packer_service_proxy_resume_packer_job_p_result {
 public:

  physical_packer_service_proxy_resume_packer_job_p_result(const physical_packer_service_proxy_resume_packer_job_p_result&);
  physical_packer_service_proxy_resume_packer_job_p_result& operator=(const physical_packer_service_proxy_resume_packer_job_p_result&);
  physical_packer_service_proxy_resume_packer_job_p_result() : success(0) {
  }

  virtual ~physical_packer_service_proxy_resume_packer_job_p_result() throw();
  bool success;
  invalid_operation ouch;

  _physical_packer_service_proxy_resume_packer_job_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const physical_packer_service_proxy_resume_packer_job_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_resume_packer_job_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_resume_packer_job_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_resume_packer_job_p_presult__isset {
  _physical_packer_service_proxy_resume_packer_job_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_resume_packer_job_p_presult__isset;

class physical_packer_service_proxy_resume_packer_job_p_presult {
 public:


  virtual ~physical_packer_service_proxy_resume_packer_job_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _physical_packer_service_proxy_resume_packer_job_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_remove_packer_job_p_args__isset {
  _physical_packer_service_proxy_remove_packer_job_p_args__isset() : session_id(false), addr(false), job_id(false) {}
  bool session_id :1;
  bool addr :1;
  bool job_id :1;
} _physical_packer_service_proxy_remove_packer_job_p_args__isset;

class physical_packer_service_proxy_remove_packer_job_p_args {
 public:

  physical_packer_service_proxy_remove_packer_job_p_args(const physical_packer_service_proxy_remove_packer_job_p_args&);
  physical_packer_service_proxy_remove_packer_job_p_args& operator=(const physical_packer_service_proxy_remove_packer_job_p_args&);
  physical_packer_service_proxy_remove_packer_job_p_args() : session_id(), addr(), job_id() {
  }

  virtual ~physical_packer_service_proxy_remove_packer_job_p_args() throw();
  std::string session_id;
  std::string addr;
  std::string job_id;

  _physical_packer_service_proxy_remove_packer_job_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_addr(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const physical_packer_service_proxy_remove_packer_job_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(addr == rhs.addr))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_remove_packer_job_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_remove_packer_job_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class physical_packer_service_proxy_remove_packer_job_p_pargs {
 public:


  virtual ~physical_packer_service_proxy_remove_packer_job_p_pargs() throw();
  const std::string* session_id;
  const std::string* addr;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_remove_packer_job_p_result__isset {
  _physical_packer_service_proxy_remove_packer_job_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_remove_packer_job_p_result__isset;

class physical_packer_service_proxy_remove_packer_job_p_result {
 public:

  physical_packer_service_proxy_remove_packer_job_p_result(const physical_packer_service_proxy_remove_packer_job_p_result&);
  physical_packer_service_proxy_remove_packer_job_p_result& operator=(const physical_packer_service_proxy_remove_packer_job_p_result&);
  physical_packer_service_proxy_remove_packer_job_p_result() : success(0) {
  }

  virtual ~physical_packer_service_proxy_remove_packer_job_p_result() throw();
  bool success;
  invalid_operation ouch;

  _physical_packer_service_proxy_remove_packer_job_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const physical_packer_service_proxy_remove_packer_job_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_remove_packer_job_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_remove_packer_job_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_remove_packer_job_p_presult__isset {
  _physical_packer_service_proxy_remove_packer_job_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_remove_packer_job_p_presult__isset;

class physical_packer_service_proxy_remove_packer_job_p_presult {
 public:


  virtual ~physical_packer_service_proxy_remove_packer_job_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _physical_packer_service_proxy_remove_packer_job_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_running_packer_job_p_args__isset {
  _physical_packer_service_proxy_running_packer_job_p_args__isset() : session_id(false), addr(false), job_id(false) {}
  bool session_id :1;
  bool addr :1;
  bool job_id :1;
} _physical_packer_service_proxy_running_packer_job_p_args__isset;

class physical_packer_service_proxy_running_packer_job_p_args {
 public:

  physical_packer_service_proxy_running_packer_job_p_args(const physical_packer_service_proxy_running_packer_job_p_args&);
  physical_packer_service_proxy_running_packer_job_p_args& operator=(const physical_packer_service_proxy_running_packer_job_p_args&);
  physical_packer_service_proxy_running_packer_job_p_args() : session_id(), addr(), job_id() {
  }

  virtual ~physical_packer_service_proxy_running_packer_job_p_args() throw();
  std::string session_id;
  std::string addr;
  std::string job_id;

  _physical_packer_service_proxy_running_packer_job_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_addr(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const physical_packer_service_proxy_running_packer_job_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(addr == rhs.addr))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_running_packer_job_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_running_packer_job_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class physical_packer_service_proxy_running_packer_job_p_pargs {
 public:


  virtual ~physical_packer_service_proxy_running_packer_job_p_pargs() throw();
  const std::string* session_id;
  const std::string* addr;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_running_packer_job_p_result__isset {
  _physical_packer_service_proxy_running_packer_job_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_running_packer_job_p_result__isset;

class physical_packer_service_proxy_running_packer_job_p_result {
 public:

  physical_packer_service_proxy_running_packer_job_p_result(const physical_packer_service_proxy_running_packer_job_p_result&);
  physical_packer_service_proxy_running_packer_job_p_result& operator=(const physical_packer_service_proxy_running_packer_job_p_result&);
  physical_packer_service_proxy_running_packer_job_p_result() : success(0) {
  }

  virtual ~physical_packer_service_proxy_running_packer_job_p_result() throw();
  bool success;
  invalid_operation ouch;

  _physical_packer_service_proxy_running_packer_job_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const physical_packer_service_proxy_running_packer_job_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_running_packer_job_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_running_packer_job_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_running_packer_job_p_presult__isset {
  _physical_packer_service_proxy_running_packer_job_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_running_packer_job_p_presult__isset;

class physical_packer_service_proxy_running_packer_job_p_presult {
 public:


  virtual ~physical_packer_service_proxy_running_packer_job_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _physical_packer_service_proxy_running_packer_job_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_enumerate_packer_disks_p_args__isset {
  _physical_packer_service_proxy_enumerate_packer_disks_p_args__isset() : session_id(false), addr(false), filter(false) {}
  bool session_id :1;
  bool addr :1;
  bool filter :1;
} _physical_packer_service_proxy_enumerate_packer_disks_p_args__isset;

class physical_packer_service_proxy_enumerate_packer_disks_p_args {
 public:

  physical_packer_service_proxy_enumerate_packer_disks_p_args(const physical_packer_service_proxy_enumerate_packer_disks_p_args&);
  physical_packer_service_proxy_enumerate_packer_disks_p_args& operator=(const physical_packer_service_proxy_enumerate_packer_disks_p_args&);
  physical_packer_service_proxy_enumerate_packer_disks_p_args() : session_id(), addr(), filter((enumerate_disk_filter_style::type)0) {
  }

  virtual ~physical_packer_service_proxy_enumerate_packer_disks_p_args() throw();
  std::string session_id;
  std::string addr;
  enumerate_disk_filter_style::type filter;

  _physical_packer_service_proxy_enumerate_packer_disks_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_addr(const std::string& val);

  void __set_filter(const enumerate_disk_filter_style::type val);

  bool operator == (const physical_packer_service_proxy_enumerate_packer_disks_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(addr == rhs.addr))
      return false;
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_enumerate_packer_disks_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_enumerate_packer_disks_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class physical_packer_service_proxy_enumerate_packer_disks_p_pargs {
 public:


  virtual ~physical_packer_service_proxy_enumerate_packer_disks_p_pargs() throw();
  const std::string* session_id;
  const std::string* addr;
  const enumerate_disk_filter_style::type* filter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_enumerate_packer_disks_p_result__isset {
  _physical_packer_service_proxy_enumerate_packer_disks_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_enumerate_packer_disks_p_result__isset;

class physical_packer_service_proxy_enumerate_packer_disks_p_result {
 public:

  physical_packer_service_proxy_enumerate_packer_disks_p_result(const physical_packer_service_proxy_enumerate_packer_disks_p_result&);
  physical_packer_service_proxy_enumerate_packer_disks_p_result& operator=(const physical_packer_service_proxy_enumerate_packer_disks_p_result&);
  physical_packer_service_proxy_enumerate_packer_disks_p_result() {
  }

  virtual ~physical_packer_service_proxy_enumerate_packer_disks_p_result() throw();
  std::set<disk_info>  success;
  invalid_operation ouch;

  _physical_packer_service_proxy_enumerate_packer_disks_p_result__isset __isset;

  void __set_success(const std::set<disk_info> & val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const physical_packer_service_proxy_enumerate_packer_disks_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_enumerate_packer_disks_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_enumerate_packer_disks_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_enumerate_packer_disks_p_presult__isset {
  _physical_packer_service_proxy_enumerate_packer_disks_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_enumerate_packer_disks_p_presult__isset;

class physical_packer_service_proxy_enumerate_packer_disks_p_presult {
 public:


  virtual ~physical_packer_service_proxy_enumerate_packer_disks_p_presult() throw();
  std::set<disk_info> * success;
  invalid_operation ouch;

  _physical_packer_service_proxy_enumerate_packer_disks_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_verify_packer_carrier_p_args__isset {
  _physical_packer_service_proxy_verify_packer_carrier_p_args__isset() : session_id(false), addr(false), carrier(false), is_ssl(false) {}
  bool session_id :1;
  bool addr :1;
  bool carrier :1;
  bool is_ssl :1;
} _physical_packer_service_proxy_verify_packer_carrier_p_args__isset;

class physical_packer_service_proxy_verify_packer_carrier_p_args {
 public:

  physical_packer_service_proxy_verify_packer_carrier_p_args(const physical_packer_service_proxy_verify_packer_carrier_p_args&);
  physical_packer_service_proxy_verify_packer_carrier_p_args& operator=(const physical_packer_service_proxy_verify_packer_carrier_p_args&);
  physical_packer_service_proxy_verify_packer_carrier_p_args() : session_id(), addr(), carrier(), is_ssl(0) {
  }

  virtual ~physical_packer_service_proxy_verify_packer_carrier_p_args() throw();
  std::string session_id;
  std::string addr;
  std::string carrier;
  bool is_ssl;

  _physical_packer_service_proxy_verify_packer_carrier_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_addr(const std::string& val);

  void __set_carrier(const std::string& val);

  void __set_is_ssl(const bool val);

  bool operator == (const physical_packer_service_proxy_verify_packer_carrier_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(addr == rhs.addr))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    if (!(is_ssl == rhs.is_ssl))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_verify_packer_carrier_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_verify_packer_carrier_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class physical_packer_service_proxy_verify_packer_carrier_p_pargs {
 public:


  virtual ~physical_packer_service_proxy_verify_packer_carrier_p_pargs() throw();
  const std::string* session_id;
  const std::string* addr;
  const std::string* carrier;
  const bool* is_ssl;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_verify_packer_carrier_p_result__isset {
  _physical_packer_service_proxy_verify_packer_carrier_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_verify_packer_carrier_p_result__isset;

class physical_packer_service_proxy_verify_packer_carrier_p_result {
 public:

  physical_packer_service_proxy_verify_packer_carrier_p_result(const physical_packer_service_proxy_verify_packer_carrier_p_result&);
  physical_packer_service_proxy_verify_packer_carrier_p_result& operator=(const physical_packer_service_proxy_verify_packer_carrier_p_result&);
  physical_packer_service_proxy_verify_packer_carrier_p_result() : success(0) {
  }

  virtual ~physical_packer_service_proxy_verify_packer_carrier_p_result() throw();
  bool success;
  invalid_operation ouch;

  _physical_packer_service_proxy_verify_packer_carrier_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const physical_packer_service_proxy_verify_packer_carrier_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_verify_packer_carrier_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_verify_packer_carrier_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_verify_packer_carrier_p_presult__isset {
  _physical_packer_service_proxy_verify_packer_carrier_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_verify_packer_carrier_p_presult__isset;

class physical_packer_service_proxy_verify_packer_carrier_p_presult {
 public:


  virtual ~physical_packer_service_proxy_verify_packer_carrier_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _physical_packer_service_proxy_verify_packer_carrier_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_get_packer_host_detail_p_args__isset {
  _physical_packer_service_proxy_get_packer_host_detail_p_args__isset() : session_id(false), addr(false), filter(false) {}
  bool session_id :1;
  bool addr :1;
  bool filter :1;
} _physical_packer_service_proxy_get_packer_host_detail_p_args__isset;

class physical_packer_service_proxy_get_packer_host_detail_p_args {
 public:

  physical_packer_service_proxy_get_packer_host_detail_p_args(const physical_packer_service_proxy_get_packer_host_detail_p_args&);
  physical_packer_service_proxy_get_packer_host_detail_p_args& operator=(const physical_packer_service_proxy_get_packer_host_detail_p_args&);
  physical_packer_service_proxy_get_packer_host_detail_p_args() : session_id(), addr(), filter((machine_detail_filter::type)0) {
  }

  virtual ~physical_packer_service_proxy_get_packer_host_detail_p_args() throw();
  std::string session_id;
  std::string addr;
  machine_detail_filter::type filter;

  _physical_packer_service_proxy_get_packer_host_detail_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_addr(const std::string& val);

  void __set_filter(const machine_detail_filter::type val);

  bool operator == (const physical_packer_service_proxy_get_packer_host_detail_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(addr == rhs.addr))
      return false;
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_get_packer_host_detail_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_get_packer_host_detail_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class physical_packer_service_proxy_get_packer_host_detail_p_pargs {
 public:


  virtual ~physical_packer_service_proxy_get_packer_host_detail_p_pargs() throw();
  const std::string* session_id;
  const std::string* addr;
  const machine_detail_filter::type* filter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_get_packer_host_detail_p_result__isset {
  _physical_packer_service_proxy_get_packer_host_detail_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_get_packer_host_detail_p_result__isset;

class physical_packer_service_proxy_get_packer_host_detail_p_result {
 public:

  physical_packer_service_proxy_get_packer_host_detail_p_result(const physical_packer_service_proxy_get_packer_host_detail_p_result&);
  physical_packer_service_proxy_get_packer_host_detail_p_result& operator=(const physical_packer_service_proxy_get_packer_host_detail_p_result&);
  physical_packer_service_proxy_get_packer_host_detail_p_result() {
  }

  virtual ~physical_packer_service_proxy_get_packer_host_detail_p_result() throw();
  physical_machine_info success;
  invalid_operation ouch;

  _physical_packer_service_proxy_get_packer_host_detail_p_result__isset __isset;

  void __set_success(const physical_machine_info& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const physical_packer_service_proxy_get_packer_host_detail_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const physical_packer_service_proxy_get_packer_host_detail_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const physical_packer_service_proxy_get_packer_host_detail_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _physical_packer_service_proxy_get_packer_host_detail_p_presult__isset {
  _physical_packer_service_proxy_get_packer_host_detail_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _physical_packer_service_proxy_get_packer_host_detail_p_presult__isset;

class physical_packer_service_proxy_get_packer_host_detail_p_presult {
 public:


  virtual ~physical_packer_service_proxy_get_packer_host_detail_p_presult() throw();
  physical_machine_info* success;
  invalid_operation ouch;

  _physical_packer_service_proxy_get_packer_host_detail_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class physical_packer_service_proxyClient : virtual public physical_packer_service_proxyIf, public common_serviceClient {
 public:
  physical_packer_service_proxyClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    common_serviceClient(prot, prot) {}
  physical_packer_service_proxyClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    common_serviceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void packer_ping_p(service_info& _return, const std::string& session_id, const std::string& addr);
  void send_packer_ping_p(const std::string& session_id, const std::string& addr);
  void recv_packer_ping_p(service_info& _return);
  void take_snapshots_p(std::vector<snapshot> & _return, const std::string& session_id, const std::string& addr, const std::set<std::string> & disks);
  void send_take_snapshots_p(const std::string& session_id, const std::string& addr, const std::set<std::string> & disks);
  void recv_take_snapshots_p(std::vector<snapshot> & _return);
  void take_snapshots_ex_p(std::vector<snapshot> & _return, const std::string& session_id, const std::string& addr, const std::set<std::string> & disks, const std::string& pre_script, const std::string& post_script);
  void send_take_snapshots_ex_p(const std::string& session_id, const std::string& addr, const std::set<std::string> & disks, const std::string& pre_script, const std::string& post_script);
  void recv_take_snapshots_ex_p(std::vector<snapshot> & _return);
  void delete_snapshot_p(delete_snapshot_result& _return, const std::string& session_id, const std::string& addr, const std::string& snapshot_id);
  void send_delete_snapshot_p(const std::string& session_id, const std::string& addr, const std::string& snapshot_id);
  void recv_delete_snapshot_p(delete_snapshot_result& _return);
  void delete_snapshot_set_p(delete_snapshot_result& _return, const std::string& session_id, const std::string& addr, const std::string& snapshot_set_id);
  void send_delete_snapshot_set_p(const std::string& session_id, const std::string& addr, const std::string& snapshot_set_id);
  void recv_delete_snapshot_set_p(delete_snapshot_result& _return);
  void get_all_snapshots_p(std::map<std::string, std::vector<snapshot> > & _return, const std::string& session_id, const std::string& addr);
  void send_get_all_snapshots_p(const std::string& session_id, const std::string& addr);
  void recv_get_all_snapshots_p(std::map<std::string, std::vector<snapshot> > & _return);
  void create_packer_job_ex_p(packer_job_detail& _return, const std::string& session_id, const std::string& addr, const std::string& job_id, const create_packer_job_detail& create_job);
  void send_create_packer_job_ex_p(const std::string& session_id, const std::string& addr, const std::string& job_id, const create_packer_job_detail& create_job);
  void recv_create_packer_job_ex_p(packer_job_detail& _return);
  void get_packer_job_p(packer_job_detail& _return, const std::string& session_id, const std::string& addr, const std::string& job_id, const std::string& previous_updated_time);
  void send_get_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id, const std::string& previous_updated_time);
  void recv_get_packer_job_p(packer_job_detail& _return);
  bool interrupt_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id);
  void send_interrupt_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id);
  bool recv_interrupt_packer_job_p();
  bool resume_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id);
  void send_resume_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id);
  bool recv_resume_packer_job_p();
  bool remove_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id);
  void send_remove_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id);
  bool recv_remove_packer_job_p();
  bool running_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id);
  void send_running_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id);
  bool recv_running_packer_job_p();
  void enumerate_packer_disks_p(std::set<disk_info> & _return, const std::string& session_id, const std::string& addr, const enumerate_disk_filter_style::type filter);
  void send_enumerate_packer_disks_p(const std::string& session_id, const std::string& addr, const enumerate_disk_filter_style::type filter);
  void recv_enumerate_packer_disks_p(std::set<disk_info> & _return);
  bool verify_packer_carrier_p(const std::string& session_id, const std::string& addr, const std::string& carrier, const bool is_ssl);
  void send_verify_packer_carrier_p(const std::string& session_id, const std::string& addr, const std::string& carrier, const bool is_ssl);
  bool recv_verify_packer_carrier_p();
  void get_packer_host_detail_p(physical_machine_info& _return, const std::string& session_id, const std::string& addr, const machine_detail_filter::type filter);
  void send_get_packer_host_detail_p(const std::string& session_id, const std::string& addr, const machine_detail_filter::type filter);
  void recv_get_packer_host_detail_p(physical_machine_info& _return);
};

class physical_packer_service_proxyProcessor : public common_serviceProcessor {
 protected:
  boost::shared_ptr<physical_packer_service_proxyIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (physical_packer_service_proxyProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_packer_ping_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_take_snapshots_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_take_snapshots_ex_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_snapshot_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_snapshot_set_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_all_snapshots_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_packer_job_ex_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_packer_job_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_interrupt_packer_job_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resume_packer_job_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_packer_job_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_running_packer_job_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_enumerate_packer_disks_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verify_packer_carrier_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_packer_host_detail_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  physical_packer_service_proxyProcessor(boost::shared_ptr<physical_packer_service_proxyIf> iface) :
    common_serviceProcessor(iface),
    iface_(iface) {
    processMap_["packer_ping_p"] = &physical_packer_service_proxyProcessor::process_packer_ping_p;
    processMap_["take_snapshots_p"] = &physical_packer_service_proxyProcessor::process_take_snapshots_p;
    processMap_["take_snapshots_ex_p"] = &physical_packer_service_proxyProcessor::process_take_snapshots_ex_p;
    processMap_["delete_snapshot_p"] = &physical_packer_service_proxyProcessor::process_delete_snapshot_p;
    processMap_["delete_snapshot_set_p"] = &physical_packer_service_proxyProcessor::process_delete_snapshot_set_p;
    processMap_["get_all_snapshots_p"] = &physical_packer_service_proxyProcessor::process_get_all_snapshots_p;
    processMap_["create_packer_job_ex_p"] = &physical_packer_service_proxyProcessor::process_create_packer_job_ex_p;
    processMap_["get_packer_job_p"] = &physical_packer_service_proxyProcessor::process_get_packer_job_p;
    processMap_["interrupt_packer_job_p"] = &physical_packer_service_proxyProcessor::process_interrupt_packer_job_p;
    processMap_["resume_packer_job_p"] = &physical_packer_service_proxyProcessor::process_resume_packer_job_p;
    processMap_["remove_packer_job_p"] = &physical_packer_service_proxyProcessor::process_remove_packer_job_p;
    processMap_["running_packer_job_p"] = &physical_packer_service_proxyProcessor::process_running_packer_job_p;
    processMap_["enumerate_packer_disks_p"] = &physical_packer_service_proxyProcessor::process_enumerate_packer_disks_p;
    processMap_["verify_packer_carrier_p"] = &physical_packer_service_proxyProcessor::process_verify_packer_carrier_p;
    processMap_["get_packer_host_detail_p"] = &physical_packer_service_proxyProcessor::process_get_packer_host_detail_p;
  }

  virtual ~physical_packer_service_proxyProcessor() {}
};

class physical_packer_service_proxyProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  physical_packer_service_proxyProcessorFactory(const ::boost::shared_ptr< physical_packer_service_proxyIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< physical_packer_service_proxyIfFactory > handlerFactory_;
};

class physical_packer_service_proxyMultiface : virtual public physical_packer_service_proxyIf, public common_serviceMultiface {
 public:
  physical_packer_service_proxyMultiface(std::vector<boost::shared_ptr<physical_packer_service_proxyIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<physical_packer_service_proxyIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      common_serviceMultiface::add(*iter);
    }
  }
  virtual ~physical_packer_service_proxyMultiface() {}
 protected:
  std::vector<boost::shared_ptr<physical_packer_service_proxyIf> > ifaces_;
  physical_packer_service_proxyMultiface() {}
  void add(boost::shared_ptr<physical_packer_service_proxyIf> iface) {
    common_serviceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void packer_ping_p(service_info& _return, const std::string& session_id, const std::string& addr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->packer_ping_p(_return, session_id, addr);
    }
    ifaces_[i]->packer_ping_p(_return, session_id, addr);
    return;
  }

  void take_snapshots_p(std::vector<snapshot> & _return, const std::string& session_id, const std::string& addr, const std::set<std::string> & disks) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->take_snapshots_p(_return, session_id, addr, disks);
    }
    ifaces_[i]->take_snapshots_p(_return, session_id, addr, disks);
    return;
  }

  void take_snapshots_ex_p(std::vector<snapshot> & _return, const std::string& session_id, const std::string& addr, const std::set<std::string> & disks, const std::string& pre_script, const std::string& post_script) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->take_snapshots_ex_p(_return, session_id, addr, disks, pre_script, post_script);
    }
    ifaces_[i]->take_snapshots_ex_p(_return, session_id, addr, disks, pre_script, post_script);
    return;
  }

  void delete_snapshot_p(delete_snapshot_result& _return, const std::string& session_id, const std::string& addr, const std::string& snapshot_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_snapshot_p(_return, session_id, addr, snapshot_id);
    }
    ifaces_[i]->delete_snapshot_p(_return, session_id, addr, snapshot_id);
    return;
  }

  void delete_snapshot_set_p(delete_snapshot_result& _return, const std::string& session_id, const std::string& addr, const std::string& snapshot_set_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_snapshot_set_p(_return, session_id, addr, snapshot_set_id);
    }
    ifaces_[i]->delete_snapshot_set_p(_return, session_id, addr, snapshot_set_id);
    return;
  }

  void get_all_snapshots_p(std::map<std::string, std::vector<snapshot> > & _return, const std::string& session_id, const std::string& addr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_all_snapshots_p(_return, session_id, addr);
    }
    ifaces_[i]->get_all_snapshots_p(_return, session_id, addr);
    return;
  }

  void create_packer_job_ex_p(packer_job_detail& _return, const std::string& session_id, const std::string& addr, const std::string& job_id, const create_packer_job_detail& create_job) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_packer_job_ex_p(_return, session_id, addr, job_id, create_job);
    }
    ifaces_[i]->create_packer_job_ex_p(_return, session_id, addr, job_id, create_job);
    return;
  }

  void get_packer_job_p(packer_job_detail& _return, const std::string& session_id, const std::string& addr, const std::string& job_id, const std::string& previous_updated_time) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_packer_job_p(_return, session_id, addr, job_id, previous_updated_time);
    }
    ifaces_[i]->get_packer_job_p(_return, session_id, addr, job_id, previous_updated_time);
    return;
  }

  bool interrupt_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->interrupt_packer_job_p(session_id, addr, job_id);
    }
    return ifaces_[i]->interrupt_packer_job_p(session_id, addr, job_id);
  }

  bool resume_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resume_packer_job_p(session_id, addr, job_id);
    }
    return ifaces_[i]->resume_packer_job_p(session_id, addr, job_id);
  }

  bool remove_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_packer_job_p(session_id, addr, job_id);
    }
    return ifaces_[i]->remove_packer_job_p(session_id, addr, job_id);
  }

  bool running_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->running_packer_job_p(session_id, addr, job_id);
    }
    return ifaces_[i]->running_packer_job_p(session_id, addr, job_id);
  }

  void enumerate_packer_disks_p(std::set<disk_info> & _return, const std::string& session_id, const std::string& addr, const enumerate_disk_filter_style::type filter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->enumerate_packer_disks_p(_return, session_id, addr, filter);
    }
    ifaces_[i]->enumerate_packer_disks_p(_return, session_id, addr, filter);
    return;
  }

  bool verify_packer_carrier_p(const std::string& session_id, const std::string& addr, const std::string& carrier, const bool is_ssl) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verify_packer_carrier_p(session_id, addr, carrier, is_ssl);
    }
    return ifaces_[i]->verify_packer_carrier_p(session_id, addr, carrier, is_ssl);
  }

  void get_packer_host_detail_p(physical_machine_info& _return, const std::string& session_id, const std::string& addr, const machine_detail_filter::type filter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_packer_host_detail_p(_return, session_id, addr, filter);
    }
    ifaces_[i]->get_packer_host_detail_p(_return, session_id, addr, filter);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class physical_packer_service_proxyConcurrentClient : virtual public physical_packer_service_proxyIf, public common_serviceConcurrentClient {
 public:
  physical_packer_service_proxyConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    common_serviceConcurrentClient(prot, prot) {}
  physical_packer_service_proxyConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    common_serviceConcurrentClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void packer_ping_p(service_info& _return, const std::string& session_id, const std::string& addr);
  int32_t send_packer_ping_p(const std::string& session_id, const std::string& addr);
  void recv_packer_ping_p(service_info& _return, const int32_t seqid);
  void take_snapshots_p(std::vector<snapshot> & _return, const std::string& session_id, const std::string& addr, const std::set<std::string> & disks);
  int32_t send_take_snapshots_p(const std::string& session_id, const std::string& addr, const std::set<std::string> & disks);
  void recv_take_snapshots_p(std::vector<snapshot> & _return, const int32_t seqid);
  void take_snapshots_ex_p(std::vector<snapshot> & _return, const std::string& session_id, const std::string& addr, const std::set<std::string> & disks, const std::string& pre_script, const std::string& post_script);
  int32_t send_take_snapshots_ex_p(const std::string& session_id, const std::string& addr, const std::set<std::string> & disks, const std::string& pre_script, const std::string& post_script);
  void recv_take_snapshots_ex_p(std::vector<snapshot> & _return, const int32_t seqid);
  void delete_snapshot_p(delete_snapshot_result& _return, const std::string& session_id, const std::string& addr, const std::string& snapshot_id);
  int32_t send_delete_snapshot_p(const std::string& session_id, const std::string& addr, const std::string& snapshot_id);
  void recv_delete_snapshot_p(delete_snapshot_result& _return, const int32_t seqid);
  void delete_snapshot_set_p(delete_snapshot_result& _return, const std::string& session_id, const std::string& addr, const std::string& snapshot_set_id);
  int32_t send_delete_snapshot_set_p(const std::string& session_id, const std::string& addr, const std::string& snapshot_set_id);
  void recv_delete_snapshot_set_p(delete_snapshot_result& _return, const int32_t seqid);
  void get_all_snapshots_p(std::map<std::string, std::vector<snapshot> > & _return, const std::string& session_id, const std::string& addr);
  int32_t send_get_all_snapshots_p(const std::string& session_id, const std::string& addr);
  void recv_get_all_snapshots_p(std::map<std::string, std::vector<snapshot> > & _return, const int32_t seqid);
  void create_packer_job_ex_p(packer_job_detail& _return, const std::string& session_id, const std::string& addr, const std::string& job_id, const create_packer_job_detail& create_job);
  int32_t send_create_packer_job_ex_p(const std::string& session_id, const std::string& addr, const std::string& job_id, const create_packer_job_detail& create_job);
  void recv_create_packer_job_ex_p(packer_job_detail& _return, const int32_t seqid);
  void get_packer_job_p(packer_job_detail& _return, const std::string& session_id, const std::string& addr, const std::string& job_id, const std::string& previous_updated_time);
  int32_t send_get_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id, const std::string& previous_updated_time);
  void recv_get_packer_job_p(packer_job_detail& _return, const int32_t seqid);
  bool interrupt_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id);
  int32_t send_interrupt_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id);
  bool recv_interrupt_packer_job_p(const int32_t seqid);
  bool resume_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id);
  int32_t send_resume_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id);
  bool recv_resume_packer_job_p(const int32_t seqid);
  bool remove_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id);
  int32_t send_remove_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id);
  bool recv_remove_packer_job_p(const int32_t seqid);
  bool running_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id);
  int32_t send_running_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id);
  bool recv_running_packer_job_p(const int32_t seqid);
  void enumerate_packer_disks_p(std::set<disk_info> & _return, const std::string& session_id, const std::string& addr, const enumerate_disk_filter_style::type filter);
  int32_t send_enumerate_packer_disks_p(const std::string& session_id, const std::string& addr, const enumerate_disk_filter_style::type filter);
  void recv_enumerate_packer_disks_p(std::set<disk_info> & _return, const int32_t seqid);
  bool verify_packer_carrier_p(const std::string& session_id, const std::string& addr, const std::string& carrier, const bool is_ssl);
  int32_t send_verify_packer_carrier_p(const std::string& session_id, const std::string& addr, const std::string& carrier, const bool is_ssl);
  bool recv_verify_packer_carrier_p(const int32_t seqid);
  void get_packer_host_detail_p(physical_machine_info& _return, const std::string& session_id, const std::string& addr, const machine_detail_filter::type filter);
  int32_t send_get_packer_host_detail_p(const std::string& session_id, const std::string& addr, const machine_detail_filter::type filter);
  void recv_get_packer_host_detail_p(physical_machine_info& _return, const int32_t seqid);
};

class physical_packer_service_proxyCobClient;

class physical_packer_service_proxyCobClIf : virtual public common_serviceCobClIf {
 public:
  virtual ~physical_packer_service_proxyCobClIf() {}
  virtual void packer_ping_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr) = 0;
  virtual void take_snapshots_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const std::set<std::string> & disks) = 0;
  virtual void take_snapshots_ex_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const std::set<std::string> & disks, const std::string& pre_script, const std::string& post_script) = 0;
  virtual void delete_snapshot_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const std::string& snapshot_id) = 0;
  virtual void delete_snapshot_set_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const std::string& snapshot_set_id) = 0;
  virtual void get_all_snapshots_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr) = 0;
  virtual void create_packer_job_ex_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const std::string& job_id, const create_packer_job_detail& create_job) = 0;
  virtual void get_packer_job_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const std::string& job_id, const std::string& previous_updated_time) = 0;
  virtual void interrupt_packer_job_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const std::string& job_id) = 0;
  virtual void resume_packer_job_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const std::string& job_id) = 0;
  virtual void remove_packer_job_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const std::string& job_id) = 0;
  virtual void running_packer_job_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const std::string& job_id) = 0;
  virtual void enumerate_packer_disks_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const enumerate_disk_filter_style::type filter) = 0;
  virtual void verify_packer_carrier_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const std::string& carrier, const bool is_ssl) = 0;
  virtual void get_packer_host_detail_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const machine_detail_filter::type filter) = 0;
};

class physical_packer_service_proxyCobSvIf : virtual public common_serviceCobSvIf {
 public:
  virtual ~physical_packer_service_proxyCobSvIf() {}
  virtual void packer_ping_p(tcxx::function<void(service_info const& _return)> cob, const std::string& session_id, const std::string& addr) = 0;
  virtual void take_snapshots_p(tcxx::function<void(std::vector<snapshot>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const std::set<std::string> & disks) = 0;
  virtual void take_snapshots_ex_p(tcxx::function<void(std::vector<snapshot>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const std::set<std::string> & disks, const std::string& pre_script, const std::string& post_script) = 0;
  virtual void delete_snapshot_p(tcxx::function<void(delete_snapshot_result const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const std::string& snapshot_id) = 0;
  virtual void delete_snapshot_set_p(tcxx::function<void(delete_snapshot_result const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const std::string& snapshot_set_id) = 0;
  virtual void get_all_snapshots_p(tcxx::function<void(std::map<std::string, std::vector<snapshot> >  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr) = 0;
  virtual void create_packer_job_ex_p(tcxx::function<void(packer_job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const std::string& job_id, const create_packer_job_detail& create_job) = 0;
  virtual void get_packer_job_p(tcxx::function<void(packer_job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const std::string& job_id, const std::string& previous_updated_time) = 0;
  virtual void interrupt_packer_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const std::string& job_id) = 0;
  virtual void resume_packer_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const std::string& job_id) = 0;
  virtual void remove_packer_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const std::string& job_id) = 0;
  virtual void running_packer_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const std::string& job_id) = 0;
  virtual void enumerate_packer_disks_p(tcxx::function<void(std::set<disk_info>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const enumerate_disk_filter_style::type filter) = 0;
  virtual void verify_packer_carrier_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const std::string& carrier, const bool is_ssl) = 0;
  virtual void get_packer_host_detail_p(tcxx::function<void(physical_machine_info const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& addr, const machine_detail_filter::type filter) = 0;
};

class physical_packer_service_proxyCobSvIfFactory : virtual public common_serviceCobSvIfFactory {
 public:
  typedef physical_packer_service_proxyCobSvIf Handler;

  virtual ~physical_packer_service_proxyCobSvIfFactory() {}

  virtual physical_packer_service_proxyCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(common_serviceCobSvIf* /* handler */) = 0;
};

class physical_packer_service_proxyCobSvIfSingletonFactory : virtual public physical_packer_service_proxyCobSvIfFactory {
 public:
  physical_packer_service_proxyCobSvIfSingletonFactory(const boost::shared_ptr<physical_packer_service_proxyCobSvIf>& iface) : iface_(iface) {}
  virtual ~physical_packer_service_proxyCobSvIfSingletonFactory() {}

  virtual physical_packer_service_proxyCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(common_serviceCobSvIf* /* handler */) {}

 protected:
  boost::shared_ptr<physical_packer_service_proxyCobSvIf> iface_;
};

class physical_packer_service_proxyCobSvNull : virtual public physical_packer_service_proxyCobSvIf , virtual public common_serviceCobSvNull {
 public:
  virtual ~physical_packer_service_proxyCobSvNull() {}
  void packer_ping_p(tcxx::function<void(service_info const& _return)> cob, const std::string& /* session_id */, const std::string& /* addr */) {
    service_info _return;
    return cob(_return);
  }
  void take_snapshots_p(tcxx::function<void(std::vector<snapshot>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* addr */, const std::set<std::string> & /* disks */) {
    std::vector<snapshot>  _return;
    return cob(_return);
  }
  void take_snapshots_ex_p(tcxx::function<void(std::vector<snapshot>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* addr */, const std::set<std::string> & /* disks */, const std::string& /* pre_script */, const std::string& /* post_script */) {
    std::vector<snapshot>  _return;
    return cob(_return);
  }
  void delete_snapshot_p(tcxx::function<void(delete_snapshot_result const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* addr */, const std::string& /* snapshot_id */) {
    delete_snapshot_result _return;
    return cob(_return);
  }
  void delete_snapshot_set_p(tcxx::function<void(delete_snapshot_result const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* addr */, const std::string& /* snapshot_set_id */) {
    delete_snapshot_result _return;
    return cob(_return);
  }
  void get_all_snapshots_p(tcxx::function<void(std::map<std::string, std::vector<snapshot> >  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* addr */) {
    std::map<std::string, std::vector<snapshot> >  _return;
    return cob(_return);
  }
  void create_packer_job_ex_p(tcxx::function<void(packer_job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* addr */, const std::string& /* job_id */, const create_packer_job_detail& /* create_job */) {
    packer_job_detail _return;
    return cob(_return);
  }
  void get_packer_job_p(tcxx::function<void(packer_job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* addr */, const std::string& /* job_id */, const std::string& /* previous_updated_time */) {
    packer_job_detail _return;
    return cob(_return);
  }
  void interrupt_packer_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* addr */, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
  void resume_packer_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* addr */, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
  void remove_packer_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* addr */, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
  void running_packer_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* addr */, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
  void enumerate_packer_disks_p(tcxx::function<void(std::set<disk_info>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* addr */, const enumerate_disk_filter_style::type /* filter */) {
    std::set<disk_info>  _return;
    return cob(_return);
  }
  void verify_packer_carrier_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* addr */, const std::string& /* carrier */, const bool /* is_ssl */) {
    bool _return = false;
    return cob(_return);
  }
  void get_packer_host_detail_p(tcxx::function<void(physical_machine_info const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* addr */, const machine_detail_filter::type /* filter */) {
    physical_machine_info _return;
    return cob(_return);
  }
};

class physical_packer_service_proxyCobClient : virtual public physical_packer_service_proxyCobClIf, public common_serviceCobClient {
 public:
  physical_packer_service_proxyCobClient(boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    common_serviceCobClient(channel, protocolFactory) {}
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void packer_ping_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr);
  void send_packer_ping_p(const std::string& session_id, const std::string& addr);
  void recv_packer_ping_p(service_info& _return);
  void take_snapshots_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const std::set<std::string> & disks);
  void send_take_snapshots_p(const std::string& session_id, const std::string& addr, const std::set<std::string> & disks);
  void recv_take_snapshots_p(std::vector<snapshot> & _return);
  void take_snapshots_ex_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const std::set<std::string> & disks, const std::string& pre_script, const std::string& post_script);
  void send_take_snapshots_ex_p(const std::string& session_id, const std::string& addr, const std::set<std::string> & disks, const std::string& pre_script, const std::string& post_script);
  void recv_take_snapshots_ex_p(std::vector<snapshot> & _return);
  void delete_snapshot_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const std::string& snapshot_id);
  void send_delete_snapshot_p(const std::string& session_id, const std::string& addr, const std::string& snapshot_id);
  void recv_delete_snapshot_p(delete_snapshot_result& _return);
  void delete_snapshot_set_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const std::string& snapshot_set_id);
  void send_delete_snapshot_set_p(const std::string& session_id, const std::string& addr, const std::string& snapshot_set_id);
  void recv_delete_snapshot_set_p(delete_snapshot_result& _return);
  void get_all_snapshots_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr);
  void send_get_all_snapshots_p(const std::string& session_id, const std::string& addr);
  void recv_get_all_snapshots_p(std::map<std::string, std::vector<snapshot> > & _return);
  void create_packer_job_ex_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const std::string& job_id, const create_packer_job_detail& create_job);
  void send_create_packer_job_ex_p(const std::string& session_id, const std::string& addr, const std::string& job_id, const create_packer_job_detail& create_job);
  void recv_create_packer_job_ex_p(packer_job_detail& _return);
  void get_packer_job_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const std::string& job_id, const std::string& previous_updated_time);
  void send_get_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id, const std::string& previous_updated_time);
  void recv_get_packer_job_p(packer_job_detail& _return);
  void interrupt_packer_job_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const std::string& job_id);
  void send_interrupt_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id);
  bool recv_interrupt_packer_job_p();
  void resume_packer_job_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const std::string& job_id);
  void send_resume_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id);
  bool recv_resume_packer_job_p();
  void remove_packer_job_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const std::string& job_id);
  void send_remove_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id);
  bool recv_remove_packer_job_p();
  void running_packer_job_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const std::string& job_id);
  void send_running_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id);
  bool recv_running_packer_job_p();
  void enumerate_packer_disks_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const enumerate_disk_filter_style::type filter);
  void send_enumerate_packer_disks_p(const std::string& session_id, const std::string& addr, const enumerate_disk_filter_style::type filter);
  void recv_enumerate_packer_disks_p(std::set<disk_info> & _return);
  void verify_packer_carrier_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const std::string& carrier, const bool is_ssl);
  void send_verify_packer_carrier_p(const std::string& session_id, const std::string& addr, const std::string& carrier, const bool is_ssl);
  bool recv_verify_packer_carrier_p();
  void get_packer_host_detail_p(tcxx::function<void(physical_packer_service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& addr, const machine_detail_filter::type filter);
  void send_get_packer_host_detail_p(const std::string& session_id, const std::string& addr, const machine_detail_filter::type filter);
  void recv_get_packer_host_detail_p(physical_machine_info& _return);
};

class physical_packer_service_proxyAsyncProcessor : public common_serviceAsyncProcessor {
 protected:
  boost::shared_ptr<physical_packer_service_proxyCobSvIf> iface_;
  virtual void dispatchCall(tcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (physical_packer_service_proxyAsyncProcessor::*ProcessFunction)(tcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_packer_ping_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_packer_ping_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const service_info& _return);
  void throw_packer_ping_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_take_snapshots_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_take_snapshots_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector<snapshot> & _return);
  void throw_take_snapshots_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_take_snapshots_ex_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_take_snapshots_ex_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector<snapshot> & _return);
  void throw_take_snapshots_ex_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_delete_snapshot_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_delete_snapshot_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const delete_snapshot_result& _return);
  void throw_delete_snapshot_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_delete_snapshot_set_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_delete_snapshot_set_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const delete_snapshot_result& _return);
  void throw_delete_snapshot_set_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_all_snapshots_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_all_snapshots_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::map<std::string, std::vector<snapshot> > & _return);
  void throw_get_all_snapshots_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_create_packer_job_ex_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_create_packer_job_ex_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const packer_job_detail& _return);
  void throw_create_packer_job_ex_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_packer_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_packer_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const packer_job_detail& _return);
  void throw_get_packer_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_interrupt_packer_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_interrupt_packer_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_interrupt_packer_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_resume_packer_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_resume_packer_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_resume_packer_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_remove_packer_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_remove_packer_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_remove_packer_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_running_packer_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_running_packer_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_running_packer_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_enumerate_packer_disks_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_enumerate_packer_disks_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::set<disk_info> & _return);
  void throw_enumerate_packer_disks_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_verify_packer_carrier_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_verify_packer_carrier_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_verify_packer_carrier_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_packer_host_detail_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_packer_host_detail_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const physical_machine_info& _return);
  void throw_get_packer_host_detail_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  physical_packer_service_proxyAsyncProcessor(boost::shared_ptr<physical_packer_service_proxyCobSvIf> iface) :
    common_serviceAsyncProcessor(iface),
    iface_(iface) {
    processMap_["packer_ping_p"] = &physical_packer_service_proxyAsyncProcessor::process_packer_ping_p;
    processMap_["take_snapshots_p"] = &physical_packer_service_proxyAsyncProcessor::process_take_snapshots_p;
    processMap_["take_snapshots_ex_p"] = &physical_packer_service_proxyAsyncProcessor::process_take_snapshots_ex_p;
    processMap_["delete_snapshot_p"] = &physical_packer_service_proxyAsyncProcessor::process_delete_snapshot_p;
    processMap_["delete_snapshot_set_p"] = &physical_packer_service_proxyAsyncProcessor::process_delete_snapshot_set_p;
    processMap_["get_all_snapshots_p"] = &physical_packer_service_proxyAsyncProcessor::process_get_all_snapshots_p;
    processMap_["create_packer_job_ex_p"] = &physical_packer_service_proxyAsyncProcessor::process_create_packer_job_ex_p;
    processMap_["get_packer_job_p"] = &physical_packer_service_proxyAsyncProcessor::process_get_packer_job_p;
    processMap_["interrupt_packer_job_p"] = &physical_packer_service_proxyAsyncProcessor::process_interrupt_packer_job_p;
    processMap_["resume_packer_job_p"] = &physical_packer_service_proxyAsyncProcessor::process_resume_packer_job_p;
    processMap_["remove_packer_job_p"] = &physical_packer_service_proxyAsyncProcessor::process_remove_packer_job_p;
    processMap_["running_packer_job_p"] = &physical_packer_service_proxyAsyncProcessor::process_running_packer_job_p;
    processMap_["enumerate_packer_disks_p"] = &physical_packer_service_proxyAsyncProcessor::process_enumerate_packer_disks_p;
    processMap_["verify_packer_carrier_p"] = &physical_packer_service_proxyAsyncProcessor::process_verify_packer_carrier_p;
    processMap_["get_packer_host_detail_p"] = &physical_packer_service_proxyAsyncProcessor::process_get_packer_host_detail_p;
  }

  virtual ~physical_packer_service_proxyAsyncProcessor() {}
};

class physical_packer_service_proxyAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  physical_packer_service_proxyAsyncProcessorFactory(const ::boost::shared_ptr< physical_packer_service_proxyCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< physical_packer_service_proxyCobSvIfFactory > handlerFactory_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}} // namespace

#endif
