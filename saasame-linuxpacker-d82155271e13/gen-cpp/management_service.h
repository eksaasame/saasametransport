/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef management_service_H
#define management_service_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/cxxfunctional.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "saasame_types.h"

namespace saasame { namespace transport {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class management_serviceIf {
 public:
  virtual ~management_serviceIf() {}
  virtual void get_replica_job_create_detail(replica_job_create_detail& _return, const std::string& session_id, const std::string& job_id) = 0;
  virtual void update_replica_job_state(const std::string& session_id, const replica_job_detail& state) = 0;
  virtual bool is_replica_job_alive(const std::string& session_id, const std::string& job_id) = 0;
  virtual void get_loader_job_create_detail(loader_job_create_detail& _return, const std::string& session_id, const std::string& job_id) = 0;
  virtual void update_loader_job_state(const std::string& session_id, const loader_job_detail& state) = 0;
  virtual bool take_snapshots(const std::string& session_id, const std::string& snapshot_id) = 0;
  virtual bool check_snapshots(const std::string& session_id, const std::string& snapshots_id) = 0;
  virtual void get_launcher_job_create_detail(launcher_job_create_detail& _return, const std::string& session_id, const std::string& job_id) = 0;
  virtual void update_launcher_job_state(const std::string& session_id, const launcher_job_detail& state) = 0;
  virtual void update_launcher_job_state_ex(const std::string& session_id, const launcher_job_detail& state) = 0;
  virtual bool is_launcher_job_image_ready(const std::string& session_id, const std::string& job_id) = 0;
  virtual bool is_loader_job_devices_ready(const std::string& session_id, const std::string& job_id) = 0;
  virtual bool mount_loader_job_devices(const std::string& session_id, const std::string& job_id) = 0;
  virtual bool dismount_loader_job_devices(const std::string& session_id, const std::string& job_id) = 0;
  virtual bool discard_snapshots(const std::string& session_id, const std::string& snapshots_id) = 0;
  virtual void register_service(register_return& _return, const std::string& session_id, const register_service_info& register_info, const physical_machine_info& machine_info) = 0;
  virtual void register_physical_packer(register_return& _return, const std::string& session_id, const register_physical_packer_info& packer_info, const physical_machine_info& machine_info) = 0;
  virtual bool check_running_task(const std::string& task_id, const std::string& parameters) = 0;
  virtual void ping(service_info& _return) = 0;
};

class management_serviceIfFactory {
 public:
  typedef management_serviceIf Handler;

  virtual ~management_serviceIfFactory() {}

  virtual management_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(management_serviceIf* /* handler */) = 0;
};

class management_serviceIfSingletonFactory : virtual public management_serviceIfFactory {
 public:
  management_serviceIfSingletonFactory(const boost::shared_ptr<management_serviceIf>& iface) : iface_(iface) {}
  virtual ~management_serviceIfSingletonFactory() {}

  virtual management_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(management_serviceIf* /* handler */) {}

 protected:
  boost::shared_ptr<management_serviceIf> iface_;
};

class management_serviceNull : virtual public management_serviceIf {
 public:
  virtual ~management_serviceNull() {}
  void get_replica_job_create_detail(replica_job_create_detail& /* _return */, const std::string& /* session_id */, const std::string& /* job_id */) {
    return;
  }
  void update_replica_job_state(const std::string& /* session_id */, const replica_job_detail& /* state */) {
    return;
  }
  bool is_replica_job_alive(const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
  void get_loader_job_create_detail(loader_job_create_detail& /* _return */, const std::string& /* session_id */, const std::string& /* job_id */) {
    return;
  }
  void update_loader_job_state(const std::string& /* session_id */, const loader_job_detail& /* state */) {
    return;
  }
  bool take_snapshots(const std::string& /* session_id */, const std::string& /* snapshot_id */) {
    bool _return = false;
    return _return;
  }
  bool check_snapshots(const std::string& /* session_id */, const std::string& /* snapshots_id */) {
    bool _return = false;
    return _return;
  }
  void get_launcher_job_create_detail(launcher_job_create_detail& /* _return */, const std::string& /* session_id */, const std::string& /* job_id */) {
    return;
  }
  void update_launcher_job_state(const std::string& /* session_id */, const launcher_job_detail& /* state */) {
    return;
  }
  void update_launcher_job_state_ex(const std::string& /* session_id */, const launcher_job_detail& /* state */) {
    return;
  }
  bool is_launcher_job_image_ready(const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
  bool is_loader_job_devices_ready(const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
  bool mount_loader_job_devices(const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
  bool dismount_loader_job_devices(const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
  bool discard_snapshots(const std::string& /* session_id */, const std::string& /* snapshots_id */) {
    bool _return = false;
    return _return;
  }
  void register_service(register_return& /* _return */, const std::string& /* session_id */, const register_service_info& /* register_info */, const physical_machine_info& /* machine_info */) {
    return;
  }
  void register_physical_packer(register_return& /* _return */, const std::string& /* session_id */, const register_physical_packer_info& /* packer_info */, const physical_machine_info& /* machine_info */) {
    return;
  }
  bool check_running_task(const std::string& /* task_id */, const std::string& /* parameters */) {
    bool _return = false;
    return _return;
  }
  void ping(service_info& /* _return */) {
    return;
  }
};

typedef struct _management_service_get_replica_job_create_detail_args__isset {
  _management_service_get_replica_job_create_detail_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _management_service_get_replica_job_create_detail_args__isset;

class management_service_get_replica_job_create_detail_args {
 public:

  management_service_get_replica_job_create_detail_args(const management_service_get_replica_job_create_detail_args&);
  management_service_get_replica_job_create_detail_args& operator=(const management_service_get_replica_job_create_detail_args&);
  management_service_get_replica_job_create_detail_args() : session_id(), job_id() {
  }

  virtual ~management_service_get_replica_job_create_detail_args() throw();
  std::string session_id;
  std::string job_id;

  _management_service_get_replica_job_create_detail_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const management_service_get_replica_job_create_detail_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const management_service_get_replica_job_create_detail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_get_replica_job_create_detail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class management_service_get_replica_job_create_detail_pargs {
 public:


  virtual ~management_service_get_replica_job_create_detail_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_get_replica_job_create_detail_result__isset {
  _management_service_get_replica_job_create_detail_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_get_replica_job_create_detail_result__isset;

class management_service_get_replica_job_create_detail_result {
 public:

  management_service_get_replica_job_create_detail_result(const management_service_get_replica_job_create_detail_result&);
  management_service_get_replica_job_create_detail_result& operator=(const management_service_get_replica_job_create_detail_result&);
  management_service_get_replica_job_create_detail_result() {
  }

  virtual ~management_service_get_replica_job_create_detail_result() throw();
  replica_job_create_detail success;
  invalid_operation ouch;

  _management_service_get_replica_job_create_detail_result__isset __isset;

  void __set_success(const replica_job_create_detail& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const management_service_get_replica_job_create_detail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const management_service_get_replica_job_create_detail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_get_replica_job_create_detail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_get_replica_job_create_detail_presult__isset {
  _management_service_get_replica_job_create_detail_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_get_replica_job_create_detail_presult__isset;

class management_service_get_replica_job_create_detail_presult {
 public:


  virtual ~management_service_get_replica_job_create_detail_presult() throw();
  replica_job_create_detail* success;
  invalid_operation ouch;

  _management_service_get_replica_job_create_detail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_update_replica_job_state_args__isset {
  _management_service_update_replica_job_state_args__isset() : session_id(false), state(false) {}
  bool session_id :1;
  bool state :1;
} _management_service_update_replica_job_state_args__isset;

class management_service_update_replica_job_state_args {
 public:

  management_service_update_replica_job_state_args(const management_service_update_replica_job_state_args&);
  management_service_update_replica_job_state_args& operator=(const management_service_update_replica_job_state_args&);
  management_service_update_replica_job_state_args() : session_id() {
  }

  virtual ~management_service_update_replica_job_state_args() throw();
  std::string session_id;
  replica_job_detail state;

  _management_service_update_replica_job_state_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_state(const replica_job_detail& val);

  bool operator == (const management_service_update_replica_job_state_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const management_service_update_replica_job_state_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_update_replica_job_state_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class management_service_update_replica_job_state_pargs {
 public:


  virtual ~management_service_update_replica_job_state_pargs() throw();
  const std::string* session_id;
  const replica_job_detail* state;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_update_replica_job_state_result__isset {
  _management_service_update_replica_job_state_result__isset() : ouch(false) {}
  bool ouch :1;
} _management_service_update_replica_job_state_result__isset;

class management_service_update_replica_job_state_result {
 public:

  management_service_update_replica_job_state_result(const management_service_update_replica_job_state_result&);
  management_service_update_replica_job_state_result& operator=(const management_service_update_replica_job_state_result&);
  management_service_update_replica_job_state_result() {
  }

  virtual ~management_service_update_replica_job_state_result() throw();
  invalid_operation ouch;

  _management_service_update_replica_job_state_result__isset __isset;

  void __set_ouch(const invalid_operation& val);

  bool operator == (const management_service_update_replica_job_state_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const management_service_update_replica_job_state_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_update_replica_job_state_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_update_replica_job_state_presult__isset {
  _management_service_update_replica_job_state_presult__isset() : ouch(false) {}
  bool ouch :1;
} _management_service_update_replica_job_state_presult__isset;

class management_service_update_replica_job_state_presult {
 public:


  virtual ~management_service_update_replica_job_state_presult() throw();
  invalid_operation ouch;

  _management_service_update_replica_job_state_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_is_replica_job_alive_args__isset {
  _management_service_is_replica_job_alive_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _management_service_is_replica_job_alive_args__isset;

class management_service_is_replica_job_alive_args {
 public:

  management_service_is_replica_job_alive_args(const management_service_is_replica_job_alive_args&);
  management_service_is_replica_job_alive_args& operator=(const management_service_is_replica_job_alive_args&);
  management_service_is_replica_job_alive_args() : session_id(), job_id() {
  }

  virtual ~management_service_is_replica_job_alive_args() throw();
  std::string session_id;
  std::string job_id;

  _management_service_is_replica_job_alive_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const management_service_is_replica_job_alive_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const management_service_is_replica_job_alive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_is_replica_job_alive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class management_service_is_replica_job_alive_pargs {
 public:


  virtual ~management_service_is_replica_job_alive_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_is_replica_job_alive_result__isset {
  _management_service_is_replica_job_alive_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_is_replica_job_alive_result__isset;

class management_service_is_replica_job_alive_result {
 public:

  management_service_is_replica_job_alive_result(const management_service_is_replica_job_alive_result&);
  management_service_is_replica_job_alive_result& operator=(const management_service_is_replica_job_alive_result&);
  management_service_is_replica_job_alive_result() : success(0) {
  }

  virtual ~management_service_is_replica_job_alive_result() throw();
  bool success;
  invalid_operation ouch;

  _management_service_is_replica_job_alive_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const management_service_is_replica_job_alive_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const management_service_is_replica_job_alive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_is_replica_job_alive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_is_replica_job_alive_presult__isset {
  _management_service_is_replica_job_alive_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_is_replica_job_alive_presult__isset;

class management_service_is_replica_job_alive_presult {
 public:


  virtual ~management_service_is_replica_job_alive_presult() throw();
  bool* success;
  invalid_operation ouch;

  _management_service_is_replica_job_alive_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_get_loader_job_create_detail_args__isset {
  _management_service_get_loader_job_create_detail_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _management_service_get_loader_job_create_detail_args__isset;

class management_service_get_loader_job_create_detail_args {
 public:

  management_service_get_loader_job_create_detail_args(const management_service_get_loader_job_create_detail_args&);
  management_service_get_loader_job_create_detail_args& operator=(const management_service_get_loader_job_create_detail_args&);
  management_service_get_loader_job_create_detail_args() : session_id(), job_id() {
  }

  virtual ~management_service_get_loader_job_create_detail_args() throw();
  std::string session_id;
  std::string job_id;

  _management_service_get_loader_job_create_detail_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const management_service_get_loader_job_create_detail_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const management_service_get_loader_job_create_detail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_get_loader_job_create_detail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class management_service_get_loader_job_create_detail_pargs {
 public:


  virtual ~management_service_get_loader_job_create_detail_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_get_loader_job_create_detail_result__isset {
  _management_service_get_loader_job_create_detail_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_get_loader_job_create_detail_result__isset;

class management_service_get_loader_job_create_detail_result {
 public:

  management_service_get_loader_job_create_detail_result(const management_service_get_loader_job_create_detail_result&);
  management_service_get_loader_job_create_detail_result& operator=(const management_service_get_loader_job_create_detail_result&);
  management_service_get_loader_job_create_detail_result() {
  }

  virtual ~management_service_get_loader_job_create_detail_result() throw();
  loader_job_create_detail success;
  invalid_operation ouch;

  _management_service_get_loader_job_create_detail_result__isset __isset;

  void __set_success(const loader_job_create_detail& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const management_service_get_loader_job_create_detail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const management_service_get_loader_job_create_detail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_get_loader_job_create_detail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_get_loader_job_create_detail_presult__isset {
  _management_service_get_loader_job_create_detail_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_get_loader_job_create_detail_presult__isset;

class management_service_get_loader_job_create_detail_presult {
 public:


  virtual ~management_service_get_loader_job_create_detail_presult() throw();
  loader_job_create_detail* success;
  invalid_operation ouch;

  _management_service_get_loader_job_create_detail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_update_loader_job_state_args__isset {
  _management_service_update_loader_job_state_args__isset() : session_id(false), state(false) {}
  bool session_id :1;
  bool state :1;
} _management_service_update_loader_job_state_args__isset;

class management_service_update_loader_job_state_args {
 public:

  management_service_update_loader_job_state_args(const management_service_update_loader_job_state_args&);
  management_service_update_loader_job_state_args& operator=(const management_service_update_loader_job_state_args&);
  management_service_update_loader_job_state_args() : session_id() {
  }

  virtual ~management_service_update_loader_job_state_args() throw();
  std::string session_id;
  loader_job_detail state;

  _management_service_update_loader_job_state_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_state(const loader_job_detail& val);

  bool operator == (const management_service_update_loader_job_state_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const management_service_update_loader_job_state_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_update_loader_job_state_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class management_service_update_loader_job_state_pargs {
 public:


  virtual ~management_service_update_loader_job_state_pargs() throw();
  const std::string* session_id;
  const loader_job_detail* state;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_update_loader_job_state_result__isset {
  _management_service_update_loader_job_state_result__isset() : ouch(false) {}
  bool ouch :1;
} _management_service_update_loader_job_state_result__isset;

class management_service_update_loader_job_state_result {
 public:

  management_service_update_loader_job_state_result(const management_service_update_loader_job_state_result&);
  management_service_update_loader_job_state_result& operator=(const management_service_update_loader_job_state_result&);
  management_service_update_loader_job_state_result() {
  }

  virtual ~management_service_update_loader_job_state_result() throw();
  invalid_operation ouch;

  _management_service_update_loader_job_state_result__isset __isset;

  void __set_ouch(const invalid_operation& val);

  bool operator == (const management_service_update_loader_job_state_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const management_service_update_loader_job_state_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_update_loader_job_state_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_update_loader_job_state_presult__isset {
  _management_service_update_loader_job_state_presult__isset() : ouch(false) {}
  bool ouch :1;
} _management_service_update_loader_job_state_presult__isset;

class management_service_update_loader_job_state_presult {
 public:


  virtual ~management_service_update_loader_job_state_presult() throw();
  invalid_operation ouch;

  _management_service_update_loader_job_state_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_take_snapshots_args__isset {
  _management_service_take_snapshots_args__isset() : session_id(false), snapshot_id(false) {}
  bool session_id :1;
  bool snapshot_id :1;
} _management_service_take_snapshots_args__isset;

class management_service_take_snapshots_args {
 public:

  management_service_take_snapshots_args(const management_service_take_snapshots_args&);
  management_service_take_snapshots_args& operator=(const management_service_take_snapshots_args&);
  management_service_take_snapshots_args() : session_id(), snapshot_id() {
  }

  virtual ~management_service_take_snapshots_args() throw();
  std::string session_id;
  std::string snapshot_id;

  _management_service_take_snapshots_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_snapshot_id(const std::string& val);

  bool operator == (const management_service_take_snapshots_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(snapshot_id == rhs.snapshot_id))
      return false;
    return true;
  }
  bool operator != (const management_service_take_snapshots_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_take_snapshots_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class management_service_take_snapshots_pargs {
 public:


  virtual ~management_service_take_snapshots_pargs() throw();
  const std::string* session_id;
  const std::string* snapshot_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_take_snapshots_result__isset {
  _management_service_take_snapshots_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_take_snapshots_result__isset;

class management_service_take_snapshots_result {
 public:

  management_service_take_snapshots_result(const management_service_take_snapshots_result&);
  management_service_take_snapshots_result& operator=(const management_service_take_snapshots_result&);
  management_service_take_snapshots_result() : success(0) {
  }

  virtual ~management_service_take_snapshots_result() throw();
  bool success;
  invalid_operation ouch;

  _management_service_take_snapshots_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const management_service_take_snapshots_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const management_service_take_snapshots_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_take_snapshots_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_take_snapshots_presult__isset {
  _management_service_take_snapshots_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_take_snapshots_presult__isset;

class management_service_take_snapshots_presult {
 public:


  virtual ~management_service_take_snapshots_presult() throw();
  bool* success;
  invalid_operation ouch;

  _management_service_take_snapshots_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_check_snapshots_args__isset {
  _management_service_check_snapshots_args__isset() : session_id(false), snapshots_id(false) {}
  bool session_id :1;
  bool snapshots_id :1;
} _management_service_check_snapshots_args__isset;

class management_service_check_snapshots_args {
 public:

  management_service_check_snapshots_args(const management_service_check_snapshots_args&);
  management_service_check_snapshots_args& operator=(const management_service_check_snapshots_args&);
  management_service_check_snapshots_args() : session_id(), snapshots_id() {
  }

  virtual ~management_service_check_snapshots_args() throw();
  std::string session_id;
  std::string snapshots_id;

  _management_service_check_snapshots_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_snapshots_id(const std::string& val);

  bool operator == (const management_service_check_snapshots_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(snapshots_id == rhs.snapshots_id))
      return false;
    return true;
  }
  bool operator != (const management_service_check_snapshots_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_check_snapshots_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class management_service_check_snapshots_pargs {
 public:


  virtual ~management_service_check_snapshots_pargs() throw();
  const std::string* session_id;
  const std::string* snapshots_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_check_snapshots_result__isset {
  _management_service_check_snapshots_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_check_snapshots_result__isset;

class management_service_check_snapshots_result {
 public:

  management_service_check_snapshots_result(const management_service_check_snapshots_result&);
  management_service_check_snapshots_result& operator=(const management_service_check_snapshots_result&);
  management_service_check_snapshots_result() : success(0) {
  }

  virtual ~management_service_check_snapshots_result() throw();
  bool success;
  invalid_operation ouch;

  _management_service_check_snapshots_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const management_service_check_snapshots_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const management_service_check_snapshots_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_check_snapshots_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_check_snapshots_presult__isset {
  _management_service_check_snapshots_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_check_snapshots_presult__isset;

class management_service_check_snapshots_presult {
 public:


  virtual ~management_service_check_snapshots_presult() throw();
  bool* success;
  invalid_operation ouch;

  _management_service_check_snapshots_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_get_launcher_job_create_detail_args__isset {
  _management_service_get_launcher_job_create_detail_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _management_service_get_launcher_job_create_detail_args__isset;

class management_service_get_launcher_job_create_detail_args {
 public:

  management_service_get_launcher_job_create_detail_args(const management_service_get_launcher_job_create_detail_args&);
  management_service_get_launcher_job_create_detail_args& operator=(const management_service_get_launcher_job_create_detail_args&);
  management_service_get_launcher_job_create_detail_args() : session_id(), job_id() {
  }

  virtual ~management_service_get_launcher_job_create_detail_args() throw();
  std::string session_id;
  std::string job_id;

  _management_service_get_launcher_job_create_detail_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const management_service_get_launcher_job_create_detail_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const management_service_get_launcher_job_create_detail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_get_launcher_job_create_detail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class management_service_get_launcher_job_create_detail_pargs {
 public:


  virtual ~management_service_get_launcher_job_create_detail_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_get_launcher_job_create_detail_result__isset {
  _management_service_get_launcher_job_create_detail_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_get_launcher_job_create_detail_result__isset;

class management_service_get_launcher_job_create_detail_result {
 public:

  management_service_get_launcher_job_create_detail_result(const management_service_get_launcher_job_create_detail_result&);
  management_service_get_launcher_job_create_detail_result& operator=(const management_service_get_launcher_job_create_detail_result&);
  management_service_get_launcher_job_create_detail_result() {
  }

  virtual ~management_service_get_launcher_job_create_detail_result() throw();
  launcher_job_create_detail success;
  invalid_operation ouch;

  _management_service_get_launcher_job_create_detail_result__isset __isset;

  void __set_success(const launcher_job_create_detail& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const management_service_get_launcher_job_create_detail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const management_service_get_launcher_job_create_detail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_get_launcher_job_create_detail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_get_launcher_job_create_detail_presult__isset {
  _management_service_get_launcher_job_create_detail_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_get_launcher_job_create_detail_presult__isset;

class management_service_get_launcher_job_create_detail_presult {
 public:


  virtual ~management_service_get_launcher_job_create_detail_presult() throw();
  launcher_job_create_detail* success;
  invalid_operation ouch;

  _management_service_get_launcher_job_create_detail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_update_launcher_job_state_args__isset {
  _management_service_update_launcher_job_state_args__isset() : session_id(false), state(false) {}
  bool session_id :1;
  bool state :1;
} _management_service_update_launcher_job_state_args__isset;

class management_service_update_launcher_job_state_args {
 public:

  management_service_update_launcher_job_state_args(const management_service_update_launcher_job_state_args&);
  management_service_update_launcher_job_state_args& operator=(const management_service_update_launcher_job_state_args&);
  management_service_update_launcher_job_state_args() : session_id() {
  }

  virtual ~management_service_update_launcher_job_state_args() throw();
  std::string session_id;
  launcher_job_detail state;

  _management_service_update_launcher_job_state_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_state(const launcher_job_detail& val);

  bool operator == (const management_service_update_launcher_job_state_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const management_service_update_launcher_job_state_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_update_launcher_job_state_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class management_service_update_launcher_job_state_pargs {
 public:


  virtual ~management_service_update_launcher_job_state_pargs() throw();
  const std::string* session_id;
  const launcher_job_detail* state;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_update_launcher_job_state_result__isset {
  _management_service_update_launcher_job_state_result__isset() : ouch(false) {}
  bool ouch :1;
} _management_service_update_launcher_job_state_result__isset;

class management_service_update_launcher_job_state_result {
 public:

  management_service_update_launcher_job_state_result(const management_service_update_launcher_job_state_result&);
  management_service_update_launcher_job_state_result& operator=(const management_service_update_launcher_job_state_result&);
  management_service_update_launcher_job_state_result() {
  }

  virtual ~management_service_update_launcher_job_state_result() throw();
  invalid_operation ouch;

  _management_service_update_launcher_job_state_result__isset __isset;

  void __set_ouch(const invalid_operation& val);

  bool operator == (const management_service_update_launcher_job_state_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const management_service_update_launcher_job_state_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_update_launcher_job_state_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_update_launcher_job_state_presult__isset {
  _management_service_update_launcher_job_state_presult__isset() : ouch(false) {}
  bool ouch :1;
} _management_service_update_launcher_job_state_presult__isset;

class management_service_update_launcher_job_state_presult {
 public:


  virtual ~management_service_update_launcher_job_state_presult() throw();
  invalid_operation ouch;

  _management_service_update_launcher_job_state_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_update_launcher_job_state_ex_args__isset {
  _management_service_update_launcher_job_state_ex_args__isset() : session_id(false), state(false) {}
  bool session_id :1;
  bool state :1;
} _management_service_update_launcher_job_state_ex_args__isset;

class management_service_update_launcher_job_state_ex_args {
 public:

  management_service_update_launcher_job_state_ex_args(const management_service_update_launcher_job_state_ex_args&);
  management_service_update_launcher_job_state_ex_args& operator=(const management_service_update_launcher_job_state_ex_args&);
  management_service_update_launcher_job_state_ex_args() : session_id() {
  }

  virtual ~management_service_update_launcher_job_state_ex_args() throw();
  std::string session_id;
  launcher_job_detail state;

  _management_service_update_launcher_job_state_ex_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_state(const launcher_job_detail& val);

  bool operator == (const management_service_update_launcher_job_state_ex_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const management_service_update_launcher_job_state_ex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_update_launcher_job_state_ex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class management_service_update_launcher_job_state_ex_pargs {
 public:


  virtual ~management_service_update_launcher_job_state_ex_pargs() throw();
  const std::string* session_id;
  const launcher_job_detail* state;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_update_launcher_job_state_ex_result__isset {
  _management_service_update_launcher_job_state_ex_result__isset() : ouch(false) {}
  bool ouch :1;
} _management_service_update_launcher_job_state_ex_result__isset;

class management_service_update_launcher_job_state_ex_result {
 public:

  management_service_update_launcher_job_state_ex_result(const management_service_update_launcher_job_state_ex_result&);
  management_service_update_launcher_job_state_ex_result& operator=(const management_service_update_launcher_job_state_ex_result&);
  management_service_update_launcher_job_state_ex_result() {
  }

  virtual ~management_service_update_launcher_job_state_ex_result() throw();
  invalid_operation ouch;

  _management_service_update_launcher_job_state_ex_result__isset __isset;

  void __set_ouch(const invalid_operation& val);

  bool operator == (const management_service_update_launcher_job_state_ex_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const management_service_update_launcher_job_state_ex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_update_launcher_job_state_ex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_update_launcher_job_state_ex_presult__isset {
  _management_service_update_launcher_job_state_ex_presult__isset() : ouch(false) {}
  bool ouch :1;
} _management_service_update_launcher_job_state_ex_presult__isset;

class management_service_update_launcher_job_state_ex_presult {
 public:


  virtual ~management_service_update_launcher_job_state_ex_presult() throw();
  invalid_operation ouch;

  _management_service_update_launcher_job_state_ex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_is_launcher_job_image_ready_args__isset {
  _management_service_is_launcher_job_image_ready_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _management_service_is_launcher_job_image_ready_args__isset;

class management_service_is_launcher_job_image_ready_args {
 public:

  management_service_is_launcher_job_image_ready_args(const management_service_is_launcher_job_image_ready_args&);
  management_service_is_launcher_job_image_ready_args& operator=(const management_service_is_launcher_job_image_ready_args&);
  management_service_is_launcher_job_image_ready_args() : session_id(), job_id() {
  }

  virtual ~management_service_is_launcher_job_image_ready_args() throw();
  std::string session_id;
  std::string job_id;

  _management_service_is_launcher_job_image_ready_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const management_service_is_launcher_job_image_ready_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const management_service_is_launcher_job_image_ready_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_is_launcher_job_image_ready_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class management_service_is_launcher_job_image_ready_pargs {
 public:


  virtual ~management_service_is_launcher_job_image_ready_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_is_launcher_job_image_ready_result__isset {
  _management_service_is_launcher_job_image_ready_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_is_launcher_job_image_ready_result__isset;

class management_service_is_launcher_job_image_ready_result {
 public:

  management_service_is_launcher_job_image_ready_result(const management_service_is_launcher_job_image_ready_result&);
  management_service_is_launcher_job_image_ready_result& operator=(const management_service_is_launcher_job_image_ready_result&);
  management_service_is_launcher_job_image_ready_result() : success(0) {
  }

  virtual ~management_service_is_launcher_job_image_ready_result() throw();
  bool success;
  invalid_operation ouch;

  _management_service_is_launcher_job_image_ready_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const management_service_is_launcher_job_image_ready_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const management_service_is_launcher_job_image_ready_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_is_launcher_job_image_ready_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_is_launcher_job_image_ready_presult__isset {
  _management_service_is_launcher_job_image_ready_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_is_launcher_job_image_ready_presult__isset;

class management_service_is_launcher_job_image_ready_presult {
 public:


  virtual ~management_service_is_launcher_job_image_ready_presult() throw();
  bool* success;
  invalid_operation ouch;

  _management_service_is_launcher_job_image_ready_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_is_loader_job_devices_ready_args__isset {
  _management_service_is_loader_job_devices_ready_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _management_service_is_loader_job_devices_ready_args__isset;

class management_service_is_loader_job_devices_ready_args {
 public:

  management_service_is_loader_job_devices_ready_args(const management_service_is_loader_job_devices_ready_args&);
  management_service_is_loader_job_devices_ready_args& operator=(const management_service_is_loader_job_devices_ready_args&);
  management_service_is_loader_job_devices_ready_args() : session_id(), job_id() {
  }

  virtual ~management_service_is_loader_job_devices_ready_args() throw();
  std::string session_id;
  std::string job_id;

  _management_service_is_loader_job_devices_ready_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const management_service_is_loader_job_devices_ready_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const management_service_is_loader_job_devices_ready_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_is_loader_job_devices_ready_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class management_service_is_loader_job_devices_ready_pargs {
 public:


  virtual ~management_service_is_loader_job_devices_ready_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_is_loader_job_devices_ready_result__isset {
  _management_service_is_loader_job_devices_ready_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_is_loader_job_devices_ready_result__isset;

class management_service_is_loader_job_devices_ready_result {
 public:

  management_service_is_loader_job_devices_ready_result(const management_service_is_loader_job_devices_ready_result&);
  management_service_is_loader_job_devices_ready_result& operator=(const management_service_is_loader_job_devices_ready_result&);
  management_service_is_loader_job_devices_ready_result() : success(0) {
  }

  virtual ~management_service_is_loader_job_devices_ready_result() throw();
  bool success;
  invalid_operation ouch;

  _management_service_is_loader_job_devices_ready_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const management_service_is_loader_job_devices_ready_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const management_service_is_loader_job_devices_ready_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_is_loader_job_devices_ready_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_is_loader_job_devices_ready_presult__isset {
  _management_service_is_loader_job_devices_ready_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_is_loader_job_devices_ready_presult__isset;

class management_service_is_loader_job_devices_ready_presult {
 public:


  virtual ~management_service_is_loader_job_devices_ready_presult() throw();
  bool* success;
  invalid_operation ouch;

  _management_service_is_loader_job_devices_ready_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_mount_loader_job_devices_args__isset {
  _management_service_mount_loader_job_devices_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _management_service_mount_loader_job_devices_args__isset;

class management_service_mount_loader_job_devices_args {
 public:

  management_service_mount_loader_job_devices_args(const management_service_mount_loader_job_devices_args&);
  management_service_mount_loader_job_devices_args& operator=(const management_service_mount_loader_job_devices_args&);
  management_service_mount_loader_job_devices_args() : session_id(), job_id() {
  }

  virtual ~management_service_mount_loader_job_devices_args() throw();
  std::string session_id;
  std::string job_id;

  _management_service_mount_loader_job_devices_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const management_service_mount_loader_job_devices_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const management_service_mount_loader_job_devices_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_mount_loader_job_devices_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class management_service_mount_loader_job_devices_pargs {
 public:


  virtual ~management_service_mount_loader_job_devices_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_mount_loader_job_devices_result__isset {
  _management_service_mount_loader_job_devices_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_mount_loader_job_devices_result__isset;

class management_service_mount_loader_job_devices_result {
 public:

  management_service_mount_loader_job_devices_result(const management_service_mount_loader_job_devices_result&);
  management_service_mount_loader_job_devices_result& operator=(const management_service_mount_loader_job_devices_result&);
  management_service_mount_loader_job_devices_result() : success(0) {
  }

  virtual ~management_service_mount_loader_job_devices_result() throw();
  bool success;
  invalid_operation ouch;

  _management_service_mount_loader_job_devices_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const management_service_mount_loader_job_devices_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const management_service_mount_loader_job_devices_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_mount_loader_job_devices_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_mount_loader_job_devices_presult__isset {
  _management_service_mount_loader_job_devices_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_mount_loader_job_devices_presult__isset;

class management_service_mount_loader_job_devices_presult {
 public:


  virtual ~management_service_mount_loader_job_devices_presult() throw();
  bool* success;
  invalid_operation ouch;

  _management_service_mount_loader_job_devices_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_dismount_loader_job_devices_args__isset {
  _management_service_dismount_loader_job_devices_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _management_service_dismount_loader_job_devices_args__isset;

class management_service_dismount_loader_job_devices_args {
 public:

  management_service_dismount_loader_job_devices_args(const management_service_dismount_loader_job_devices_args&);
  management_service_dismount_loader_job_devices_args& operator=(const management_service_dismount_loader_job_devices_args&);
  management_service_dismount_loader_job_devices_args() : session_id(), job_id() {
  }

  virtual ~management_service_dismount_loader_job_devices_args() throw();
  std::string session_id;
  std::string job_id;

  _management_service_dismount_loader_job_devices_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const management_service_dismount_loader_job_devices_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const management_service_dismount_loader_job_devices_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_dismount_loader_job_devices_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class management_service_dismount_loader_job_devices_pargs {
 public:


  virtual ~management_service_dismount_loader_job_devices_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_dismount_loader_job_devices_result__isset {
  _management_service_dismount_loader_job_devices_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_dismount_loader_job_devices_result__isset;

class management_service_dismount_loader_job_devices_result {
 public:

  management_service_dismount_loader_job_devices_result(const management_service_dismount_loader_job_devices_result&);
  management_service_dismount_loader_job_devices_result& operator=(const management_service_dismount_loader_job_devices_result&);
  management_service_dismount_loader_job_devices_result() : success(0) {
  }

  virtual ~management_service_dismount_loader_job_devices_result() throw();
  bool success;
  invalid_operation ouch;

  _management_service_dismount_loader_job_devices_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const management_service_dismount_loader_job_devices_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const management_service_dismount_loader_job_devices_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_dismount_loader_job_devices_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_dismount_loader_job_devices_presult__isset {
  _management_service_dismount_loader_job_devices_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_dismount_loader_job_devices_presult__isset;

class management_service_dismount_loader_job_devices_presult {
 public:


  virtual ~management_service_dismount_loader_job_devices_presult() throw();
  bool* success;
  invalid_operation ouch;

  _management_service_dismount_loader_job_devices_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_discard_snapshots_args__isset {
  _management_service_discard_snapshots_args__isset() : session_id(false), snapshots_id(false) {}
  bool session_id :1;
  bool snapshots_id :1;
} _management_service_discard_snapshots_args__isset;

class management_service_discard_snapshots_args {
 public:

  management_service_discard_snapshots_args(const management_service_discard_snapshots_args&);
  management_service_discard_snapshots_args& operator=(const management_service_discard_snapshots_args&);
  management_service_discard_snapshots_args() : session_id(), snapshots_id() {
  }

  virtual ~management_service_discard_snapshots_args() throw();
  std::string session_id;
  std::string snapshots_id;

  _management_service_discard_snapshots_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_snapshots_id(const std::string& val);

  bool operator == (const management_service_discard_snapshots_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(snapshots_id == rhs.snapshots_id))
      return false;
    return true;
  }
  bool operator != (const management_service_discard_snapshots_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_discard_snapshots_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class management_service_discard_snapshots_pargs {
 public:


  virtual ~management_service_discard_snapshots_pargs() throw();
  const std::string* session_id;
  const std::string* snapshots_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_discard_snapshots_result__isset {
  _management_service_discard_snapshots_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_discard_snapshots_result__isset;

class management_service_discard_snapshots_result {
 public:

  management_service_discard_snapshots_result(const management_service_discard_snapshots_result&);
  management_service_discard_snapshots_result& operator=(const management_service_discard_snapshots_result&);
  management_service_discard_snapshots_result() : success(0) {
  }

  virtual ~management_service_discard_snapshots_result() throw();
  bool success;
  invalid_operation ouch;

  _management_service_discard_snapshots_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const management_service_discard_snapshots_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const management_service_discard_snapshots_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_discard_snapshots_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_discard_snapshots_presult__isset {
  _management_service_discard_snapshots_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_discard_snapshots_presult__isset;

class management_service_discard_snapshots_presult {
 public:


  virtual ~management_service_discard_snapshots_presult() throw();
  bool* success;
  invalid_operation ouch;

  _management_service_discard_snapshots_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_register_service_args__isset {
  _management_service_register_service_args__isset() : session_id(false), register_info(false), machine_info(false) {}
  bool session_id :1;
  bool register_info :1;
  bool machine_info :1;
} _management_service_register_service_args__isset;

class management_service_register_service_args {
 public:

  management_service_register_service_args(const management_service_register_service_args&);
  management_service_register_service_args& operator=(const management_service_register_service_args&);
  management_service_register_service_args() : session_id() {
  }

  virtual ~management_service_register_service_args() throw();
  std::string session_id;
  register_service_info register_info;
  physical_machine_info machine_info;

  _management_service_register_service_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_register_info(const register_service_info& val);

  void __set_machine_info(const physical_machine_info& val);

  bool operator == (const management_service_register_service_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(register_info == rhs.register_info))
      return false;
    if (!(machine_info == rhs.machine_info))
      return false;
    return true;
  }
  bool operator != (const management_service_register_service_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_register_service_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class management_service_register_service_pargs {
 public:


  virtual ~management_service_register_service_pargs() throw();
  const std::string* session_id;
  const register_service_info* register_info;
  const physical_machine_info* machine_info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_register_service_result__isset {
  _management_service_register_service_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_register_service_result__isset;

class management_service_register_service_result {
 public:

  management_service_register_service_result(const management_service_register_service_result&);
  management_service_register_service_result& operator=(const management_service_register_service_result&);
  management_service_register_service_result() {
  }

  virtual ~management_service_register_service_result() throw();
  register_return success;
  invalid_operation ouch;

  _management_service_register_service_result__isset __isset;

  void __set_success(const register_return& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const management_service_register_service_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const management_service_register_service_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_register_service_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_register_service_presult__isset {
  _management_service_register_service_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_register_service_presult__isset;

class management_service_register_service_presult {
 public:


  virtual ~management_service_register_service_presult() throw();
  register_return* success;
  invalid_operation ouch;

  _management_service_register_service_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_register_physical_packer_args__isset {
  _management_service_register_physical_packer_args__isset() : session_id(false), packer_info(false), machine_info(false) {}
  bool session_id :1;
  bool packer_info :1;
  bool machine_info :1;
} _management_service_register_physical_packer_args__isset;

class management_service_register_physical_packer_args {
 public:

  management_service_register_physical_packer_args(const management_service_register_physical_packer_args&);
  management_service_register_physical_packer_args& operator=(const management_service_register_physical_packer_args&);
  management_service_register_physical_packer_args() : session_id() {
  }

  virtual ~management_service_register_physical_packer_args() throw();
  std::string session_id;
  register_physical_packer_info packer_info;
  physical_machine_info machine_info;

  _management_service_register_physical_packer_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_packer_info(const register_physical_packer_info& val);

  void __set_machine_info(const physical_machine_info& val);

  bool operator == (const management_service_register_physical_packer_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(packer_info == rhs.packer_info))
      return false;
    if (!(machine_info == rhs.machine_info))
      return false;
    return true;
  }
  bool operator != (const management_service_register_physical_packer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_register_physical_packer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class management_service_register_physical_packer_pargs {
 public:


  virtual ~management_service_register_physical_packer_pargs() throw();
  const std::string* session_id;
  const register_physical_packer_info* packer_info;
  const physical_machine_info* machine_info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_register_physical_packer_result__isset {
  _management_service_register_physical_packer_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_register_physical_packer_result__isset;

class management_service_register_physical_packer_result {
 public:

  management_service_register_physical_packer_result(const management_service_register_physical_packer_result&);
  management_service_register_physical_packer_result& operator=(const management_service_register_physical_packer_result&);
  management_service_register_physical_packer_result() {
  }

  virtual ~management_service_register_physical_packer_result() throw();
  register_return success;
  invalid_operation ouch;

  _management_service_register_physical_packer_result__isset __isset;

  void __set_success(const register_return& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const management_service_register_physical_packer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const management_service_register_physical_packer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_register_physical_packer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_register_physical_packer_presult__isset {
  _management_service_register_physical_packer_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_register_physical_packer_presult__isset;

class management_service_register_physical_packer_presult {
 public:


  virtual ~management_service_register_physical_packer_presult() throw();
  register_return* success;
  invalid_operation ouch;

  _management_service_register_physical_packer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_check_running_task_args__isset {
  _management_service_check_running_task_args__isset() : task_id(false), parameters(false) {}
  bool task_id :1;
  bool parameters :1;
} _management_service_check_running_task_args__isset;

class management_service_check_running_task_args {
 public:

  management_service_check_running_task_args(const management_service_check_running_task_args&);
  management_service_check_running_task_args& operator=(const management_service_check_running_task_args&);
  management_service_check_running_task_args() : task_id(), parameters() {
  }

  virtual ~management_service_check_running_task_args() throw();
  std::string task_id;
  std::string parameters;

  _management_service_check_running_task_args__isset __isset;

  void __set_task_id(const std::string& val);

  void __set_parameters(const std::string& val);

  bool operator == (const management_service_check_running_task_args & rhs) const
  {
    if (!(task_id == rhs.task_id))
      return false;
    if (!(parameters == rhs.parameters))
      return false;
    return true;
  }
  bool operator != (const management_service_check_running_task_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_check_running_task_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class management_service_check_running_task_pargs {
 public:


  virtual ~management_service_check_running_task_pargs() throw();
  const std::string* task_id;
  const std::string* parameters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_check_running_task_result__isset {
  _management_service_check_running_task_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_check_running_task_result__isset;

class management_service_check_running_task_result {
 public:

  management_service_check_running_task_result(const management_service_check_running_task_result&);
  management_service_check_running_task_result& operator=(const management_service_check_running_task_result&);
  management_service_check_running_task_result() : success(0) {
  }

  virtual ~management_service_check_running_task_result() throw();
  bool success;
  invalid_operation ouch;

  _management_service_check_running_task_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const management_service_check_running_task_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const management_service_check_running_task_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_check_running_task_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_check_running_task_presult__isset {
  _management_service_check_running_task_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _management_service_check_running_task_presult__isset;

class management_service_check_running_task_presult {
 public:


  virtual ~management_service_check_running_task_presult() throw();
  bool* success;
  invalid_operation ouch;

  _management_service_check_running_task_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class management_service_ping_args {
 public:

  management_service_ping_args(const management_service_ping_args&);
  management_service_ping_args& operator=(const management_service_ping_args&);
  management_service_ping_args() {
  }

  virtual ~management_service_ping_args() throw();

  bool operator == (const management_service_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const management_service_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class management_service_ping_pargs {
 public:


  virtual ~management_service_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_ping_result__isset {
  _management_service_ping_result__isset() : success(false) {}
  bool success :1;
} _management_service_ping_result__isset;

class management_service_ping_result {
 public:

  management_service_ping_result(const management_service_ping_result&);
  management_service_ping_result& operator=(const management_service_ping_result&);
  management_service_ping_result() {
  }

  virtual ~management_service_ping_result() throw();
  service_info success;

  _management_service_ping_result__isset __isset;

  void __set_success(const service_info& val);

  bool operator == (const management_service_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const management_service_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const management_service_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _management_service_ping_presult__isset {
  _management_service_ping_presult__isset() : success(false) {}
  bool success :1;
} _management_service_ping_presult__isset;

class management_service_ping_presult {
 public:


  virtual ~management_service_ping_presult() throw();
  service_info* success;

  _management_service_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class management_serviceClient : virtual public management_serviceIf {
 public:
  management_serviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  management_serviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_replica_job_create_detail(replica_job_create_detail& _return, const std::string& session_id, const std::string& job_id);
  void send_get_replica_job_create_detail(const std::string& session_id, const std::string& job_id);
  void recv_get_replica_job_create_detail(replica_job_create_detail& _return);
  void update_replica_job_state(const std::string& session_id, const replica_job_detail& state);
  void send_update_replica_job_state(const std::string& session_id, const replica_job_detail& state);
  void recv_update_replica_job_state();
  bool is_replica_job_alive(const std::string& session_id, const std::string& job_id);
  void send_is_replica_job_alive(const std::string& session_id, const std::string& job_id);
  bool recv_is_replica_job_alive();
  void get_loader_job_create_detail(loader_job_create_detail& _return, const std::string& session_id, const std::string& job_id);
  void send_get_loader_job_create_detail(const std::string& session_id, const std::string& job_id);
  void recv_get_loader_job_create_detail(loader_job_create_detail& _return);
  void update_loader_job_state(const std::string& session_id, const loader_job_detail& state);
  void send_update_loader_job_state(const std::string& session_id, const loader_job_detail& state);
  void recv_update_loader_job_state();
  bool take_snapshots(const std::string& session_id, const std::string& snapshot_id);
  void send_take_snapshots(const std::string& session_id, const std::string& snapshot_id);
  bool recv_take_snapshots();
  bool check_snapshots(const std::string& session_id, const std::string& snapshots_id);
  void send_check_snapshots(const std::string& session_id, const std::string& snapshots_id);
  bool recv_check_snapshots();
  void get_launcher_job_create_detail(launcher_job_create_detail& _return, const std::string& session_id, const std::string& job_id);
  void send_get_launcher_job_create_detail(const std::string& session_id, const std::string& job_id);
  void recv_get_launcher_job_create_detail(launcher_job_create_detail& _return);
  void update_launcher_job_state(const std::string& session_id, const launcher_job_detail& state);
  void send_update_launcher_job_state(const std::string& session_id, const launcher_job_detail& state);
  void recv_update_launcher_job_state();
  void update_launcher_job_state_ex(const std::string& session_id, const launcher_job_detail& state);
  void send_update_launcher_job_state_ex(const std::string& session_id, const launcher_job_detail& state);
  void recv_update_launcher_job_state_ex();
  bool is_launcher_job_image_ready(const std::string& session_id, const std::string& job_id);
  void send_is_launcher_job_image_ready(const std::string& session_id, const std::string& job_id);
  bool recv_is_launcher_job_image_ready();
  bool is_loader_job_devices_ready(const std::string& session_id, const std::string& job_id);
  void send_is_loader_job_devices_ready(const std::string& session_id, const std::string& job_id);
  bool recv_is_loader_job_devices_ready();
  bool mount_loader_job_devices(const std::string& session_id, const std::string& job_id);
  void send_mount_loader_job_devices(const std::string& session_id, const std::string& job_id);
  bool recv_mount_loader_job_devices();
  bool dismount_loader_job_devices(const std::string& session_id, const std::string& job_id);
  void send_dismount_loader_job_devices(const std::string& session_id, const std::string& job_id);
  bool recv_dismount_loader_job_devices();
  bool discard_snapshots(const std::string& session_id, const std::string& snapshots_id);
  void send_discard_snapshots(const std::string& session_id, const std::string& snapshots_id);
  bool recv_discard_snapshots();
  void register_service(register_return& _return, const std::string& session_id, const register_service_info& register_info, const physical_machine_info& machine_info);
  void send_register_service(const std::string& session_id, const register_service_info& register_info, const physical_machine_info& machine_info);
  void recv_register_service(register_return& _return);
  void register_physical_packer(register_return& _return, const std::string& session_id, const register_physical_packer_info& packer_info, const physical_machine_info& machine_info);
  void send_register_physical_packer(const std::string& session_id, const register_physical_packer_info& packer_info, const physical_machine_info& machine_info);
  void recv_register_physical_packer(register_return& _return);
  bool check_running_task(const std::string& task_id, const std::string& parameters);
  void send_check_running_task(const std::string& task_id, const std::string& parameters);
  bool recv_check_running_task();
  void ping(service_info& _return);
  void send_ping();
  void recv_ping(service_info& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class management_serviceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<management_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (management_serviceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_replica_job_create_detail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_replica_job_state(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_is_replica_job_alive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_loader_job_create_detail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_loader_job_state(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_take_snapshots(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_check_snapshots(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_launcher_job_create_detail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_launcher_job_state(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_launcher_job_state_ex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_is_launcher_job_image_ready(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_is_loader_job_devices_ready(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mount_loader_job_devices(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dismount_loader_job_devices(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_discard_snapshots(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_register_service(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_register_physical_packer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_check_running_task(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  management_serviceProcessor(boost::shared_ptr<management_serviceIf> iface) :
    iface_(iface) {
    processMap_["get_replica_job_create_detail"] = &management_serviceProcessor::process_get_replica_job_create_detail;
    processMap_["update_replica_job_state"] = &management_serviceProcessor::process_update_replica_job_state;
    processMap_["is_replica_job_alive"] = &management_serviceProcessor::process_is_replica_job_alive;
    processMap_["get_loader_job_create_detail"] = &management_serviceProcessor::process_get_loader_job_create_detail;
    processMap_["update_loader_job_state"] = &management_serviceProcessor::process_update_loader_job_state;
    processMap_["take_snapshots"] = &management_serviceProcessor::process_take_snapshots;
    processMap_["check_snapshots"] = &management_serviceProcessor::process_check_snapshots;
    processMap_["get_launcher_job_create_detail"] = &management_serviceProcessor::process_get_launcher_job_create_detail;
    processMap_["update_launcher_job_state"] = &management_serviceProcessor::process_update_launcher_job_state;
    processMap_["update_launcher_job_state_ex"] = &management_serviceProcessor::process_update_launcher_job_state_ex;
    processMap_["is_launcher_job_image_ready"] = &management_serviceProcessor::process_is_launcher_job_image_ready;
    processMap_["is_loader_job_devices_ready"] = &management_serviceProcessor::process_is_loader_job_devices_ready;
    processMap_["mount_loader_job_devices"] = &management_serviceProcessor::process_mount_loader_job_devices;
    processMap_["dismount_loader_job_devices"] = &management_serviceProcessor::process_dismount_loader_job_devices;
    processMap_["discard_snapshots"] = &management_serviceProcessor::process_discard_snapshots;
    processMap_["register_service"] = &management_serviceProcessor::process_register_service;
    processMap_["register_physical_packer"] = &management_serviceProcessor::process_register_physical_packer;
    processMap_["check_running_task"] = &management_serviceProcessor::process_check_running_task;
    processMap_["ping"] = &management_serviceProcessor::process_ping;
  }

  virtual ~management_serviceProcessor() {}
};

class management_serviceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  management_serviceProcessorFactory(const ::boost::shared_ptr< management_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< management_serviceIfFactory > handlerFactory_;
};

class management_serviceMultiface : virtual public management_serviceIf {
 public:
  management_serviceMultiface(std::vector<boost::shared_ptr<management_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~management_serviceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<management_serviceIf> > ifaces_;
  management_serviceMultiface() {}
  void add(boost::shared_ptr<management_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get_replica_job_create_detail(replica_job_create_detail& _return, const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_replica_job_create_detail(_return, session_id, job_id);
    }
    ifaces_[i]->get_replica_job_create_detail(_return, session_id, job_id);
    return;
  }

  void update_replica_job_state(const std::string& session_id, const replica_job_detail& state) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_replica_job_state(session_id, state);
    }
    ifaces_[i]->update_replica_job_state(session_id, state);
  }

  bool is_replica_job_alive(const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->is_replica_job_alive(session_id, job_id);
    }
    return ifaces_[i]->is_replica_job_alive(session_id, job_id);
  }

  void get_loader_job_create_detail(loader_job_create_detail& _return, const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_loader_job_create_detail(_return, session_id, job_id);
    }
    ifaces_[i]->get_loader_job_create_detail(_return, session_id, job_id);
    return;
  }

  void update_loader_job_state(const std::string& session_id, const loader_job_detail& state) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_loader_job_state(session_id, state);
    }
    ifaces_[i]->update_loader_job_state(session_id, state);
  }

  bool take_snapshots(const std::string& session_id, const std::string& snapshot_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->take_snapshots(session_id, snapshot_id);
    }
    return ifaces_[i]->take_snapshots(session_id, snapshot_id);
  }

  bool check_snapshots(const std::string& session_id, const std::string& snapshots_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->check_snapshots(session_id, snapshots_id);
    }
    return ifaces_[i]->check_snapshots(session_id, snapshots_id);
  }

  void get_launcher_job_create_detail(launcher_job_create_detail& _return, const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_launcher_job_create_detail(_return, session_id, job_id);
    }
    ifaces_[i]->get_launcher_job_create_detail(_return, session_id, job_id);
    return;
  }

  void update_launcher_job_state(const std::string& session_id, const launcher_job_detail& state) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_launcher_job_state(session_id, state);
    }
    ifaces_[i]->update_launcher_job_state(session_id, state);
  }

  void update_launcher_job_state_ex(const std::string& session_id, const launcher_job_detail& state) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_launcher_job_state_ex(session_id, state);
    }
    ifaces_[i]->update_launcher_job_state_ex(session_id, state);
  }

  bool is_launcher_job_image_ready(const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->is_launcher_job_image_ready(session_id, job_id);
    }
    return ifaces_[i]->is_launcher_job_image_ready(session_id, job_id);
  }

  bool is_loader_job_devices_ready(const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->is_loader_job_devices_ready(session_id, job_id);
    }
    return ifaces_[i]->is_loader_job_devices_ready(session_id, job_id);
  }

  bool mount_loader_job_devices(const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mount_loader_job_devices(session_id, job_id);
    }
    return ifaces_[i]->mount_loader_job_devices(session_id, job_id);
  }

  bool dismount_loader_job_devices(const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dismount_loader_job_devices(session_id, job_id);
    }
    return ifaces_[i]->dismount_loader_job_devices(session_id, job_id);
  }

  bool discard_snapshots(const std::string& session_id, const std::string& snapshots_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->discard_snapshots(session_id, snapshots_id);
    }
    return ifaces_[i]->discard_snapshots(session_id, snapshots_id);
  }

  void register_service(register_return& _return, const std::string& session_id, const register_service_info& register_info, const physical_machine_info& machine_info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->register_service(_return, session_id, register_info, machine_info);
    }
    ifaces_[i]->register_service(_return, session_id, register_info, machine_info);
    return;
  }

  void register_physical_packer(register_return& _return, const std::string& session_id, const register_physical_packer_info& packer_info, const physical_machine_info& machine_info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->register_physical_packer(_return, session_id, packer_info, machine_info);
    }
    ifaces_[i]->register_physical_packer(_return, session_id, packer_info, machine_info);
    return;
  }

  bool check_running_task(const std::string& task_id, const std::string& parameters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->check_running_task(task_id, parameters);
    }
    return ifaces_[i]->check_running_task(task_id, parameters);
  }

  void ping(service_info& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return);
    }
    ifaces_[i]->ping(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class management_serviceConcurrentClient : virtual public management_serviceIf {
 public:
  management_serviceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  management_serviceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_replica_job_create_detail(replica_job_create_detail& _return, const std::string& session_id, const std::string& job_id);
  int32_t send_get_replica_job_create_detail(const std::string& session_id, const std::string& job_id);
  void recv_get_replica_job_create_detail(replica_job_create_detail& _return, const int32_t seqid);
  void update_replica_job_state(const std::string& session_id, const replica_job_detail& state);
  int32_t send_update_replica_job_state(const std::string& session_id, const replica_job_detail& state);
  void recv_update_replica_job_state(const int32_t seqid);
  bool is_replica_job_alive(const std::string& session_id, const std::string& job_id);
  int32_t send_is_replica_job_alive(const std::string& session_id, const std::string& job_id);
  bool recv_is_replica_job_alive(const int32_t seqid);
  void get_loader_job_create_detail(loader_job_create_detail& _return, const std::string& session_id, const std::string& job_id);
  int32_t send_get_loader_job_create_detail(const std::string& session_id, const std::string& job_id);
  void recv_get_loader_job_create_detail(loader_job_create_detail& _return, const int32_t seqid);
  void update_loader_job_state(const std::string& session_id, const loader_job_detail& state);
  int32_t send_update_loader_job_state(const std::string& session_id, const loader_job_detail& state);
  void recv_update_loader_job_state(const int32_t seqid);
  bool take_snapshots(const std::string& session_id, const std::string& snapshot_id);
  int32_t send_take_snapshots(const std::string& session_id, const std::string& snapshot_id);
  bool recv_take_snapshots(const int32_t seqid);
  bool check_snapshots(const std::string& session_id, const std::string& snapshots_id);
  int32_t send_check_snapshots(const std::string& session_id, const std::string& snapshots_id);
  bool recv_check_snapshots(const int32_t seqid);
  void get_launcher_job_create_detail(launcher_job_create_detail& _return, const std::string& session_id, const std::string& job_id);
  int32_t send_get_launcher_job_create_detail(const std::string& session_id, const std::string& job_id);
  void recv_get_launcher_job_create_detail(launcher_job_create_detail& _return, const int32_t seqid);
  void update_launcher_job_state(const std::string& session_id, const launcher_job_detail& state);
  int32_t send_update_launcher_job_state(const std::string& session_id, const launcher_job_detail& state);
  void recv_update_launcher_job_state(const int32_t seqid);
  void update_launcher_job_state_ex(const std::string& session_id, const launcher_job_detail& state);
  int32_t send_update_launcher_job_state_ex(const std::string& session_id, const launcher_job_detail& state);
  void recv_update_launcher_job_state_ex(const int32_t seqid);
  bool is_launcher_job_image_ready(const std::string& session_id, const std::string& job_id);
  int32_t send_is_launcher_job_image_ready(const std::string& session_id, const std::string& job_id);
  bool recv_is_launcher_job_image_ready(const int32_t seqid);
  bool is_loader_job_devices_ready(const std::string& session_id, const std::string& job_id);
  int32_t send_is_loader_job_devices_ready(const std::string& session_id, const std::string& job_id);
  bool recv_is_loader_job_devices_ready(const int32_t seqid);
  bool mount_loader_job_devices(const std::string& session_id, const std::string& job_id);
  int32_t send_mount_loader_job_devices(const std::string& session_id, const std::string& job_id);
  bool recv_mount_loader_job_devices(const int32_t seqid);
  bool dismount_loader_job_devices(const std::string& session_id, const std::string& job_id);
  int32_t send_dismount_loader_job_devices(const std::string& session_id, const std::string& job_id);
  bool recv_dismount_loader_job_devices(const int32_t seqid);
  bool discard_snapshots(const std::string& session_id, const std::string& snapshots_id);
  int32_t send_discard_snapshots(const std::string& session_id, const std::string& snapshots_id);
  bool recv_discard_snapshots(const int32_t seqid);
  void register_service(register_return& _return, const std::string& session_id, const register_service_info& register_info, const physical_machine_info& machine_info);
  int32_t send_register_service(const std::string& session_id, const register_service_info& register_info, const physical_machine_info& machine_info);
  void recv_register_service(register_return& _return, const int32_t seqid);
  void register_physical_packer(register_return& _return, const std::string& session_id, const register_physical_packer_info& packer_info, const physical_machine_info& machine_info);
  int32_t send_register_physical_packer(const std::string& session_id, const register_physical_packer_info& packer_info, const physical_machine_info& machine_info);
  void recv_register_physical_packer(register_return& _return, const int32_t seqid);
  bool check_running_task(const std::string& task_id, const std::string& parameters);
  int32_t send_check_running_task(const std::string& task_id, const std::string& parameters);
  bool recv_check_running_task(const int32_t seqid);
  void ping(service_info& _return);
  int32_t send_ping();
  void recv_ping(service_info& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

class management_serviceCobClient;

class management_serviceCobClIf {
 public:
  virtual ~management_serviceCobClIf() {}
  virtual void get_replica_job_create_detail(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void update_replica_job_state(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const replica_job_detail& state) = 0;
  virtual void is_replica_job_alive(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void get_loader_job_create_detail(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void update_loader_job_state(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const loader_job_detail& state) = 0;
  virtual void take_snapshots(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const std::string& snapshot_id) = 0;
  virtual void check_snapshots(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const std::string& snapshots_id) = 0;
  virtual void get_launcher_job_create_detail(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void update_launcher_job_state(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const launcher_job_detail& state) = 0;
  virtual void update_launcher_job_state_ex(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const launcher_job_detail& state) = 0;
  virtual void is_launcher_job_image_ready(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void is_loader_job_devices_ready(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void mount_loader_job_devices(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void dismount_loader_job_devices(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void discard_snapshots(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const std::string& snapshots_id) = 0;
  virtual void register_service(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const register_service_info& register_info, const physical_machine_info& machine_info) = 0;
  virtual void register_physical_packer(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const register_physical_packer_info& packer_info, const physical_machine_info& machine_info) = 0;
  virtual void check_running_task(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& task_id, const std::string& parameters) = 0;
  virtual void ping(tcxx::function<void(management_serviceCobClient* client)> cob) = 0;
};

class management_serviceCobSvIf {
 public:
  virtual ~management_serviceCobSvIf() {}
  virtual void get_replica_job_create_detail(tcxx::function<void(replica_job_create_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void update_replica_job_state(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const replica_job_detail& state) = 0;
  virtual void is_replica_job_alive(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void get_loader_job_create_detail(tcxx::function<void(loader_job_create_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void update_loader_job_state(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const loader_job_detail& state) = 0;
  virtual void take_snapshots(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& snapshot_id) = 0;
  virtual void check_snapshots(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& snapshots_id) = 0;
  virtual void get_launcher_job_create_detail(tcxx::function<void(launcher_job_create_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void update_launcher_job_state(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const launcher_job_detail& state) = 0;
  virtual void update_launcher_job_state_ex(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const launcher_job_detail& state) = 0;
  virtual void is_launcher_job_image_ready(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void is_loader_job_devices_ready(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void mount_loader_job_devices(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void dismount_loader_job_devices(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void discard_snapshots(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& snapshots_id) = 0;
  virtual void register_service(tcxx::function<void(register_return const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const register_service_info& register_info, const physical_machine_info& machine_info) = 0;
  virtual void register_physical_packer(tcxx::function<void(register_return const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const register_physical_packer_info& packer_info, const physical_machine_info& machine_info) = 0;
  virtual void check_running_task(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& task_id, const std::string& parameters) = 0;
  virtual void ping(tcxx::function<void(service_info const& _return)> cob) = 0;
};

class management_serviceCobSvIfFactory {
 public:
  typedef management_serviceCobSvIf Handler;

  virtual ~management_serviceCobSvIfFactory() {}

  virtual management_serviceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(management_serviceCobSvIf* /* handler */) = 0;
};

class management_serviceCobSvIfSingletonFactory : virtual public management_serviceCobSvIfFactory {
 public:
  management_serviceCobSvIfSingletonFactory(const boost::shared_ptr<management_serviceCobSvIf>& iface) : iface_(iface) {}
  virtual ~management_serviceCobSvIfSingletonFactory() {}

  virtual management_serviceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(management_serviceCobSvIf* /* handler */) {}

 protected:
  boost::shared_ptr<management_serviceCobSvIf> iface_;
};

class management_serviceCobSvNull : virtual public management_serviceCobSvIf {
 public:
  virtual ~management_serviceCobSvNull() {}
  void get_replica_job_create_detail(tcxx::function<void(replica_job_create_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    replica_job_create_detail _return;
    return cob(_return);
  }
  void update_replica_job_state(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const replica_job_detail& /* state */) {
    return cob();
  }
  void is_replica_job_alive(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
  void get_loader_job_create_detail(tcxx::function<void(loader_job_create_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    loader_job_create_detail _return;
    return cob(_return);
  }
  void update_loader_job_state(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const loader_job_detail& /* state */) {
    return cob();
  }
  void take_snapshots(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* snapshot_id */) {
    bool _return = false;
    return cob(_return);
  }
  void check_snapshots(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* snapshots_id */) {
    bool _return = false;
    return cob(_return);
  }
  void get_launcher_job_create_detail(tcxx::function<void(launcher_job_create_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    launcher_job_create_detail _return;
    return cob(_return);
  }
  void update_launcher_job_state(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const launcher_job_detail& /* state */) {
    return cob();
  }
  void update_launcher_job_state_ex(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const launcher_job_detail& /* state */) {
    return cob();
  }
  void is_launcher_job_image_ready(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
  void is_loader_job_devices_ready(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
  void mount_loader_job_devices(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
  void dismount_loader_job_devices(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
  void discard_snapshots(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* snapshots_id */) {
    bool _return = false;
    return cob(_return);
  }
  void register_service(tcxx::function<void(register_return const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const register_service_info& /* register_info */, const physical_machine_info& /* machine_info */) {
    register_return _return;
    return cob(_return);
  }
  void register_physical_packer(tcxx::function<void(register_return const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const register_physical_packer_info& /* packer_info */, const physical_machine_info& /* machine_info */) {
    register_return _return;
    return cob(_return);
  }
  void check_running_task(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* task_id */, const std::string& /* parameters */) {
    bool _return = false;
    return cob(_return);
  }
  void ping(tcxx::function<void(service_info const& _return)> cob) {
    service_info _return;
    return cob(_return);
  }
};

class management_serviceCobClient : virtual public management_serviceCobClIf {
 public:
  management_serviceCobClient(boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    channel_(channel),
    itrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    otrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    piprot_(protocolFactory->getProtocol(itrans_)),
    poprot_(protocolFactory->getProtocol(otrans_)) {
    iprot_ = piprot_.get();
    oprot_ = poprot_.get();
  }
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void get_replica_job_create_detail(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_get_replica_job_create_detail(const std::string& session_id, const std::string& job_id);
  void recv_get_replica_job_create_detail(replica_job_create_detail& _return);
  void update_replica_job_state(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const replica_job_detail& state);
  void send_update_replica_job_state(const std::string& session_id, const replica_job_detail& state);
  void recv_update_replica_job_state();
  void is_replica_job_alive(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_is_replica_job_alive(const std::string& session_id, const std::string& job_id);
  bool recv_is_replica_job_alive();
  void get_loader_job_create_detail(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_get_loader_job_create_detail(const std::string& session_id, const std::string& job_id);
  void recv_get_loader_job_create_detail(loader_job_create_detail& _return);
  void update_loader_job_state(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const loader_job_detail& state);
  void send_update_loader_job_state(const std::string& session_id, const loader_job_detail& state);
  void recv_update_loader_job_state();
  void take_snapshots(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const std::string& snapshot_id);
  void send_take_snapshots(const std::string& session_id, const std::string& snapshot_id);
  bool recv_take_snapshots();
  void check_snapshots(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const std::string& snapshots_id);
  void send_check_snapshots(const std::string& session_id, const std::string& snapshots_id);
  bool recv_check_snapshots();
  void get_launcher_job_create_detail(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_get_launcher_job_create_detail(const std::string& session_id, const std::string& job_id);
  void recv_get_launcher_job_create_detail(launcher_job_create_detail& _return);
  void update_launcher_job_state(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const launcher_job_detail& state);
  void send_update_launcher_job_state(const std::string& session_id, const launcher_job_detail& state);
  void recv_update_launcher_job_state();
  void update_launcher_job_state_ex(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const launcher_job_detail& state);
  void send_update_launcher_job_state_ex(const std::string& session_id, const launcher_job_detail& state);
  void recv_update_launcher_job_state_ex();
  void is_launcher_job_image_ready(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_is_launcher_job_image_ready(const std::string& session_id, const std::string& job_id);
  bool recv_is_launcher_job_image_ready();
  void is_loader_job_devices_ready(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_is_loader_job_devices_ready(const std::string& session_id, const std::string& job_id);
  bool recv_is_loader_job_devices_ready();
  void mount_loader_job_devices(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_mount_loader_job_devices(const std::string& session_id, const std::string& job_id);
  bool recv_mount_loader_job_devices();
  void dismount_loader_job_devices(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_dismount_loader_job_devices(const std::string& session_id, const std::string& job_id);
  bool recv_dismount_loader_job_devices();
  void discard_snapshots(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const std::string& snapshots_id);
  void send_discard_snapshots(const std::string& session_id, const std::string& snapshots_id);
  bool recv_discard_snapshots();
  void register_service(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const register_service_info& register_info, const physical_machine_info& machine_info);
  void send_register_service(const std::string& session_id, const register_service_info& register_info, const physical_machine_info& machine_info);
  void recv_register_service(register_return& _return);
  void register_physical_packer(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& session_id, const register_physical_packer_info& packer_info, const physical_machine_info& machine_info);
  void send_register_physical_packer(const std::string& session_id, const register_physical_packer_info& packer_info, const physical_machine_info& machine_info);
  void recv_register_physical_packer(register_return& _return);
  void check_running_task(tcxx::function<void(management_serviceCobClient* client)> cob, const std::string& task_id, const std::string& parameters);
  void send_check_running_task(const std::string& task_id, const std::string& parameters);
  bool recv_check_running_task();
  void ping(tcxx::function<void(management_serviceCobClient* client)> cob);
  void send_ping();
  void recv_ping(service_info& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> itrans_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> otrans_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class management_serviceAsyncProcessor : public ::apache::thrift::async::TAsyncDispatchProcessor {
 protected:
  boost::shared_ptr<management_serviceCobSvIf> iface_;
  virtual void dispatchCall(tcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (management_serviceAsyncProcessor::*ProcessFunction)(tcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_replica_job_create_detail(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_replica_job_create_detail(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const replica_job_create_detail& _return);
  void throw_get_replica_job_create_detail(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_update_replica_job_state(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_update_replica_job_state(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx);
  void throw_update_replica_job_state(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_is_replica_job_alive(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_is_replica_job_alive(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_is_replica_job_alive(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_loader_job_create_detail(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_loader_job_create_detail(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const loader_job_create_detail& _return);
  void throw_get_loader_job_create_detail(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_update_loader_job_state(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_update_loader_job_state(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx);
  void throw_update_loader_job_state(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_take_snapshots(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_take_snapshots(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_take_snapshots(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_check_snapshots(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_check_snapshots(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_check_snapshots(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_launcher_job_create_detail(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_launcher_job_create_detail(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const launcher_job_create_detail& _return);
  void throw_get_launcher_job_create_detail(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_update_launcher_job_state(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_update_launcher_job_state(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx);
  void throw_update_launcher_job_state(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_update_launcher_job_state_ex(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_update_launcher_job_state_ex(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx);
  void throw_update_launcher_job_state_ex(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_is_launcher_job_image_ready(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_is_launcher_job_image_ready(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_is_launcher_job_image_ready(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_is_loader_job_devices_ready(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_is_loader_job_devices_ready(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_is_loader_job_devices_ready(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_mount_loader_job_devices(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_mount_loader_job_devices(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_mount_loader_job_devices(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_dismount_loader_job_devices(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_dismount_loader_job_devices(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_dismount_loader_job_devices(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_discard_snapshots(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_discard_snapshots(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_discard_snapshots(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_register_service(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_register_service(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const register_return& _return);
  void throw_register_service(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_register_physical_packer(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_register_physical_packer(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const register_return& _return);
  void throw_register_physical_packer(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_check_running_task(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_check_running_task(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_check_running_task(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_ping(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_ping(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const service_info& _return);
  void throw_ping(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  management_serviceAsyncProcessor(boost::shared_ptr<management_serviceCobSvIf> iface) :
    iface_(iface) {
    processMap_["get_replica_job_create_detail"] = &management_serviceAsyncProcessor::process_get_replica_job_create_detail;
    processMap_["update_replica_job_state"] = &management_serviceAsyncProcessor::process_update_replica_job_state;
    processMap_["is_replica_job_alive"] = &management_serviceAsyncProcessor::process_is_replica_job_alive;
    processMap_["get_loader_job_create_detail"] = &management_serviceAsyncProcessor::process_get_loader_job_create_detail;
    processMap_["update_loader_job_state"] = &management_serviceAsyncProcessor::process_update_loader_job_state;
    processMap_["take_snapshots"] = &management_serviceAsyncProcessor::process_take_snapshots;
    processMap_["check_snapshots"] = &management_serviceAsyncProcessor::process_check_snapshots;
    processMap_["get_launcher_job_create_detail"] = &management_serviceAsyncProcessor::process_get_launcher_job_create_detail;
    processMap_["update_launcher_job_state"] = &management_serviceAsyncProcessor::process_update_launcher_job_state;
    processMap_["update_launcher_job_state_ex"] = &management_serviceAsyncProcessor::process_update_launcher_job_state_ex;
    processMap_["is_launcher_job_image_ready"] = &management_serviceAsyncProcessor::process_is_launcher_job_image_ready;
    processMap_["is_loader_job_devices_ready"] = &management_serviceAsyncProcessor::process_is_loader_job_devices_ready;
    processMap_["mount_loader_job_devices"] = &management_serviceAsyncProcessor::process_mount_loader_job_devices;
    processMap_["dismount_loader_job_devices"] = &management_serviceAsyncProcessor::process_dismount_loader_job_devices;
    processMap_["discard_snapshots"] = &management_serviceAsyncProcessor::process_discard_snapshots;
    processMap_["register_service"] = &management_serviceAsyncProcessor::process_register_service;
    processMap_["register_physical_packer"] = &management_serviceAsyncProcessor::process_register_physical_packer;
    processMap_["check_running_task"] = &management_serviceAsyncProcessor::process_check_running_task;
    processMap_["ping"] = &management_serviceAsyncProcessor::process_ping;
  }

  virtual ~management_serviceAsyncProcessor() {}
};

class management_serviceAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  management_serviceAsyncProcessorFactory(const ::boost::shared_ptr< management_serviceCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< management_serviceCobSvIfFactory > handlerFactory_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}} // namespace

#endif
