/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef service_proxy_H
#define service_proxy_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/cxxfunctional.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "saasame_types.h"
#include "physical_packer_service_proxy.h"

namespace saasame { namespace transport {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class service_proxyIf : virtual public physical_packer_service_proxyIf {
 public:
  virtual ~service_proxyIf() {}
  virtual void create_job_ex_p(job_detail& _return, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type) = 0;
  virtual void get_job_p(job_detail& _return, const std::string& session_id, const std::string& job_id, const std::string& service_type) = 0;
  virtual bool interrupt_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type) = 0;
  virtual bool resume_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type) = 0;
  virtual bool remove_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type) = 0;
  virtual bool running_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type) = 0;
  virtual bool update_job_p(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type) = 0;
  virtual bool remove_snapshot_image_p(const std::string& session_id, const std::map<std::string, image_map_info> & images, const std::string& service_type) = 0;
  virtual bool test_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type) = 0;
  virtual bool add_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type) = 0;
  virtual bool remove_connection_p(const std::string& session_id, const std::string& connection_id, const std::string& service_type) = 0;
  virtual bool modify_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type) = 0;
  virtual void enumerate_connections_p(std::vector<connection> & _return, const std::string& session_id, const std::string& service_type) = 0;
  virtual void get_connection_p(connection& _return, const std::string& session_id, const std::string& connection_id, const std::string& service_type) = 0;
  virtual void get_virtual_host_info_p(virtual_host& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) = 0;
  virtual void get_virtual_machine_detail_p(virtual_machine& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) = 0;
  virtual void get_physical_machine_detail_p(physical_machine_info& _return, const std::string& session_id, const std::string& host, const machine_detail_filter::type filter) = 0;
  virtual bool verify_packer_to_carrier_p(const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl) = 0;
  virtual void take_packer_xray_p(std::string& _return, const std::string& session_id, const std::string& host) = 0;
  virtual void get_packer_service_info_p(service_info& _return, const std::string& session_id, const std::string& host) = 0;
  virtual bool set_customized_id_p(const std::string& session_id, const std::string& disk_addr, const std::string& disk_id) = 0;
};

class service_proxyIfFactory : virtual public physical_packer_service_proxyIfFactory {
 public:
  typedef service_proxyIf Handler;

  virtual ~service_proxyIfFactory() {}

  virtual service_proxyIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(common_serviceIf* /* handler */) = 0;
};

class service_proxyIfSingletonFactory : virtual public service_proxyIfFactory {
 public:
  service_proxyIfSingletonFactory(const boost::shared_ptr<service_proxyIf>& iface) : iface_(iface) {}
  virtual ~service_proxyIfSingletonFactory() {}

  virtual service_proxyIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(common_serviceIf* /* handler */) {}

 protected:
  boost::shared_ptr<service_proxyIf> iface_;
};

class service_proxyNull : virtual public service_proxyIf , virtual public physical_packer_service_proxyNull {
 public:
  virtual ~service_proxyNull() {}
  void create_job_ex_p(job_detail& /* _return */, const std::string& /* session_id */, const std::string& /* job_id */, const create_job_detail& /* create_job */, const std::string& /* service_type */) {
    return;
  }
  void get_job_p(job_detail& /* _return */, const std::string& /* session_id */, const std::string& /* job_id */, const std::string& /* service_type */) {
    return;
  }
  bool interrupt_job_p(const std::string& /* session_id */, const std::string& /* job_id */, const std::string& /* service_type */) {
    bool _return = false;
    return _return;
  }
  bool resume_job_p(const std::string& /* session_id */, const std::string& /* job_id */, const std::string& /* service_type */) {
    bool _return = false;
    return _return;
  }
  bool remove_job_p(const std::string& /* session_id */, const std::string& /* job_id */, const std::string& /* service_type */) {
    bool _return = false;
    return _return;
  }
  bool running_job_p(const std::string& /* session_id */, const std::string& /* job_id */, const std::string& /* service_type */) {
    bool _return = false;
    return _return;
  }
  bool update_job_p(const std::string& /* session_id */, const std::string& /* job_id */, const create_job_detail& /* create_job */, const std::string& /* service_type */) {
    bool _return = false;
    return _return;
  }
  bool remove_snapshot_image_p(const std::string& /* session_id */, const std::map<std::string, image_map_info> & /* images */, const std::string& /* service_type */) {
    bool _return = false;
    return _return;
  }
  bool test_connection_p(const std::string& /* session_id */, const connection& /* conn */, const std::string& /* service_type */) {
    bool _return = false;
    return _return;
  }
  bool add_connection_p(const std::string& /* session_id */, const connection& /* conn */, const std::string& /* service_type */) {
    bool _return = false;
    return _return;
  }
  bool remove_connection_p(const std::string& /* session_id */, const std::string& /* connection_id */, const std::string& /* service_type */) {
    bool _return = false;
    return _return;
  }
  bool modify_connection_p(const std::string& /* session_id */, const connection& /* conn */, const std::string& /* service_type */) {
    bool _return = false;
    return _return;
  }
  void enumerate_connections_p(std::vector<connection> & /* _return */, const std::string& /* session_id */, const std::string& /* service_type */) {
    return;
  }
  void get_connection_p(connection& /* _return */, const std::string& /* session_id */, const std::string& /* connection_id */, const std::string& /* service_type */) {
    return;
  }
  void get_virtual_host_info_p(virtual_host& /* _return */, const std::string& /* session_id */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */) {
    return;
  }
  void get_virtual_machine_detail_p(virtual_machine& /* _return */, const std::string& /* session_id */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */, const std::string& /* machine_id */) {
    return;
  }
  void get_physical_machine_detail_p(physical_machine_info& /* _return */, const std::string& /* session_id */, const std::string& /* host */, const machine_detail_filter::type /* filter */) {
    return;
  }
  bool verify_packer_to_carrier_p(const std::string& /* packer */, const std::string& /* carrier */, const int32_t /* port */, const bool /* is_ssl */) {
    bool _return = false;
    return _return;
  }
  void take_packer_xray_p(std::string& /* _return */, const std::string& /* session_id */, const std::string& /* host */) {
    return;
  }
  void get_packer_service_info_p(service_info& /* _return */, const std::string& /* session_id */, const std::string& /* host */) {
    return;
  }
  bool set_customized_id_p(const std::string& /* session_id */, const std::string& /* disk_addr */, const std::string& /* disk_id */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _service_proxy_create_job_ex_p_args__isset {
  _service_proxy_create_job_ex_p_args__isset() : session_id(false), job_id(false), create_job(false), service_type(false) {}
  bool session_id :1;
  bool job_id :1;
  bool create_job :1;
  bool service_type :1;
} _service_proxy_create_job_ex_p_args__isset;

class service_proxy_create_job_ex_p_args {
 public:

  service_proxy_create_job_ex_p_args(const service_proxy_create_job_ex_p_args&);
  service_proxy_create_job_ex_p_args& operator=(const service_proxy_create_job_ex_p_args&);
  service_proxy_create_job_ex_p_args() : session_id(), job_id(), service_type() {
  }

  virtual ~service_proxy_create_job_ex_p_args() throw();
  std::string session_id;
  std::string job_id;
  create_job_detail create_job;
  std::string service_type;

  _service_proxy_create_job_ex_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  void __set_create_job(const create_job_detail& val);

  void __set_service_type(const std::string& val);

  bool operator == (const service_proxy_create_job_ex_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    if (!(create_job == rhs.create_job))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const service_proxy_create_job_ex_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_create_job_ex_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class service_proxy_create_job_ex_p_pargs {
 public:


  virtual ~service_proxy_create_job_ex_p_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;
  const create_job_detail* create_job;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_create_job_ex_p_result__isset {
  _service_proxy_create_job_ex_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_create_job_ex_p_result__isset;

class service_proxy_create_job_ex_p_result {
 public:

  service_proxy_create_job_ex_p_result(const service_proxy_create_job_ex_p_result&);
  service_proxy_create_job_ex_p_result& operator=(const service_proxy_create_job_ex_p_result&);
  service_proxy_create_job_ex_p_result() {
  }

  virtual ~service_proxy_create_job_ex_p_result() throw();
  job_detail success;
  invalid_operation ouch;

  _service_proxy_create_job_ex_p_result__isset __isset;

  void __set_success(const job_detail& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const service_proxy_create_job_ex_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const service_proxy_create_job_ex_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_create_job_ex_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_create_job_ex_p_presult__isset {
  _service_proxy_create_job_ex_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_create_job_ex_p_presult__isset;

class service_proxy_create_job_ex_p_presult {
 public:


  virtual ~service_proxy_create_job_ex_p_presult() throw();
  job_detail* success;
  invalid_operation ouch;

  _service_proxy_create_job_ex_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_get_job_p_args__isset {
  _service_proxy_get_job_p_args__isset() : session_id(false), job_id(false), service_type(false) {}
  bool session_id :1;
  bool job_id :1;
  bool service_type :1;
} _service_proxy_get_job_p_args__isset;

class service_proxy_get_job_p_args {
 public:

  service_proxy_get_job_p_args(const service_proxy_get_job_p_args&);
  service_proxy_get_job_p_args& operator=(const service_proxy_get_job_p_args&);
  service_proxy_get_job_p_args() : session_id(), job_id(), service_type() {
  }

  virtual ~service_proxy_get_job_p_args() throw();
  std::string session_id;
  std::string job_id;
  std::string service_type;

  _service_proxy_get_job_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  void __set_service_type(const std::string& val);

  bool operator == (const service_proxy_get_job_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const service_proxy_get_job_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_get_job_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class service_proxy_get_job_p_pargs {
 public:


  virtual ~service_proxy_get_job_p_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_get_job_p_result__isset {
  _service_proxy_get_job_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_get_job_p_result__isset;

class service_proxy_get_job_p_result {
 public:

  service_proxy_get_job_p_result(const service_proxy_get_job_p_result&);
  service_proxy_get_job_p_result& operator=(const service_proxy_get_job_p_result&);
  service_proxy_get_job_p_result() {
  }

  virtual ~service_proxy_get_job_p_result() throw();
  job_detail success;
  invalid_operation ouch;

  _service_proxy_get_job_p_result__isset __isset;

  void __set_success(const job_detail& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const service_proxy_get_job_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const service_proxy_get_job_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_get_job_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_get_job_p_presult__isset {
  _service_proxy_get_job_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_get_job_p_presult__isset;

class service_proxy_get_job_p_presult {
 public:


  virtual ~service_proxy_get_job_p_presult() throw();
  job_detail* success;
  invalid_operation ouch;

  _service_proxy_get_job_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_interrupt_job_p_args__isset {
  _service_proxy_interrupt_job_p_args__isset() : session_id(false), job_id(false), service_type(false) {}
  bool session_id :1;
  bool job_id :1;
  bool service_type :1;
} _service_proxy_interrupt_job_p_args__isset;

class service_proxy_interrupt_job_p_args {
 public:

  service_proxy_interrupt_job_p_args(const service_proxy_interrupt_job_p_args&);
  service_proxy_interrupt_job_p_args& operator=(const service_proxy_interrupt_job_p_args&);
  service_proxy_interrupt_job_p_args() : session_id(), job_id(), service_type() {
  }

  virtual ~service_proxy_interrupt_job_p_args() throw();
  std::string session_id;
  std::string job_id;
  std::string service_type;

  _service_proxy_interrupt_job_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  void __set_service_type(const std::string& val);

  bool operator == (const service_proxy_interrupt_job_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const service_proxy_interrupt_job_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_interrupt_job_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class service_proxy_interrupt_job_p_pargs {
 public:


  virtual ~service_proxy_interrupt_job_p_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_interrupt_job_p_result__isset {
  _service_proxy_interrupt_job_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_interrupt_job_p_result__isset;

class service_proxy_interrupt_job_p_result {
 public:

  service_proxy_interrupt_job_p_result(const service_proxy_interrupt_job_p_result&);
  service_proxy_interrupt_job_p_result& operator=(const service_proxy_interrupt_job_p_result&);
  service_proxy_interrupt_job_p_result() : success(0) {
  }

  virtual ~service_proxy_interrupt_job_p_result() throw();
  bool success;
  invalid_operation ouch;

  _service_proxy_interrupt_job_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const service_proxy_interrupt_job_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const service_proxy_interrupt_job_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_interrupt_job_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_interrupt_job_p_presult__isset {
  _service_proxy_interrupt_job_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_interrupt_job_p_presult__isset;

class service_proxy_interrupt_job_p_presult {
 public:


  virtual ~service_proxy_interrupt_job_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _service_proxy_interrupt_job_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_resume_job_p_args__isset {
  _service_proxy_resume_job_p_args__isset() : session_id(false), job_id(false), service_type(false) {}
  bool session_id :1;
  bool job_id :1;
  bool service_type :1;
} _service_proxy_resume_job_p_args__isset;

class service_proxy_resume_job_p_args {
 public:

  service_proxy_resume_job_p_args(const service_proxy_resume_job_p_args&);
  service_proxy_resume_job_p_args& operator=(const service_proxy_resume_job_p_args&);
  service_proxy_resume_job_p_args() : session_id(), job_id(), service_type() {
  }

  virtual ~service_proxy_resume_job_p_args() throw();
  std::string session_id;
  std::string job_id;
  std::string service_type;

  _service_proxy_resume_job_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  void __set_service_type(const std::string& val);

  bool operator == (const service_proxy_resume_job_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const service_proxy_resume_job_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_resume_job_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class service_proxy_resume_job_p_pargs {
 public:


  virtual ~service_proxy_resume_job_p_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_resume_job_p_result__isset {
  _service_proxy_resume_job_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_resume_job_p_result__isset;

class service_proxy_resume_job_p_result {
 public:

  service_proxy_resume_job_p_result(const service_proxy_resume_job_p_result&);
  service_proxy_resume_job_p_result& operator=(const service_proxy_resume_job_p_result&);
  service_proxy_resume_job_p_result() : success(0) {
  }

  virtual ~service_proxy_resume_job_p_result() throw();
  bool success;
  invalid_operation ouch;

  _service_proxy_resume_job_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const service_proxy_resume_job_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const service_proxy_resume_job_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_resume_job_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_resume_job_p_presult__isset {
  _service_proxy_resume_job_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_resume_job_p_presult__isset;

class service_proxy_resume_job_p_presult {
 public:


  virtual ~service_proxy_resume_job_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _service_proxy_resume_job_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_remove_job_p_args__isset {
  _service_proxy_remove_job_p_args__isset() : session_id(false), job_id(false), service_type(false) {}
  bool session_id :1;
  bool job_id :1;
  bool service_type :1;
} _service_proxy_remove_job_p_args__isset;

class service_proxy_remove_job_p_args {
 public:

  service_proxy_remove_job_p_args(const service_proxy_remove_job_p_args&);
  service_proxy_remove_job_p_args& operator=(const service_proxy_remove_job_p_args&);
  service_proxy_remove_job_p_args() : session_id(), job_id(), service_type() {
  }

  virtual ~service_proxy_remove_job_p_args() throw();
  std::string session_id;
  std::string job_id;
  std::string service_type;

  _service_proxy_remove_job_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  void __set_service_type(const std::string& val);

  bool operator == (const service_proxy_remove_job_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const service_proxy_remove_job_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_remove_job_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class service_proxy_remove_job_p_pargs {
 public:


  virtual ~service_proxy_remove_job_p_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_remove_job_p_result__isset {
  _service_proxy_remove_job_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_remove_job_p_result__isset;

class service_proxy_remove_job_p_result {
 public:

  service_proxy_remove_job_p_result(const service_proxy_remove_job_p_result&);
  service_proxy_remove_job_p_result& operator=(const service_proxy_remove_job_p_result&);
  service_proxy_remove_job_p_result() : success(0) {
  }

  virtual ~service_proxy_remove_job_p_result() throw();
  bool success;
  invalid_operation ouch;

  _service_proxy_remove_job_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const service_proxy_remove_job_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const service_proxy_remove_job_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_remove_job_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_remove_job_p_presult__isset {
  _service_proxy_remove_job_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_remove_job_p_presult__isset;

class service_proxy_remove_job_p_presult {
 public:


  virtual ~service_proxy_remove_job_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _service_proxy_remove_job_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_running_job_p_args__isset {
  _service_proxy_running_job_p_args__isset() : session_id(false), job_id(false), service_type(false) {}
  bool session_id :1;
  bool job_id :1;
  bool service_type :1;
} _service_proxy_running_job_p_args__isset;

class service_proxy_running_job_p_args {
 public:

  service_proxy_running_job_p_args(const service_proxy_running_job_p_args&);
  service_proxy_running_job_p_args& operator=(const service_proxy_running_job_p_args&);
  service_proxy_running_job_p_args() : session_id(), job_id(), service_type() {
  }

  virtual ~service_proxy_running_job_p_args() throw();
  std::string session_id;
  std::string job_id;
  std::string service_type;

  _service_proxy_running_job_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  void __set_service_type(const std::string& val);

  bool operator == (const service_proxy_running_job_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const service_proxy_running_job_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_running_job_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class service_proxy_running_job_p_pargs {
 public:


  virtual ~service_proxy_running_job_p_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_running_job_p_result__isset {
  _service_proxy_running_job_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_running_job_p_result__isset;

class service_proxy_running_job_p_result {
 public:

  service_proxy_running_job_p_result(const service_proxy_running_job_p_result&);
  service_proxy_running_job_p_result& operator=(const service_proxy_running_job_p_result&);
  service_proxy_running_job_p_result() : success(0) {
  }

  virtual ~service_proxy_running_job_p_result() throw();
  bool success;
  invalid_operation ouch;

  _service_proxy_running_job_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const service_proxy_running_job_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const service_proxy_running_job_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_running_job_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_running_job_p_presult__isset {
  _service_proxy_running_job_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_running_job_p_presult__isset;

class service_proxy_running_job_p_presult {
 public:


  virtual ~service_proxy_running_job_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _service_proxy_running_job_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_update_job_p_args__isset {
  _service_proxy_update_job_p_args__isset() : session_id(false), job_id(false), create_job(false), service_type(false) {}
  bool session_id :1;
  bool job_id :1;
  bool create_job :1;
  bool service_type :1;
} _service_proxy_update_job_p_args__isset;

class service_proxy_update_job_p_args {
 public:

  service_proxy_update_job_p_args(const service_proxy_update_job_p_args&);
  service_proxy_update_job_p_args& operator=(const service_proxy_update_job_p_args&);
  service_proxy_update_job_p_args() : session_id(), job_id(), service_type() {
  }

  virtual ~service_proxy_update_job_p_args() throw();
  std::string session_id;
  std::string job_id;
  create_job_detail create_job;
  std::string service_type;

  _service_proxy_update_job_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  void __set_create_job(const create_job_detail& val);

  void __set_service_type(const std::string& val);

  bool operator == (const service_proxy_update_job_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    if (!(create_job == rhs.create_job))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const service_proxy_update_job_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_update_job_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class service_proxy_update_job_p_pargs {
 public:


  virtual ~service_proxy_update_job_p_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;
  const create_job_detail* create_job;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_update_job_p_result__isset {
  _service_proxy_update_job_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_update_job_p_result__isset;

class service_proxy_update_job_p_result {
 public:

  service_proxy_update_job_p_result(const service_proxy_update_job_p_result&);
  service_proxy_update_job_p_result& operator=(const service_proxy_update_job_p_result&);
  service_proxy_update_job_p_result() : success(0) {
  }

  virtual ~service_proxy_update_job_p_result() throw();
  bool success;
  invalid_operation ouch;

  _service_proxy_update_job_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const service_proxy_update_job_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const service_proxy_update_job_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_update_job_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_update_job_p_presult__isset {
  _service_proxy_update_job_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_update_job_p_presult__isset;

class service_proxy_update_job_p_presult {
 public:


  virtual ~service_proxy_update_job_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _service_proxy_update_job_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_remove_snapshot_image_p_args__isset {
  _service_proxy_remove_snapshot_image_p_args__isset() : session_id(false), images(false), service_type(false) {}
  bool session_id :1;
  bool images :1;
  bool service_type :1;
} _service_proxy_remove_snapshot_image_p_args__isset;

class service_proxy_remove_snapshot_image_p_args {
 public:

  service_proxy_remove_snapshot_image_p_args(const service_proxy_remove_snapshot_image_p_args&);
  service_proxy_remove_snapshot_image_p_args& operator=(const service_proxy_remove_snapshot_image_p_args&);
  service_proxy_remove_snapshot_image_p_args() : session_id(), service_type() {
  }

  virtual ~service_proxy_remove_snapshot_image_p_args() throw();
  std::string session_id;
  std::map<std::string, image_map_info>  images;
  std::string service_type;

  _service_proxy_remove_snapshot_image_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_images(const std::map<std::string, image_map_info> & val);

  void __set_service_type(const std::string& val);

  bool operator == (const service_proxy_remove_snapshot_image_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(images == rhs.images))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const service_proxy_remove_snapshot_image_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_remove_snapshot_image_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class service_proxy_remove_snapshot_image_p_pargs {
 public:


  virtual ~service_proxy_remove_snapshot_image_p_pargs() throw();
  const std::string* session_id;
  const std::map<std::string, image_map_info> * images;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_remove_snapshot_image_p_result__isset {
  _service_proxy_remove_snapshot_image_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_remove_snapshot_image_p_result__isset;

class service_proxy_remove_snapshot_image_p_result {
 public:

  service_proxy_remove_snapshot_image_p_result(const service_proxy_remove_snapshot_image_p_result&);
  service_proxy_remove_snapshot_image_p_result& operator=(const service_proxy_remove_snapshot_image_p_result&);
  service_proxy_remove_snapshot_image_p_result() : success(0) {
  }

  virtual ~service_proxy_remove_snapshot_image_p_result() throw();
  bool success;
  invalid_operation ouch;

  _service_proxy_remove_snapshot_image_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const service_proxy_remove_snapshot_image_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const service_proxy_remove_snapshot_image_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_remove_snapshot_image_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_remove_snapshot_image_p_presult__isset {
  _service_proxy_remove_snapshot_image_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_remove_snapshot_image_p_presult__isset;

class service_proxy_remove_snapshot_image_p_presult {
 public:


  virtual ~service_proxy_remove_snapshot_image_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _service_proxy_remove_snapshot_image_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_test_connection_p_args__isset {
  _service_proxy_test_connection_p_args__isset() : session_id(false), conn(false), service_type(false) {}
  bool session_id :1;
  bool conn :1;
  bool service_type :1;
} _service_proxy_test_connection_p_args__isset;

class service_proxy_test_connection_p_args {
 public:

  service_proxy_test_connection_p_args(const service_proxy_test_connection_p_args&);
  service_proxy_test_connection_p_args& operator=(const service_proxy_test_connection_p_args&);
  service_proxy_test_connection_p_args() : session_id(), service_type() {
  }

  virtual ~service_proxy_test_connection_p_args() throw();
  std::string session_id;
  connection conn;
  std::string service_type;

  _service_proxy_test_connection_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_conn(const connection& val);

  void __set_service_type(const std::string& val);

  bool operator == (const service_proxy_test_connection_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(conn == rhs.conn))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const service_proxy_test_connection_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_test_connection_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class service_proxy_test_connection_p_pargs {
 public:


  virtual ~service_proxy_test_connection_p_pargs() throw();
  const std::string* session_id;
  const connection* conn;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_test_connection_p_result__isset {
  _service_proxy_test_connection_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_test_connection_p_result__isset;

class service_proxy_test_connection_p_result {
 public:

  service_proxy_test_connection_p_result(const service_proxy_test_connection_p_result&);
  service_proxy_test_connection_p_result& operator=(const service_proxy_test_connection_p_result&);
  service_proxy_test_connection_p_result() : success(0) {
  }

  virtual ~service_proxy_test_connection_p_result() throw();
  bool success;
  invalid_operation ouch;

  _service_proxy_test_connection_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const service_proxy_test_connection_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const service_proxy_test_connection_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_test_connection_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_test_connection_p_presult__isset {
  _service_proxy_test_connection_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_test_connection_p_presult__isset;

class service_proxy_test_connection_p_presult {
 public:


  virtual ~service_proxy_test_connection_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _service_proxy_test_connection_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_add_connection_p_args__isset {
  _service_proxy_add_connection_p_args__isset() : session_id(false), conn(false), service_type(false) {}
  bool session_id :1;
  bool conn :1;
  bool service_type :1;
} _service_proxy_add_connection_p_args__isset;

class service_proxy_add_connection_p_args {
 public:

  service_proxy_add_connection_p_args(const service_proxy_add_connection_p_args&);
  service_proxy_add_connection_p_args& operator=(const service_proxy_add_connection_p_args&);
  service_proxy_add_connection_p_args() : session_id(), service_type() {
  }

  virtual ~service_proxy_add_connection_p_args() throw();
  std::string session_id;
  connection conn;
  std::string service_type;

  _service_proxy_add_connection_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_conn(const connection& val);

  void __set_service_type(const std::string& val);

  bool operator == (const service_proxy_add_connection_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(conn == rhs.conn))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const service_proxy_add_connection_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_add_connection_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class service_proxy_add_connection_p_pargs {
 public:


  virtual ~service_proxy_add_connection_p_pargs() throw();
  const std::string* session_id;
  const connection* conn;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_add_connection_p_result__isset {
  _service_proxy_add_connection_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_add_connection_p_result__isset;

class service_proxy_add_connection_p_result {
 public:

  service_proxy_add_connection_p_result(const service_proxy_add_connection_p_result&);
  service_proxy_add_connection_p_result& operator=(const service_proxy_add_connection_p_result&);
  service_proxy_add_connection_p_result() : success(0) {
  }

  virtual ~service_proxy_add_connection_p_result() throw();
  bool success;
  invalid_operation ouch;

  _service_proxy_add_connection_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const service_proxy_add_connection_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const service_proxy_add_connection_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_add_connection_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_add_connection_p_presult__isset {
  _service_proxy_add_connection_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_add_connection_p_presult__isset;

class service_proxy_add_connection_p_presult {
 public:


  virtual ~service_proxy_add_connection_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _service_proxy_add_connection_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_remove_connection_p_args__isset {
  _service_proxy_remove_connection_p_args__isset() : session_id(false), connection_id(false), service_type(false) {}
  bool session_id :1;
  bool connection_id :1;
  bool service_type :1;
} _service_proxy_remove_connection_p_args__isset;

class service_proxy_remove_connection_p_args {
 public:

  service_proxy_remove_connection_p_args(const service_proxy_remove_connection_p_args&);
  service_proxy_remove_connection_p_args& operator=(const service_proxy_remove_connection_p_args&);
  service_proxy_remove_connection_p_args() : session_id(), connection_id(), service_type() {
  }

  virtual ~service_proxy_remove_connection_p_args() throw();
  std::string session_id;
  std::string connection_id;
  std::string service_type;

  _service_proxy_remove_connection_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_connection_id(const std::string& val);

  void __set_service_type(const std::string& val);

  bool operator == (const service_proxy_remove_connection_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(connection_id == rhs.connection_id))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const service_proxy_remove_connection_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_remove_connection_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class service_proxy_remove_connection_p_pargs {
 public:


  virtual ~service_proxy_remove_connection_p_pargs() throw();
  const std::string* session_id;
  const std::string* connection_id;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_remove_connection_p_result__isset {
  _service_proxy_remove_connection_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_remove_connection_p_result__isset;

class service_proxy_remove_connection_p_result {
 public:

  service_proxy_remove_connection_p_result(const service_proxy_remove_connection_p_result&);
  service_proxy_remove_connection_p_result& operator=(const service_proxy_remove_connection_p_result&);
  service_proxy_remove_connection_p_result() : success(0) {
  }

  virtual ~service_proxy_remove_connection_p_result() throw();
  bool success;
  invalid_operation ouch;

  _service_proxy_remove_connection_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const service_proxy_remove_connection_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const service_proxy_remove_connection_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_remove_connection_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_remove_connection_p_presult__isset {
  _service_proxy_remove_connection_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_remove_connection_p_presult__isset;

class service_proxy_remove_connection_p_presult {
 public:


  virtual ~service_proxy_remove_connection_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _service_proxy_remove_connection_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_modify_connection_p_args__isset {
  _service_proxy_modify_connection_p_args__isset() : session_id(false), conn(false), service_type(false) {}
  bool session_id :1;
  bool conn :1;
  bool service_type :1;
} _service_proxy_modify_connection_p_args__isset;

class service_proxy_modify_connection_p_args {
 public:

  service_proxy_modify_connection_p_args(const service_proxy_modify_connection_p_args&);
  service_proxy_modify_connection_p_args& operator=(const service_proxy_modify_connection_p_args&);
  service_proxy_modify_connection_p_args() : session_id(), service_type() {
  }

  virtual ~service_proxy_modify_connection_p_args() throw();
  std::string session_id;
  connection conn;
  std::string service_type;

  _service_proxy_modify_connection_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_conn(const connection& val);

  void __set_service_type(const std::string& val);

  bool operator == (const service_proxy_modify_connection_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(conn == rhs.conn))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const service_proxy_modify_connection_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_modify_connection_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class service_proxy_modify_connection_p_pargs {
 public:


  virtual ~service_proxy_modify_connection_p_pargs() throw();
  const std::string* session_id;
  const connection* conn;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_modify_connection_p_result__isset {
  _service_proxy_modify_connection_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_modify_connection_p_result__isset;

class service_proxy_modify_connection_p_result {
 public:

  service_proxy_modify_connection_p_result(const service_proxy_modify_connection_p_result&);
  service_proxy_modify_connection_p_result& operator=(const service_proxy_modify_connection_p_result&);
  service_proxy_modify_connection_p_result() : success(0) {
  }

  virtual ~service_proxy_modify_connection_p_result() throw();
  bool success;
  invalid_operation ouch;

  _service_proxy_modify_connection_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const service_proxy_modify_connection_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const service_proxy_modify_connection_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_modify_connection_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_modify_connection_p_presult__isset {
  _service_proxy_modify_connection_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_modify_connection_p_presult__isset;

class service_proxy_modify_connection_p_presult {
 public:


  virtual ~service_proxy_modify_connection_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _service_proxy_modify_connection_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_enumerate_connections_p_args__isset {
  _service_proxy_enumerate_connections_p_args__isset() : session_id(false), service_type(false) {}
  bool session_id :1;
  bool service_type :1;
} _service_proxy_enumerate_connections_p_args__isset;

class service_proxy_enumerate_connections_p_args {
 public:

  service_proxy_enumerate_connections_p_args(const service_proxy_enumerate_connections_p_args&);
  service_proxy_enumerate_connections_p_args& operator=(const service_proxy_enumerate_connections_p_args&);
  service_proxy_enumerate_connections_p_args() : session_id(), service_type() {
  }

  virtual ~service_proxy_enumerate_connections_p_args() throw();
  std::string session_id;
  std::string service_type;

  _service_proxy_enumerate_connections_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_service_type(const std::string& val);

  bool operator == (const service_proxy_enumerate_connections_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const service_proxy_enumerate_connections_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_enumerate_connections_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class service_proxy_enumerate_connections_p_pargs {
 public:


  virtual ~service_proxy_enumerate_connections_p_pargs() throw();
  const std::string* session_id;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_enumerate_connections_p_result__isset {
  _service_proxy_enumerate_connections_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_enumerate_connections_p_result__isset;

class service_proxy_enumerate_connections_p_result {
 public:

  service_proxy_enumerate_connections_p_result(const service_proxy_enumerate_connections_p_result&);
  service_proxy_enumerate_connections_p_result& operator=(const service_proxy_enumerate_connections_p_result&);
  service_proxy_enumerate_connections_p_result() {
  }

  virtual ~service_proxy_enumerate_connections_p_result() throw();
  std::vector<connection>  success;
  invalid_operation ouch;

  _service_proxy_enumerate_connections_p_result__isset __isset;

  void __set_success(const std::vector<connection> & val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const service_proxy_enumerate_connections_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const service_proxy_enumerate_connections_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_enumerate_connections_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_enumerate_connections_p_presult__isset {
  _service_proxy_enumerate_connections_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_enumerate_connections_p_presult__isset;

class service_proxy_enumerate_connections_p_presult {
 public:


  virtual ~service_proxy_enumerate_connections_p_presult() throw();
  std::vector<connection> * success;
  invalid_operation ouch;

  _service_proxy_enumerate_connections_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_get_connection_p_args__isset {
  _service_proxy_get_connection_p_args__isset() : session_id(false), connection_id(false), service_type(false) {}
  bool session_id :1;
  bool connection_id :1;
  bool service_type :1;
} _service_proxy_get_connection_p_args__isset;

class service_proxy_get_connection_p_args {
 public:

  service_proxy_get_connection_p_args(const service_proxy_get_connection_p_args&);
  service_proxy_get_connection_p_args& operator=(const service_proxy_get_connection_p_args&);
  service_proxy_get_connection_p_args() : session_id(), connection_id(), service_type() {
  }

  virtual ~service_proxy_get_connection_p_args() throw();
  std::string session_id;
  std::string connection_id;
  std::string service_type;

  _service_proxy_get_connection_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_connection_id(const std::string& val);

  void __set_service_type(const std::string& val);

  bool operator == (const service_proxy_get_connection_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(connection_id == rhs.connection_id))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    return true;
  }
  bool operator != (const service_proxy_get_connection_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_get_connection_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class service_proxy_get_connection_p_pargs {
 public:


  virtual ~service_proxy_get_connection_p_pargs() throw();
  const std::string* session_id;
  const std::string* connection_id;
  const std::string* service_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_get_connection_p_result__isset {
  _service_proxy_get_connection_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_get_connection_p_result__isset;

class service_proxy_get_connection_p_result {
 public:

  service_proxy_get_connection_p_result(const service_proxy_get_connection_p_result&);
  service_proxy_get_connection_p_result& operator=(const service_proxy_get_connection_p_result&);
  service_proxy_get_connection_p_result() {
  }

  virtual ~service_proxy_get_connection_p_result() throw();
  connection success;
  invalid_operation ouch;

  _service_proxy_get_connection_p_result__isset __isset;

  void __set_success(const connection& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const service_proxy_get_connection_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const service_proxy_get_connection_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_get_connection_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_get_connection_p_presult__isset {
  _service_proxy_get_connection_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_get_connection_p_presult__isset;

class service_proxy_get_connection_p_presult {
 public:


  virtual ~service_proxy_get_connection_p_presult() throw();
  connection* success;
  invalid_operation ouch;

  _service_proxy_get_connection_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_get_virtual_host_info_p_args__isset {
  _service_proxy_get_virtual_host_info_p_args__isset() : session_id(false), host(false), username(false), password(false) {}
  bool session_id :1;
  bool host :1;
  bool username :1;
  bool password :1;
} _service_proxy_get_virtual_host_info_p_args__isset;

class service_proxy_get_virtual_host_info_p_args {
 public:

  service_proxy_get_virtual_host_info_p_args(const service_proxy_get_virtual_host_info_p_args&);
  service_proxy_get_virtual_host_info_p_args& operator=(const service_proxy_get_virtual_host_info_p_args&);
  service_proxy_get_virtual_host_info_p_args() : session_id(), host(), username(), password() {
  }

  virtual ~service_proxy_get_virtual_host_info_p_args() throw();
  std::string session_id;
  std::string host;
  std::string username;
  std::string password;

  _service_proxy_get_virtual_host_info_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_host(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const service_proxy_get_virtual_host_info_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const service_proxy_get_virtual_host_info_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_get_virtual_host_info_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class service_proxy_get_virtual_host_info_p_pargs {
 public:


  virtual ~service_proxy_get_virtual_host_info_p_pargs() throw();
  const std::string* session_id;
  const std::string* host;
  const std::string* username;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_get_virtual_host_info_p_result__isset {
  _service_proxy_get_virtual_host_info_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_get_virtual_host_info_p_result__isset;

class service_proxy_get_virtual_host_info_p_result {
 public:

  service_proxy_get_virtual_host_info_p_result(const service_proxy_get_virtual_host_info_p_result&);
  service_proxy_get_virtual_host_info_p_result& operator=(const service_proxy_get_virtual_host_info_p_result&);
  service_proxy_get_virtual_host_info_p_result() {
  }

  virtual ~service_proxy_get_virtual_host_info_p_result() throw();
  virtual_host success;
  invalid_operation ouch;

  _service_proxy_get_virtual_host_info_p_result__isset __isset;

  void __set_success(const virtual_host& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const service_proxy_get_virtual_host_info_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const service_proxy_get_virtual_host_info_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_get_virtual_host_info_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_get_virtual_host_info_p_presult__isset {
  _service_proxy_get_virtual_host_info_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_get_virtual_host_info_p_presult__isset;

class service_proxy_get_virtual_host_info_p_presult {
 public:


  virtual ~service_proxy_get_virtual_host_info_p_presult() throw();
  virtual_host* success;
  invalid_operation ouch;

  _service_proxy_get_virtual_host_info_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_get_virtual_machine_detail_p_args__isset {
  _service_proxy_get_virtual_machine_detail_p_args__isset() : session_id(false), host(false), username(false), password(false), machine_id(false) {}
  bool session_id :1;
  bool host :1;
  bool username :1;
  bool password :1;
  bool machine_id :1;
} _service_proxy_get_virtual_machine_detail_p_args__isset;

class service_proxy_get_virtual_machine_detail_p_args {
 public:

  service_proxy_get_virtual_machine_detail_p_args(const service_proxy_get_virtual_machine_detail_p_args&);
  service_proxy_get_virtual_machine_detail_p_args& operator=(const service_proxy_get_virtual_machine_detail_p_args&);
  service_proxy_get_virtual_machine_detail_p_args() : session_id(), host(), username(), password(), machine_id() {
  }

  virtual ~service_proxy_get_virtual_machine_detail_p_args() throw();
  std::string session_id;
  std::string host;
  std::string username;
  std::string password;
  std::string machine_id;

  _service_proxy_get_virtual_machine_detail_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_host(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  void __set_machine_id(const std::string& val);

  bool operator == (const service_proxy_get_virtual_machine_detail_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(machine_id == rhs.machine_id))
      return false;
    return true;
  }
  bool operator != (const service_proxy_get_virtual_machine_detail_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_get_virtual_machine_detail_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class service_proxy_get_virtual_machine_detail_p_pargs {
 public:


  virtual ~service_proxy_get_virtual_machine_detail_p_pargs() throw();
  const std::string* session_id;
  const std::string* host;
  const std::string* username;
  const std::string* password;
  const std::string* machine_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_get_virtual_machine_detail_p_result__isset {
  _service_proxy_get_virtual_machine_detail_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_get_virtual_machine_detail_p_result__isset;

class service_proxy_get_virtual_machine_detail_p_result {
 public:

  service_proxy_get_virtual_machine_detail_p_result(const service_proxy_get_virtual_machine_detail_p_result&);
  service_proxy_get_virtual_machine_detail_p_result& operator=(const service_proxy_get_virtual_machine_detail_p_result&);
  service_proxy_get_virtual_machine_detail_p_result() {
  }

  virtual ~service_proxy_get_virtual_machine_detail_p_result() throw();
  virtual_machine success;
  invalid_operation ouch;

  _service_proxy_get_virtual_machine_detail_p_result__isset __isset;

  void __set_success(const virtual_machine& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const service_proxy_get_virtual_machine_detail_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const service_proxy_get_virtual_machine_detail_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_get_virtual_machine_detail_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_get_virtual_machine_detail_p_presult__isset {
  _service_proxy_get_virtual_machine_detail_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_get_virtual_machine_detail_p_presult__isset;

class service_proxy_get_virtual_machine_detail_p_presult {
 public:


  virtual ~service_proxy_get_virtual_machine_detail_p_presult() throw();
  virtual_machine* success;
  invalid_operation ouch;

  _service_proxy_get_virtual_machine_detail_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_get_physical_machine_detail_p_args__isset {
  _service_proxy_get_physical_machine_detail_p_args__isset() : session_id(false), host(false), filter(false) {}
  bool session_id :1;
  bool host :1;
  bool filter :1;
} _service_proxy_get_physical_machine_detail_p_args__isset;

class service_proxy_get_physical_machine_detail_p_args {
 public:

  service_proxy_get_physical_machine_detail_p_args(const service_proxy_get_physical_machine_detail_p_args&);
  service_proxy_get_physical_machine_detail_p_args& operator=(const service_proxy_get_physical_machine_detail_p_args&);
  service_proxy_get_physical_machine_detail_p_args() : session_id(), host(), filter((machine_detail_filter::type)0) {
  }

  virtual ~service_proxy_get_physical_machine_detail_p_args() throw();
  std::string session_id;
  std::string host;
  machine_detail_filter::type filter;

  _service_proxy_get_physical_machine_detail_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_host(const std::string& val);

  void __set_filter(const machine_detail_filter::type val);

  bool operator == (const service_proxy_get_physical_machine_detail_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const service_proxy_get_physical_machine_detail_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_get_physical_machine_detail_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class service_proxy_get_physical_machine_detail_p_pargs {
 public:


  virtual ~service_proxy_get_physical_machine_detail_p_pargs() throw();
  const std::string* session_id;
  const std::string* host;
  const machine_detail_filter::type* filter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_get_physical_machine_detail_p_result__isset {
  _service_proxy_get_physical_machine_detail_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_get_physical_machine_detail_p_result__isset;

class service_proxy_get_physical_machine_detail_p_result {
 public:

  service_proxy_get_physical_machine_detail_p_result(const service_proxy_get_physical_machine_detail_p_result&);
  service_proxy_get_physical_machine_detail_p_result& operator=(const service_proxy_get_physical_machine_detail_p_result&);
  service_proxy_get_physical_machine_detail_p_result() {
  }

  virtual ~service_proxy_get_physical_machine_detail_p_result() throw();
  physical_machine_info success;
  invalid_operation ouch;

  _service_proxy_get_physical_machine_detail_p_result__isset __isset;

  void __set_success(const physical_machine_info& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const service_proxy_get_physical_machine_detail_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const service_proxy_get_physical_machine_detail_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_get_physical_machine_detail_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_get_physical_machine_detail_p_presult__isset {
  _service_proxy_get_physical_machine_detail_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_get_physical_machine_detail_p_presult__isset;

class service_proxy_get_physical_machine_detail_p_presult {
 public:


  virtual ~service_proxy_get_physical_machine_detail_p_presult() throw();
  physical_machine_info* success;
  invalid_operation ouch;

  _service_proxy_get_physical_machine_detail_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_verify_packer_to_carrier_p_args__isset {
  _service_proxy_verify_packer_to_carrier_p_args__isset() : packer(false), carrier(false), port(false), is_ssl(false) {}
  bool packer :1;
  bool carrier :1;
  bool port :1;
  bool is_ssl :1;
} _service_proxy_verify_packer_to_carrier_p_args__isset;

class service_proxy_verify_packer_to_carrier_p_args {
 public:

  service_proxy_verify_packer_to_carrier_p_args(const service_proxy_verify_packer_to_carrier_p_args&);
  service_proxy_verify_packer_to_carrier_p_args& operator=(const service_proxy_verify_packer_to_carrier_p_args&);
  service_proxy_verify_packer_to_carrier_p_args() : packer(), carrier(), port(0), is_ssl(0) {
  }

  virtual ~service_proxy_verify_packer_to_carrier_p_args() throw();
  std::string packer;
  std::string carrier;
  int32_t port;
  bool is_ssl;

  _service_proxy_verify_packer_to_carrier_p_args__isset __isset;

  void __set_packer(const std::string& val);

  void __set_carrier(const std::string& val);

  void __set_port(const int32_t val);

  void __set_is_ssl(const bool val);

  bool operator == (const service_proxy_verify_packer_to_carrier_p_args & rhs) const
  {
    if (!(packer == rhs.packer))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(is_ssl == rhs.is_ssl))
      return false;
    return true;
  }
  bool operator != (const service_proxy_verify_packer_to_carrier_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_verify_packer_to_carrier_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class service_proxy_verify_packer_to_carrier_p_pargs {
 public:


  virtual ~service_proxy_verify_packer_to_carrier_p_pargs() throw();
  const std::string* packer;
  const std::string* carrier;
  const int32_t* port;
  const bool* is_ssl;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_verify_packer_to_carrier_p_result__isset {
  _service_proxy_verify_packer_to_carrier_p_result__isset() : success(false) {}
  bool success :1;
} _service_proxy_verify_packer_to_carrier_p_result__isset;

class service_proxy_verify_packer_to_carrier_p_result {
 public:

  service_proxy_verify_packer_to_carrier_p_result(const service_proxy_verify_packer_to_carrier_p_result&);
  service_proxy_verify_packer_to_carrier_p_result& operator=(const service_proxy_verify_packer_to_carrier_p_result&);
  service_proxy_verify_packer_to_carrier_p_result() : success(0) {
  }

  virtual ~service_proxy_verify_packer_to_carrier_p_result() throw();
  bool success;

  _service_proxy_verify_packer_to_carrier_p_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const service_proxy_verify_packer_to_carrier_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const service_proxy_verify_packer_to_carrier_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_verify_packer_to_carrier_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_verify_packer_to_carrier_p_presult__isset {
  _service_proxy_verify_packer_to_carrier_p_presult__isset() : success(false) {}
  bool success :1;
} _service_proxy_verify_packer_to_carrier_p_presult__isset;

class service_proxy_verify_packer_to_carrier_p_presult {
 public:


  virtual ~service_proxy_verify_packer_to_carrier_p_presult() throw();
  bool* success;

  _service_proxy_verify_packer_to_carrier_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_take_packer_xray_p_args__isset {
  _service_proxy_take_packer_xray_p_args__isset() : session_id(false), host(false) {}
  bool session_id :1;
  bool host :1;
} _service_proxy_take_packer_xray_p_args__isset;

class service_proxy_take_packer_xray_p_args {
 public:

  service_proxy_take_packer_xray_p_args(const service_proxy_take_packer_xray_p_args&);
  service_proxy_take_packer_xray_p_args& operator=(const service_proxy_take_packer_xray_p_args&);
  service_proxy_take_packer_xray_p_args() : session_id(), host() {
  }

  virtual ~service_proxy_take_packer_xray_p_args() throw();
  std::string session_id;
  std::string host;

  _service_proxy_take_packer_xray_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_host(const std::string& val);

  bool operator == (const service_proxy_take_packer_xray_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(host == rhs.host))
      return false;
    return true;
  }
  bool operator != (const service_proxy_take_packer_xray_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_take_packer_xray_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class service_proxy_take_packer_xray_p_pargs {
 public:


  virtual ~service_proxy_take_packer_xray_p_pargs() throw();
  const std::string* session_id;
  const std::string* host;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_take_packer_xray_p_result__isset {
  _service_proxy_take_packer_xray_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_take_packer_xray_p_result__isset;

class service_proxy_take_packer_xray_p_result {
 public:

  service_proxy_take_packer_xray_p_result(const service_proxy_take_packer_xray_p_result&);
  service_proxy_take_packer_xray_p_result& operator=(const service_proxy_take_packer_xray_p_result&);
  service_proxy_take_packer_xray_p_result() : success() {
  }

  virtual ~service_proxy_take_packer_xray_p_result() throw();
  std::string success;
  invalid_operation ouch;

  _service_proxy_take_packer_xray_p_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const service_proxy_take_packer_xray_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const service_proxy_take_packer_xray_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_take_packer_xray_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_take_packer_xray_p_presult__isset {
  _service_proxy_take_packer_xray_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_take_packer_xray_p_presult__isset;

class service_proxy_take_packer_xray_p_presult {
 public:


  virtual ~service_proxy_take_packer_xray_p_presult() throw();
  std::string* success;
  invalid_operation ouch;

  _service_proxy_take_packer_xray_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_get_packer_service_info_p_args__isset {
  _service_proxy_get_packer_service_info_p_args__isset() : session_id(false), host(false) {}
  bool session_id :1;
  bool host :1;
} _service_proxy_get_packer_service_info_p_args__isset;

class service_proxy_get_packer_service_info_p_args {
 public:

  service_proxy_get_packer_service_info_p_args(const service_proxy_get_packer_service_info_p_args&);
  service_proxy_get_packer_service_info_p_args& operator=(const service_proxy_get_packer_service_info_p_args&);
  service_proxy_get_packer_service_info_p_args() : session_id(), host() {
  }

  virtual ~service_proxy_get_packer_service_info_p_args() throw();
  std::string session_id;
  std::string host;

  _service_proxy_get_packer_service_info_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_host(const std::string& val);

  bool operator == (const service_proxy_get_packer_service_info_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(host == rhs.host))
      return false;
    return true;
  }
  bool operator != (const service_proxy_get_packer_service_info_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_get_packer_service_info_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class service_proxy_get_packer_service_info_p_pargs {
 public:


  virtual ~service_proxy_get_packer_service_info_p_pargs() throw();
  const std::string* session_id;
  const std::string* host;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_get_packer_service_info_p_result__isset {
  _service_proxy_get_packer_service_info_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_get_packer_service_info_p_result__isset;

class service_proxy_get_packer_service_info_p_result {
 public:

  service_proxy_get_packer_service_info_p_result(const service_proxy_get_packer_service_info_p_result&);
  service_proxy_get_packer_service_info_p_result& operator=(const service_proxy_get_packer_service_info_p_result&);
  service_proxy_get_packer_service_info_p_result() {
  }

  virtual ~service_proxy_get_packer_service_info_p_result() throw();
  service_info success;
  invalid_operation ouch;

  _service_proxy_get_packer_service_info_p_result__isset __isset;

  void __set_success(const service_info& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const service_proxy_get_packer_service_info_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const service_proxy_get_packer_service_info_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_get_packer_service_info_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_get_packer_service_info_p_presult__isset {
  _service_proxy_get_packer_service_info_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_get_packer_service_info_p_presult__isset;

class service_proxy_get_packer_service_info_p_presult {
 public:


  virtual ~service_proxy_get_packer_service_info_p_presult() throw();
  service_info* success;
  invalid_operation ouch;

  _service_proxy_get_packer_service_info_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_set_customized_id_p_args__isset {
  _service_proxy_set_customized_id_p_args__isset() : session_id(false), disk_addr(false), disk_id(false) {}
  bool session_id :1;
  bool disk_addr :1;
  bool disk_id :1;
} _service_proxy_set_customized_id_p_args__isset;

class service_proxy_set_customized_id_p_args {
 public:

  service_proxy_set_customized_id_p_args(const service_proxy_set_customized_id_p_args&);
  service_proxy_set_customized_id_p_args& operator=(const service_proxy_set_customized_id_p_args&);
  service_proxy_set_customized_id_p_args() : session_id(), disk_addr(), disk_id() {
  }

  virtual ~service_proxy_set_customized_id_p_args() throw();
  std::string session_id;
  std::string disk_addr;
  std::string disk_id;

  _service_proxy_set_customized_id_p_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_disk_addr(const std::string& val);

  void __set_disk_id(const std::string& val);

  bool operator == (const service_proxy_set_customized_id_p_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(disk_addr == rhs.disk_addr))
      return false;
    if (!(disk_id == rhs.disk_id))
      return false;
    return true;
  }
  bool operator != (const service_proxy_set_customized_id_p_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_set_customized_id_p_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class service_proxy_set_customized_id_p_pargs {
 public:


  virtual ~service_proxy_set_customized_id_p_pargs() throw();
  const std::string* session_id;
  const std::string* disk_addr;
  const std::string* disk_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_set_customized_id_p_result__isset {
  _service_proxy_set_customized_id_p_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_set_customized_id_p_result__isset;

class service_proxy_set_customized_id_p_result {
 public:

  service_proxy_set_customized_id_p_result(const service_proxy_set_customized_id_p_result&);
  service_proxy_set_customized_id_p_result& operator=(const service_proxy_set_customized_id_p_result&);
  service_proxy_set_customized_id_p_result() : success(0) {
  }

  virtual ~service_proxy_set_customized_id_p_result() throw();
  bool success;
  invalid_operation ouch;

  _service_proxy_set_customized_id_p_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const service_proxy_set_customized_id_p_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const service_proxy_set_customized_id_p_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_proxy_set_customized_id_p_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_proxy_set_customized_id_p_presult__isset {
  _service_proxy_set_customized_id_p_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _service_proxy_set_customized_id_p_presult__isset;

class service_proxy_set_customized_id_p_presult {
 public:


  virtual ~service_proxy_set_customized_id_p_presult() throw();
  bool* success;
  invalid_operation ouch;

  _service_proxy_set_customized_id_p_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class service_proxyClient : virtual public service_proxyIf, public physical_packer_service_proxyClient {
 public:
  service_proxyClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    physical_packer_service_proxyClient(prot, prot) {}
  service_proxyClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    physical_packer_service_proxyClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void create_job_ex_p(job_detail& _return, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
  void send_create_job_ex_p(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
  void recv_create_job_ex_p(job_detail& _return);
  void get_job_p(job_detail& _return, const std::string& session_id, const std::string& job_id, const std::string& service_type);
  void send_get_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
  void recv_get_job_p(job_detail& _return);
  bool interrupt_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
  void send_interrupt_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
  bool recv_interrupt_job_p();
  bool resume_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
  void send_resume_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
  bool recv_resume_job_p();
  bool remove_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
  void send_remove_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
  bool recv_remove_job_p();
  bool running_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
  void send_running_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
  bool recv_running_job_p();
  bool update_job_p(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
  void send_update_job_p(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
  bool recv_update_job_p();
  bool remove_snapshot_image_p(const std::string& session_id, const std::map<std::string, image_map_info> & images, const std::string& service_type);
  void send_remove_snapshot_image_p(const std::string& session_id, const std::map<std::string, image_map_info> & images, const std::string& service_type);
  bool recv_remove_snapshot_image_p();
  bool test_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type);
  void send_test_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type);
  bool recv_test_connection_p();
  bool add_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type);
  void send_add_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type);
  bool recv_add_connection_p();
  bool remove_connection_p(const std::string& session_id, const std::string& connection_id, const std::string& service_type);
  void send_remove_connection_p(const std::string& session_id, const std::string& connection_id, const std::string& service_type);
  bool recv_remove_connection_p();
  bool modify_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type);
  void send_modify_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type);
  bool recv_modify_connection_p();
  void enumerate_connections_p(std::vector<connection> & _return, const std::string& session_id, const std::string& service_type);
  void send_enumerate_connections_p(const std::string& session_id, const std::string& service_type);
  void recv_enumerate_connections_p(std::vector<connection> & _return);
  void get_connection_p(connection& _return, const std::string& session_id, const std::string& connection_id, const std::string& service_type);
  void send_get_connection_p(const std::string& session_id, const std::string& connection_id, const std::string& service_type);
  void recv_get_connection_p(connection& _return);
  void get_virtual_host_info_p(virtual_host& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void send_get_virtual_host_info_p(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void recv_get_virtual_host_info_p(virtual_host& _return);
  void get_virtual_machine_detail_p(virtual_machine& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void send_get_virtual_machine_detail_p(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void recv_get_virtual_machine_detail_p(virtual_machine& _return);
  void get_physical_machine_detail_p(physical_machine_info& _return, const std::string& session_id, const std::string& host, const machine_detail_filter::type filter);
  void send_get_physical_machine_detail_p(const std::string& session_id, const std::string& host, const machine_detail_filter::type filter);
  void recv_get_physical_machine_detail_p(physical_machine_info& _return);
  bool verify_packer_to_carrier_p(const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl);
  void send_verify_packer_to_carrier_p(const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl);
  bool recv_verify_packer_to_carrier_p();
  void take_packer_xray_p(std::string& _return, const std::string& session_id, const std::string& host);
  void send_take_packer_xray_p(const std::string& session_id, const std::string& host);
  void recv_take_packer_xray_p(std::string& _return);
  void get_packer_service_info_p(service_info& _return, const std::string& session_id, const std::string& host);
  void send_get_packer_service_info_p(const std::string& session_id, const std::string& host);
  void recv_get_packer_service_info_p(service_info& _return);
  bool set_customized_id_p(const std::string& session_id, const std::string& disk_addr, const std::string& disk_id);
  void send_set_customized_id_p(const std::string& session_id, const std::string& disk_addr, const std::string& disk_id);
  bool recv_set_customized_id_p();
};

class service_proxyProcessor : public physical_packer_service_proxyProcessor {
 protected:
  boost::shared_ptr<service_proxyIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (service_proxyProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_create_job_ex_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_job_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_interrupt_job_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resume_job_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_job_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_running_job_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_job_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_snapshot_image_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_test_connection_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_connection_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_connection_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_modify_connection_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_enumerate_connections_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_connection_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_virtual_host_info_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_virtual_machine_detail_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_physical_machine_detail_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verify_packer_to_carrier_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_take_packer_xray_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_packer_service_info_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_customized_id_p(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  service_proxyProcessor(boost::shared_ptr<service_proxyIf> iface) :
    physical_packer_service_proxyProcessor(iface),
    iface_(iface) {
    processMap_["create_job_ex_p"] = &service_proxyProcessor::process_create_job_ex_p;
    processMap_["get_job_p"] = &service_proxyProcessor::process_get_job_p;
    processMap_["interrupt_job_p"] = &service_proxyProcessor::process_interrupt_job_p;
    processMap_["resume_job_p"] = &service_proxyProcessor::process_resume_job_p;
    processMap_["remove_job_p"] = &service_proxyProcessor::process_remove_job_p;
    processMap_["running_job_p"] = &service_proxyProcessor::process_running_job_p;
    processMap_["update_job_p"] = &service_proxyProcessor::process_update_job_p;
    processMap_["remove_snapshot_image_p"] = &service_proxyProcessor::process_remove_snapshot_image_p;
    processMap_["test_connection_p"] = &service_proxyProcessor::process_test_connection_p;
    processMap_["add_connection_p"] = &service_proxyProcessor::process_add_connection_p;
    processMap_["remove_connection_p"] = &service_proxyProcessor::process_remove_connection_p;
    processMap_["modify_connection_p"] = &service_proxyProcessor::process_modify_connection_p;
    processMap_["enumerate_connections_p"] = &service_proxyProcessor::process_enumerate_connections_p;
    processMap_["get_connection_p"] = &service_proxyProcessor::process_get_connection_p;
    processMap_["get_virtual_host_info_p"] = &service_proxyProcessor::process_get_virtual_host_info_p;
    processMap_["get_virtual_machine_detail_p"] = &service_proxyProcessor::process_get_virtual_machine_detail_p;
    processMap_["get_physical_machine_detail_p"] = &service_proxyProcessor::process_get_physical_machine_detail_p;
    processMap_["verify_packer_to_carrier_p"] = &service_proxyProcessor::process_verify_packer_to_carrier_p;
    processMap_["take_packer_xray_p"] = &service_proxyProcessor::process_take_packer_xray_p;
    processMap_["get_packer_service_info_p"] = &service_proxyProcessor::process_get_packer_service_info_p;
    processMap_["set_customized_id_p"] = &service_proxyProcessor::process_set_customized_id_p;
  }

  virtual ~service_proxyProcessor() {}
};

class service_proxyProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  service_proxyProcessorFactory(const ::boost::shared_ptr< service_proxyIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< service_proxyIfFactory > handlerFactory_;
};

class service_proxyMultiface : virtual public service_proxyIf, public physical_packer_service_proxyMultiface {
 public:
  service_proxyMultiface(std::vector<boost::shared_ptr<service_proxyIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<service_proxyIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      physical_packer_service_proxyMultiface::add(*iter);
    }
  }
  virtual ~service_proxyMultiface() {}
 protected:
  std::vector<boost::shared_ptr<service_proxyIf> > ifaces_;
  service_proxyMultiface() {}
  void add(boost::shared_ptr<service_proxyIf> iface) {
    physical_packer_service_proxyMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void create_job_ex_p(job_detail& _return, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_job_ex_p(_return, session_id, job_id, create_job, service_type);
    }
    ifaces_[i]->create_job_ex_p(_return, session_id, job_id, create_job, service_type);
    return;
  }

  void get_job_p(job_detail& _return, const std::string& session_id, const std::string& job_id, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_job_p(_return, session_id, job_id, service_type);
    }
    ifaces_[i]->get_job_p(_return, session_id, job_id, service_type);
    return;
  }

  bool interrupt_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->interrupt_job_p(session_id, job_id, service_type);
    }
    return ifaces_[i]->interrupt_job_p(session_id, job_id, service_type);
  }

  bool resume_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resume_job_p(session_id, job_id, service_type);
    }
    return ifaces_[i]->resume_job_p(session_id, job_id, service_type);
  }

  bool remove_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_job_p(session_id, job_id, service_type);
    }
    return ifaces_[i]->remove_job_p(session_id, job_id, service_type);
  }

  bool running_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->running_job_p(session_id, job_id, service_type);
    }
    return ifaces_[i]->running_job_p(session_id, job_id, service_type);
  }

  bool update_job_p(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_job_p(session_id, job_id, create_job, service_type);
    }
    return ifaces_[i]->update_job_p(session_id, job_id, create_job, service_type);
  }

  bool remove_snapshot_image_p(const std::string& session_id, const std::map<std::string, image_map_info> & images, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_snapshot_image_p(session_id, images, service_type);
    }
    return ifaces_[i]->remove_snapshot_image_p(session_id, images, service_type);
  }

  bool test_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->test_connection_p(session_id, conn, service_type);
    }
    return ifaces_[i]->test_connection_p(session_id, conn, service_type);
  }

  bool add_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_connection_p(session_id, conn, service_type);
    }
    return ifaces_[i]->add_connection_p(session_id, conn, service_type);
  }

  bool remove_connection_p(const std::string& session_id, const std::string& connection_id, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_connection_p(session_id, connection_id, service_type);
    }
    return ifaces_[i]->remove_connection_p(session_id, connection_id, service_type);
  }

  bool modify_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->modify_connection_p(session_id, conn, service_type);
    }
    return ifaces_[i]->modify_connection_p(session_id, conn, service_type);
  }

  void enumerate_connections_p(std::vector<connection> & _return, const std::string& session_id, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->enumerate_connections_p(_return, session_id, service_type);
    }
    ifaces_[i]->enumerate_connections_p(_return, session_id, service_type);
    return;
  }

  void get_connection_p(connection& _return, const std::string& session_id, const std::string& connection_id, const std::string& service_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_connection_p(_return, session_id, connection_id, service_type);
    }
    ifaces_[i]->get_connection_p(_return, session_id, connection_id, service_type);
    return;
  }

  void get_virtual_host_info_p(virtual_host& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_virtual_host_info_p(_return, session_id, host, username, password);
    }
    ifaces_[i]->get_virtual_host_info_p(_return, session_id, host, username, password);
    return;
  }

  void get_virtual_machine_detail_p(virtual_machine& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_virtual_machine_detail_p(_return, session_id, host, username, password, machine_id);
    }
    ifaces_[i]->get_virtual_machine_detail_p(_return, session_id, host, username, password, machine_id);
    return;
  }

  void get_physical_machine_detail_p(physical_machine_info& _return, const std::string& session_id, const std::string& host, const machine_detail_filter::type filter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_physical_machine_detail_p(_return, session_id, host, filter);
    }
    ifaces_[i]->get_physical_machine_detail_p(_return, session_id, host, filter);
    return;
  }

  bool verify_packer_to_carrier_p(const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verify_packer_to_carrier_p(packer, carrier, port, is_ssl);
    }
    return ifaces_[i]->verify_packer_to_carrier_p(packer, carrier, port, is_ssl);
  }

  void take_packer_xray_p(std::string& _return, const std::string& session_id, const std::string& host) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->take_packer_xray_p(_return, session_id, host);
    }
    ifaces_[i]->take_packer_xray_p(_return, session_id, host);
    return;
  }

  void get_packer_service_info_p(service_info& _return, const std::string& session_id, const std::string& host) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_packer_service_info_p(_return, session_id, host);
    }
    ifaces_[i]->get_packer_service_info_p(_return, session_id, host);
    return;
  }

  bool set_customized_id_p(const std::string& session_id, const std::string& disk_addr, const std::string& disk_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_customized_id_p(session_id, disk_addr, disk_id);
    }
    return ifaces_[i]->set_customized_id_p(session_id, disk_addr, disk_id);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class service_proxyConcurrentClient : virtual public service_proxyIf, public physical_packer_service_proxyConcurrentClient {
 public:
  service_proxyConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    physical_packer_service_proxyConcurrentClient(prot, prot) {}
  service_proxyConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    physical_packer_service_proxyConcurrentClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void create_job_ex_p(job_detail& _return, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
  int32_t send_create_job_ex_p(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
  void recv_create_job_ex_p(job_detail& _return, const int32_t seqid);
  void get_job_p(job_detail& _return, const std::string& session_id, const std::string& job_id, const std::string& service_type);
  int32_t send_get_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
  void recv_get_job_p(job_detail& _return, const int32_t seqid);
  bool interrupt_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
  int32_t send_interrupt_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
  bool recv_interrupt_job_p(const int32_t seqid);
  bool resume_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
  int32_t send_resume_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
  bool recv_resume_job_p(const int32_t seqid);
  bool remove_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
  int32_t send_remove_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
  bool recv_remove_job_p(const int32_t seqid);
  bool running_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
  int32_t send_running_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
  bool recv_running_job_p(const int32_t seqid);
  bool update_job_p(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
  int32_t send_update_job_p(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
  bool recv_update_job_p(const int32_t seqid);
  bool remove_snapshot_image_p(const std::string& session_id, const std::map<std::string, image_map_info> & images, const std::string& service_type);
  int32_t send_remove_snapshot_image_p(const std::string& session_id, const std::map<std::string, image_map_info> & images, const std::string& service_type);
  bool recv_remove_snapshot_image_p(const int32_t seqid);
  bool test_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type);
  int32_t send_test_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type);
  bool recv_test_connection_p(const int32_t seqid);
  bool add_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type);
  int32_t send_add_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type);
  bool recv_add_connection_p(const int32_t seqid);
  bool remove_connection_p(const std::string& session_id, const std::string& connection_id, const std::string& service_type);
  int32_t send_remove_connection_p(const std::string& session_id, const std::string& connection_id, const std::string& service_type);
  bool recv_remove_connection_p(const int32_t seqid);
  bool modify_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type);
  int32_t send_modify_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type);
  bool recv_modify_connection_p(const int32_t seqid);
  void enumerate_connections_p(std::vector<connection> & _return, const std::string& session_id, const std::string& service_type);
  int32_t send_enumerate_connections_p(const std::string& session_id, const std::string& service_type);
  void recv_enumerate_connections_p(std::vector<connection> & _return, const int32_t seqid);
  void get_connection_p(connection& _return, const std::string& session_id, const std::string& connection_id, const std::string& service_type);
  int32_t send_get_connection_p(const std::string& session_id, const std::string& connection_id, const std::string& service_type);
  void recv_get_connection_p(connection& _return, const int32_t seqid);
  void get_virtual_host_info_p(virtual_host& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  int32_t send_get_virtual_host_info_p(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void recv_get_virtual_host_info_p(virtual_host& _return, const int32_t seqid);
  void get_virtual_machine_detail_p(virtual_machine& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  int32_t send_get_virtual_machine_detail_p(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void recv_get_virtual_machine_detail_p(virtual_machine& _return, const int32_t seqid);
  void get_physical_machine_detail_p(physical_machine_info& _return, const std::string& session_id, const std::string& host, const machine_detail_filter::type filter);
  int32_t send_get_physical_machine_detail_p(const std::string& session_id, const std::string& host, const machine_detail_filter::type filter);
  void recv_get_physical_machine_detail_p(physical_machine_info& _return, const int32_t seqid);
  bool verify_packer_to_carrier_p(const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl);
  int32_t send_verify_packer_to_carrier_p(const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl);
  bool recv_verify_packer_to_carrier_p(const int32_t seqid);
  void take_packer_xray_p(std::string& _return, const std::string& session_id, const std::string& host);
  int32_t send_take_packer_xray_p(const std::string& session_id, const std::string& host);
  void recv_take_packer_xray_p(std::string& _return, const int32_t seqid);
  void get_packer_service_info_p(service_info& _return, const std::string& session_id, const std::string& host);
  int32_t send_get_packer_service_info_p(const std::string& session_id, const std::string& host);
  void recv_get_packer_service_info_p(service_info& _return, const int32_t seqid);
  bool set_customized_id_p(const std::string& session_id, const std::string& disk_addr, const std::string& disk_id);
  int32_t send_set_customized_id_p(const std::string& session_id, const std::string& disk_addr, const std::string& disk_id);
  bool recv_set_customized_id_p(const int32_t seqid);
};

class service_proxyCobClient;

class service_proxyCobClIf : virtual public physical_packer_service_proxyCobClIf {
 public:
  virtual ~service_proxyCobClIf() {}
  virtual void create_job_ex_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type) = 0;
  virtual void get_job_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const std::string& service_type) = 0;
  virtual void interrupt_job_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const std::string& service_type) = 0;
  virtual void resume_job_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const std::string& service_type) = 0;
  virtual void remove_job_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const std::string& service_type) = 0;
  virtual void running_job_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const std::string& service_type) = 0;
  virtual void update_job_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type) = 0;
  virtual void remove_snapshot_image_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::map<std::string, image_map_info> & images, const std::string& service_type) = 0;
  virtual void test_connection_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const connection& conn, const std::string& service_type) = 0;
  virtual void add_connection_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const connection& conn, const std::string& service_type) = 0;
  virtual void remove_connection_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& connection_id, const std::string& service_type) = 0;
  virtual void modify_connection_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const connection& conn, const std::string& service_type) = 0;
  virtual void enumerate_connections_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& service_type) = 0;
  virtual void get_connection_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& connection_id, const std::string& service_type) = 0;
  virtual void get_virtual_host_info_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) = 0;
  virtual void get_virtual_machine_detail_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) = 0;
  virtual void get_physical_machine_detail_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& host, const machine_detail_filter::type filter) = 0;
  virtual void verify_packer_to_carrier_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl) = 0;
  virtual void take_packer_xray_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& host) = 0;
  virtual void get_packer_service_info_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& host) = 0;
  virtual void set_customized_id_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& disk_addr, const std::string& disk_id) = 0;
};

class service_proxyCobSvIf : virtual public physical_packer_service_proxyCobSvIf {
 public:
  virtual ~service_proxyCobSvIf() {}
  virtual void create_job_ex_p(tcxx::function<void(job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type) = 0;
  virtual void get_job_p(tcxx::function<void(job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id, const std::string& service_type) = 0;
  virtual void interrupt_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id, const std::string& service_type) = 0;
  virtual void resume_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id, const std::string& service_type) = 0;
  virtual void remove_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id, const std::string& service_type) = 0;
  virtual void running_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id, const std::string& service_type) = 0;
  virtual void update_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type) = 0;
  virtual void remove_snapshot_image_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::map<std::string, image_map_info> & images, const std::string& service_type) = 0;
  virtual void test_connection_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const connection& conn, const std::string& service_type) = 0;
  virtual void add_connection_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const connection& conn, const std::string& service_type) = 0;
  virtual void remove_connection_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& connection_id, const std::string& service_type) = 0;
  virtual void modify_connection_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const connection& conn, const std::string& service_type) = 0;
  virtual void enumerate_connections_p(tcxx::function<void(std::vector<connection>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& service_type) = 0;
  virtual void get_connection_p(tcxx::function<void(connection const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& connection_id, const std::string& service_type) = 0;
  virtual void get_virtual_host_info_p(tcxx::function<void(virtual_host const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) = 0;
  virtual void get_virtual_machine_detail_p(tcxx::function<void(virtual_machine const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) = 0;
  virtual void get_physical_machine_detail_p(tcxx::function<void(physical_machine_info const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& host, const machine_detail_filter::type filter) = 0;
  virtual void verify_packer_to_carrier_p(tcxx::function<void(bool const& _return)> cob, const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl) = 0;
  virtual void take_packer_xray_p(tcxx::function<void(std::string const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& host) = 0;
  virtual void get_packer_service_info_p(tcxx::function<void(service_info const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& host) = 0;
  virtual void set_customized_id_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& disk_addr, const std::string& disk_id) = 0;
};

class service_proxyCobSvIfFactory : virtual public physical_packer_service_proxyCobSvIfFactory {
 public:
  typedef service_proxyCobSvIf Handler;

  virtual ~service_proxyCobSvIfFactory() {}

  virtual service_proxyCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(common_serviceCobSvIf* /* handler */) = 0;
};

class service_proxyCobSvIfSingletonFactory : virtual public service_proxyCobSvIfFactory {
 public:
  service_proxyCobSvIfSingletonFactory(const boost::shared_ptr<service_proxyCobSvIf>& iface) : iface_(iface) {}
  virtual ~service_proxyCobSvIfSingletonFactory() {}

  virtual service_proxyCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(common_serviceCobSvIf* /* handler */) {}

 protected:
  boost::shared_ptr<service_proxyCobSvIf> iface_;
};

class service_proxyCobSvNull : virtual public service_proxyCobSvIf , virtual public physical_packer_service_proxyCobSvNull {
 public:
  virtual ~service_proxyCobSvNull() {}
  void create_job_ex_p(tcxx::function<void(job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */, const create_job_detail& /* create_job */, const std::string& /* service_type */) {
    job_detail _return;
    return cob(_return);
  }
  void get_job_p(tcxx::function<void(job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */, const std::string& /* service_type */) {
    job_detail _return;
    return cob(_return);
  }
  void interrupt_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */, const std::string& /* service_type */) {
    bool _return = false;
    return cob(_return);
  }
  void resume_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */, const std::string& /* service_type */) {
    bool _return = false;
    return cob(_return);
  }
  void remove_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */, const std::string& /* service_type */) {
    bool _return = false;
    return cob(_return);
  }
  void running_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */, const std::string& /* service_type */) {
    bool _return = false;
    return cob(_return);
  }
  void update_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */, const create_job_detail& /* create_job */, const std::string& /* service_type */) {
    bool _return = false;
    return cob(_return);
  }
  void remove_snapshot_image_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::map<std::string, image_map_info> & /* images */, const std::string& /* service_type */) {
    bool _return = false;
    return cob(_return);
  }
  void test_connection_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const connection& /* conn */, const std::string& /* service_type */) {
    bool _return = false;
    return cob(_return);
  }
  void add_connection_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const connection& /* conn */, const std::string& /* service_type */) {
    bool _return = false;
    return cob(_return);
  }
  void remove_connection_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* connection_id */, const std::string& /* service_type */) {
    bool _return = false;
    return cob(_return);
  }
  void modify_connection_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const connection& /* conn */, const std::string& /* service_type */) {
    bool _return = false;
    return cob(_return);
  }
  void enumerate_connections_p(tcxx::function<void(std::vector<connection>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* service_type */) {
    std::vector<connection>  _return;
    return cob(_return);
  }
  void get_connection_p(tcxx::function<void(connection const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* connection_id */, const std::string& /* service_type */) {
    connection _return;
    return cob(_return);
  }
  void get_virtual_host_info_p(tcxx::function<void(virtual_host const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */) {
    virtual_host _return;
    return cob(_return);
  }
  void get_virtual_machine_detail_p(tcxx::function<void(virtual_machine const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */, const std::string& /* machine_id */) {
    virtual_machine _return;
    return cob(_return);
  }
  void get_physical_machine_detail_p(tcxx::function<void(physical_machine_info const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* host */, const machine_detail_filter::type /* filter */) {
    physical_machine_info _return;
    return cob(_return);
  }
  void verify_packer_to_carrier_p(tcxx::function<void(bool const& _return)> cob, const std::string& /* packer */, const std::string& /* carrier */, const int32_t /* port */, const bool /* is_ssl */) {
    bool _return = false;
    return cob(_return);
  }
  void take_packer_xray_p(tcxx::function<void(std::string const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* host */) {
    std::string _return;
    return cob(_return);
  }
  void get_packer_service_info_p(tcxx::function<void(service_info const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* host */) {
    service_info _return;
    return cob(_return);
  }
  void set_customized_id_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* disk_addr */, const std::string& /* disk_id */) {
    bool _return = false;
    return cob(_return);
  }
};

class service_proxyCobClient : virtual public service_proxyCobClIf, public physical_packer_service_proxyCobClient {
 public:
  service_proxyCobClient(boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    physical_packer_service_proxyCobClient(channel, protocolFactory) {}
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void create_job_ex_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
  void send_create_job_ex_p(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
  void recv_create_job_ex_p(job_detail& _return);
  void get_job_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const std::string& service_type);
  void send_get_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
  void recv_get_job_p(job_detail& _return);
  void interrupt_job_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const std::string& service_type);
  void send_interrupt_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
  bool recv_interrupt_job_p();
  void resume_job_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const std::string& service_type);
  void send_resume_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
  bool recv_resume_job_p();
  void remove_job_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const std::string& service_type);
  void send_remove_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
  bool recv_remove_job_p();
  void running_job_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const std::string& service_type);
  void send_running_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
  bool recv_running_job_p();
  void update_job_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
  void send_update_job_p(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
  bool recv_update_job_p();
  void remove_snapshot_image_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::map<std::string, image_map_info> & images, const std::string& service_type);
  void send_remove_snapshot_image_p(const std::string& session_id, const std::map<std::string, image_map_info> & images, const std::string& service_type);
  bool recv_remove_snapshot_image_p();
  void test_connection_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const connection& conn, const std::string& service_type);
  void send_test_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type);
  bool recv_test_connection_p();
  void add_connection_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const connection& conn, const std::string& service_type);
  void send_add_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type);
  bool recv_add_connection_p();
  void remove_connection_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& connection_id, const std::string& service_type);
  void send_remove_connection_p(const std::string& session_id, const std::string& connection_id, const std::string& service_type);
  bool recv_remove_connection_p();
  void modify_connection_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const connection& conn, const std::string& service_type);
  void send_modify_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type);
  bool recv_modify_connection_p();
  void enumerate_connections_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& service_type);
  void send_enumerate_connections_p(const std::string& session_id, const std::string& service_type);
  void recv_enumerate_connections_p(std::vector<connection> & _return);
  void get_connection_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& connection_id, const std::string& service_type);
  void send_get_connection_p(const std::string& session_id, const std::string& connection_id, const std::string& service_type);
  void recv_get_connection_p(connection& _return);
  void get_virtual_host_info_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void send_get_virtual_host_info_p(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void recv_get_virtual_host_info_p(virtual_host& _return);
  void get_virtual_machine_detail_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void send_get_virtual_machine_detail_p(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void recv_get_virtual_machine_detail_p(virtual_machine& _return);
  void get_physical_machine_detail_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& host, const machine_detail_filter::type filter);
  void send_get_physical_machine_detail_p(const std::string& session_id, const std::string& host, const machine_detail_filter::type filter);
  void recv_get_physical_machine_detail_p(physical_machine_info& _return);
  void verify_packer_to_carrier_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl);
  void send_verify_packer_to_carrier_p(const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl);
  bool recv_verify_packer_to_carrier_p();
  void take_packer_xray_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& host);
  void send_take_packer_xray_p(const std::string& session_id, const std::string& host);
  void recv_take_packer_xray_p(std::string& _return);
  void get_packer_service_info_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& host);
  void send_get_packer_service_info_p(const std::string& session_id, const std::string& host);
  void recv_get_packer_service_info_p(service_info& _return);
  void set_customized_id_p(tcxx::function<void(service_proxyCobClient* client)> cob, const std::string& session_id, const std::string& disk_addr, const std::string& disk_id);
  void send_set_customized_id_p(const std::string& session_id, const std::string& disk_addr, const std::string& disk_id);
  bool recv_set_customized_id_p();
};

class service_proxyAsyncProcessor : public physical_packer_service_proxyAsyncProcessor {
 protected:
  boost::shared_ptr<service_proxyCobSvIf> iface_;
  virtual void dispatchCall(tcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (service_proxyAsyncProcessor::*ProcessFunction)(tcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_create_job_ex_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_create_job_ex_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const job_detail& _return);
  void throw_create_job_ex_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const job_detail& _return);
  void throw_get_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_interrupt_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_interrupt_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_interrupt_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_resume_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_resume_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_resume_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_remove_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_remove_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_remove_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_running_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_running_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_running_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_update_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_update_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_update_job_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_remove_snapshot_image_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_remove_snapshot_image_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_remove_snapshot_image_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_test_connection_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_test_connection_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_test_connection_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_add_connection_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_add_connection_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_add_connection_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_remove_connection_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_remove_connection_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_remove_connection_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_modify_connection_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_modify_connection_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_modify_connection_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_enumerate_connections_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_enumerate_connections_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector<connection> & _return);
  void throw_enumerate_connections_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_connection_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_connection_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const connection& _return);
  void throw_get_connection_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_virtual_host_info_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_virtual_host_info_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const virtual_host& _return);
  void throw_get_virtual_host_info_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_virtual_machine_detail_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_virtual_machine_detail_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const virtual_machine& _return);
  void throw_get_virtual_machine_detail_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_physical_machine_detail_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_physical_machine_detail_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const physical_machine_info& _return);
  void throw_get_physical_machine_detail_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_verify_packer_to_carrier_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_verify_packer_to_carrier_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_verify_packer_to_carrier_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_take_packer_xray_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_take_packer_xray_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::string& _return);
  void throw_take_packer_xray_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_packer_service_info_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_packer_service_info_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const service_info& _return);
  void throw_get_packer_service_info_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_set_customized_id_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_set_customized_id_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_set_customized_id_p(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  service_proxyAsyncProcessor(boost::shared_ptr<service_proxyCobSvIf> iface) :
    physical_packer_service_proxyAsyncProcessor(iface),
    iface_(iface) {
    processMap_["create_job_ex_p"] = &service_proxyAsyncProcessor::process_create_job_ex_p;
    processMap_["get_job_p"] = &service_proxyAsyncProcessor::process_get_job_p;
    processMap_["interrupt_job_p"] = &service_proxyAsyncProcessor::process_interrupt_job_p;
    processMap_["resume_job_p"] = &service_proxyAsyncProcessor::process_resume_job_p;
    processMap_["remove_job_p"] = &service_proxyAsyncProcessor::process_remove_job_p;
    processMap_["running_job_p"] = &service_proxyAsyncProcessor::process_running_job_p;
    processMap_["update_job_p"] = &service_proxyAsyncProcessor::process_update_job_p;
    processMap_["remove_snapshot_image_p"] = &service_proxyAsyncProcessor::process_remove_snapshot_image_p;
    processMap_["test_connection_p"] = &service_proxyAsyncProcessor::process_test_connection_p;
    processMap_["add_connection_p"] = &service_proxyAsyncProcessor::process_add_connection_p;
    processMap_["remove_connection_p"] = &service_proxyAsyncProcessor::process_remove_connection_p;
    processMap_["modify_connection_p"] = &service_proxyAsyncProcessor::process_modify_connection_p;
    processMap_["enumerate_connections_p"] = &service_proxyAsyncProcessor::process_enumerate_connections_p;
    processMap_["get_connection_p"] = &service_proxyAsyncProcessor::process_get_connection_p;
    processMap_["get_virtual_host_info_p"] = &service_proxyAsyncProcessor::process_get_virtual_host_info_p;
    processMap_["get_virtual_machine_detail_p"] = &service_proxyAsyncProcessor::process_get_virtual_machine_detail_p;
    processMap_["get_physical_machine_detail_p"] = &service_proxyAsyncProcessor::process_get_physical_machine_detail_p;
    processMap_["verify_packer_to_carrier_p"] = &service_proxyAsyncProcessor::process_verify_packer_to_carrier_p;
    processMap_["take_packer_xray_p"] = &service_proxyAsyncProcessor::process_take_packer_xray_p;
    processMap_["get_packer_service_info_p"] = &service_proxyAsyncProcessor::process_get_packer_service_info_p;
    processMap_["set_customized_id_p"] = &service_proxyAsyncProcessor::process_set_customized_id_p;
  }

  virtual ~service_proxyAsyncProcessor() {}
};

class service_proxyAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  service_proxyAsyncProcessorFactory(const ::boost::shared_ptr< service_proxyCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< service_proxyCobSvIfFactory > handlerFactory_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}} // namespace

#endif
