// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "reverse_transport.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::saasame::transport;

class reverse_transportHandler : virtual public reverse_transportIf {
 public:
  reverse_transportHandler() {
    // Your initialization goes here
  }

  void ping(service_info& _return) {
    // Your implementation goes here
    printf("ping\n");
  }

  void generate_session(std::string& _return, const std::string& addr) {
    // Your implementation goes here
    printf("generate_session\n");
  }

  void receive(transport_message& _return, const std::string& session, const std::string& addr, const std::string& name) {
    // Your implementation goes here
    printf("receive\n");
  }

  bool response(const std::string& session, const std::string& addr, const transport_message& response) {
    // Your implementation goes here
    printf("response\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<reverse_transportHandler> handler(new reverse_transportHandler());
  shared_ptr<TProcessor> processor(new reverse_transportProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

