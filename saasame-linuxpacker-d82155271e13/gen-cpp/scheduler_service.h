/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef scheduler_service_H
#define scheduler_service_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/cxxfunctional.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "saasame_types.h"
#include "common_service.h"

namespace saasame { namespace transport {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class scheduler_serviceIf : virtual public common_serviceIf {
 public:
  virtual ~scheduler_serviceIf() {}
  virtual void get_physical_machine_detail(physical_machine_info& _return, const std::string& session_id, const std::string& host, const machine_detail_filter::type filter) = 0;
  virtual void get_physical_machine_detail2(physical_machine_info& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const machine_detail_filter::type filter) = 0;
  virtual void get_virtual_host_info(virtual_host& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) = 0;
  virtual void get_virtual_machine_detail(virtual_machine& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) = 0;
  virtual void create_job_ex(replica_job_detail& _return, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job) = 0;
  virtual void create_job(replica_job_detail& _return, const std::string& session_id, const create_job_detail& create_job) = 0;
  virtual void get_job(replica_job_detail& _return, const std::string& session_id, const std::string& job_id) = 0;
  virtual bool interrupt_job(const std::string& session_id, const std::string& job_id) = 0;
  virtual bool resume_job(const std::string& session_id, const std::string& job_id) = 0;
  virtual bool remove_job(const std::string& session_id, const std::string& job_id) = 0;
  virtual void list_jobs(std::vector<replica_job_detail> & _return, const std::string& session_id) = 0;
  virtual bool update_job(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job) = 0;
  virtual void terminate(const std::string& session_id) = 0;
  virtual bool running_job(const std::string& session_id, const std::string& job_id) = 0;
  virtual bool verify_management(const std::string& management, const int32_t port, const bool is_ssl) = 0;
  virtual bool verify_packer_to_carrier(const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl) = 0;
  virtual void take_packer_xray(std::string& _return, const std::string& session_id, const std::string& host) = 0;
  virtual void get_packer_service_info(service_info& _return, const std::string& session_id, const std::string& host) = 0;
};

class scheduler_serviceIfFactory : virtual public common_serviceIfFactory {
 public:
  typedef scheduler_serviceIf Handler;

  virtual ~scheduler_serviceIfFactory() {}

  virtual scheduler_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(common_serviceIf* /* handler */) = 0;
};

class scheduler_serviceIfSingletonFactory : virtual public scheduler_serviceIfFactory {
 public:
  scheduler_serviceIfSingletonFactory(const boost::shared_ptr<scheduler_serviceIf>& iface) : iface_(iface) {}
  virtual ~scheduler_serviceIfSingletonFactory() {}

  virtual scheduler_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(common_serviceIf* /* handler */) {}

 protected:
  boost::shared_ptr<scheduler_serviceIf> iface_;
};

class scheduler_serviceNull : virtual public scheduler_serviceIf , virtual public common_serviceNull {
 public:
  virtual ~scheduler_serviceNull() {}
  void get_physical_machine_detail(physical_machine_info& /* _return */, const std::string& /* session_id */, const std::string& /* host */, const machine_detail_filter::type /* filter */) {
    return;
  }
  void get_physical_machine_detail2(physical_machine_info& /* _return */, const std::string& /* session_id */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */, const machine_detail_filter::type /* filter */) {
    return;
  }
  void get_virtual_host_info(virtual_host& /* _return */, const std::string& /* session_id */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */) {
    return;
  }
  void get_virtual_machine_detail(virtual_machine& /* _return */, const std::string& /* session_id */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */, const std::string& /* machine_id */) {
    return;
  }
  void create_job_ex(replica_job_detail& /* _return */, const std::string& /* session_id */, const std::string& /* job_id */, const create_job_detail& /* create_job */) {
    return;
  }
  void create_job(replica_job_detail& /* _return */, const std::string& /* session_id */, const create_job_detail& /* create_job */) {
    return;
  }
  void get_job(replica_job_detail& /* _return */, const std::string& /* session_id */, const std::string& /* job_id */) {
    return;
  }
  bool interrupt_job(const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
  bool resume_job(const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
  bool remove_job(const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
  void list_jobs(std::vector<replica_job_detail> & /* _return */, const std::string& /* session_id */) {
    return;
  }
  bool update_job(const std::string& /* session_id */, const std::string& /* job_id */, const create_job_detail& /* create_job */) {
    bool _return = false;
    return _return;
  }
  void terminate(const std::string& /* session_id */) {
    return;
  }
  bool running_job(const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
  bool verify_management(const std::string& /* management */, const int32_t /* port */, const bool /* is_ssl */) {
    bool _return = false;
    return _return;
  }
  bool verify_packer_to_carrier(const std::string& /* packer */, const std::string& /* carrier */, const int32_t /* port */, const bool /* is_ssl */) {
    bool _return = false;
    return _return;
  }
  void take_packer_xray(std::string& /* _return */, const std::string& /* session_id */, const std::string& /* host */) {
    return;
  }
  void get_packer_service_info(service_info& /* _return */, const std::string& /* session_id */, const std::string& /* host */) {
    return;
  }
};

typedef struct _scheduler_service_get_physical_machine_detail_args__isset {
  _scheduler_service_get_physical_machine_detail_args__isset() : session_id(false), host(false), filter(false) {}
  bool session_id :1;
  bool host :1;
  bool filter :1;
} _scheduler_service_get_physical_machine_detail_args__isset;

class scheduler_service_get_physical_machine_detail_args {
 public:

  scheduler_service_get_physical_machine_detail_args(const scheduler_service_get_physical_machine_detail_args&);
  scheduler_service_get_physical_machine_detail_args& operator=(const scheduler_service_get_physical_machine_detail_args&);
  scheduler_service_get_physical_machine_detail_args() : session_id(), host(), filter((machine_detail_filter::type)0) {
  }

  virtual ~scheduler_service_get_physical_machine_detail_args() throw();
  std::string session_id;
  std::string host;
  machine_detail_filter::type filter;

  _scheduler_service_get_physical_machine_detail_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_host(const std::string& val);

  void __set_filter(const machine_detail_filter::type val);

  bool operator == (const scheduler_service_get_physical_machine_detail_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_get_physical_machine_detail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_get_physical_machine_detail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class scheduler_service_get_physical_machine_detail_pargs {
 public:


  virtual ~scheduler_service_get_physical_machine_detail_pargs() throw();
  const std::string* session_id;
  const std::string* host;
  const machine_detail_filter::type* filter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_get_physical_machine_detail_result__isset {
  _scheduler_service_get_physical_machine_detail_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_get_physical_machine_detail_result__isset;

class scheduler_service_get_physical_machine_detail_result {
 public:

  scheduler_service_get_physical_machine_detail_result(const scheduler_service_get_physical_machine_detail_result&);
  scheduler_service_get_physical_machine_detail_result& operator=(const scheduler_service_get_physical_machine_detail_result&);
  scheduler_service_get_physical_machine_detail_result() {
  }

  virtual ~scheduler_service_get_physical_machine_detail_result() throw();
  physical_machine_info success;
  invalid_operation ouch;

  _scheduler_service_get_physical_machine_detail_result__isset __isset;

  void __set_success(const physical_machine_info& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const scheduler_service_get_physical_machine_detail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_get_physical_machine_detail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_get_physical_machine_detail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_get_physical_machine_detail_presult__isset {
  _scheduler_service_get_physical_machine_detail_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_get_physical_machine_detail_presult__isset;

class scheduler_service_get_physical_machine_detail_presult {
 public:


  virtual ~scheduler_service_get_physical_machine_detail_presult() throw();
  physical_machine_info* success;
  invalid_operation ouch;

  _scheduler_service_get_physical_machine_detail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_get_physical_machine_detail2_args__isset {
  _scheduler_service_get_physical_machine_detail2_args__isset() : session_id(false), host(false), username(false), password(false), filter(false) {}
  bool session_id :1;
  bool host :1;
  bool username :1;
  bool password :1;
  bool filter :1;
} _scheduler_service_get_physical_machine_detail2_args__isset;

class scheduler_service_get_physical_machine_detail2_args {
 public:

  scheduler_service_get_physical_machine_detail2_args(const scheduler_service_get_physical_machine_detail2_args&);
  scheduler_service_get_physical_machine_detail2_args& operator=(const scheduler_service_get_physical_machine_detail2_args&);
  scheduler_service_get_physical_machine_detail2_args() : session_id(), host(), username(), password(), filter((machine_detail_filter::type)0) {
  }

  virtual ~scheduler_service_get_physical_machine_detail2_args() throw();
  std::string session_id;
  std::string host;
  std::string username;
  std::string password;
  machine_detail_filter::type filter;

  _scheduler_service_get_physical_machine_detail2_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_host(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  void __set_filter(const machine_detail_filter::type val);

  bool operator == (const scheduler_service_get_physical_machine_detail2_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_get_physical_machine_detail2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_get_physical_machine_detail2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class scheduler_service_get_physical_machine_detail2_pargs {
 public:


  virtual ~scheduler_service_get_physical_machine_detail2_pargs() throw();
  const std::string* session_id;
  const std::string* host;
  const std::string* username;
  const std::string* password;
  const machine_detail_filter::type* filter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_get_physical_machine_detail2_result__isset {
  _scheduler_service_get_physical_machine_detail2_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_get_physical_machine_detail2_result__isset;

class scheduler_service_get_physical_machine_detail2_result {
 public:

  scheduler_service_get_physical_machine_detail2_result(const scheduler_service_get_physical_machine_detail2_result&);
  scheduler_service_get_physical_machine_detail2_result& operator=(const scheduler_service_get_physical_machine_detail2_result&);
  scheduler_service_get_physical_machine_detail2_result() {
  }

  virtual ~scheduler_service_get_physical_machine_detail2_result() throw();
  physical_machine_info success;
  invalid_operation ouch;

  _scheduler_service_get_physical_machine_detail2_result__isset __isset;

  void __set_success(const physical_machine_info& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const scheduler_service_get_physical_machine_detail2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_get_physical_machine_detail2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_get_physical_machine_detail2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_get_physical_machine_detail2_presult__isset {
  _scheduler_service_get_physical_machine_detail2_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_get_physical_machine_detail2_presult__isset;

class scheduler_service_get_physical_machine_detail2_presult {
 public:


  virtual ~scheduler_service_get_physical_machine_detail2_presult() throw();
  physical_machine_info* success;
  invalid_operation ouch;

  _scheduler_service_get_physical_machine_detail2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_get_virtual_host_info_args__isset {
  _scheduler_service_get_virtual_host_info_args__isset() : session_id(false), host(false), username(false), password(false) {}
  bool session_id :1;
  bool host :1;
  bool username :1;
  bool password :1;
} _scheduler_service_get_virtual_host_info_args__isset;

class scheduler_service_get_virtual_host_info_args {
 public:

  scheduler_service_get_virtual_host_info_args(const scheduler_service_get_virtual_host_info_args&);
  scheduler_service_get_virtual_host_info_args& operator=(const scheduler_service_get_virtual_host_info_args&);
  scheduler_service_get_virtual_host_info_args() : session_id(), host(), username(), password() {
  }

  virtual ~scheduler_service_get_virtual_host_info_args() throw();
  std::string session_id;
  std::string host;
  std::string username;
  std::string password;

  _scheduler_service_get_virtual_host_info_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_host(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const scheduler_service_get_virtual_host_info_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_get_virtual_host_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_get_virtual_host_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class scheduler_service_get_virtual_host_info_pargs {
 public:


  virtual ~scheduler_service_get_virtual_host_info_pargs() throw();
  const std::string* session_id;
  const std::string* host;
  const std::string* username;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_get_virtual_host_info_result__isset {
  _scheduler_service_get_virtual_host_info_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_get_virtual_host_info_result__isset;

class scheduler_service_get_virtual_host_info_result {
 public:

  scheduler_service_get_virtual_host_info_result(const scheduler_service_get_virtual_host_info_result&);
  scheduler_service_get_virtual_host_info_result& operator=(const scheduler_service_get_virtual_host_info_result&);
  scheduler_service_get_virtual_host_info_result() {
  }

  virtual ~scheduler_service_get_virtual_host_info_result() throw();
  virtual_host success;
  invalid_operation ouch;

  _scheduler_service_get_virtual_host_info_result__isset __isset;

  void __set_success(const virtual_host& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const scheduler_service_get_virtual_host_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_get_virtual_host_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_get_virtual_host_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_get_virtual_host_info_presult__isset {
  _scheduler_service_get_virtual_host_info_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_get_virtual_host_info_presult__isset;

class scheduler_service_get_virtual_host_info_presult {
 public:


  virtual ~scheduler_service_get_virtual_host_info_presult() throw();
  virtual_host* success;
  invalid_operation ouch;

  _scheduler_service_get_virtual_host_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_get_virtual_machine_detail_args__isset {
  _scheduler_service_get_virtual_machine_detail_args__isset() : session_id(false), host(false), username(false), password(false), machine_id(false) {}
  bool session_id :1;
  bool host :1;
  bool username :1;
  bool password :1;
  bool machine_id :1;
} _scheduler_service_get_virtual_machine_detail_args__isset;

class scheduler_service_get_virtual_machine_detail_args {
 public:

  scheduler_service_get_virtual_machine_detail_args(const scheduler_service_get_virtual_machine_detail_args&);
  scheduler_service_get_virtual_machine_detail_args& operator=(const scheduler_service_get_virtual_machine_detail_args&);
  scheduler_service_get_virtual_machine_detail_args() : session_id(), host(), username(), password(), machine_id() {
  }

  virtual ~scheduler_service_get_virtual_machine_detail_args() throw();
  std::string session_id;
  std::string host;
  std::string username;
  std::string password;
  std::string machine_id;

  _scheduler_service_get_virtual_machine_detail_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_host(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  void __set_machine_id(const std::string& val);

  bool operator == (const scheduler_service_get_virtual_machine_detail_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(machine_id == rhs.machine_id))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_get_virtual_machine_detail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_get_virtual_machine_detail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class scheduler_service_get_virtual_machine_detail_pargs {
 public:


  virtual ~scheduler_service_get_virtual_machine_detail_pargs() throw();
  const std::string* session_id;
  const std::string* host;
  const std::string* username;
  const std::string* password;
  const std::string* machine_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_get_virtual_machine_detail_result__isset {
  _scheduler_service_get_virtual_machine_detail_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_get_virtual_machine_detail_result__isset;

class scheduler_service_get_virtual_machine_detail_result {
 public:

  scheduler_service_get_virtual_machine_detail_result(const scheduler_service_get_virtual_machine_detail_result&);
  scheduler_service_get_virtual_machine_detail_result& operator=(const scheduler_service_get_virtual_machine_detail_result&);
  scheduler_service_get_virtual_machine_detail_result() {
  }

  virtual ~scheduler_service_get_virtual_machine_detail_result() throw();
  virtual_machine success;
  invalid_operation ouch;

  _scheduler_service_get_virtual_machine_detail_result__isset __isset;

  void __set_success(const virtual_machine& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const scheduler_service_get_virtual_machine_detail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_get_virtual_machine_detail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_get_virtual_machine_detail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_get_virtual_machine_detail_presult__isset {
  _scheduler_service_get_virtual_machine_detail_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_get_virtual_machine_detail_presult__isset;

class scheduler_service_get_virtual_machine_detail_presult {
 public:


  virtual ~scheduler_service_get_virtual_machine_detail_presult() throw();
  virtual_machine* success;
  invalid_operation ouch;

  _scheduler_service_get_virtual_machine_detail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_create_job_ex_args__isset {
  _scheduler_service_create_job_ex_args__isset() : session_id(false), job_id(false), create_job(false) {}
  bool session_id :1;
  bool job_id :1;
  bool create_job :1;
} _scheduler_service_create_job_ex_args__isset;

class scheduler_service_create_job_ex_args {
 public:

  scheduler_service_create_job_ex_args(const scheduler_service_create_job_ex_args&);
  scheduler_service_create_job_ex_args& operator=(const scheduler_service_create_job_ex_args&);
  scheduler_service_create_job_ex_args() : session_id(), job_id() {
  }

  virtual ~scheduler_service_create_job_ex_args() throw();
  std::string session_id;
  std::string job_id;
  create_job_detail create_job;

  _scheduler_service_create_job_ex_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  void __set_create_job(const create_job_detail& val);

  bool operator == (const scheduler_service_create_job_ex_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    if (!(create_job == rhs.create_job))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_create_job_ex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_create_job_ex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class scheduler_service_create_job_ex_pargs {
 public:


  virtual ~scheduler_service_create_job_ex_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;
  const create_job_detail* create_job;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_create_job_ex_result__isset {
  _scheduler_service_create_job_ex_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_create_job_ex_result__isset;

class scheduler_service_create_job_ex_result {
 public:

  scheduler_service_create_job_ex_result(const scheduler_service_create_job_ex_result&);
  scheduler_service_create_job_ex_result& operator=(const scheduler_service_create_job_ex_result&);
  scheduler_service_create_job_ex_result() {
  }

  virtual ~scheduler_service_create_job_ex_result() throw();
  replica_job_detail success;
  invalid_operation ouch;

  _scheduler_service_create_job_ex_result__isset __isset;

  void __set_success(const replica_job_detail& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const scheduler_service_create_job_ex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_create_job_ex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_create_job_ex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_create_job_ex_presult__isset {
  _scheduler_service_create_job_ex_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_create_job_ex_presult__isset;

class scheduler_service_create_job_ex_presult {
 public:


  virtual ~scheduler_service_create_job_ex_presult() throw();
  replica_job_detail* success;
  invalid_operation ouch;

  _scheduler_service_create_job_ex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_create_job_args__isset {
  _scheduler_service_create_job_args__isset() : session_id(false), create_job(false) {}
  bool session_id :1;
  bool create_job :1;
} _scheduler_service_create_job_args__isset;

class scheduler_service_create_job_args {
 public:

  scheduler_service_create_job_args(const scheduler_service_create_job_args&);
  scheduler_service_create_job_args& operator=(const scheduler_service_create_job_args&);
  scheduler_service_create_job_args() : session_id() {
  }

  virtual ~scheduler_service_create_job_args() throw();
  std::string session_id;
  create_job_detail create_job;

  _scheduler_service_create_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_create_job(const create_job_detail& val);

  bool operator == (const scheduler_service_create_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(create_job == rhs.create_job))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_create_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_create_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class scheduler_service_create_job_pargs {
 public:


  virtual ~scheduler_service_create_job_pargs() throw();
  const std::string* session_id;
  const create_job_detail* create_job;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_create_job_result__isset {
  _scheduler_service_create_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_create_job_result__isset;

class scheduler_service_create_job_result {
 public:

  scheduler_service_create_job_result(const scheduler_service_create_job_result&);
  scheduler_service_create_job_result& operator=(const scheduler_service_create_job_result&);
  scheduler_service_create_job_result() {
  }

  virtual ~scheduler_service_create_job_result() throw();
  replica_job_detail success;
  invalid_operation ouch;

  _scheduler_service_create_job_result__isset __isset;

  void __set_success(const replica_job_detail& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const scheduler_service_create_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_create_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_create_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_create_job_presult__isset {
  _scheduler_service_create_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_create_job_presult__isset;

class scheduler_service_create_job_presult {
 public:


  virtual ~scheduler_service_create_job_presult() throw();
  replica_job_detail* success;
  invalid_operation ouch;

  _scheduler_service_create_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_get_job_args__isset {
  _scheduler_service_get_job_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _scheduler_service_get_job_args__isset;

class scheduler_service_get_job_args {
 public:

  scheduler_service_get_job_args(const scheduler_service_get_job_args&);
  scheduler_service_get_job_args& operator=(const scheduler_service_get_job_args&);
  scheduler_service_get_job_args() : session_id(), job_id() {
  }

  virtual ~scheduler_service_get_job_args() throw();
  std::string session_id;
  std::string job_id;

  _scheduler_service_get_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const scheduler_service_get_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_get_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_get_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class scheduler_service_get_job_pargs {
 public:


  virtual ~scheduler_service_get_job_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_get_job_result__isset {
  _scheduler_service_get_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_get_job_result__isset;

class scheduler_service_get_job_result {
 public:

  scheduler_service_get_job_result(const scheduler_service_get_job_result&);
  scheduler_service_get_job_result& operator=(const scheduler_service_get_job_result&);
  scheduler_service_get_job_result() {
  }

  virtual ~scheduler_service_get_job_result() throw();
  replica_job_detail success;
  invalid_operation ouch;

  _scheduler_service_get_job_result__isset __isset;

  void __set_success(const replica_job_detail& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const scheduler_service_get_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_get_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_get_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_get_job_presult__isset {
  _scheduler_service_get_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_get_job_presult__isset;

class scheduler_service_get_job_presult {
 public:


  virtual ~scheduler_service_get_job_presult() throw();
  replica_job_detail* success;
  invalid_operation ouch;

  _scheduler_service_get_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_interrupt_job_args__isset {
  _scheduler_service_interrupt_job_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _scheduler_service_interrupt_job_args__isset;

class scheduler_service_interrupt_job_args {
 public:

  scheduler_service_interrupt_job_args(const scheduler_service_interrupt_job_args&);
  scheduler_service_interrupt_job_args& operator=(const scheduler_service_interrupt_job_args&);
  scheduler_service_interrupt_job_args() : session_id(), job_id() {
  }

  virtual ~scheduler_service_interrupt_job_args() throw();
  std::string session_id;
  std::string job_id;

  _scheduler_service_interrupt_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const scheduler_service_interrupt_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_interrupt_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_interrupt_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class scheduler_service_interrupt_job_pargs {
 public:


  virtual ~scheduler_service_interrupt_job_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_interrupt_job_result__isset {
  _scheduler_service_interrupt_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_interrupt_job_result__isset;

class scheduler_service_interrupt_job_result {
 public:

  scheduler_service_interrupt_job_result(const scheduler_service_interrupt_job_result&);
  scheduler_service_interrupt_job_result& operator=(const scheduler_service_interrupt_job_result&);
  scheduler_service_interrupt_job_result() : success(0) {
  }

  virtual ~scheduler_service_interrupt_job_result() throw();
  bool success;
  invalid_operation ouch;

  _scheduler_service_interrupt_job_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const scheduler_service_interrupt_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_interrupt_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_interrupt_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_interrupt_job_presult__isset {
  _scheduler_service_interrupt_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_interrupt_job_presult__isset;

class scheduler_service_interrupt_job_presult {
 public:


  virtual ~scheduler_service_interrupt_job_presult() throw();
  bool* success;
  invalid_operation ouch;

  _scheduler_service_interrupt_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_resume_job_args__isset {
  _scheduler_service_resume_job_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _scheduler_service_resume_job_args__isset;

class scheduler_service_resume_job_args {
 public:

  scheduler_service_resume_job_args(const scheduler_service_resume_job_args&);
  scheduler_service_resume_job_args& operator=(const scheduler_service_resume_job_args&);
  scheduler_service_resume_job_args() : session_id(), job_id() {
  }

  virtual ~scheduler_service_resume_job_args() throw();
  std::string session_id;
  std::string job_id;

  _scheduler_service_resume_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const scheduler_service_resume_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_resume_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_resume_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class scheduler_service_resume_job_pargs {
 public:


  virtual ~scheduler_service_resume_job_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_resume_job_result__isset {
  _scheduler_service_resume_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_resume_job_result__isset;

class scheduler_service_resume_job_result {
 public:

  scheduler_service_resume_job_result(const scheduler_service_resume_job_result&);
  scheduler_service_resume_job_result& operator=(const scheduler_service_resume_job_result&);
  scheduler_service_resume_job_result() : success(0) {
  }

  virtual ~scheduler_service_resume_job_result() throw();
  bool success;
  invalid_operation ouch;

  _scheduler_service_resume_job_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const scheduler_service_resume_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_resume_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_resume_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_resume_job_presult__isset {
  _scheduler_service_resume_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_resume_job_presult__isset;

class scheduler_service_resume_job_presult {
 public:


  virtual ~scheduler_service_resume_job_presult() throw();
  bool* success;
  invalid_operation ouch;

  _scheduler_service_resume_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_remove_job_args__isset {
  _scheduler_service_remove_job_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _scheduler_service_remove_job_args__isset;

class scheduler_service_remove_job_args {
 public:

  scheduler_service_remove_job_args(const scheduler_service_remove_job_args&);
  scheduler_service_remove_job_args& operator=(const scheduler_service_remove_job_args&);
  scheduler_service_remove_job_args() : session_id(), job_id() {
  }

  virtual ~scheduler_service_remove_job_args() throw();
  std::string session_id;
  std::string job_id;

  _scheduler_service_remove_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const scheduler_service_remove_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_remove_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_remove_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class scheduler_service_remove_job_pargs {
 public:


  virtual ~scheduler_service_remove_job_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_remove_job_result__isset {
  _scheduler_service_remove_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_remove_job_result__isset;

class scheduler_service_remove_job_result {
 public:

  scheduler_service_remove_job_result(const scheduler_service_remove_job_result&);
  scheduler_service_remove_job_result& operator=(const scheduler_service_remove_job_result&);
  scheduler_service_remove_job_result() : success(0) {
  }

  virtual ~scheduler_service_remove_job_result() throw();
  bool success;
  invalid_operation ouch;

  _scheduler_service_remove_job_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const scheduler_service_remove_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_remove_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_remove_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_remove_job_presult__isset {
  _scheduler_service_remove_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_remove_job_presult__isset;

class scheduler_service_remove_job_presult {
 public:


  virtual ~scheduler_service_remove_job_presult() throw();
  bool* success;
  invalid_operation ouch;

  _scheduler_service_remove_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_list_jobs_args__isset {
  _scheduler_service_list_jobs_args__isset() : session_id(false) {}
  bool session_id :1;
} _scheduler_service_list_jobs_args__isset;

class scheduler_service_list_jobs_args {
 public:

  scheduler_service_list_jobs_args(const scheduler_service_list_jobs_args&);
  scheduler_service_list_jobs_args& operator=(const scheduler_service_list_jobs_args&);
  scheduler_service_list_jobs_args() : session_id() {
  }

  virtual ~scheduler_service_list_jobs_args() throw();
  std::string session_id;

  _scheduler_service_list_jobs_args__isset __isset;

  void __set_session_id(const std::string& val);

  bool operator == (const scheduler_service_list_jobs_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_list_jobs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_list_jobs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class scheduler_service_list_jobs_pargs {
 public:


  virtual ~scheduler_service_list_jobs_pargs() throw();
  const std::string* session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_list_jobs_result__isset {
  _scheduler_service_list_jobs_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_list_jobs_result__isset;

class scheduler_service_list_jobs_result {
 public:

  scheduler_service_list_jobs_result(const scheduler_service_list_jobs_result&);
  scheduler_service_list_jobs_result& operator=(const scheduler_service_list_jobs_result&);
  scheduler_service_list_jobs_result() {
  }

  virtual ~scheduler_service_list_jobs_result() throw();
  std::vector<replica_job_detail>  success;
  invalid_operation ouch;

  _scheduler_service_list_jobs_result__isset __isset;

  void __set_success(const std::vector<replica_job_detail> & val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const scheduler_service_list_jobs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_list_jobs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_list_jobs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_list_jobs_presult__isset {
  _scheduler_service_list_jobs_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_list_jobs_presult__isset;

class scheduler_service_list_jobs_presult {
 public:


  virtual ~scheduler_service_list_jobs_presult() throw();
  std::vector<replica_job_detail> * success;
  invalid_operation ouch;

  _scheduler_service_list_jobs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_update_job_args__isset {
  _scheduler_service_update_job_args__isset() : session_id(false), job_id(false), create_job(false) {}
  bool session_id :1;
  bool job_id :1;
  bool create_job :1;
} _scheduler_service_update_job_args__isset;

class scheduler_service_update_job_args {
 public:

  scheduler_service_update_job_args(const scheduler_service_update_job_args&);
  scheduler_service_update_job_args& operator=(const scheduler_service_update_job_args&);
  scheduler_service_update_job_args() : session_id(), job_id() {
  }

  virtual ~scheduler_service_update_job_args() throw();
  std::string session_id;
  std::string job_id;
  create_job_detail create_job;

  _scheduler_service_update_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  void __set_create_job(const create_job_detail& val);

  bool operator == (const scheduler_service_update_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    if (!(create_job == rhs.create_job))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_update_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_update_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class scheduler_service_update_job_pargs {
 public:


  virtual ~scheduler_service_update_job_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;
  const create_job_detail* create_job;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_update_job_result__isset {
  _scheduler_service_update_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_update_job_result__isset;

class scheduler_service_update_job_result {
 public:

  scheduler_service_update_job_result(const scheduler_service_update_job_result&);
  scheduler_service_update_job_result& operator=(const scheduler_service_update_job_result&);
  scheduler_service_update_job_result() : success(0) {
  }

  virtual ~scheduler_service_update_job_result() throw();
  bool success;
  invalid_operation ouch;

  _scheduler_service_update_job_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const scheduler_service_update_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_update_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_update_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_update_job_presult__isset {
  _scheduler_service_update_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_update_job_presult__isset;

class scheduler_service_update_job_presult {
 public:


  virtual ~scheduler_service_update_job_presult() throw();
  bool* success;
  invalid_operation ouch;

  _scheduler_service_update_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_terminate_args__isset {
  _scheduler_service_terminate_args__isset() : session_id(false) {}
  bool session_id :1;
} _scheduler_service_terminate_args__isset;

class scheduler_service_terminate_args {
 public:

  scheduler_service_terminate_args(const scheduler_service_terminate_args&);
  scheduler_service_terminate_args& operator=(const scheduler_service_terminate_args&);
  scheduler_service_terminate_args() : session_id() {
  }

  virtual ~scheduler_service_terminate_args() throw();
  std::string session_id;

  _scheduler_service_terminate_args__isset __isset;

  void __set_session_id(const std::string& val);

  bool operator == (const scheduler_service_terminate_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_terminate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_terminate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class scheduler_service_terminate_pargs {
 public:


  virtual ~scheduler_service_terminate_pargs() throw();
  const std::string* session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class scheduler_service_terminate_result {
 public:

  scheduler_service_terminate_result(const scheduler_service_terminate_result&);
  scheduler_service_terminate_result& operator=(const scheduler_service_terminate_result&);
  scheduler_service_terminate_result() {
  }

  virtual ~scheduler_service_terminate_result() throw();

  bool operator == (const scheduler_service_terminate_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const scheduler_service_terminate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_terminate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class scheduler_service_terminate_presult {
 public:


  virtual ~scheduler_service_terminate_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_running_job_args__isset {
  _scheduler_service_running_job_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _scheduler_service_running_job_args__isset;

class scheduler_service_running_job_args {
 public:

  scheduler_service_running_job_args(const scheduler_service_running_job_args&);
  scheduler_service_running_job_args& operator=(const scheduler_service_running_job_args&);
  scheduler_service_running_job_args() : session_id(), job_id() {
  }

  virtual ~scheduler_service_running_job_args() throw();
  std::string session_id;
  std::string job_id;

  _scheduler_service_running_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const scheduler_service_running_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_running_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_running_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class scheduler_service_running_job_pargs {
 public:


  virtual ~scheduler_service_running_job_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_running_job_result__isset {
  _scheduler_service_running_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_running_job_result__isset;

class scheduler_service_running_job_result {
 public:

  scheduler_service_running_job_result(const scheduler_service_running_job_result&);
  scheduler_service_running_job_result& operator=(const scheduler_service_running_job_result&);
  scheduler_service_running_job_result() : success(0) {
  }

  virtual ~scheduler_service_running_job_result() throw();
  bool success;
  invalid_operation ouch;

  _scheduler_service_running_job_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const scheduler_service_running_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_running_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_running_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_running_job_presult__isset {
  _scheduler_service_running_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_running_job_presult__isset;

class scheduler_service_running_job_presult {
 public:


  virtual ~scheduler_service_running_job_presult() throw();
  bool* success;
  invalid_operation ouch;

  _scheduler_service_running_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_verify_management_args__isset {
  _scheduler_service_verify_management_args__isset() : management(false), port(false), is_ssl(false) {}
  bool management :1;
  bool port :1;
  bool is_ssl :1;
} _scheduler_service_verify_management_args__isset;

class scheduler_service_verify_management_args {
 public:

  scheduler_service_verify_management_args(const scheduler_service_verify_management_args&);
  scheduler_service_verify_management_args& operator=(const scheduler_service_verify_management_args&);
  scheduler_service_verify_management_args() : management(), port(0), is_ssl(0) {
  }

  virtual ~scheduler_service_verify_management_args() throw();
  std::string management;
  int32_t port;
  bool is_ssl;

  _scheduler_service_verify_management_args__isset __isset;

  void __set_management(const std::string& val);

  void __set_port(const int32_t val);

  void __set_is_ssl(const bool val);

  bool operator == (const scheduler_service_verify_management_args & rhs) const
  {
    if (!(management == rhs.management))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(is_ssl == rhs.is_ssl))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_verify_management_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_verify_management_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class scheduler_service_verify_management_pargs {
 public:


  virtual ~scheduler_service_verify_management_pargs() throw();
  const std::string* management;
  const int32_t* port;
  const bool* is_ssl;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_verify_management_result__isset {
  _scheduler_service_verify_management_result__isset() : success(false) {}
  bool success :1;
} _scheduler_service_verify_management_result__isset;

class scheduler_service_verify_management_result {
 public:

  scheduler_service_verify_management_result(const scheduler_service_verify_management_result&);
  scheduler_service_verify_management_result& operator=(const scheduler_service_verify_management_result&);
  scheduler_service_verify_management_result() : success(0) {
  }

  virtual ~scheduler_service_verify_management_result() throw();
  bool success;

  _scheduler_service_verify_management_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const scheduler_service_verify_management_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_verify_management_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_verify_management_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_verify_management_presult__isset {
  _scheduler_service_verify_management_presult__isset() : success(false) {}
  bool success :1;
} _scheduler_service_verify_management_presult__isset;

class scheduler_service_verify_management_presult {
 public:


  virtual ~scheduler_service_verify_management_presult() throw();
  bool* success;

  _scheduler_service_verify_management_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_verify_packer_to_carrier_args__isset {
  _scheduler_service_verify_packer_to_carrier_args__isset() : packer(false), carrier(false), port(false), is_ssl(false) {}
  bool packer :1;
  bool carrier :1;
  bool port :1;
  bool is_ssl :1;
} _scheduler_service_verify_packer_to_carrier_args__isset;

class scheduler_service_verify_packer_to_carrier_args {
 public:

  scheduler_service_verify_packer_to_carrier_args(const scheduler_service_verify_packer_to_carrier_args&);
  scheduler_service_verify_packer_to_carrier_args& operator=(const scheduler_service_verify_packer_to_carrier_args&);
  scheduler_service_verify_packer_to_carrier_args() : packer(), carrier(), port(0), is_ssl(0) {
  }

  virtual ~scheduler_service_verify_packer_to_carrier_args() throw();
  std::string packer;
  std::string carrier;
  int32_t port;
  bool is_ssl;

  _scheduler_service_verify_packer_to_carrier_args__isset __isset;

  void __set_packer(const std::string& val);

  void __set_carrier(const std::string& val);

  void __set_port(const int32_t val);

  void __set_is_ssl(const bool val);

  bool operator == (const scheduler_service_verify_packer_to_carrier_args & rhs) const
  {
    if (!(packer == rhs.packer))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(is_ssl == rhs.is_ssl))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_verify_packer_to_carrier_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_verify_packer_to_carrier_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class scheduler_service_verify_packer_to_carrier_pargs {
 public:


  virtual ~scheduler_service_verify_packer_to_carrier_pargs() throw();
  const std::string* packer;
  const std::string* carrier;
  const int32_t* port;
  const bool* is_ssl;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_verify_packer_to_carrier_result__isset {
  _scheduler_service_verify_packer_to_carrier_result__isset() : success(false) {}
  bool success :1;
} _scheduler_service_verify_packer_to_carrier_result__isset;

class scheduler_service_verify_packer_to_carrier_result {
 public:

  scheduler_service_verify_packer_to_carrier_result(const scheduler_service_verify_packer_to_carrier_result&);
  scheduler_service_verify_packer_to_carrier_result& operator=(const scheduler_service_verify_packer_to_carrier_result&);
  scheduler_service_verify_packer_to_carrier_result() : success(0) {
  }

  virtual ~scheduler_service_verify_packer_to_carrier_result() throw();
  bool success;

  _scheduler_service_verify_packer_to_carrier_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const scheduler_service_verify_packer_to_carrier_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_verify_packer_to_carrier_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_verify_packer_to_carrier_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_verify_packer_to_carrier_presult__isset {
  _scheduler_service_verify_packer_to_carrier_presult__isset() : success(false) {}
  bool success :1;
} _scheduler_service_verify_packer_to_carrier_presult__isset;

class scheduler_service_verify_packer_to_carrier_presult {
 public:


  virtual ~scheduler_service_verify_packer_to_carrier_presult() throw();
  bool* success;

  _scheduler_service_verify_packer_to_carrier_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_take_packer_xray_args__isset {
  _scheduler_service_take_packer_xray_args__isset() : session_id(false), host(false) {}
  bool session_id :1;
  bool host :1;
} _scheduler_service_take_packer_xray_args__isset;

class scheduler_service_take_packer_xray_args {
 public:

  scheduler_service_take_packer_xray_args(const scheduler_service_take_packer_xray_args&);
  scheduler_service_take_packer_xray_args& operator=(const scheduler_service_take_packer_xray_args&);
  scheduler_service_take_packer_xray_args() : session_id(), host() {
  }

  virtual ~scheduler_service_take_packer_xray_args() throw();
  std::string session_id;
  std::string host;

  _scheduler_service_take_packer_xray_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_host(const std::string& val);

  bool operator == (const scheduler_service_take_packer_xray_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(host == rhs.host))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_take_packer_xray_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_take_packer_xray_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class scheduler_service_take_packer_xray_pargs {
 public:


  virtual ~scheduler_service_take_packer_xray_pargs() throw();
  const std::string* session_id;
  const std::string* host;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_take_packer_xray_result__isset {
  _scheduler_service_take_packer_xray_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_take_packer_xray_result__isset;

class scheduler_service_take_packer_xray_result {
 public:

  scheduler_service_take_packer_xray_result(const scheduler_service_take_packer_xray_result&);
  scheduler_service_take_packer_xray_result& operator=(const scheduler_service_take_packer_xray_result&);
  scheduler_service_take_packer_xray_result() : success() {
  }

  virtual ~scheduler_service_take_packer_xray_result() throw();
  std::string success;
  invalid_operation ouch;

  _scheduler_service_take_packer_xray_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const scheduler_service_take_packer_xray_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_take_packer_xray_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_take_packer_xray_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_take_packer_xray_presult__isset {
  _scheduler_service_take_packer_xray_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_take_packer_xray_presult__isset;

class scheduler_service_take_packer_xray_presult {
 public:


  virtual ~scheduler_service_take_packer_xray_presult() throw();
  std::string* success;
  invalid_operation ouch;

  _scheduler_service_take_packer_xray_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_get_packer_service_info_args__isset {
  _scheduler_service_get_packer_service_info_args__isset() : session_id(false), host(false) {}
  bool session_id :1;
  bool host :1;
} _scheduler_service_get_packer_service_info_args__isset;

class scheduler_service_get_packer_service_info_args {
 public:

  scheduler_service_get_packer_service_info_args(const scheduler_service_get_packer_service_info_args&);
  scheduler_service_get_packer_service_info_args& operator=(const scheduler_service_get_packer_service_info_args&);
  scheduler_service_get_packer_service_info_args() : session_id(), host() {
  }

  virtual ~scheduler_service_get_packer_service_info_args() throw();
  std::string session_id;
  std::string host;

  _scheduler_service_get_packer_service_info_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_host(const std::string& val);

  bool operator == (const scheduler_service_get_packer_service_info_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(host == rhs.host))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_get_packer_service_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_get_packer_service_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class scheduler_service_get_packer_service_info_pargs {
 public:


  virtual ~scheduler_service_get_packer_service_info_pargs() throw();
  const std::string* session_id;
  const std::string* host;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_get_packer_service_info_result__isset {
  _scheduler_service_get_packer_service_info_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_get_packer_service_info_result__isset;

class scheduler_service_get_packer_service_info_result {
 public:

  scheduler_service_get_packer_service_info_result(const scheduler_service_get_packer_service_info_result&);
  scheduler_service_get_packer_service_info_result& operator=(const scheduler_service_get_packer_service_info_result&);
  scheduler_service_get_packer_service_info_result() {
  }

  virtual ~scheduler_service_get_packer_service_info_result() throw();
  service_info success;
  invalid_operation ouch;

  _scheduler_service_get_packer_service_info_result__isset __isset;

  void __set_success(const service_info& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const scheduler_service_get_packer_service_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const scheduler_service_get_packer_service_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const scheduler_service_get_packer_service_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _scheduler_service_get_packer_service_info_presult__isset {
  _scheduler_service_get_packer_service_info_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _scheduler_service_get_packer_service_info_presult__isset;

class scheduler_service_get_packer_service_info_presult {
 public:


  virtual ~scheduler_service_get_packer_service_info_presult() throw();
  service_info* success;
  invalid_operation ouch;

  _scheduler_service_get_packer_service_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class scheduler_serviceClient : virtual public scheduler_serviceIf, public common_serviceClient {
 public:
  scheduler_serviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    common_serviceClient(prot, prot) {}
  scheduler_serviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    common_serviceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_physical_machine_detail(physical_machine_info& _return, const std::string& session_id, const std::string& host, const machine_detail_filter::type filter);
  void send_get_physical_machine_detail(const std::string& session_id, const std::string& host, const machine_detail_filter::type filter);
  void recv_get_physical_machine_detail(physical_machine_info& _return);
  void get_physical_machine_detail2(physical_machine_info& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const machine_detail_filter::type filter);
  void send_get_physical_machine_detail2(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const machine_detail_filter::type filter);
  void recv_get_physical_machine_detail2(physical_machine_info& _return);
  void get_virtual_host_info(virtual_host& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void send_get_virtual_host_info(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void recv_get_virtual_host_info(virtual_host& _return);
  void get_virtual_machine_detail(virtual_machine& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void send_get_virtual_machine_detail(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void recv_get_virtual_machine_detail(virtual_machine& _return);
  void create_job_ex(replica_job_detail& _return, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job);
  void send_create_job_ex(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job);
  void recv_create_job_ex(replica_job_detail& _return);
  void create_job(replica_job_detail& _return, const std::string& session_id, const create_job_detail& create_job);
  void send_create_job(const std::string& session_id, const create_job_detail& create_job);
  void recv_create_job(replica_job_detail& _return);
  void get_job(replica_job_detail& _return, const std::string& session_id, const std::string& job_id);
  void send_get_job(const std::string& session_id, const std::string& job_id);
  void recv_get_job(replica_job_detail& _return);
  bool interrupt_job(const std::string& session_id, const std::string& job_id);
  void send_interrupt_job(const std::string& session_id, const std::string& job_id);
  bool recv_interrupt_job();
  bool resume_job(const std::string& session_id, const std::string& job_id);
  void send_resume_job(const std::string& session_id, const std::string& job_id);
  bool recv_resume_job();
  bool remove_job(const std::string& session_id, const std::string& job_id);
  void send_remove_job(const std::string& session_id, const std::string& job_id);
  bool recv_remove_job();
  void list_jobs(std::vector<replica_job_detail> & _return, const std::string& session_id);
  void send_list_jobs(const std::string& session_id);
  void recv_list_jobs(std::vector<replica_job_detail> & _return);
  bool update_job(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job);
  void send_update_job(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job);
  bool recv_update_job();
  void terminate(const std::string& session_id);
  void send_terminate(const std::string& session_id);
  void recv_terminate();
  bool running_job(const std::string& session_id, const std::string& job_id);
  void send_running_job(const std::string& session_id, const std::string& job_id);
  bool recv_running_job();
  bool verify_management(const std::string& management, const int32_t port, const bool is_ssl);
  void send_verify_management(const std::string& management, const int32_t port, const bool is_ssl);
  bool recv_verify_management();
  bool verify_packer_to_carrier(const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl);
  void send_verify_packer_to_carrier(const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl);
  bool recv_verify_packer_to_carrier();
  void take_packer_xray(std::string& _return, const std::string& session_id, const std::string& host);
  void send_take_packer_xray(const std::string& session_id, const std::string& host);
  void recv_take_packer_xray(std::string& _return);
  void get_packer_service_info(service_info& _return, const std::string& session_id, const std::string& host);
  void send_get_packer_service_info(const std::string& session_id, const std::string& host);
  void recv_get_packer_service_info(service_info& _return);
};

class scheduler_serviceProcessor : public common_serviceProcessor {
 protected:
  boost::shared_ptr<scheduler_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (scheduler_serviceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_physical_machine_detail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_physical_machine_detail2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_virtual_host_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_virtual_machine_detail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_job_ex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_interrupt_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resume_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_list_jobs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_terminate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_running_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verify_management(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verify_packer_to_carrier(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_take_packer_xray(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_packer_service_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  scheduler_serviceProcessor(boost::shared_ptr<scheduler_serviceIf> iface) :
    common_serviceProcessor(iface),
    iface_(iface) {
    processMap_["get_physical_machine_detail"] = &scheduler_serviceProcessor::process_get_physical_machine_detail;
    processMap_["get_physical_machine_detail2"] = &scheduler_serviceProcessor::process_get_physical_machine_detail2;
    processMap_["get_virtual_host_info"] = &scheduler_serviceProcessor::process_get_virtual_host_info;
    processMap_["get_virtual_machine_detail"] = &scheduler_serviceProcessor::process_get_virtual_machine_detail;
    processMap_["create_job_ex"] = &scheduler_serviceProcessor::process_create_job_ex;
    processMap_["create_job"] = &scheduler_serviceProcessor::process_create_job;
    processMap_["get_job"] = &scheduler_serviceProcessor::process_get_job;
    processMap_["interrupt_job"] = &scheduler_serviceProcessor::process_interrupt_job;
    processMap_["resume_job"] = &scheduler_serviceProcessor::process_resume_job;
    processMap_["remove_job"] = &scheduler_serviceProcessor::process_remove_job;
    processMap_["list_jobs"] = &scheduler_serviceProcessor::process_list_jobs;
    processMap_["update_job"] = &scheduler_serviceProcessor::process_update_job;
    processMap_["terminate"] = &scheduler_serviceProcessor::process_terminate;
    processMap_["running_job"] = &scheduler_serviceProcessor::process_running_job;
    processMap_["verify_management"] = &scheduler_serviceProcessor::process_verify_management;
    processMap_["verify_packer_to_carrier"] = &scheduler_serviceProcessor::process_verify_packer_to_carrier;
    processMap_["take_packer_xray"] = &scheduler_serviceProcessor::process_take_packer_xray;
    processMap_["get_packer_service_info"] = &scheduler_serviceProcessor::process_get_packer_service_info;
  }

  virtual ~scheduler_serviceProcessor() {}
};

class scheduler_serviceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  scheduler_serviceProcessorFactory(const ::boost::shared_ptr< scheduler_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< scheduler_serviceIfFactory > handlerFactory_;
};

class scheduler_serviceMultiface : virtual public scheduler_serviceIf, public common_serviceMultiface {
 public:
  scheduler_serviceMultiface(std::vector<boost::shared_ptr<scheduler_serviceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<scheduler_serviceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      common_serviceMultiface::add(*iter);
    }
  }
  virtual ~scheduler_serviceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<scheduler_serviceIf> > ifaces_;
  scheduler_serviceMultiface() {}
  void add(boost::shared_ptr<scheduler_serviceIf> iface) {
    common_serviceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void get_physical_machine_detail(physical_machine_info& _return, const std::string& session_id, const std::string& host, const machine_detail_filter::type filter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_physical_machine_detail(_return, session_id, host, filter);
    }
    ifaces_[i]->get_physical_machine_detail(_return, session_id, host, filter);
    return;
  }

  void get_physical_machine_detail2(physical_machine_info& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const machine_detail_filter::type filter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_physical_machine_detail2(_return, session_id, host, username, password, filter);
    }
    ifaces_[i]->get_physical_machine_detail2(_return, session_id, host, username, password, filter);
    return;
  }

  void get_virtual_host_info(virtual_host& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_virtual_host_info(_return, session_id, host, username, password);
    }
    ifaces_[i]->get_virtual_host_info(_return, session_id, host, username, password);
    return;
  }

  void get_virtual_machine_detail(virtual_machine& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_virtual_machine_detail(_return, session_id, host, username, password, machine_id);
    }
    ifaces_[i]->get_virtual_machine_detail(_return, session_id, host, username, password, machine_id);
    return;
  }

  void create_job_ex(replica_job_detail& _return, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_job_ex(_return, session_id, job_id, create_job);
    }
    ifaces_[i]->create_job_ex(_return, session_id, job_id, create_job);
    return;
  }

  void create_job(replica_job_detail& _return, const std::string& session_id, const create_job_detail& create_job) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_job(_return, session_id, create_job);
    }
    ifaces_[i]->create_job(_return, session_id, create_job);
    return;
  }

  void get_job(replica_job_detail& _return, const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_job(_return, session_id, job_id);
    }
    ifaces_[i]->get_job(_return, session_id, job_id);
    return;
  }

  bool interrupt_job(const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->interrupt_job(session_id, job_id);
    }
    return ifaces_[i]->interrupt_job(session_id, job_id);
  }

  bool resume_job(const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resume_job(session_id, job_id);
    }
    return ifaces_[i]->resume_job(session_id, job_id);
  }

  bool remove_job(const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_job(session_id, job_id);
    }
    return ifaces_[i]->remove_job(session_id, job_id);
  }

  void list_jobs(std::vector<replica_job_detail> & _return, const std::string& session_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->list_jobs(_return, session_id);
    }
    ifaces_[i]->list_jobs(_return, session_id);
    return;
  }

  bool update_job(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_job(session_id, job_id, create_job);
    }
    return ifaces_[i]->update_job(session_id, job_id, create_job);
  }

  void terminate(const std::string& session_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->terminate(session_id);
    }
    ifaces_[i]->terminate(session_id);
  }

  bool running_job(const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->running_job(session_id, job_id);
    }
    return ifaces_[i]->running_job(session_id, job_id);
  }

  bool verify_management(const std::string& management, const int32_t port, const bool is_ssl) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verify_management(management, port, is_ssl);
    }
    return ifaces_[i]->verify_management(management, port, is_ssl);
  }

  bool verify_packer_to_carrier(const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verify_packer_to_carrier(packer, carrier, port, is_ssl);
    }
    return ifaces_[i]->verify_packer_to_carrier(packer, carrier, port, is_ssl);
  }

  void take_packer_xray(std::string& _return, const std::string& session_id, const std::string& host) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->take_packer_xray(_return, session_id, host);
    }
    ifaces_[i]->take_packer_xray(_return, session_id, host);
    return;
  }

  void get_packer_service_info(service_info& _return, const std::string& session_id, const std::string& host) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_packer_service_info(_return, session_id, host);
    }
    ifaces_[i]->get_packer_service_info(_return, session_id, host);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class scheduler_serviceConcurrentClient : virtual public scheduler_serviceIf, public common_serviceConcurrentClient {
 public:
  scheduler_serviceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    common_serviceConcurrentClient(prot, prot) {}
  scheduler_serviceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    common_serviceConcurrentClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_physical_machine_detail(physical_machine_info& _return, const std::string& session_id, const std::string& host, const machine_detail_filter::type filter);
  int32_t send_get_physical_machine_detail(const std::string& session_id, const std::string& host, const machine_detail_filter::type filter);
  void recv_get_physical_machine_detail(physical_machine_info& _return, const int32_t seqid);
  void get_physical_machine_detail2(physical_machine_info& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const machine_detail_filter::type filter);
  int32_t send_get_physical_machine_detail2(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const machine_detail_filter::type filter);
  void recv_get_physical_machine_detail2(physical_machine_info& _return, const int32_t seqid);
  void get_virtual_host_info(virtual_host& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  int32_t send_get_virtual_host_info(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void recv_get_virtual_host_info(virtual_host& _return, const int32_t seqid);
  void get_virtual_machine_detail(virtual_machine& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  int32_t send_get_virtual_machine_detail(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void recv_get_virtual_machine_detail(virtual_machine& _return, const int32_t seqid);
  void create_job_ex(replica_job_detail& _return, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job);
  int32_t send_create_job_ex(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job);
  void recv_create_job_ex(replica_job_detail& _return, const int32_t seqid);
  void create_job(replica_job_detail& _return, const std::string& session_id, const create_job_detail& create_job);
  int32_t send_create_job(const std::string& session_id, const create_job_detail& create_job);
  void recv_create_job(replica_job_detail& _return, const int32_t seqid);
  void get_job(replica_job_detail& _return, const std::string& session_id, const std::string& job_id);
  int32_t send_get_job(const std::string& session_id, const std::string& job_id);
  void recv_get_job(replica_job_detail& _return, const int32_t seqid);
  bool interrupt_job(const std::string& session_id, const std::string& job_id);
  int32_t send_interrupt_job(const std::string& session_id, const std::string& job_id);
  bool recv_interrupt_job(const int32_t seqid);
  bool resume_job(const std::string& session_id, const std::string& job_id);
  int32_t send_resume_job(const std::string& session_id, const std::string& job_id);
  bool recv_resume_job(const int32_t seqid);
  bool remove_job(const std::string& session_id, const std::string& job_id);
  int32_t send_remove_job(const std::string& session_id, const std::string& job_id);
  bool recv_remove_job(const int32_t seqid);
  void list_jobs(std::vector<replica_job_detail> & _return, const std::string& session_id);
  int32_t send_list_jobs(const std::string& session_id);
  void recv_list_jobs(std::vector<replica_job_detail> & _return, const int32_t seqid);
  bool update_job(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job);
  int32_t send_update_job(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job);
  bool recv_update_job(const int32_t seqid);
  void terminate(const std::string& session_id);
  int32_t send_terminate(const std::string& session_id);
  void recv_terminate(const int32_t seqid);
  bool running_job(const std::string& session_id, const std::string& job_id);
  int32_t send_running_job(const std::string& session_id, const std::string& job_id);
  bool recv_running_job(const int32_t seqid);
  bool verify_management(const std::string& management, const int32_t port, const bool is_ssl);
  int32_t send_verify_management(const std::string& management, const int32_t port, const bool is_ssl);
  bool recv_verify_management(const int32_t seqid);
  bool verify_packer_to_carrier(const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl);
  int32_t send_verify_packer_to_carrier(const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl);
  bool recv_verify_packer_to_carrier(const int32_t seqid);
  void take_packer_xray(std::string& _return, const std::string& session_id, const std::string& host);
  int32_t send_take_packer_xray(const std::string& session_id, const std::string& host);
  void recv_take_packer_xray(std::string& _return, const int32_t seqid);
  void get_packer_service_info(service_info& _return, const std::string& session_id, const std::string& host);
  int32_t send_get_packer_service_info(const std::string& session_id, const std::string& host);
  void recv_get_packer_service_info(service_info& _return, const int32_t seqid);
};

class scheduler_serviceCobClient;

class scheduler_serviceCobClIf : virtual public common_serviceCobClIf {
 public:
  virtual ~scheduler_serviceCobClIf() {}
  virtual void get_physical_machine_detail(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& host, const machine_detail_filter::type filter) = 0;
  virtual void get_physical_machine_detail2(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const machine_detail_filter::type filter) = 0;
  virtual void get_virtual_host_info(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) = 0;
  virtual void get_virtual_machine_detail(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) = 0;
  virtual void create_job_ex(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job) = 0;
  virtual void create_job(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const create_job_detail& create_job) = 0;
  virtual void get_job(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void interrupt_job(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void resume_job(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void remove_job(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void list_jobs(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id) = 0;
  virtual void update_job(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job) = 0;
  virtual void terminate(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id) = 0;
  virtual void running_job(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void verify_management(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& management, const int32_t port, const bool is_ssl) = 0;
  virtual void verify_packer_to_carrier(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl) = 0;
  virtual void take_packer_xray(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& host) = 0;
  virtual void get_packer_service_info(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& host) = 0;
};

class scheduler_serviceCobSvIf : virtual public common_serviceCobSvIf {
 public:
  virtual ~scheduler_serviceCobSvIf() {}
  virtual void get_physical_machine_detail(tcxx::function<void(physical_machine_info const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& host, const machine_detail_filter::type filter) = 0;
  virtual void get_physical_machine_detail2(tcxx::function<void(physical_machine_info const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const machine_detail_filter::type filter) = 0;
  virtual void get_virtual_host_info(tcxx::function<void(virtual_host const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) = 0;
  virtual void get_virtual_machine_detail(tcxx::function<void(virtual_machine const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) = 0;
  virtual void create_job_ex(tcxx::function<void(replica_job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job) = 0;
  virtual void create_job(tcxx::function<void(replica_job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const create_job_detail& create_job) = 0;
  virtual void get_job(tcxx::function<void(replica_job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void interrupt_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void resume_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void remove_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void list_jobs(tcxx::function<void(std::vector<replica_job_detail>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id) = 0;
  virtual void update_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job) = 0;
  virtual void terminate(tcxx::function<void()> cob, const std::string& session_id) = 0;
  virtual void running_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void verify_management(tcxx::function<void(bool const& _return)> cob, const std::string& management, const int32_t port, const bool is_ssl) = 0;
  virtual void verify_packer_to_carrier(tcxx::function<void(bool const& _return)> cob, const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl) = 0;
  virtual void take_packer_xray(tcxx::function<void(std::string const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& host) = 0;
  virtual void get_packer_service_info(tcxx::function<void(service_info const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& host) = 0;
};

class scheduler_serviceCobSvIfFactory : virtual public common_serviceCobSvIfFactory {
 public:
  typedef scheduler_serviceCobSvIf Handler;

  virtual ~scheduler_serviceCobSvIfFactory() {}

  virtual scheduler_serviceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(common_serviceCobSvIf* /* handler */) = 0;
};

class scheduler_serviceCobSvIfSingletonFactory : virtual public scheduler_serviceCobSvIfFactory {
 public:
  scheduler_serviceCobSvIfSingletonFactory(const boost::shared_ptr<scheduler_serviceCobSvIf>& iface) : iface_(iface) {}
  virtual ~scheduler_serviceCobSvIfSingletonFactory() {}

  virtual scheduler_serviceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(common_serviceCobSvIf* /* handler */) {}

 protected:
  boost::shared_ptr<scheduler_serviceCobSvIf> iface_;
};

class scheduler_serviceCobSvNull : virtual public scheduler_serviceCobSvIf , virtual public common_serviceCobSvNull {
 public:
  virtual ~scheduler_serviceCobSvNull() {}
  void get_physical_machine_detail(tcxx::function<void(physical_machine_info const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* host */, const machine_detail_filter::type /* filter */) {
    physical_machine_info _return;
    return cob(_return);
  }
  void get_physical_machine_detail2(tcxx::function<void(physical_machine_info const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */, const machine_detail_filter::type /* filter */) {
    physical_machine_info _return;
    return cob(_return);
  }
  void get_virtual_host_info(tcxx::function<void(virtual_host const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */) {
    virtual_host _return;
    return cob(_return);
  }
  void get_virtual_machine_detail(tcxx::function<void(virtual_machine const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */, const std::string& /* machine_id */) {
    virtual_machine _return;
    return cob(_return);
  }
  void create_job_ex(tcxx::function<void(replica_job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */, const create_job_detail& /* create_job */) {
    replica_job_detail _return;
    return cob(_return);
  }
  void create_job(tcxx::function<void(replica_job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const create_job_detail& /* create_job */) {
    replica_job_detail _return;
    return cob(_return);
  }
  void get_job(tcxx::function<void(replica_job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    replica_job_detail _return;
    return cob(_return);
  }
  void interrupt_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
  void resume_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
  void remove_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
  void list_jobs(tcxx::function<void(std::vector<replica_job_detail>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */) {
    std::vector<replica_job_detail>  _return;
    return cob(_return);
  }
  void update_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */, const create_job_detail& /* create_job */) {
    bool _return = false;
    return cob(_return);
  }
  void terminate(tcxx::function<void()> cob, const std::string& /* session_id */) {
    return cob();
  }
  void running_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
  void verify_management(tcxx::function<void(bool const& _return)> cob, const std::string& /* management */, const int32_t /* port */, const bool /* is_ssl */) {
    bool _return = false;
    return cob(_return);
  }
  void verify_packer_to_carrier(tcxx::function<void(bool const& _return)> cob, const std::string& /* packer */, const std::string& /* carrier */, const int32_t /* port */, const bool /* is_ssl */) {
    bool _return = false;
    return cob(_return);
  }
  void take_packer_xray(tcxx::function<void(std::string const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* host */) {
    std::string _return;
    return cob(_return);
  }
  void get_packer_service_info(tcxx::function<void(service_info const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* host */) {
    service_info _return;
    return cob(_return);
  }
};

class scheduler_serviceCobClient : virtual public scheduler_serviceCobClIf, public common_serviceCobClient {
 public:
  scheduler_serviceCobClient(boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    common_serviceCobClient(channel, protocolFactory) {}
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void get_physical_machine_detail(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& host, const machine_detail_filter::type filter);
  void send_get_physical_machine_detail(const std::string& session_id, const std::string& host, const machine_detail_filter::type filter);
  void recv_get_physical_machine_detail(physical_machine_info& _return);
  void get_physical_machine_detail2(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const machine_detail_filter::type filter);
  void send_get_physical_machine_detail2(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const machine_detail_filter::type filter);
  void recv_get_physical_machine_detail2(physical_machine_info& _return);
  void get_virtual_host_info(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void send_get_virtual_host_info(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void recv_get_virtual_host_info(virtual_host& _return);
  void get_virtual_machine_detail(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void send_get_virtual_machine_detail(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void recv_get_virtual_machine_detail(virtual_machine& _return);
  void create_job_ex(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job);
  void send_create_job_ex(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job);
  void recv_create_job_ex(replica_job_detail& _return);
  void create_job(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const create_job_detail& create_job);
  void send_create_job(const std::string& session_id, const create_job_detail& create_job);
  void recv_create_job(replica_job_detail& _return);
  void get_job(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_get_job(const std::string& session_id, const std::string& job_id);
  void recv_get_job(replica_job_detail& _return);
  void interrupt_job(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_interrupt_job(const std::string& session_id, const std::string& job_id);
  bool recv_interrupt_job();
  void resume_job(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_resume_job(const std::string& session_id, const std::string& job_id);
  bool recv_resume_job();
  void remove_job(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_remove_job(const std::string& session_id, const std::string& job_id);
  bool recv_remove_job();
  void list_jobs(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id);
  void send_list_jobs(const std::string& session_id);
  void recv_list_jobs(std::vector<replica_job_detail> & _return);
  void update_job(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job);
  void send_update_job(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job);
  bool recv_update_job();
  void terminate(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id);
  void send_terminate(const std::string& session_id);
  void recv_terminate();
  void running_job(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_running_job(const std::string& session_id, const std::string& job_id);
  bool recv_running_job();
  void verify_management(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& management, const int32_t port, const bool is_ssl);
  void send_verify_management(const std::string& management, const int32_t port, const bool is_ssl);
  bool recv_verify_management();
  void verify_packer_to_carrier(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl);
  void send_verify_packer_to_carrier(const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl);
  bool recv_verify_packer_to_carrier();
  void take_packer_xray(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& host);
  void send_take_packer_xray(const std::string& session_id, const std::string& host);
  void recv_take_packer_xray(std::string& _return);
  void get_packer_service_info(tcxx::function<void(scheduler_serviceCobClient* client)> cob, const std::string& session_id, const std::string& host);
  void send_get_packer_service_info(const std::string& session_id, const std::string& host);
  void recv_get_packer_service_info(service_info& _return);
};

class scheduler_serviceAsyncProcessor : public common_serviceAsyncProcessor {
 protected:
  boost::shared_ptr<scheduler_serviceCobSvIf> iface_;
  virtual void dispatchCall(tcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (scheduler_serviceAsyncProcessor::*ProcessFunction)(tcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_physical_machine_detail(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_physical_machine_detail(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const physical_machine_info& _return);
  void throw_get_physical_machine_detail(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_physical_machine_detail2(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_physical_machine_detail2(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const physical_machine_info& _return);
  void throw_get_physical_machine_detail2(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_virtual_host_info(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_virtual_host_info(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const virtual_host& _return);
  void throw_get_virtual_host_info(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_virtual_machine_detail(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_virtual_machine_detail(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const virtual_machine& _return);
  void throw_get_virtual_machine_detail(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_create_job_ex(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_create_job_ex(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const replica_job_detail& _return);
  void throw_create_job_ex(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_create_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_create_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const replica_job_detail& _return);
  void throw_create_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const replica_job_detail& _return);
  void throw_get_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_interrupt_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_interrupt_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_interrupt_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_resume_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_resume_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_resume_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_remove_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_remove_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_remove_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_list_jobs(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_list_jobs(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector<replica_job_detail> & _return);
  void throw_list_jobs(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_update_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_update_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_update_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_terminate(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_terminate(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx);
  void throw_terminate(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_running_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_running_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_running_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_verify_management(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_verify_management(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_verify_management(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_verify_packer_to_carrier(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_verify_packer_to_carrier(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_verify_packer_to_carrier(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_take_packer_xray(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_take_packer_xray(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::string& _return);
  void throw_take_packer_xray(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_packer_service_info(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_packer_service_info(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const service_info& _return);
  void throw_get_packer_service_info(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  scheduler_serviceAsyncProcessor(boost::shared_ptr<scheduler_serviceCobSvIf> iface) :
    common_serviceAsyncProcessor(iface),
    iface_(iface) {
    processMap_["get_physical_machine_detail"] = &scheduler_serviceAsyncProcessor::process_get_physical_machine_detail;
    processMap_["get_physical_machine_detail2"] = &scheduler_serviceAsyncProcessor::process_get_physical_machine_detail2;
    processMap_["get_virtual_host_info"] = &scheduler_serviceAsyncProcessor::process_get_virtual_host_info;
    processMap_["get_virtual_machine_detail"] = &scheduler_serviceAsyncProcessor::process_get_virtual_machine_detail;
    processMap_["create_job_ex"] = &scheduler_serviceAsyncProcessor::process_create_job_ex;
    processMap_["create_job"] = &scheduler_serviceAsyncProcessor::process_create_job;
    processMap_["get_job"] = &scheduler_serviceAsyncProcessor::process_get_job;
    processMap_["interrupt_job"] = &scheduler_serviceAsyncProcessor::process_interrupt_job;
    processMap_["resume_job"] = &scheduler_serviceAsyncProcessor::process_resume_job;
    processMap_["remove_job"] = &scheduler_serviceAsyncProcessor::process_remove_job;
    processMap_["list_jobs"] = &scheduler_serviceAsyncProcessor::process_list_jobs;
    processMap_["update_job"] = &scheduler_serviceAsyncProcessor::process_update_job;
    processMap_["terminate"] = &scheduler_serviceAsyncProcessor::process_terminate;
    processMap_["running_job"] = &scheduler_serviceAsyncProcessor::process_running_job;
    processMap_["verify_management"] = &scheduler_serviceAsyncProcessor::process_verify_management;
    processMap_["verify_packer_to_carrier"] = &scheduler_serviceAsyncProcessor::process_verify_packer_to_carrier;
    processMap_["take_packer_xray"] = &scheduler_serviceAsyncProcessor::process_take_packer_xray;
    processMap_["get_packer_service_info"] = &scheduler_serviceAsyncProcessor::process_get_packer_service_info;
  }

  virtual ~scheduler_serviceAsyncProcessor() {}
};

class scheduler_serviceAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  scheduler_serviceAsyncProcessorFactory(const ::boost::shared_ptr< scheduler_serviceCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< scheduler_serviceCobSvIfFactory > handlerFactory_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}} // namespace

#endif
