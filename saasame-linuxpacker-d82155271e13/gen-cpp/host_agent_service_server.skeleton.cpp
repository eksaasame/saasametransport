// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "host_agent_service.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::saasame::transport;

class host_agent_serviceHandler : virtual public host_agent_serviceIf {
 public:
  host_agent_serviceHandler() {
    // Your initialization goes here
  }

  void get_client_info(client_info& _return, const std::string& session_id) {
    // Your implementation goes here
    printf("get_client_info\n");
  }

  void take_snapshots(snapshot_result& _return, const std::string& session_id, const std::set<int32_t> & disks) {
    // Your implementation goes here
    printf("take_snapshots\n");
  }

  void get_latest_snapshots_info(snapshot_result& _return, const std::string& session_id) {
    // Your implementation goes here
    printf("get_latest_snapshots_info\n");
  }

  void replicate_disk(replication_result& _return, const std::string& session_id, const int32_t disk, const int64_t start, const int32_t length, const bool be_compressed) {
    // Your implementation goes here
    printf("replicate_disk\n");
  }

  void replicate_snapshot(replication_result& _return, const std::string& session_id, const std::string& snapshot_id, const int64_t start, const int32_t length, const bool be_compressed) {
    // Your implementation goes here
    printf("replicate_snapshot\n");
  }

  void get_snapshot_bit_map(volume_bit_map& _return, const std::string& session_id, const std::string& snapshot_id, const int64_t start, const bool be_compressed) {
    // Your implementation goes here
    printf("get_snapshot_bit_map\n");
  }

  void delete_snapshot(delete_snapshot_result& _return, const std::string& session_id, const std::string& snapshot_id) {
    // Your implementation goes here
    printf("delete_snapshot\n");
  }

  void delete_snapshot_set(delete_snapshot_result& _return, const std::string& session_id, const std::string& snapshot_set_id) {
    // Your implementation goes here
    printf("delete_snapshot_set\n");
  }

  void exit(const std::string& session_id) {
    // Your implementation goes here
    printf("exit\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<host_agent_serviceHandler> handler(new host_agent_serviceHandler());
  shared_ptr<TProcessor> processor(new host_agent_serviceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

