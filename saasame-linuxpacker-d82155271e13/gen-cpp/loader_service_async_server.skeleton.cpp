// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "loader_service.h"
#include <thrift/protocol/TBinaryProtocol.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

using boost::shared_ptr;

using namespace  ::saasame::transport;

class loader_serviceAsyncHandler : public loader_serviceCobSvIf {
 public:
  loader_serviceAsyncHandler() {
    syncHandler_ = std::auto_ptr<loader_serviceHandler>(new loader_serviceHandler);
    // Your initialization goes here
  }
  virtual ~loader_serviceAsyncHandler();

  void create_job_ex(tcxx::function<void(loader_job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job) {
    loader_job_detail _return;
    syncHandler_->create_job_ex(_return, session_id, job_id, create_job);
    return cob(_return);
  }

  void create_job(tcxx::function<void(loader_job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const create_job_detail& create_job) {
    loader_job_detail _return;
    syncHandler_->create_job(_return, session_id, create_job);
    return cob(_return);
  }

  void get_job(tcxx::function<void(loader_job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) {
    loader_job_detail _return;
    syncHandler_->get_job(_return, session_id, job_id);
    return cob(_return);
  }

  void interrupt_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) {
    bool _return = false;
    _return = syncHandler_->interrupt_job(session_id, job_id);
    return cob(_return);
  }

  void resume_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) {
    bool _return = false;
    _return = syncHandler_->resume_job(session_id, job_id);
    return cob(_return);
  }

  void remove_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) {
    bool _return = false;
    _return = syncHandler_->remove_job(session_id, job_id);
    return cob(_return);
  }

  void list_jobs(tcxx::function<void(std::vector<loader_job_detail>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id) {
    std::vector<loader_job_detail>  _return;
    syncHandler_->list_jobs(_return, session_id);
    return cob(_return);
  }

  void update_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id, const create_job_detail& job) {
    bool _return = false;
    _return = syncHandler_->update_job(session_id, job_id, job);
    return cob(_return);
  }

  void terminate(tcxx::function<void()> cob, const std::string& session_id) {
    syncHandler_->terminate(session_id);
    return cob();
  }

  void remove_snapshot_image(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::map<std::string, image_map_info> & images) {
    bool _return = false;
    _return = syncHandler_->remove_snapshot_image(session_id, images);
    return cob(_return);
  }

  void running_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) {
    bool _return = false;
    _return = syncHandler_->running_job(session_id, job_id);
    return cob(_return);
  }

  void verify_management(tcxx::function<void(bool const& _return)> cob, const std::string& management, const int32_t port, const bool is_ssl) {
    bool _return = false;
    _return = syncHandler_->verify_management(management, port, is_ssl);
    return cob(_return);
  }

  void set_customized_id(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& disk_addr, const std::string& disk_id) {
    bool _return = false;
    _return = syncHandler_->set_customized_id(session_id, disk_addr, disk_id);
    return cob(_return);
  }

  void create_vhd_disk_from_snapshot(tcxx::function<void(std::string const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& connection_string, const std::string& container, const std::string& original_disk_name, const std::string& target_disk_name, const std::string& snapshot) {
    std::string _return;
    syncHandler_->create_vhd_disk_from_snapshot(_return, connection_string, container, original_disk_name, target_disk_name, snapshot);
    return cob(_return);
  }

  void is_snapshot_vhd_disk_ready(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& task_id) {
    bool _return = false;
    _return = syncHandler_->is_snapshot_vhd_disk_ready(task_id);
    return cob(_return);
  }

  void delete_vhd_disk(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& connection_string, const std::string& container, const std::string& disk_name) {
    bool _return = false;
    _return = syncHandler_->delete_vhd_disk(connection_string, container, disk_name);
    return cob(_return);
  }

  void delete_vhd_disk_snapshot(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& connection_string, const std::string& container, const std::string& disk_name, const std::string& snapshot) {
    bool _return = false;
    _return = syncHandler_->delete_vhd_disk_snapshot(connection_string, container, disk_name, snapshot);
    return cob(_return);
  }

  void get_vhd_disk_snapshots(tcxx::function<void(std::vector<vhd_snapshot>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& connection_string, const std::string& container, const std::string& disk_name) {
    std::vector<vhd_snapshot>  _return;
    syncHandler_->get_vhd_disk_snapshots(_return, connection_string, container, disk_name);
    return cob(_return);
  }

  void verify_connection_string(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& connection_string) {
    bool _return = false;
    _return = syncHandler_->verify_connection_string(connection_string);
    return cob(_return);
  }

 protected:
  std::auto_ptr<loader_serviceHandler> syncHandler_;
};

