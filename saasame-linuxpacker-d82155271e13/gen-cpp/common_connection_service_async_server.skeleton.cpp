// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "common_connection_service.h"
#include <thrift/protocol/TBinaryProtocol.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

using boost::shared_ptr;

using namespace  ::saasame::transport;

class common_connection_serviceAsyncHandler : public common_connection_serviceCobSvIf {
 public:
  common_connection_serviceAsyncHandler() {
    syncHandler_ = std::auto_ptr<common_connection_serviceHandler>(new common_connection_serviceHandler);
    // Your initialization goes here
  }
  virtual ~common_connection_serviceAsyncHandler();

  void test_connection(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const connection& conn) {
    bool _return = false;
    _return = syncHandler_->test_connection(session_id, conn);
    return cob(_return);
  }

  void add_connection(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const connection& conn) {
    bool _return = false;
    _return = syncHandler_->add_connection(session_id, conn);
    return cob(_return);
  }

  void remove_connection(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& connection_id) {
    bool _return = false;
    _return = syncHandler_->remove_connection(session_id, connection_id);
    return cob(_return);
  }

  void modify_connection(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const connection& conn) {
    bool _return = false;
    _return = syncHandler_->modify_connection(session_id, conn);
    return cob(_return);
  }

  void enumerate_connections(tcxx::function<void(std::vector<connection>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id) {
    std::vector<connection>  _return;
    syncHandler_->enumerate_connections(_return, session_id);
    return cob(_return);
  }

  void get_connection(tcxx::function<void(connection const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& connection_id) {
    connection _return;
    syncHandler_->get_connection(_return, session_id, connection_id);
    return cob(_return);
  }

  void get_available_bytes(tcxx::function<void(int64_t const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& connection_id) {
    int64_t _return = 0;
    _return = syncHandler_->get_available_bytes(session_id, connection_id);
    return cob(_return);
  }

 protected:
  std::auto_ptr<common_connection_serviceHandler> syncHandler_;
};

