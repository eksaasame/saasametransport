/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef virtual_packer_service_H
#define virtual_packer_service_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/cxxfunctional.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "saasame_types.h"
#include "common_service.h"

namespace saasame { namespace transport {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class virtual_packer_serviceIf : virtual public common_serviceIf {
 public:
  virtual ~virtual_packer_serviceIf() {}
  virtual void get_virtual_host_info(virtual_host& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) = 0;
  virtual void get_virtual_machine_detail(virtual_machine& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) = 0;
  virtual void create_job_ex(packer_job_detail& _return, const std::string& session_id, const std::string& job_id, const create_packer_job_detail& create_job) = 0;
  virtual void create_job(packer_job_detail& _return, const std::string& session_id, const create_packer_job_detail& create_job) = 0;
  virtual void get_job(packer_job_detail& _return, const std::string& session_id, const std::string& job_id, const std::string& previous_updated_time) = 0;
  virtual bool interrupt_job(const std::string& session_id, const std::string& job_id) = 0;
  virtual bool resume_job(const std::string& session_id, const std::string& job_id) = 0;
  virtual bool remove_job(const std::string& session_id, const std::string& job_id) = 0;
  virtual void list_jobs(std::vector<packer_job_detail> & _return, const std::string& session_id) = 0;
  virtual void terminate(const std::string& session_id) = 0;
  virtual bool running_job(const std::string& session_id, const std::string& job_id) = 0;
};

class virtual_packer_serviceIfFactory : virtual public common_serviceIfFactory {
 public:
  typedef virtual_packer_serviceIf Handler;

  virtual ~virtual_packer_serviceIfFactory() {}

  virtual virtual_packer_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(common_serviceIf* /* handler */) = 0;
};

class virtual_packer_serviceIfSingletonFactory : virtual public virtual_packer_serviceIfFactory {
 public:
  virtual_packer_serviceIfSingletonFactory(const boost::shared_ptr<virtual_packer_serviceIf>& iface) : iface_(iface) {}
  virtual ~virtual_packer_serviceIfSingletonFactory() {}

  virtual virtual_packer_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(common_serviceIf* /* handler */) {}

 protected:
  boost::shared_ptr<virtual_packer_serviceIf> iface_;
};

class virtual_packer_serviceNull : virtual public virtual_packer_serviceIf , virtual public common_serviceNull {
 public:
  virtual ~virtual_packer_serviceNull() {}
  void get_virtual_host_info(virtual_host& /* _return */, const std::string& /* session_id */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */) {
    return;
  }
  void get_virtual_machine_detail(virtual_machine& /* _return */, const std::string& /* session_id */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */, const std::string& /* machine_id */) {
    return;
  }
  void create_job_ex(packer_job_detail& /* _return */, const std::string& /* session_id */, const std::string& /* job_id */, const create_packer_job_detail& /* create_job */) {
    return;
  }
  void create_job(packer_job_detail& /* _return */, const std::string& /* session_id */, const create_packer_job_detail& /* create_job */) {
    return;
  }
  void get_job(packer_job_detail& /* _return */, const std::string& /* session_id */, const std::string& /* job_id */, const std::string& /* previous_updated_time */) {
    return;
  }
  bool interrupt_job(const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
  bool resume_job(const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
  bool remove_job(const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
  void list_jobs(std::vector<packer_job_detail> & /* _return */, const std::string& /* session_id */) {
    return;
  }
  void terminate(const std::string& /* session_id */) {
    return;
  }
  bool running_job(const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _virtual_packer_service_get_virtual_host_info_args__isset {
  _virtual_packer_service_get_virtual_host_info_args__isset() : session_id(false), host(false), username(false), password(false) {}
  bool session_id :1;
  bool host :1;
  bool username :1;
  bool password :1;
} _virtual_packer_service_get_virtual_host_info_args__isset;

class virtual_packer_service_get_virtual_host_info_args {
 public:

  virtual_packer_service_get_virtual_host_info_args(const virtual_packer_service_get_virtual_host_info_args&);
  virtual_packer_service_get_virtual_host_info_args& operator=(const virtual_packer_service_get_virtual_host_info_args&);
  virtual_packer_service_get_virtual_host_info_args() : session_id(), host(), username(), password() {
  }

  virtual ~virtual_packer_service_get_virtual_host_info_args() throw();
  std::string session_id;
  std::string host;
  std::string username;
  std::string password;

  _virtual_packer_service_get_virtual_host_info_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_host(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const virtual_packer_service_get_virtual_host_info_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const virtual_packer_service_get_virtual_host_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const virtual_packer_service_get_virtual_host_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class virtual_packer_service_get_virtual_host_info_pargs {
 public:


  virtual ~virtual_packer_service_get_virtual_host_info_pargs() throw();
  const std::string* session_id;
  const std::string* host;
  const std::string* username;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_get_virtual_host_info_result__isset {
  _virtual_packer_service_get_virtual_host_info_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _virtual_packer_service_get_virtual_host_info_result__isset;

class virtual_packer_service_get_virtual_host_info_result {
 public:

  virtual_packer_service_get_virtual_host_info_result(const virtual_packer_service_get_virtual_host_info_result&);
  virtual_packer_service_get_virtual_host_info_result& operator=(const virtual_packer_service_get_virtual_host_info_result&);
  virtual_packer_service_get_virtual_host_info_result() {
  }

  virtual ~virtual_packer_service_get_virtual_host_info_result() throw();
  virtual_host success;
  invalid_operation ouch;

  _virtual_packer_service_get_virtual_host_info_result__isset __isset;

  void __set_success(const virtual_host& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const virtual_packer_service_get_virtual_host_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const virtual_packer_service_get_virtual_host_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const virtual_packer_service_get_virtual_host_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_get_virtual_host_info_presult__isset {
  _virtual_packer_service_get_virtual_host_info_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _virtual_packer_service_get_virtual_host_info_presult__isset;

class virtual_packer_service_get_virtual_host_info_presult {
 public:


  virtual ~virtual_packer_service_get_virtual_host_info_presult() throw();
  virtual_host* success;
  invalid_operation ouch;

  _virtual_packer_service_get_virtual_host_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_get_virtual_machine_detail_args__isset {
  _virtual_packer_service_get_virtual_machine_detail_args__isset() : session_id(false), host(false), username(false), password(false), machine_id(false) {}
  bool session_id :1;
  bool host :1;
  bool username :1;
  bool password :1;
  bool machine_id :1;
} _virtual_packer_service_get_virtual_machine_detail_args__isset;

class virtual_packer_service_get_virtual_machine_detail_args {
 public:

  virtual_packer_service_get_virtual_machine_detail_args(const virtual_packer_service_get_virtual_machine_detail_args&);
  virtual_packer_service_get_virtual_machine_detail_args& operator=(const virtual_packer_service_get_virtual_machine_detail_args&);
  virtual_packer_service_get_virtual_machine_detail_args() : session_id(), host(), username(), password(), machine_id() {
  }

  virtual ~virtual_packer_service_get_virtual_machine_detail_args() throw();
  std::string session_id;
  std::string host;
  std::string username;
  std::string password;
  std::string machine_id;

  _virtual_packer_service_get_virtual_machine_detail_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_host(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  void __set_machine_id(const std::string& val);

  bool operator == (const virtual_packer_service_get_virtual_machine_detail_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(machine_id == rhs.machine_id))
      return false;
    return true;
  }
  bool operator != (const virtual_packer_service_get_virtual_machine_detail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const virtual_packer_service_get_virtual_machine_detail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class virtual_packer_service_get_virtual_machine_detail_pargs {
 public:


  virtual ~virtual_packer_service_get_virtual_machine_detail_pargs() throw();
  const std::string* session_id;
  const std::string* host;
  const std::string* username;
  const std::string* password;
  const std::string* machine_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_get_virtual_machine_detail_result__isset {
  _virtual_packer_service_get_virtual_machine_detail_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _virtual_packer_service_get_virtual_machine_detail_result__isset;

class virtual_packer_service_get_virtual_machine_detail_result {
 public:

  virtual_packer_service_get_virtual_machine_detail_result(const virtual_packer_service_get_virtual_machine_detail_result&);
  virtual_packer_service_get_virtual_machine_detail_result& operator=(const virtual_packer_service_get_virtual_machine_detail_result&);
  virtual_packer_service_get_virtual_machine_detail_result() {
  }

  virtual ~virtual_packer_service_get_virtual_machine_detail_result() throw();
  virtual_machine success;
  invalid_operation ouch;

  _virtual_packer_service_get_virtual_machine_detail_result__isset __isset;

  void __set_success(const virtual_machine& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const virtual_packer_service_get_virtual_machine_detail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const virtual_packer_service_get_virtual_machine_detail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const virtual_packer_service_get_virtual_machine_detail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_get_virtual_machine_detail_presult__isset {
  _virtual_packer_service_get_virtual_machine_detail_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _virtual_packer_service_get_virtual_machine_detail_presult__isset;

class virtual_packer_service_get_virtual_machine_detail_presult {
 public:


  virtual ~virtual_packer_service_get_virtual_machine_detail_presult() throw();
  virtual_machine* success;
  invalid_operation ouch;

  _virtual_packer_service_get_virtual_machine_detail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_create_job_ex_args__isset {
  _virtual_packer_service_create_job_ex_args__isset() : session_id(false), job_id(false), create_job(false) {}
  bool session_id :1;
  bool job_id :1;
  bool create_job :1;
} _virtual_packer_service_create_job_ex_args__isset;

class virtual_packer_service_create_job_ex_args {
 public:

  virtual_packer_service_create_job_ex_args(const virtual_packer_service_create_job_ex_args&);
  virtual_packer_service_create_job_ex_args& operator=(const virtual_packer_service_create_job_ex_args&);
  virtual_packer_service_create_job_ex_args() : session_id(), job_id() {
  }

  virtual ~virtual_packer_service_create_job_ex_args() throw();
  std::string session_id;
  std::string job_id;
  create_packer_job_detail create_job;

  _virtual_packer_service_create_job_ex_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  void __set_create_job(const create_packer_job_detail& val);

  bool operator == (const virtual_packer_service_create_job_ex_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    if (!(create_job == rhs.create_job))
      return false;
    return true;
  }
  bool operator != (const virtual_packer_service_create_job_ex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const virtual_packer_service_create_job_ex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class virtual_packer_service_create_job_ex_pargs {
 public:


  virtual ~virtual_packer_service_create_job_ex_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;
  const create_packer_job_detail* create_job;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_create_job_ex_result__isset {
  _virtual_packer_service_create_job_ex_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _virtual_packer_service_create_job_ex_result__isset;

class virtual_packer_service_create_job_ex_result {
 public:

  virtual_packer_service_create_job_ex_result(const virtual_packer_service_create_job_ex_result&);
  virtual_packer_service_create_job_ex_result& operator=(const virtual_packer_service_create_job_ex_result&);
  virtual_packer_service_create_job_ex_result() {
  }

  virtual ~virtual_packer_service_create_job_ex_result() throw();
  packer_job_detail success;
  invalid_operation ouch;

  _virtual_packer_service_create_job_ex_result__isset __isset;

  void __set_success(const packer_job_detail& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const virtual_packer_service_create_job_ex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const virtual_packer_service_create_job_ex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const virtual_packer_service_create_job_ex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_create_job_ex_presult__isset {
  _virtual_packer_service_create_job_ex_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _virtual_packer_service_create_job_ex_presult__isset;

class virtual_packer_service_create_job_ex_presult {
 public:


  virtual ~virtual_packer_service_create_job_ex_presult() throw();
  packer_job_detail* success;
  invalid_operation ouch;

  _virtual_packer_service_create_job_ex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_create_job_args__isset {
  _virtual_packer_service_create_job_args__isset() : session_id(false), create_job(false) {}
  bool session_id :1;
  bool create_job :1;
} _virtual_packer_service_create_job_args__isset;

class virtual_packer_service_create_job_args {
 public:

  virtual_packer_service_create_job_args(const virtual_packer_service_create_job_args&);
  virtual_packer_service_create_job_args& operator=(const virtual_packer_service_create_job_args&);
  virtual_packer_service_create_job_args() : session_id() {
  }

  virtual ~virtual_packer_service_create_job_args() throw();
  std::string session_id;
  create_packer_job_detail create_job;

  _virtual_packer_service_create_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_create_job(const create_packer_job_detail& val);

  bool operator == (const virtual_packer_service_create_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(create_job == rhs.create_job))
      return false;
    return true;
  }
  bool operator != (const virtual_packer_service_create_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const virtual_packer_service_create_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class virtual_packer_service_create_job_pargs {
 public:


  virtual ~virtual_packer_service_create_job_pargs() throw();
  const std::string* session_id;
  const create_packer_job_detail* create_job;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_create_job_result__isset {
  _virtual_packer_service_create_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _virtual_packer_service_create_job_result__isset;

class virtual_packer_service_create_job_result {
 public:

  virtual_packer_service_create_job_result(const virtual_packer_service_create_job_result&);
  virtual_packer_service_create_job_result& operator=(const virtual_packer_service_create_job_result&);
  virtual_packer_service_create_job_result() {
  }

  virtual ~virtual_packer_service_create_job_result() throw();
  packer_job_detail success;
  invalid_operation ouch;

  _virtual_packer_service_create_job_result__isset __isset;

  void __set_success(const packer_job_detail& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const virtual_packer_service_create_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const virtual_packer_service_create_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const virtual_packer_service_create_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_create_job_presult__isset {
  _virtual_packer_service_create_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _virtual_packer_service_create_job_presult__isset;

class virtual_packer_service_create_job_presult {
 public:


  virtual ~virtual_packer_service_create_job_presult() throw();
  packer_job_detail* success;
  invalid_operation ouch;

  _virtual_packer_service_create_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_get_job_args__isset {
  _virtual_packer_service_get_job_args__isset() : session_id(false), job_id(false), previous_updated_time(false) {}
  bool session_id :1;
  bool job_id :1;
  bool previous_updated_time :1;
} _virtual_packer_service_get_job_args__isset;

class virtual_packer_service_get_job_args {
 public:

  virtual_packer_service_get_job_args(const virtual_packer_service_get_job_args&);
  virtual_packer_service_get_job_args& operator=(const virtual_packer_service_get_job_args&);
  virtual_packer_service_get_job_args() : session_id(), job_id(), previous_updated_time() {
  }

  virtual ~virtual_packer_service_get_job_args() throw();
  std::string session_id;
  std::string job_id;
  std::string previous_updated_time;

  _virtual_packer_service_get_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  void __set_previous_updated_time(const std::string& val);

  bool operator == (const virtual_packer_service_get_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    if (!(previous_updated_time == rhs.previous_updated_time))
      return false;
    return true;
  }
  bool operator != (const virtual_packer_service_get_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const virtual_packer_service_get_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class virtual_packer_service_get_job_pargs {
 public:


  virtual ~virtual_packer_service_get_job_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;
  const std::string* previous_updated_time;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_get_job_result__isset {
  _virtual_packer_service_get_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _virtual_packer_service_get_job_result__isset;

class virtual_packer_service_get_job_result {
 public:

  virtual_packer_service_get_job_result(const virtual_packer_service_get_job_result&);
  virtual_packer_service_get_job_result& operator=(const virtual_packer_service_get_job_result&);
  virtual_packer_service_get_job_result() {
  }

  virtual ~virtual_packer_service_get_job_result() throw();
  packer_job_detail success;
  invalid_operation ouch;

  _virtual_packer_service_get_job_result__isset __isset;

  void __set_success(const packer_job_detail& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const virtual_packer_service_get_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const virtual_packer_service_get_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const virtual_packer_service_get_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_get_job_presult__isset {
  _virtual_packer_service_get_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _virtual_packer_service_get_job_presult__isset;

class virtual_packer_service_get_job_presult {
 public:


  virtual ~virtual_packer_service_get_job_presult() throw();
  packer_job_detail* success;
  invalid_operation ouch;

  _virtual_packer_service_get_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_interrupt_job_args__isset {
  _virtual_packer_service_interrupt_job_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _virtual_packer_service_interrupt_job_args__isset;

class virtual_packer_service_interrupt_job_args {
 public:

  virtual_packer_service_interrupt_job_args(const virtual_packer_service_interrupt_job_args&);
  virtual_packer_service_interrupt_job_args& operator=(const virtual_packer_service_interrupt_job_args&);
  virtual_packer_service_interrupt_job_args() : session_id(), job_id() {
  }

  virtual ~virtual_packer_service_interrupt_job_args() throw();
  std::string session_id;
  std::string job_id;

  _virtual_packer_service_interrupt_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const virtual_packer_service_interrupt_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const virtual_packer_service_interrupt_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const virtual_packer_service_interrupt_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class virtual_packer_service_interrupt_job_pargs {
 public:


  virtual ~virtual_packer_service_interrupt_job_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_interrupt_job_result__isset {
  _virtual_packer_service_interrupt_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _virtual_packer_service_interrupt_job_result__isset;

class virtual_packer_service_interrupt_job_result {
 public:

  virtual_packer_service_interrupt_job_result(const virtual_packer_service_interrupt_job_result&);
  virtual_packer_service_interrupt_job_result& operator=(const virtual_packer_service_interrupt_job_result&);
  virtual_packer_service_interrupt_job_result() : success(0) {
  }

  virtual ~virtual_packer_service_interrupt_job_result() throw();
  bool success;
  invalid_operation ouch;

  _virtual_packer_service_interrupt_job_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const virtual_packer_service_interrupt_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const virtual_packer_service_interrupt_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const virtual_packer_service_interrupt_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_interrupt_job_presult__isset {
  _virtual_packer_service_interrupt_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _virtual_packer_service_interrupt_job_presult__isset;

class virtual_packer_service_interrupt_job_presult {
 public:


  virtual ~virtual_packer_service_interrupt_job_presult() throw();
  bool* success;
  invalid_operation ouch;

  _virtual_packer_service_interrupt_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_resume_job_args__isset {
  _virtual_packer_service_resume_job_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _virtual_packer_service_resume_job_args__isset;

class virtual_packer_service_resume_job_args {
 public:

  virtual_packer_service_resume_job_args(const virtual_packer_service_resume_job_args&);
  virtual_packer_service_resume_job_args& operator=(const virtual_packer_service_resume_job_args&);
  virtual_packer_service_resume_job_args() : session_id(), job_id() {
  }

  virtual ~virtual_packer_service_resume_job_args() throw();
  std::string session_id;
  std::string job_id;

  _virtual_packer_service_resume_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const virtual_packer_service_resume_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const virtual_packer_service_resume_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const virtual_packer_service_resume_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class virtual_packer_service_resume_job_pargs {
 public:


  virtual ~virtual_packer_service_resume_job_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_resume_job_result__isset {
  _virtual_packer_service_resume_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _virtual_packer_service_resume_job_result__isset;

class virtual_packer_service_resume_job_result {
 public:

  virtual_packer_service_resume_job_result(const virtual_packer_service_resume_job_result&);
  virtual_packer_service_resume_job_result& operator=(const virtual_packer_service_resume_job_result&);
  virtual_packer_service_resume_job_result() : success(0) {
  }

  virtual ~virtual_packer_service_resume_job_result() throw();
  bool success;
  invalid_operation ouch;

  _virtual_packer_service_resume_job_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const virtual_packer_service_resume_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const virtual_packer_service_resume_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const virtual_packer_service_resume_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_resume_job_presult__isset {
  _virtual_packer_service_resume_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _virtual_packer_service_resume_job_presult__isset;

class virtual_packer_service_resume_job_presult {
 public:


  virtual ~virtual_packer_service_resume_job_presult() throw();
  bool* success;
  invalid_operation ouch;

  _virtual_packer_service_resume_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_remove_job_args__isset {
  _virtual_packer_service_remove_job_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _virtual_packer_service_remove_job_args__isset;

class virtual_packer_service_remove_job_args {
 public:

  virtual_packer_service_remove_job_args(const virtual_packer_service_remove_job_args&);
  virtual_packer_service_remove_job_args& operator=(const virtual_packer_service_remove_job_args&);
  virtual_packer_service_remove_job_args() : session_id(), job_id() {
  }

  virtual ~virtual_packer_service_remove_job_args() throw();
  std::string session_id;
  std::string job_id;

  _virtual_packer_service_remove_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const virtual_packer_service_remove_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const virtual_packer_service_remove_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const virtual_packer_service_remove_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class virtual_packer_service_remove_job_pargs {
 public:


  virtual ~virtual_packer_service_remove_job_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_remove_job_result__isset {
  _virtual_packer_service_remove_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _virtual_packer_service_remove_job_result__isset;

class virtual_packer_service_remove_job_result {
 public:

  virtual_packer_service_remove_job_result(const virtual_packer_service_remove_job_result&);
  virtual_packer_service_remove_job_result& operator=(const virtual_packer_service_remove_job_result&);
  virtual_packer_service_remove_job_result() : success(0) {
  }

  virtual ~virtual_packer_service_remove_job_result() throw();
  bool success;
  invalid_operation ouch;

  _virtual_packer_service_remove_job_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const virtual_packer_service_remove_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const virtual_packer_service_remove_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const virtual_packer_service_remove_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_remove_job_presult__isset {
  _virtual_packer_service_remove_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _virtual_packer_service_remove_job_presult__isset;

class virtual_packer_service_remove_job_presult {
 public:


  virtual ~virtual_packer_service_remove_job_presult() throw();
  bool* success;
  invalid_operation ouch;

  _virtual_packer_service_remove_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_list_jobs_args__isset {
  _virtual_packer_service_list_jobs_args__isset() : session_id(false) {}
  bool session_id :1;
} _virtual_packer_service_list_jobs_args__isset;

class virtual_packer_service_list_jobs_args {
 public:

  virtual_packer_service_list_jobs_args(const virtual_packer_service_list_jobs_args&);
  virtual_packer_service_list_jobs_args& operator=(const virtual_packer_service_list_jobs_args&);
  virtual_packer_service_list_jobs_args() : session_id() {
  }

  virtual ~virtual_packer_service_list_jobs_args() throw();
  std::string session_id;

  _virtual_packer_service_list_jobs_args__isset __isset;

  void __set_session_id(const std::string& val);

  bool operator == (const virtual_packer_service_list_jobs_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const virtual_packer_service_list_jobs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const virtual_packer_service_list_jobs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class virtual_packer_service_list_jobs_pargs {
 public:


  virtual ~virtual_packer_service_list_jobs_pargs() throw();
  const std::string* session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_list_jobs_result__isset {
  _virtual_packer_service_list_jobs_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _virtual_packer_service_list_jobs_result__isset;

class virtual_packer_service_list_jobs_result {
 public:

  virtual_packer_service_list_jobs_result(const virtual_packer_service_list_jobs_result&);
  virtual_packer_service_list_jobs_result& operator=(const virtual_packer_service_list_jobs_result&);
  virtual_packer_service_list_jobs_result() {
  }

  virtual ~virtual_packer_service_list_jobs_result() throw();
  std::vector<packer_job_detail>  success;
  invalid_operation ouch;

  _virtual_packer_service_list_jobs_result__isset __isset;

  void __set_success(const std::vector<packer_job_detail> & val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const virtual_packer_service_list_jobs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const virtual_packer_service_list_jobs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const virtual_packer_service_list_jobs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_list_jobs_presult__isset {
  _virtual_packer_service_list_jobs_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _virtual_packer_service_list_jobs_presult__isset;

class virtual_packer_service_list_jobs_presult {
 public:


  virtual ~virtual_packer_service_list_jobs_presult() throw();
  std::vector<packer_job_detail> * success;
  invalid_operation ouch;

  _virtual_packer_service_list_jobs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_terminate_args__isset {
  _virtual_packer_service_terminate_args__isset() : session_id(false) {}
  bool session_id :1;
} _virtual_packer_service_terminate_args__isset;

class virtual_packer_service_terminate_args {
 public:

  virtual_packer_service_terminate_args(const virtual_packer_service_terminate_args&);
  virtual_packer_service_terminate_args& operator=(const virtual_packer_service_terminate_args&);
  virtual_packer_service_terminate_args() : session_id() {
  }

  virtual ~virtual_packer_service_terminate_args() throw();
  std::string session_id;

  _virtual_packer_service_terminate_args__isset __isset;

  void __set_session_id(const std::string& val);

  bool operator == (const virtual_packer_service_terminate_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const virtual_packer_service_terminate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const virtual_packer_service_terminate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class virtual_packer_service_terminate_pargs {
 public:


  virtual ~virtual_packer_service_terminate_pargs() throw();
  const std::string* session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class virtual_packer_service_terminate_result {
 public:

  virtual_packer_service_terminate_result(const virtual_packer_service_terminate_result&);
  virtual_packer_service_terminate_result& operator=(const virtual_packer_service_terminate_result&);
  virtual_packer_service_terminate_result() {
  }

  virtual ~virtual_packer_service_terminate_result() throw();

  bool operator == (const virtual_packer_service_terminate_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const virtual_packer_service_terminate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const virtual_packer_service_terminate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class virtual_packer_service_terminate_presult {
 public:


  virtual ~virtual_packer_service_terminate_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_running_job_args__isset {
  _virtual_packer_service_running_job_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _virtual_packer_service_running_job_args__isset;

class virtual_packer_service_running_job_args {
 public:

  virtual_packer_service_running_job_args(const virtual_packer_service_running_job_args&);
  virtual_packer_service_running_job_args& operator=(const virtual_packer_service_running_job_args&);
  virtual_packer_service_running_job_args() : session_id(), job_id() {
  }

  virtual ~virtual_packer_service_running_job_args() throw();
  std::string session_id;
  std::string job_id;

  _virtual_packer_service_running_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const virtual_packer_service_running_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const virtual_packer_service_running_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const virtual_packer_service_running_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class virtual_packer_service_running_job_pargs {
 public:


  virtual ~virtual_packer_service_running_job_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_running_job_result__isset {
  _virtual_packer_service_running_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _virtual_packer_service_running_job_result__isset;

class virtual_packer_service_running_job_result {
 public:

  virtual_packer_service_running_job_result(const virtual_packer_service_running_job_result&);
  virtual_packer_service_running_job_result& operator=(const virtual_packer_service_running_job_result&);
  virtual_packer_service_running_job_result() : success(0) {
  }

  virtual ~virtual_packer_service_running_job_result() throw();
  bool success;
  invalid_operation ouch;

  _virtual_packer_service_running_job_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const virtual_packer_service_running_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const virtual_packer_service_running_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const virtual_packer_service_running_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _virtual_packer_service_running_job_presult__isset {
  _virtual_packer_service_running_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _virtual_packer_service_running_job_presult__isset;

class virtual_packer_service_running_job_presult {
 public:


  virtual ~virtual_packer_service_running_job_presult() throw();
  bool* success;
  invalid_operation ouch;

  _virtual_packer_service_running_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class virtual_packer_serviceClient : virtual public virtual_packer_serviceIf, public common_serviceClient {
 public:
  virtual_packer_serviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    common_serviceClient(prot, prot) {}
  virtual_packer_serviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    common_serviceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_virtual_host_info(virtual_host& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void send_get_virtual_host_info(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void recv_get_virtual_host_info(virtual_host& _return);
  void get_virtual_machine_detail(virtual_machine& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void send_get_virtual_machine_detail(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void recv_get_virtual_machine_detail(virtual_machine& _return);
  void create_job_ex(packer_job_detail& _return, const std::string& session_id, const std::string& job_id, const create_packer_job_detail& create_job);
  void send_create_job_ex(const std::string& session_id, const std::string& job_id, const create_packer_job_detail& create_job);
  void recv_create_job_ex(packer_job_detail& _return);
  void create_job(packer_job_detail& _return, const std::string& session_id, const create_packer_job_detail& create_job);
  void send_create_job(const std::string& session_id, const create_packer_job_detail& create_job);
  void recv_create_job(packer_job_detail& _return);
  void get_job(packer_job_detail& _return, const std::string& session_id, const std::string& job_id, const std::string& previous_updated_time);
  void send_get_job(const std::string& session_id, const std::string& job_id, const std::string& previous_updated_time);
  void recv_get_job(packer_job_detail& _return);
  bool interrupt_job(const std::string& session_id, const std::string& job_id);
  void send_interrupt_job(const std::string& session_id, const std::string& job_id);
  bool recv_interrupt_job();
  bool resume_job(const std::string& session_id, const std::string& job_id);
  void send_resume_job(const std::string& session_id, const std::string& job_id);
  bool recv_resume_job();
  bool remove_job(const std::string& session_id, const std::string& job_id);
  void send_remove_job(const std::string& session_id, const std::string& job_id);
  bool recv_remove_job();
  void list_jobs(std::vector<packer_job_detail> & _return, const std::string& session_id);
  void send_list_jobs(const std::string& session_id);
  void recv_list_jobs(std::vector<packer_job_detail> & _return);
  void terminate(const std::string& session_id);
  void send_terminate(const std::string& session_id);
  void recv_terminate();
  bool running_job(const std::string& session_id, const std::string& job_id);
  void send_running_job(const std::string& session_id, const std::string& job_id);
  bool recv_running_job();
};

class virtual_packer_serviceProcessor : public common_serviceProcessor {
 protected:
  boost::shared_ptr<virtual_packer_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (virtual_packer_serviceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_virtual_host_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_virtual_machine_detail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_job_ex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_interrupt_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resume_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_list_jobs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_terminate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_running_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  virtual_packer_serviceProcessor(boost::shared_ptr<virtual_packer_serviceIf> iface) :
    common_serviceProcessor(iface),
    iface_(iface) {
    processMap_["get_virtual_host_info"] = &virtual_packer_serviceProcessor::process_get_virtual_host_info;
    processMap_["get_virtual_machine_detail"] = &virtual_packer_serviceProcessor::process_get_virtual_machine_detail;
    processMap_["create_job_ex"] = &virtual_packer_serviceProcessor::process_create_job_ex;
    processMap_["create_job"] = &virtual_packer_serviceProcessor::process_create_job;
    processMap_["get_job"] = &virtual_packer_serviceProcessor::process_get_job;
    processMap_["interrupt_job"] = &virtual_packer_serviceProcessor::process_interrupt_job;
    processMap_["resume_job"] = &virtual_packer_serviceProcessor::process_resume_job;
    processMap_["remove_job"] = &virtual_packer_serviceProcessor::process_remove_job;
    processMap_["list_jobs"] = &virtual_packer_serviceProcessor::process_list_jobs;
    processMap_["terminate"] = &virtual_packer_serviceProcessor::process_terminate;
    processMap_["running_job"] = &virtual_packer_serviceProcessor::process_running_job;
  }

  virtual ~virtual_packer_serviceProcessor() {}
};

class virtual_packer_serviceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  virtual_packer_serviceProcessorFactory(const ::boost::shared_ptr< virtual_packer_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< virtual_packer_serviceIfFactory > handlerFactory_;
};

class virtual_packer_serviceMultiface : virtual public virtual_packer_serviceIf, public common_serviceMultiface {
 public:
  virtual_packer_serviceMultiface(std::vector<boost::shared_ptr<virtual_packer_serviceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<virtual_packer_serviceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      common_serviceMultiface::add(*iter);
    }
  }
  virtual ~virtual_packer_serviceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<virtual_packer_serviceIf> > ifaces_;
  virtual_packer_serviceMultiface() {}
  void add(boost::shared_ptr<virtual_packer_serviceIf> iface) {
    common_serviceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void get_virtual_host_info(virtual_host& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_virtual_host_info(_return, session_id, host, username, password);
    }
    ifaces_[i]->get_virtual_host_info(_return, session_id, host, username, password);
    return;
  }

  void get_virtual_machine_detail(virtual_machine& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_virtual_machine_detail(_return, session_id, host, username, password, machine_id);
    }
    ifaces_[i]->get_virtual_machine_detail(_return, session_id, host, username, password, machine_id);
    return;
  }

  void create_job_ex(packer_job_detail& _return, const std::string& session_id, const std::string& job_id, const create_packer_job_detail& create_job) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_job_ex(_return, session_id, job_id, create_job);
    }
    ifaces_[i]->create_job_ex(_return, session_id, job_id, create_job);
    return;
  }

  void create_job(packer_job_detail& _return, const std::string& session_id, const create_packer_job_detail& create_job) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_job(_return, session_id, create_job);
    }
    ifaces_[i]->create_job(_return, session_id, create_job);
    return;
  }

  void get_job(packer_job_detail& _return, const std::string& session_id, const std::string& job_id, const std::string& previous_updated_time) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_job(_return, session_id, job_id, previous_updated_time);
    }
    ifaces_[i]->get_job(_return, session_id, job_id, previous_updated_time);
    return;
  }

  bool interrupt_job(const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->interrupt_job(session_id, job_id);
    }
    return ifaces_[i]->interrupt_job(session_id, job_id);
  }

  bool resume_job(const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resume_job(session_id, job_id);
    }
    return ifaces_[i]->resume_job(session_id, job_id);
  }

  bool remove_job(const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_job(session_id, job_id);
    }
    return ifaces_[i]->remove_job(session_id, job_id);
  }

  void list_jobs(std::vector<packer_job_detail> & _return, const std::string& session_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->list_jobs(_return, session_id);
    }
    ifaces_[i]->list_jobs(_return, session_id);
    return;
  }

  void terminate(const std::string& session_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->terminate(session_id);
    }
    ifaces_[i]->terminate(session_id);
  }

  bool running_job(const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->running_job(session_id, job_id);
    }
    return ifaces_[i]->running_job(session_id, job_id);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class virtual_packer_serviceConcurrentClient : virtual public virtual_packer_serviceIf, public common_serviceConcurrentClient {
 public:
  virtual_packer_serviceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    common_serviceConcurrentClient(prot, prot) {}
  virtual_packer_serviceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    common_serviceConcurrentClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_virtual_host_info(virtual_host& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  int32_t send_get_virtual_host_info(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void recv_get_virtual_host_info(virtual_host& _return, const int32_t seqid);
  void get_virtual_machine_detail(virtual_machine& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  int32_t send_get_virtual_machine_detail(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void recv_get_virtual_machine_detail(virtual_machine& _return, const int32_t seqid);
  void create_job_ex(packer_job_detail& _return, const std::string& session_id, const std::string& job_id, const create_packer_job_detail& create_job);
  int32_t send_create_job_ex(const std::string& session_id, const std::string& job_id, const create_packer_job_detail& create_job);
  void recv_create_job_ex(packer_job_detail& _return, const int32_t seqid);
  void create_job(packer_job_detail& _return, const std::string& session_id, const create_packer_job_detail& create_job);
  int32_t send_create_job(const std::string& session_id, const create_packer_job_detail& create_job);
  void recv_create_job(packer_job_detail& _return, const int32_t seqid);
  void get_job(packer_job_detail& _return, const std::string& session_id, const std::string& job_id, const std::string& previous_updated_time);
  int32_t send_get_job(const std::string& session_id, const std::string& job_id, const std::string& previous_updated_time);
  void recv_get_job(packer_job_detail& _return, const int32_t seqid);
  bool interrupt_job(const std::string& session_id, const std::string& job_id);
  int32_t send_interrupt_job(const std::string& session_id, const std::string& job_id);
  bool recv_interrupt_job(const int32_t seqid);
  bool resume_job(const std::string& session_id, const std::string& job_id);
  int32_t send_resume_job(const std::string& session_id, const std::string& job_id);
  bool recv_resume_job(const int32_t seqid);
  bool remove_job(const std::string& session_id, const std::string& job_id);
  int32_t send_remove_job(const std::string& session_id, const std::string& job_id);
  bool recv_remove_job(const int32_t seqid);
  void list_jobs(std::vector<packer_job_detail> & _return, const std::string& session_id);
  int32_t send_list_jobs(const std::string& session_id);
  void recv_list_jobs(std::vector<packer_job_detail> & _return, const int32_t seqid);
  void terminate(const std::string& session_id);
  int32_t send_terminate(const std::string& session_id);
  void recv_terminate(const int32_t seqid);
  bool running_job(const std::string& session_id, const std::string& job_id);
  int32_t send_running_job(const std::string& session_id, const std::string& job_id);
  bool recv_running_job(const int32_t seqid);
};

class virtual_packer_serviceCobClient;

class virtual_packer_serviceCobClIf : virtual public common_serviceCobClIf {
 public:
  virtual ~virtual_packer_serviceCobClIf() {}
  virtual void get_virtual_host_info(tcxx::function<void(virtual_packer_serviceCobClient* client)> cob, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) = 0;
  virtual void get_virtual_machine_detail(tcxx::function<void(virtual_packer_serviceCobClient* client)> cob, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) = 0;
  virtual void create_job_ex(tcxx::function<void(virtual_packer_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const create_packer_job_detail& create_job) = 0;
  virtual void create_job(tcxx::function<void(virtual_packer_serviceCobClient* client)> cob, const std::string& session_id, const create_packer_job_detail& create_job) = 0;
  virtual void get_job(tcxx::function<void(virtual_packer_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const std::string& previous_updated_time) = 0;
  virtual void interrupt_job(tcxx::function<void(virtual_packer_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void resume_job(tcxx::function<void(virtual_packer_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void remove_job(tcxx::function<void(virtual_packer_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void list_jobs(tcxx::function<void(virtual_packer_serviceCobClient* client)> cob, const std::string& session_id) = 0;
  virtual void terminate(tcxx::function<void(virtual_packer_serviceCobClient* client)> cob, const std::string& session_id) = 0;
  virtual void running_job(tcxx::function<void(virtual_packer_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
};

class virtual_packer_serviceCobSvIf : virtual public common_serviceCobSvIf {
 public:
  virtual ~virtual_packer_serviceCobSvIf() {}
  virtual void get_virtual_host_info(tcxx::function<void(virtual_host const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) = 0;
  virtual void get_virtual_machine_detail(tcxx::function<void(virtual_machine const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) = 0;
  virtual void create_job_ex(tcxx::function<void(packer_job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id, const create_packer_job_detail& create_job) = 0;
  virtual void create_job(tcxx::function<void(packer_job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const create_packer_job_detail& create_job) = 0;
  virtual void get_job(tcxx::function<void(packer_job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id, const std::string& previous_updated_time) = 0;
  virtual void interrupt_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void resume_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void remove_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void list_jobs(tcxx::function<void(std::vector<packer_job_detail>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id) = 0;
  virtual void terminate(tcxx::function<void()> cob, const std::string& session_id) = 0;
  virtual void running_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
};

class virtual_packer_serviceCobSvIfFactory : virtual public common_serviceCobSvIfFactory {
 public:
  typedef virtual_packer_serviceCobSvIf Handler;

  virtual ~virtual_packer_serviceCobSvIfFactory() {}

  virtual virtual_packer_serviceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(common_serviceCobSvIf* /* handler */) = 0;
};

class virtual_packer_serviceCobSvIfSingletonFactory : virtual public virtual_packer_serviceCobSvIfFactory {
 public:
  virtual_packer_serviceCobSvIfSingletonFactory(const boost::shared_ptr<virtual_packer_serviceCobSvIf>& iface) : iface_(iface) {}
  virtual ~virtual_packer_serviceCobSvIfSingletonFactory() {}

  virtual virtual_packer_serviceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(common_serviceCobSvIf* /* handler */) {}

 protected:
  boost::shared_ptr<virtual_packer_serviceCobSvIf> iface_;
};

class virtual_packer_serviceCobSvNull : virtual public virtual_packer_serviceCobSvIf , virtual public common_serviceCobSvNull {
 public:
  virtual ~virtual_packer_serviceCobSvNull() {}
  void get_virtual_host_info(tcxx::function<void(virtual_host const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */) {
    virtual_host _return;
    return cob(_return);
  }
  void get_virtual_machine_detail(tcxx::function<void(virtual_machine const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */, const std::string& /* machine_id */) {
    virtual_machine _return;
    return cob(_return);
  }
  void create_job_ex(tcxx::function<void(packer_job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */, const create_packer_job_detail& /* create_job */) {
    packer_job_detail _return;
    return cob(_return);
  }
  void create_job(tcxx::function<void(packer_job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const create_packer_job_detail& /* create_job */) {
    packer_job_detail _return;
    return cob(_return);
  }
  void get_job(tcxx::function<void(packer_job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */, const std::string& /* previous_updated_time */) {
    packer_job_detail _return;
    return cob(_return);
  }
  void interrupt_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
  void resume_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
  void remove_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
  void list_jobs(tcxx::function<void(std::vector<packer_job_detail>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */) {
    std::vector<packer_job_detail>  _return;
    return cob(_return);
  }
  void terminate(tcxx::function<void()> cob, const std::string& /* session_id */) {
    return cob();
  }
  void running_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
};

class virtual_packer_serviceCobClient : virtual public virtual_packer_serviceCobClIf, public common_serviceCobClient {
 public:
  virtual_packer_serviceCobClient(boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    common_serviceCobClient(channel, protocolFactory) {}
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void get_virtual_host_info(tcxx::function<void(virtual_packer_serviceCobClient* client)> cob, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void send_get_virtual_host_info(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void recv_get_virtual_host_info(virtual_host& _return);
  void get_virtual_machine_detail(tcxx::function<void(virtual_packer_serviceCobClient* client)> cob, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void send_get_virtual_machine_detail(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void recv_get_virtual_machine_detail(virtual_machine& _return);
  void create_job_ex(tcxx::function<void(virtual_packer_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const create_packer_job_detail& create_job);
  void send_create_job_ex(const std::string& session_id, const std::string& job_id, const create_packer_job_detail& create_job);
  void recv_create_job_ex(packer_job_detail& _return);
  void create_job(tcxx::function<void(virtual_packer_serviceCobClient* client)> cob, const std::string& session_id, const create_packer_job_detail& create_job);
  void send_create_job(const std::string& session_id, const create_packer_job_detail& create_job);
  void recv_create_job(packer_job_detail& _return);
  void get_job(tcxx::function<void(virtual_packer_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id, const std::string& previous_updated_time);
  void send_get_job(const std::string& session_id, const std::string& job_id, const std::string& previous_updated_time);
  void recv_get_job(packer_job_detail& _return);
  void interrupt_job(tcxx::function<void(virtual_packer_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_interrupt_job(const std::string& session_id, const std::string& job_id);
  bool recv_interrupt_job();
  void resume_job(tcxx::function<void(virtual_packer_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_resume_job(const std::string& session_id, const std::string& job_id);
  bool recv_resume_job();
  void remove_job(tcxx::function<void(virtual_packer_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_remove_job(const std::string& session_id, const std::string& job_id);
  bool recv_remove_job();
  void list_jobs(tcxx::function<void(virtual_packer_serviceCobClient* client)> cob, const std::string& session_id);
  void send_list_jobs(const std::string& session_id);
  void recv_list_jobs(std::vector<packer_job_detail> & _return);
  void terminate(tcxx::function<void(virtual_packer_serviceCobClient* client)> cob, const std::string& session_id);
  void send_terminate(const std::string& session_id);
  void recv_terminate();
  void running_job(tcxx::function<void(virtual_packer_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_running_job(const std::string& session_id, const std::string& job_id);
  bool recv_running_job();
};

class virtual_packer_serviceAsyncProcessor : public common_serviceAsyncProcessor {
 protected:
  boost::shared_ptr<virtual_packer_serviceCobSvIf> iface_;
  virtual void dispatchCall(tcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (virtual_packer_serviceAsyncProcessor::*ProcessFunction)(tcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_virtual_host_info(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_virtual_host_info(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const virtual_host& _return);
  void throw_get_virtual_host_info(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_virtual_machine_detail(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_virtual_machine_detail(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const virtual_machine& _return);
  void throw_get_virtual_machine_detail(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_create_job_ex(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_create_job_ex(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const packer_job_detail& _return);
  void throw_create_job_ex(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_create_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_create_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const packer_job_detail& _return);
  void throw_create_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const packer_job_detail& _return);
  void throw_get_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_interrupt_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_interrupt_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_interrupt_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_resume_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_resume_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_resume_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_remove_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_remove_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_remove_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_list_jobs(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_list_jobs(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector<packer_job_detail> & _return);
  void throw_list_jobs(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_terminate(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_terminate(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx);
  void throw_terminate(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_running_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_running_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_running_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  virtual_packer_serviceAsyncProcessor(boost::shared_ptr<virtual_packer_serviceCobSvIf> iface) :
    common_serviceAsyncProcessor(iface),
    iface_(iface) {
    processMap_["get_virtual_host_info"] = &virtual_packer_serviceAsyncProcessor::process_get_virtual_host_info;
    processMap_["get_virtual_machine_detail"] = &virtual_packer_serviceAsyncProcessor::process_get_virtual_machine_detail;
    processMap_["create_job_ex"] = &virtual_packer_serviceAsyncProcessor::process_create_job_ex;
    processMap_["create_job"] = &virtual_packer_serviceAsyncProcessor::process_create_job;
    processMap_["get_job"] = &virtual_packer_serviceAsyncProcessor::process_get_job;
    processMap_["interrupt_job"] = &virtual_packer_serviceAsyncProcessor::process_interrupt_job;
    processMap_["resume_job"] = &virtual_packer_serviceAsyncProcessor::process_resume_job;
    processMap_["remove_job"] = &virtual_packer_serviceAsyncProcessor::process_remove_job;
    processMap_["list_jobs"] = &virtual_packer_serviceAsyncProcessor::process_list_jobs;
    processMap_["terminate"] = &virtual_packer_serviceAsyncProcessor::process_terminate;
    processMap_["running_job"] = &virtual_packer_serviceAsyncProcessor::process_running_job;
  }

  virtual ~virtual_packer_serviceAsyncProcessor() {}
};

class virtual_packer_serviceAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  virtual_packer_serviceAsyncProcessorFactory(const ::boost::shared_ptr< virtual_packer_serviceCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< virtual_packer_serviceCobSvIfFactory > handlerFactory_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}} // namespace

#endif
