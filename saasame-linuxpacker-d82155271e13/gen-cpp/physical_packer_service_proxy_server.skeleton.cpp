// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "physical_packer_service_proxy.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::saasame::transport;

class physical_packer_service_proxyHandler : virtual public physical_packer_service_proxyIf {
 public:
  physical_packer_service_proxyHandler() {
    // Your initialization goes here
  }

  void packer_ping_p(service_info& _return, const std::string& session_id, const std::string& addr) {
    // Your implementation goes here
    printf("packer_ping_p\n");
  }

  void take_snapshots_p(std::vector<snapshot> & _return, const std::string& session_id, const std::string& addr, const std::set<std::string> & disks) {
    // Your implementation goes here
    printf("take_snapshots_p\n");
  }

  void take_snapshots_ex_p(std::vector<snapshot> & _return, const std::string& session_id, const std::string& addr, const std::set<std::string> & disks, const std::string& pre_script, const std::string& post_script) {
    // Your implementation goes here
    printf("take_snapshots_ex_p\n");
  }

  void delete_snapshot_p(delete_snapshot_result& _return, const std::string& session_id, const std::string& addr, const std::string& snapshot_id) {
    // Your implementation goes here
    printf("delete_snapshot_p\n");
  }

  void delete_snapshot_set_p(delete_snapshot_result& _return, const std::string& session_id, const std::string& addr, const std::string& snapshot_set_id) {
    // Your implementation goes here
    printf("delete_snapshot_set_p\n");
  }

  void get_all_snapshots_p(std::map<std::string, std::vector<snapshot> > & _return, const std::string& session_id, const std::string& addr) {
    // Your implementation goes here
    printf("get_all_snapshots_p\n");
  }

  void create_packer_job_ex_p(packer_job_detail& _return, const std::string& session_id, const std::string& addr, const std::string& job_id, const create_packer_job_detail& create_job) {
    // Your implementation goes here
    printf("create_packer_job_ex_p\n");
  }

  void get_packer_job_p(packer_job_detail& _return, const std::string& session_id, const std::string& addr, const std::string& job_id, const std::string& previous_updated_time) {
    // Your implementation goes here
    printf("get_packer_job_p\n");
  }

  bool interrupt_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id) {
    // Your implementation goes here
    printf("interrupt_packer_job_p\n");
  }

  bool resume_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id) {
    // Your implementation goes here
    printf("resume_packer_job_p\n");
  }

  bool remove_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id) {
    // Your implementation goes here
    printf("remove_packer_job_p\n");
  }

  bool running_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id) {
    // Your implementation goes here
    printf("running_packer_job_p\n");
  }

  void enumerate_packer_disks_p(std::set<disk_info> & _return, const std::string& session_id, const std::string& addr, const enumerate_disk_filter_style::type filter) {
    // Your implementation goes here
    printf("enumerate_packer_disks_p\n");
  }

  bool verify_packer_carrier_p(const std::string& session_id, const std::string& addr, const std::string& carrier, const bool is_ssl) {
    // Your implementation goes here
    printf("verify_packer_carrier_p\n");
  }

  void get_packer_host_detail_p(physical_machine_info& _return, const std::string& session_id, const std::string& addr, const machine_detail_filter::type filter) {
    // Your implementation goes here
    printf("get_packer_host_detail_p\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<physical_packer_service_proxyHandler> handler(new physical_packer_service_proxyHandler());
  shared_ptr<TProcessor> processor(new physical_packer_service_proxyProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

