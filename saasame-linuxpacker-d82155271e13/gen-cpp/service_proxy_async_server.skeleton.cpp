// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "service_proxy.h"
#include <thrift/protocol/TBinaryProtocol.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

using boost::shared_ptr;

using namespace  ::saasame::transport;

class service_proxyAsyncHandler : public service_proxyCobSvIf {
 public:
  service_proxyAsyncHandler() {
    syncHandler_ = std::auto_ptr<service_proxyHandler>(new service_proxyHandler);
    // Your initialization goes here
  }
  virtual ~service_proxyAsyncHandler();

  void create_job_ex_p(tcxx::function<void(job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type) {
    job_detail _return;
    syncHandler_->create_job_ex_p(_return, session_id, job_id, create_job, service_type);
    return cob(_return);
  }

  void get_job_p(tcxx::function<void(job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id, const std::string& service_type) {
    job_detail _return;
    syncHandler_->get_job_p(_return, session_id, job_id, service_type);
    return cob(_return);
  }

  void interrupt_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id, const std::string& service_type) {
    bool _return = false;
    _return = syncHandler_->interrupt_job_p(session_id, job_id, service_type);
    return cob(_return);
  }

  void resume_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id, const std::string& service_type) {
    bool _return = false;
    _return = syncHandler_->resume_job_p(session_id, job_id, service_type);
    return cob(_return);
  }

  void remove_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id, const std::string& service_type) {
    bool _return = false;
    _return = syncHandler_->remove_job_p(session_id, job_id, service_type);
    return cob(_return);
  }

  void running_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id, const std::string& service_type) {
    bool _return = false;
    _return = syncHandler_->running_job_p(session_id, job_id, service_type);
    return cob(_return);
  }

  void update_job_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type) {
    bool _return = false;
    _return = syncHandler_->update_job_p(session_id, job_id, create_job, service_type);
    return cob(_return);
  }

  void remove_snapshot_image_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::map<std::string, image_map_info> & images, const std::string& service_type) {
    bool _return = false;
    _return = syncHandler_->remove_snapshot_image_p(session_id, images, service_type);
    return cob(_return);
  }

  void test_connection_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const connection& conn, const std::string& service_type) {
    bool _return = false;
    _return = syncHandler_->test_connection_p(session_id, conn, service_type);
    return cob(_return);
  }

  void add_connection_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const connection& conn, const std::string& service_type) {
    bool _return = false;
    _return = syncHandler_->add_connection_p(session_id, conn, service_type);
    return cob(_return);
  }

  void remove_connection_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& connection_id, const std::string& service_type) {
    bool _return = false;
    _return = syncHandler_->remove_connection_p(session_id, connection_id, service_type);
    return cob(_return);
  }

  void modify_connection_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const connection& conn, const std::string& service_type) {
    bool _return = false;
    _return = syncHandler_->modify_connection_p(session_id, conn, service_type);
    return cob(_return);
  }

  void enumerate_connections_p(tcxx::function<void(std::vector<connection>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& service_type) {
    std::vector<connection>  _return;
    syncHandler_->enumerate_connections_p(_return, session_id, service_type);
    return cob(_return);
  }

  void get_connection_p(tcxx::function<void(connection const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& connection_id, const std::string& service_type) {
    connection _return;
    syncHandler_->get_connection_p(_return, session_id, connection_id, service_type);
    return cob(_return);
  }

  void get_virtual_host_info_p(tcxx::function<void(virtual_host const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) {
    virtual_host _return;
    syncHandler_->get_virtual_host_info_p(_return, session_id, host, username, password);
    return cob(_return);
  }

  void get_virtual_machine_detail_p(tcxx::function<void(virtual_machine const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) {
    virtual_machine _return;
    syncHandler_->get_virtual_machine_detail_p(_return, session_id, host, username, password, machine_id);
    return cob(_return);
  }

  void get_physical_machine_detail_p(tcxx::function<void(physical_machine_info const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& host, const machine_detail_filter::type filter) {
    physical_machine_info _return;
    syncHandler_->get_physical_machine_detail_p(_return, session_id, host, filter);
    return cob(_return);
  }

  void verify_packer_to_carrier_p(tcxx::function<void(bool const& _return)> cob, const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl) {
    bool _return = false;
    _return = syncHandler_->verify_packer_to_carrier_p(packer, carrier, port, is_ssl);
    return cob(_return);
  }

  void take_packer_xray_p(tcxx::function<void(std::string const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& host) {
    std::string _return;
    syncHandler_->take_packer_xray_p(_return, session_id, host);
    return cob(_return);
  }

  void get_packer_service_info_p(tcxx::function<void(service_info const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& host) {
    service_info _return;
    syncHandler_->get_packer_service_info_p(_return, session_id, host);
    return cob(_return);
  }

  void set_customized_id_p(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& disk_addr, const std::string& disk_id) {
    bool _return = false;
    _return = syncHandler_->set_customized_id_p(session_id, disk_addr, disk_id);
    return cob(_return);
  }

 protected:
  std::auto_ptr<service_proxyHandler> syncHandler_;
};

