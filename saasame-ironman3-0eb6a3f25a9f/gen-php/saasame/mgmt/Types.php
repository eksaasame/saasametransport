<?php
namespace saasame\mgmt;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class partition_style {
  const PARTITION_UNKNOWN = 0;
  const PARTITION_MBR = 1;
  const PARTITION_GPT = 2;
  static public $__names = array(
    0 => 'PARTITION_UNKNOWN',
    1 => 'PARTITION_MBR',
    2 => 'PARTITION_GPT',
  );
}

final class drive_type {
  const DT_UNKNOWN = 0;
  const DT_NO_ROOT_PATH = 1;
  const DT_REMOVABLE = 2;
  const DT_FIXED = 3;
  const DT_REMOTE = 4;
  const DT_CDROM = 5;
  const DT_RAMDISK = 6;
  static public $__names = array(
    0 => 'DT_UNKNOWN',
    1 => 'DT_NO_ROOT_PATH',
    2 => 'DT_REMOVABLE',
    3 => 'DT_FIXED',
    4 => 'DT_REMOTE',
    5 => 'DT_CDROM',
    6 => 'DT_RAMDISK',
  );
}

final class bus_type {
  const Unknown = 0;
  const SCSI = 1;
  const ATAPI = 2;
  const ATA = 3;
  const IEEE_1394 = 4;
  const SSA = 5;
  const Fibre_Channel = 6;
  const USB = 7;
  const RAID = 8;
  const iSCSI = 9;
  const SAS = 10;
  const SATA = 11;
  const SD = 12;
  const MMC = 13;
  const Virtual = 14;
  const File_Backed_Virtual = 15;
  const Storage_Spaces = 16;
  const NVMe = 17;
  static public $__names = array(
    0 => 'Unknown',
    1 => 'SCSI',
    2 => 'ATAPI',
    3 => 'ATA',
    4 => 'IEEE_1394',
    5 => 'SSA',
    6 => 'Fibre_Channel',
    7 => 'USB',
    8 => 'RAID',
    9 => 'iSCSI',
    10 => 'SAS',
    11 => 'SATA',
    12 => 'SD',
    13 => 'MMC',
    14 => 'Virtual',
    15 => 'File_Backed_Virtual',
    16 => 'Storage_Spaces',
    17 => 'NVMe',
  );
}

final class hv_vm_tools_status {
  const HV_VMTOOLS_UNKNOWN = 0;
  const HV_VMTOOLS_OK = 1;
  const HV_VMTOOLS_NOTINSTALLED = 2;
  const HV_VMTOOLS_OLD = 3;
  const HV_VMTOOLS_NOTRUNNING = 4;
  static public $__names = array(
    0 => 'HV_VMTOOLS_UNKNOWN',
    1 => 'HV_VMTOOLS_OK',
    2 => 'HV_VMTOOLS_NOTINSTALLED',
    3 => 'HV_VMTOOLS_OLD',
    4 => 'HV_VMTOOLS_NOTRUNNING',
  );
}

final class hv_vm_power_state {
  const HV_VMPOWER_UNKNOWN = 0;
  const HV_VMPOWER_ON = 1;
  const HV_VMPOWER_OFF = 2;
  const HV_VMPOWER_SUSPENDED = 3;
  static public $__names = array(
    0 => 'HV_VMPOWER_UNKNOWN',
    1 => 'HV_VMPOWER_ON',
    2 => 'HV_VMPOWER_OFF',
    3 => 'HV_VMPOWER_SUSPENDED',
  );
}

final class hv_vm_connection_state {
  const HV_VMCONNECT_UNKNOWN = 0;
  const HV_VMCONNECT_CONNECTED = 1;
  const HV_VMCONNECT_DISCONNECTED = 2;
  const HV_VMCONNECT_INACCESSIBLE = 3;
  const HV_VMCONNECT_INVALID = 4;
  const HV_VMCONNECT_ORPHANED = 5;
  static public $__names = array(
    0 => 'HV_VMCONNECT_UNKNOWN',
    1 => 'HV_VMCONNECT_CONNECTED',
    2 => 'HV_VMCONNECT_DISCONNECTED',
    3 => 'HV_VMCONNECT_INACCESSIBLE',
    4 => 'HV_VMCONNECT_INVALID',
    5 => 'HV_VMCONNECT_ORPHANED',
  );
}

final class hv_host_power_state {
  const HV_HOSTPOWER_UNKNOWN = 0;
  const HV_HOSTPOWER_ON = 1;
  const HV_HOSTPOWER_OFF = 2;
  const HV_HOSTPOWER_STANDBY = 3;
  static public $__names = array(
    0 => 'HV_HOSTPOWER_UNKNOWN',
    1 => 'HV_HOSTPOWER_ON',
    2 => 'HV_HOSTPOWER_OFF',
    3 => 'HV_HOSTPOWER_STANDBY',
  );
}

final class hv_guest_os_type {
  const HV_OS_UNKNOWN = 0;
  const HV_OS_WINDOWS = 1;
  const HV_OS_LINUX = 2;
  static public $__names = array(
    0 => 'HV_OS_UNKNOWN',
    1 => 'HV_OS_WINDOWS',
    2 => 'HV_OS_LINUX',
  );
}

final class hv_vm_firmware {
  const HV_VM_FIRMWARE_BIOS = 0;
  const HV_VM_FIRMWARE_EFI = 1;
  static public $__names = array(
    0 => 'HV_VM_FIRMWARE_BIOS',
    1 => 'HV_VM_FIRMWARE_EFI',
  );
}

final class job_type {
  const physical_migration_type = 1;
  const virtual_migration_type = 2;
  const physical_transport_type = 3;
  const virtual_transport_type = 4;
  static public $__names = array(
    1 => 'physical_migration_type',
    2 => 'virtual_migration_type',
    3 => 'physical_transport_type',
    4 => 'virtual_transport_type',
  );
}

final class job_state {
  const job_state_none = 1;
  const job_state_initialed = 2;
  const job_state_replicating = 4;
  const job_state_replicated = 8;
  const job_state_converting = 16;
  const job_state_finished = 32;
  const job_state_sche_completed = 64;
  static public $__names = array(
    1 => 'job_state_none',
    2 => 'job_state_initialed',
    4 => 'job_state_replicating',
    8 => 'job_state_replicated',
    16 => 'job_state_converting',
    32 => 'job_state_finished',
    64 => 'job_state_sche_completed',
  );
}

final class error_codes {
  const IRONMAN_S_OK = 0;
  const IRONMAN_NOERROR = 0;
  const IRONMAN_E_FAIL = 4096;
  const IRONMAN_E_INITIAL_FAIL = 4097;
  const IRONMAN_E_DISK_FULL = 4098;
  const IRONMAN_E_INVALID_ARG = 4099;
  const IRONMAN_E_INVALID_AUTHENTICATION = 4100;
  const IRONMAN_E_INTERNAL_FAIL = 4101;
  const IRONMAN_E_CANNOT_CONNECT_TO_HOST = 4102;
  const IRONMAN_E_JOB_CREATE_FAIL = 12288;
  const IRONMAN_E_JOB_REMOVE_FAIL = 12289;
  const IRONMAN_E_JOB_NOTFOUND = 12290;
  const IRONMAN_E_JOB_CONFIG_NOTFOUND = 12291;
  const IRONMAN_E_JOB_STATUS_NOTFOUND = 12292;
  const IRONMAN_E_JOB_CANCELLED = 12293;
  const IRONMAN_E_JOB_CONVERT_FAIL = 12294;
  const IRONMAN_E_JOB_REPLICATE_FAIL = 12295;
  const IRONMAN_E_JOB_ID_DUPLICATED = 12296;
  const IRONMAN_E_JOB_INTERRUPTED = 12297;
  const IRONMAN_E_PHYSICAL_CONFIG_FAILED = 16384;
  const IRONMAN_E_VIRTUAL_VM_NOTFOUND = 20480;
  const IRONMAN_E_IMAGE_NOTFOUND = 24576;
  const IRONMAN_E_IMAGE_CREATE_FAIL = 24577;
  const IRONMAN_E_IMAGE_OPEN_FAIL = 24578;
  const IRONMAN_E_IMAGE_READ = 24579;
  const IRONMAN_E_IMAGE_WRITE = 24580;
  const IRONMAN_E_IMAGE_OUTOFRANGE = 24581;
  const IRONMAN_E_IMAGE_ATTACH_FAIL = 24582;
  const IRONMAN_E_IMAGE_DETACH_FAIL = 24583;
  const IRONMAN_E_IMAGE_PROPERTY_FAIL = 24584;
  const IRONMAN_E_SNAPSHOT_CREATE_FAIL = 28672;
  const IRONMAN_E_SNAPSHOT_REMOVE_FAIL = 28673;
  const IRONMAN_E_SNAPSHOT_NOTFOUND = 28674;
  const IRONMAN_E_SNAPSHOT_INVALID = 28675;
  static public $__names = array(
    0 => 'IRONMAN_S_OK',
    0 => 'IRONMAN_NOERROR',
    4096 => 'IRONMAN_E_FAIL',
    4097 => 'IRONMAN_E_INITIAL_FAIL',
    4098 => 'IRONMAN_E_DISK_FULL',
    4099 => 'IRONMAN_E_INVALID_ARG',
    4100 => 'IRONMAN_E_INVALID_AUTHENTICATION',
    4101 => 'IRONMAN_E_INTERNAL_FAIL',
    4102 => 'IRONMAN_E_CANNOT_CONNECT_TO_HOST',
    12288 => 'IRONMAN_E_JOB_CREATE_FAIL',
    12289 => 'IRONMAN_E_JOB_REMOVE_FAIL',
    12290 => 'IRONMAN_E_JOB_NOTFOUND',
    12291 => 'IRONMAN_E_JOB_CONFIG_NOTFOUND',
    12292 => 'IRONMAN_E_JOB_STATUS_NOTFOUND',
    12293 => 'IRONMAN_E_JOB_CANCELLED',
    12294 => 'IRONMAN_E_JOB_CONVERT_FAIL',
    12295 => 'IRONMAN_E_JOB_REPLICATE_FAIL',
    12296 => 'IRONMAN_E_JOB_ID_DUPLICATED',
    12297 => 'IRONMAN_E_JOB_INTERRUPTED',
    16384 => 'IRONMAN_E_PHYSICAL_CONFIG_FAILED',
    20480 => 'IRONMAN_E_VIRTUAL_VM_NOTFOUND',
    24576 => 'IRONMAN_E_IMAGE_NOTFOUND',
    24577 => 'IRONMAN_E_IMAGE_CREATE_FAIL',
    24578 => 'IRONMAN_E_IMAGE_OPEN_FAIL',
    24579 => 'IRONMAN_E_IMAGE_READ',
    24580 => 'IRONMAN_E_IMAGE_WRITE',
    24581 => 'IRONMAN_E_IMAGE_OUTOFRANGE',
    24582 => 'IRONMAN_E_IMAGE_ATTACH_FAIL',
    24583 => 'IRONMAN_E_IMAGE_DETACH_FAIL',
    24584 => 'IRONMAN_E_IMAGE_PROPERTY_FAIL',
    28672 => 'IRONMAN_E_SNAPSHOT_CREATE_FAIL',
    28673 => 'IRONMAN_E_SNAPSHOT_REMOVE_FAIL',
    28674 => 'IRONMAN_E_SNAPSHOT_NOTFOUND',
    28675 => 'IRONMAN_E_SNAPSHOT_INVALID',
  );
}

class disk_info {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $boot_from_disk = false;
  /**
   * @var int
   */
  public $bus_type =   0;
  /**
   * @var string
   */
  public $cluster_owner = "";
  /**
   * @var int
   */
  public $cylinders = 0;
  /**
   * @var string
   */
  public $friend_name = "";
  /**
   * @var string
   */
  public $guid = "";
  /**
   * @var int
   */
  public $tracks_per_cylinder = 0;
  /**
   * @var bool
   */
  public $is_boot = false;
  /**
   * @var bool
   */
  public $is_clustered = false;
  /**
   * @var bool
   */
  public $is_offline = false;
  /**
   * @var bool
   */
  public $is_readonly = false;
  /**
   * @var bool
   */
  public $is_snapshot = false;
  /**
   * @var bool
   */
  public $is_system = false;
  /**
   * @var string
   */
  public $location = "";
  /**
   * @var int
   */
  public $logical_sector_size = 0;
  /**
   * @var string
   */
  public $manufacturer = "";
  /**
   * @var string
   */
  public $model = "";
  /**
   * @var int
   */
  public $number = -1;
  /**
   * @var int
   */
  public $number_of_partitions = -1;
  /**
   * @var int
   */
  public $offline_reason = 0;
  /**
   * @var int
   */
  public $partition_style =   0;
  /**
   * @var string
   */
  public $path = "";
  /**
   * @var int
   */
  public $physical_sector_size = 0;
  /**
   * @var int
   */
  public $sectors_per_track = 0;
  /**
   * @var string
   */
  public $serial_number = "";
  /**
   * @var int
   */
  public $signature = 0;
  /**
   * @var int
   */
  public $size = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'boot_from_disk',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'bus_type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'cluster_owner',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'cylinders',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'friend_name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'guid',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'tracks_per_cylinder',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'is_boot',
          'type' => TType::BOOL,
          ),
        9 => array(
          'var' => 'is_clustered',
          'type' => TType::BOOL,
          ),
        10 => array(
          'var' => 'is_offline',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'is_readonly',
          'type' => TType::BOOL,
          ),
        12 => array(
          'var' => 'is_snapshot',
          'type' => TType::BOOL,
          ),
        13 => array(
          'var' => 'is_system',
          'type' => TType::BOOL,
          ),
        14 => array(
          'var' => 'location',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'logical_sector_size',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'manufacturer',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'model',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'number',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'number_of_partitions',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'offline_reason',
          'type' => TType::I16,
          ),
        21 => array(
          'var' => 'partition_style',
          'type' => TType::I32,
          ),
        22 => array(
          'var' => 'path',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'physical_sector_size',
          'type' => TType::I32,
          ),
        24 => array(
          'var' => 'sectors_per_track',
          'type' => TType::I32,
          ),
        25 => array(
          'var' => 'serial_number',
          'type' => TType::STRING,
          ),
        26 => array(
          'var' => 'signature',
          'type' => TType::I32,
          ),
        27 => array(
          'var' => 'size',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['boot_from_disk'])) {
        $this->boot_from_disk = $vals['boot_from_disk'];
      }
      if (isset($vals['bus_type'])) {
        $this->bus_type = $vals['bus_type'];
      }
      if (isset($vals['cluster_owner'])) {
        $this->cluster_owner = $vals['cluster_owner'];
      }
      if (isset($vals['cylinders'])) {
        $this->cylinders = $vals['cylinders'];
      }
      if (isset($vals['friend_name'])) {
        $this->friend_name = $vals['friend_name'];
      }
      if (isset($vals['guid'])) {
        $this->guid = $vals['guid'];
      }
      if (isset($vals['tracks_per_cylinder'])) {
        $this->tracks_per_cylinder = $vals['tracks_per_cylinder'];
      }
      if (isset($vals['is_boot'])) {
        $this->is_boot = $vals['is_boot'];
      }
      if (isset($vals['is_clustered'])) {
        $this->is_clustered = $vals['is_clustered'];
      }
      if (isset($vals['is_offline'])) {
        $this->is_offline = $vals['is_offline'];
      }
      if (isset($vals['is_readonly'])) {
        $this->is_readonly = $vals['is_readonly'];
      }
      if (isset($vals['is_snapshot'])) {
        $this->is_snapshot = $vals['is_snapshot'];
      }
      if (isset($vals['is_system'])) {
        $this->is_system = $vals['is_system'];
      }
      if (isset($vals['location'])) {
        $this->location = $vals['location'];
      }
      if (isset($vals['logical_sector_size'])) {
        $this->logical_sector_size = $vals['logical_sector_size'];
      }
      if (isset($vals['manufacturer'])) {
        $this->manufacturer = $vals['manufacturer'];
      }
      if (isset($vals['model'])) {
        $this->model = $vals['model'];
      }
      if (isset($vals['number'])) {
        $this->number = $vals['number'];
      }
      if (isset($vals['number_of_partitions'])) {
        $this->number_of_partitions = $vals['number_of_partitions'];
      }
      if (isset($vals['offline_reason'])) {
        $this->offline_reason = $vals['offline_reason'];
      }
      if (isset($vals['partition_style'])) {
        $this->partition_style = $vals['partition_style'];
      }
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
      if (isset($vals['physical_sector_size'])) {
        $this->physical_sector_size = $vals['physical_sector_size'];
      }
      if (isset($vals['sectors_per_track'])) {
        $this->sectors_per_track = $vals['sectors_per_track'];
      }
      if (isset($vals['serial_number'])) {
        $this->serial_number = $vals['serial_number'];
      }
      if (isset($vals['signature'])) {
        $this->signature = $vals['signature'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
    }
  }

  public function getName() {
    return 'disk_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->boot_from_disk);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bus_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cluster_owner);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cylinders);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->friend_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->guid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tracks_per_cylinder);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_boot);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_clustered);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_offline);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_readonly);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_snapshot);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_system);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->location);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->logical_sector_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->manufacturer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->model);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->number_of_partitions);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->offline_reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->partition_style);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->physical_sector_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sectors_per_track);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->serial_number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->signature);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('disk_info');
    if ($this->boot_from_disk !== null) {
      $xfer += $output->writeFieldBegin('boot_from_disk', TType::BOOL, 1);
      $xfer += $output->writeBool($this->boot_from_disk);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bus_type !== null) {
      $xfer += $output->writeFieldBegin('bus_type', TType::I32, 2);
      $xfer += $output->writeI32($this->bus_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cluster_owner !== null) {
      $xfer += $output->writeFieldBegin('cluster_owner', TType::STRING, 3);
      $xfer += $output->writeString($this->cluster_owner);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cylinders !== null) {
      $xfer += $output->writeFieldBegin('cylinders', TType::I64, 4);
      $xfer += $output->writeI64($this->cylinders);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->friend_name !== null) {
      $xfer += $output->writeFieldBegin('friend_name', TType::STRING, 5);
      $xfer += $output->writeString($this->friend_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->guid !== null) {
      $xfer += $output->writeFieldBegin('guid', TType::STRING, 6);
      $xfer += $output->writeString($this->guid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tracks_per_cylinder !== null) {
      $xfer += $output->writeFieldBegin('tracks_per_cylinder', TType::I32, 7);
      $xfer += $output->writeI32($this->tracks_per_cylinder);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_boot !== null) {
      $xfer += $output->writeFieldBegin('is_boot', TType::BOOL, 8);
      $xfer += $output->writeBool($this->is_boot);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_clustered !== null) {
      $xfer += $output->writeFieldBegin('is_clustered', TType::BOOL, 9);
      $xfer += $output->writeBool($this->is_clustered);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_offline !== null) {
      $xfer += $output->writeFieldBegin('is_offline', TType::BOOL, 10);
      $xfer += $output->writeBool($this->is_offline);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_readonly !== null) {
      $xfer += $output->writeFieldBegin('is_readonly', TType::BOOL, 11);
      $xfer += $output->writeBool($this->is_readonly);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_snapshot !== null) {
      $xfer += $output->writeFieldBegin('is_snapshot', TType::BOOL, 12);
      $xfer += $output->writeBool($this->is_snapshot);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_system !== null) {
      $xfer += $output->writeFieldBegin('is_system', TType::BOOL, 13);
      $xfer += $output->writeBool($this->is_system);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->location !== null) {
      $xfer += $output->writeFieldBegin('location', TType::STRING, 14);
      $xfer += $output->writeString($this->location);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logical_sector_size !== null) {
      $xfer += $output->writeFieldBegin('logical_sector_size', TType::I32, 15);
      $xfer += $output->writeI32($this->logical_sector_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->manufacturer !== null) {
      $xfer += $output->writeFieldBegin('manufacturer', TType::STRING, 16);
      $xfer += $output->writeString($this->manufacturer);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->model !== null) {
      $xfer += $output->writeFieldBegin('model', TType::STRING, 17);
      $xfer += $output->writeString($this->model);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number !== null) {
      $xfer += $output->writeFieldBegin('number', TType::I32, 18);
      $xfer += $output->writeI32($this->number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number_of_partitions !== null) {
      $xfer += $output->writeFieldBegin('number_of_partitions', TType::I32, 19);
      $xfer += $output->writeI32($this->number_of_partitions);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offline_reason !== null) {
      $xfer += $output->writeFieldBegin('offline_reason', TType::I16, 20);
      $xfer += $output->writeI16($this->offline_reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->partition_style !== null) {
      $xfer += $output->writeFieldBegin('partition_style', TType::I32, 21);
      $xfer += $output->writeI32($this->partition_style);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 22);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->physical_sector_size !== null) {
      $xfer += $output->writeFieldBegin('physical_sector_size', TType::I32, 23);
      $xfer += $output->writeI32($this->physical_sector_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sectors_per_track !== null) {
      $xfer += $output->writeFieldBegin('sectors_per_track', TType::I32, 24);
      $xfer += $output->writeI32($this->sectors_per_track);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serial_number !== null) {
      $xfer += $output->writeFieldBegin('serial_number', TType::STRING, 25);
      $xfer += $output->writeString($this->serial_number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->signature !== null) {
      $xfer += $output->writeFieldBegin('signature', TType::I32, 26);
      $xfer += $output->writeI32($this->signature);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I64, 27);
      $xfer += $output->writeI64($this->size);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class partition_info {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $access_paths = null;
  /**
   * @var int
   */
  public $disk_number = -1;
  /**
   * @var string
   */
  public $drive_letter = "";
  /**
   * @var string
   */
  public $gpt_type = "";
  /**
   * @var string
   */
  public $guid = "";
  /**
   * @var bool
   */
  public $is_active = false;
  /**
   * @var bool
   */
  public $is_boot = false;
  /**
   * @var bool
   */
  public $is_hidden = false;
  /**
   * @var bool
   */
  public $is_offline = false;
  /**
   * @var bool
   */
  public $is_readonly = false;
  /**
   * @var bool
   */
  public $is_shadowcopy = false;
  /**
   * @var bool
   */
  public $is_system = false;
  /**
   * @var int
   */
  public $mbr_type = 0;
  /**
   * @var int
   */
  public $offset = 0;
  /**
   * @var int
   */
  public $partition_number = -1;
  /**
   * @var int
   */
  public $size = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'access_paths',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'disk_number',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'drive_letter',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'gpt_type',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'guid',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'is_active',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'is_boot',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'is_hidden',
          'type' => TType::BOOL,
          ),
        9 => array(
          'var' => 'is_offline',
          'type' => TType::BOOL,
          ),
        10 => array(
          'var' => 'is_readonly',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'is_shadowcopy',
          'type' => TType::BOOL,
          ),
        12 => array(
          'var' => 'is_system',
          'type' => TType::BOOL,
          ),
        13 => array(
          'var' => 'mbr_type',
          'type' => TType::I16,
          ),
        14 => array(
          'var' => 'offset',
          'type' => TType::I64,
          ),
        15 => array(
          'var' => 'partition_number',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'size',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['access_paths'])) {
        $this->access_paths = $vals['access_paths'];
      }
      if (isset($vals['disk_number'])) {
        $this->disk_number = $vals['disk_number'];
      }
      if (isset($vals['drive_letter'])) {
        $this->drive_letter = $vals['drive_letter'];
      }
      if (isset($vals['gpt_type'])) {
        $this->gpt_type = $vals['gpt_type'];
      }
      if (isset($vals['guid'])) {
        $this->guid = $vals['guid'];
      }
      if (isset($vals['is_active'])) {
        $this->is_active = $vals['is_active'];
      }
      if (isset($vals['is_boot'])) {
        $this->is_boot = $vals['is_boot'];
      }
      if (isset($vals['is_hidden'])) {
        $this->is_hidden = $vals['is_hidden'];
      }
      if (isset($vals['is_offline'])) {
        $this->is_offline = $vals['is_offline'];
      }
      if (isset($vals['is_readonly'])) {
        $this->is_readonly = $vals['is_readonly'];
      }
      if (isset($vals['is_shadowcopy'])) {
        $this->is_shadowcopy = $vals['is_shadowcopy'];
      }
      if (isset($vals['is_system'])) {
        $this->is_system = $vals['is_system'];
      }
      if (isset($vals['mbr_type'])) {
        $this->mbr_type = $vals['mbr_type'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['partition_number'])) {
        $this->partition_number = $vals['partition_number'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
    }
  }

  public function getName() {
    return 'partition_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::SET) {
            $this->access_paths = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readSetBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              if (is_scalar($elem5)) {
                $this->access_paths[$elem5] = true;
              } else {
                $this->access_paths []= $elem5;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->disk_number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->drive_letter);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gpt_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->guid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_active);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_boot);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_hidden);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_offline);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_readonly);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_shadowcopy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_system);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->mbr_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->partition_number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('partition_info');
    if ($this->access_paths !== null) {
      if (!is_array($this->access_paths)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('access_paths', TType::SET, 1);
      {
        $output->writeSetBegin(TType::STRING, count($this->access_paths));
        {
          foreach ($this->access_paths as $iter6 => $iter7)
          {
            if (is_scalar($iter7)) {
            $xfer += $output->writeString($iter6);
            } else {
            $xfer += $output->writeString($iter7);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disk_number !== null) {
      $xfer += $output->writeFieldBegin('disk_number', TType::I32, 2);
      $xfer += $output->writeI32($this->disk_number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->drive_letter !== null) {
      $xfer += $output->writeFieldBegin('drive_letter', TType::STRING, 3);
      $xfer += $output->writeString($this->drive_letter);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gpt_type !== null) {
      $xfer += $output->writeFieldBegin('gpt_type', TType::STRING, 4);
      $xfer += $output->writeString($this->gpt_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->guid !== null) {
      $xfer += $output->writeFieldBegin('guid', TType::STRING, 5);
      $xfer += $output->writeString($this->guid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_active !== null) {
      $xfer += $output->writeFieldBegin('is_active', TType::BOOL, 6);
      $xfer += $output->writeBool($this->is_active);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_boot !== null) {
      $xfer += $output->writeFieldBegin('is_boot', TType::BOOL, 7);
      $xfer += $output->writeBool($this->is_boot);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_hidden !== null) {
      $xfer += $output->writeFieldBegin('is_hidden', TType::BOOL, 8);
      $xfer += $output->writeBool($this->is_hidden);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_offline !== null) {
      $xfer += $output->writeFieldBegin('is_offline', TType::BOOL, 9);
      $xfer += $output->writeBool($this->is_offline);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_readonly !== null) {
      $xfer += $output->writeFieldBegin('is_readonly', TType::BOOL, 10);
      $xfer += $output->writeBool($this->is_readonly);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_shadowcopy !== null) {
      $xfer += $output->writeFieldBegin('is_shadowcopy', TType::BOOL, 11);
      $xfer += $output->writeBool($this->is_shadowcopy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_system !== null) {
      $xfer += $output->writeFieldBegin('is_system', TType::BOOL, 12);
      $xfer += $output->writeBool($this->is_system);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mbr_type !== null) {
      $xfer += $output->writeFieldBegin('mbr_type', TType::I16, 13);
      $xfer += $output->writeI16($this->mbr_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I64, 14);
      $xfer += $output->writeI64($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->partition_number !== null) {
      $xfer += $output->writeFieldBegin('partition_number', TType::I32, 15);
      $xfer += $output->writeI32($this->partition_number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I64, 16);
      $xfer += $output->writeI64($this->size);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class volume_info {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $access_paths = null;
  /**
   * @var string
   */
  public $cluster_access_path = "";
  /**
   * @var string
   */
  public $drive_letter = "";
  /**
   * @var int
   */
  public $drive_type =   0;
  /**
   * @var string
   */
  public $file_system = "";
  /**
   * @var string
   */
  public $file_system_catalogid = "";
  /**
   * @var string
   */
  public $file_system_label = "";
  /**
   * @var string
   */
  public $object_id = "";
  /**
   * @var string
   */
  public $path = "";
  /**
   * @var int
   */
  public $size = 0;
  /**
   * @var int
   */
  public $size_remaining = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'access_paths',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'cluster_access_path',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'drive_letter',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'drive_type',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'file_system',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'file_system_catalogid',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'file_system_label',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'object_id',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'path',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'size',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'size_remaining',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['access_paths'])) {
        $this->access_paths = $vals['access_paths'];
      }
      if (isset($vals['cluster_access_path'])) {
        $this->cluster_access_path = $vals['cluster_access_path'];
      }
      if (isset($vals['drive_letter'])) {
        $this->drive_letter = $vals['drive_letter'];
      }
      if (isset($vals['drive_type'])) {
        $this->drive_type = $vals['drive_type'];
      }
      if (isset($vals['file_system'])) {
        $this->file_system = $vals['file_system'];
      }
      if (isset($vals['file_system_catalogid'])) {
        $this->file_system_catalogid = $vals['file_system_catalogid'];
      }
      if (isset($vals['file_system_label'])) {
        $this->file_system_label = $vals['file_system_label'];
      }
      if (isset($vals['object_id'])) {
        $this->object_id = $vals['object_id'];
      }
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
      if (isset($vals['size_remaining'])) {
        $this->size_remaining = $vals['size_remaining'];
      }
    }
  }

  public function getName() {
    return 'volume_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::SET) {
            $this->access_paths = array();
            $_size8 = 0;
            $_etype11 = 0;
            $xfer += $input->readSetBegin($_etype11, $_size8);
            for ($_i12 = 0; $_i12 < $_size8; ++$_i12)
            {
              $elem13 = null;
              $xfer += $input->readString($elem13);
              if (is_scalar($elem13)) {
                $this->access_paths[$elem13] = true;
              } else {
                $this->access_paths []= $elem13;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cluster_access_path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->drive_letter);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->drive_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->file_system);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->file_system_catalogid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->file_system_label);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->object_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->size_remaining);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('volume_info');
    if ($this->access_paths !== null) {
      if (!is_array($this->access_paths)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('access_paths', TType::SET, 1);
      {
        $output->writeSetBegin(TType::STRING, count($this->access_paths));
        {
          foreach ($this->access_paths as $iter14 => $iter15)
          {
            if (is_scalar($iter15)) {
            $xfer += $output->writeString($iter14);
            } else {
            $xfer += $output->writeString($iter15);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cluster_access_path !== null) {
      $xfer += $output->writeFieldBegin('cluster_access_path', TType::STRING, 2);
      $xfer += $output->writeString($this->cluster_access_path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->drive_letter !== null) {
      $xfer += $output->writeFieldBegin('drive_letter', TType::STRING, 3);
      $xfer += $output->writeString($this->drive_letter);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->drive_type !== null) {
      $xfer += $output->writeFieldBegin('drive_type', TType::I32, 4);
      $xfer += $output->writeI32($this->drive_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->file_system !== null) {
      $xfer += $output->writeFieldBegin('file_system', TType::STRING, 5);
      $xfer += $output->writeString($this->file_system);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->file_system_catalogid !== null) {
      $xfer += $output->writeFieldBegin('file_system_catalogid', TType::STRING, 6);
      $xfer += $output->writeString($this->file_system_catalogid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->file_system_label !== null) {
      $xfer += $output->writeFieldBegin('file_system_label', TType::STRING, 7);
      $xfer += $output->writeString($this->file_system_label);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->object_id !== null) {
      $xfer += $output->writeFieldBegin('object_id', TType::STRING, 8);
      $xfer += $output->writeString($this->object_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 9);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I64, 10);
      $xfer += $output->writeI64($this->size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size_remaining !== null) {
      $xfer += $output->writeFieldBegin('size_remaining', TType::I64, 11);
      $xfer += $output->writeI64($this->size_remaining);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class network_info {
  static $_TSPEC;

  /**
   * @var string
   */
  public $adapter_name = "";
  /**
   * @var string
   */
  public $description = "";
  /**
   * @var string[]
   */
  public $dnss = null;
  /**
   * @var string[]
   */
  public $gateways = null;
  /**
   * @var string[]
   */
  public $ip_addresses = null;
  /**
   * @var bool
   */
  public $is_dhcp_v4 = false;
  /**
   * @var bool
   */
  public $is_dhcp_v6 = false;
  /**
   * @var string
   */
  public $mac_address = "";
  /**
   * @var string[]
   */
  public $subnet_masks = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'adapter_name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'dnss',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'gateways',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'ip_addresses',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'is_dhcp_v4',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'is_dhcp_v6',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'mac_address',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'subnet_masks',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['adapter_name'])) {
        $this->adapter_name = $vals['adapter_name'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['dnss'])) {
        $this->dnss = $vals['dnss'];
      }
      if (isset($vals['gateways'])) {
        $this->gateways = $vals['gateways'];
      }
      if (isset($vals['ip_addresses'])) {
        $this->ip_addresses = $vals['ip_addresses'];
      }
      if (isset($vals['is_dhcp_v4'])) {
        $this->is_dhcp_v4 = $vals['is_dhcp_v4'];
      }
      if (isset($vals['is_dhcp_v6'])) {
        $this->is_dhcp_v6 = $vals['is_dhcp_v6'];
      }
      if (isset($vals['mac_address'])) {
        $this->mac_address = $vals['mac_address'];
      }
      if (isset($vals['subnet_masks'])) {
        $this->subnet_masks = $vals['subnet_masks'];
      }
    }
  }

  public function getName() {
    return 'network_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->adapter_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->dnss = array();
            $_size16 = 0;
            $_etype19 = 0;
            $xfer += $input->readListBegin($_etype19, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $elem21 = null;
              $xfer += $input->readString($elem21);
              $this->dnss []= $elem21;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->gateways = array();
            $_size22 = 0;
            $_etype25 = 0;
            $xfer += $input->readListBegin($_etype25, $_size22);
            for ($_i26 = 0; $_i26 < $_size22; ++$_i26)
            {
              $elem27 = null;
              $xfer += $input->readString($elem27);
              $this->gateways []= $elem27;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->ip_addresses = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $xfer += $input->readString($elem33);
              $this->ip_addresses []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_dhcp_v4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_dhcp_v6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mac_address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->subnet_masks = array();
            $_size34 = 0;
            $_etype37 = 0;
            $xfer += $input->readListBegin($_etype37, $_size34);
            for ($_i38 = 0; $_i38 < $_size34; ++$_i38)
            {
              $elem39 = null;
              $xfer += $input->readString($elem39);
              $this->subnet_masks []= $elem39;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('network_info');
    if ($this->adapter_name !== null) {
      $xfer += $output->writeFieldBegin('adapter_name', TType::STRING, 1);
      $xfer += $output->writeString($this->adapter_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 2);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dnss !== null) {
      if (!is_array($this->dnss)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('dnss', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->dnss));
        {
          foreach ($this->dnss as $iter40)
          {
            $xfer += $output->writeString($iter40);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gateways !== null) {
      if (!is_array($this->gateways)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('gateways', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->gateways));
        {
          foreach ($this->gateways as $iter41)
          {
            $xfer += $output->writeString($iter41);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip_addresses !== null) {
      if (!is_array($this->ip_addresses)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ip_addresses', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRING, count($this->ip_addresses));
        {
          foreach ($this->ip_addresses as $iter42)
          {
            $xfer += $output->writeString($iter42);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_dhcp_v4 !== null) {
      $xfer += $output->writeFieldBegin('is_dhcp_v4', TType::BOOL, 6);
      $xfer += $output->writeBool($this->is_dhcp_v4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_dhcp_v6 !== null) {
      $xfer += $output->writeFieldBegin('is_dhcp_v6', TType::BOOL, 7);
      $xfer += $output->writeBool($this->is_dhcp_v6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mac_address !== null) {
      $xfer += $output->writeFieldBegin('mac_address', TType::STRING, 8);
      $xfer += $output->writeString($this->mac_address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subnet_masks !== null) {
      if (!is_array($this->subnet_masks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('subnet_masks', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRING, count($this->subnet_masks));
        {
          foreach ($this->subnet_masks as $iter43)
          {
            $xfer += $output->writeString($iter43);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class os_version_info {
  static $_TSPEC;

  /**
   * @var string
   */
  public $csd_version = "";
  /**
   * @var int
   */
  public $build_number = -1;
  /**
   * @var int
   */
  public $major_version = -1;
  /**
   * @var int
   */
  public $minor_version = -1;
  /**
   * @var int
   */
  public $platform_id = -1;
  /**
   * @var int
   */
  public $product_type = -1;
  /**
   * @var int
   */
  public $servicepack_major = -1;
  /**
   * @var int
   */
  public $servicepack_minor = -1;
  /**
   * @var int
   */
  public $suite_mask = -1;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'csd_version',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'build_number',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'major_version',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'minor_version',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'platform_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'product_type',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'servicepack_major',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'servicepack_minor',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'suite_mask',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['csd_version'])) {
        $this->csd_version = $vals['csd_version'];
      }
      if (isset($vals['build_number'])) {
        $this->build_number = $vals['build_number'];
      }
      if (isset($vals['major_version'])) {
        $this->major_version = $vals['major_version'];
      }
      if (isset($vals['minor_version'])) {
        $this->minor_version = $vals['minor_version'];
      }
      if (isset($vals['platform_id'])) {
        $this->platform_id = $vals['platform_id'];
      }
      if (isset($vals['product_type'])) {
        $this->product_type = $vals['product_type'];
      }
      if (isset($vals['servicepack_major'])) {
        $this->servicepack_major = $vals['servicepack_major'];
      }
      if (isset($vals['servicepack_minor'])) {
        $this->servicepack_minor = $vals['servicepack_minor'];
      }
      if (isset($vals['suite_mask'])) {
        $this->suite_mask = $vals['suite_mask'];
      }
    }
  }

  public function getName() {
    return 'os_version_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->csd_version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->build_number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->major_version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->minor_version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->platform_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->product_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->servicepack_major);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->servicepack_minor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->suite_mask);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('os_version_info');
    if ($this->csd_version !== null) {
      $xfer += $output->writeFieldBegin('csd_version', TType::STRING, 1);
      $xfer += $output->writeString($this->csd_version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->build_number !== null) {
      $xfer += $output->writeFieldBegin('build_number', TType::I32, 2);
      $xfer += $output->writeI32($this->build_number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->major_version !== null) {
      $xfer += $output->writeFieldBegin('major_version', TType::I32, 3);
      $xfer += $output->writeI32($this->major_version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->minor_version !== null) {
      $xfer += $output->writeFieldBegin('minor_version', TType::I32, 4);
      $xfer += $output->writeI32($this->minor_version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platform_id !== null) {
      $xfer += $output->writeFieldBegin('platform_id', TType::I32, 5);
      $xfer += $output->writeI32($this->platform_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->product_type !== null) {
      $xfer += $output->writeFieldBegin('product_type', TType::I16, 6);
      $xfer += $output->writeI16($this->product_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->servicepack_major !== null) {
      $xfer += $output->writeFieldBegin('servicepack_major', TType::I32, 7);
      $xfer += $output->writeI32($this->servicepack_major);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->servicepack_minor !== null) {
      $xfer += $output->writeFieldBegin('servicepack_minor', TType::I32, 8);
      $xfer += $output->writeI32($this->servicepack_minor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->suite_mask !== null) {
      $xfer += $output->writeFieldBegin('suite_mask', TType::I32, 9);
      $xfer += $output->writeI32($this->suite_mask);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_client_info {
  static $_TSPEC;

  /**
   * @var string
   */
  public $architecture = "";
  /**
   * @var string
   */
  public $client_name = "";
  /**
   * @var string
   */
  public $domain = "";
  /**
   * @var string
   */
  public $hal = "";
  /**
   * @var string
   */
  public $initiator_name = "";
  /**
   * @var bool
   */
  public $is_oem = false;
  /**
   * @var int
   */
  public $logical_processors = 0;
  /**
   * @var string
   */
  public $manufacturer = "";
  /**
   * @var string
   */
  public $os_name = "";
  /**
   * @var int
   */
  public $os_type = 0;
  /**
   * @var string
   */
  public $os_system_info = null;
  /**
   * @var int
   */
  public $physical_memory = 0;
  /**
   * @var int
   */
  public $processors = 0;
  /**
   * @var int
   */
  public $role = 0;
  /**
   * @var string
   */
  public $system_model = "";
  /**
   * @var string
   */
  public $system_root = "";
  /**
   * @var string
   */
  public $workgroup = "";
  /**
   * @var \saasame\mgmt\os_version_info
   */
  public $os_version = null;
  /**
   * @var \saasame\mgmt\disk_info[]
   */
  public $disk_infos = null;
  /**
   * @var \saasame\mgmt\partition_info[]
   */
  public $partition_infos = null;
  /**
   * @var \saasame\mgmt\volume_info[]
   */
  public $volume_infos = null;
  /**
   * @var \saasame\mgmt\network_info[]
   */
  public $network_infos = null;
  /**
   * @var string
   */
  public $client_id = "";
  /**
   * @var string
   */
  public $machine_id = "";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'architecture',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'client_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'domain',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'hal',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'initiator_name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'is_oem',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'logical_processors',
          'type' => TType::I16,
          ),
        8 => array(
          'var' => 'manufacturer',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'os_name',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'os_type',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'os_system_info',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'physical_memory',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'processors',
          'type' => TType::I16,
          ),
        14 => array(
          'var' => 'role',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'system_model',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'system_root',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'workgroup',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'os_version',
          'type' => TType::STRUCT,
          'class' => '\saasame\mgmt\os_version_info',
          ),
        19 => array(
          'var' => 'disk_infos',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\saasame\mgmt\disk_info',
            ),
          ),
        20 => array(
          'var' => 'partition_infos',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\saasame\mgmt\partition_info',
            ),
          ),
        21 => array(
          'var' => 'volume_infos',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\saasame\mgmt\volume_info',
            ),
          ),
        22 => array(
          'var' => 'network_infos',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\saasame\mgmt\network_info',
            ),
          ),
        23 => array(
          'var' => 'client_id',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'machine_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['architecture'])) {
        $this->architecture = $vals['architecture'];
      }
      if (isset($vals['client_name'])) {
        $this->client_name = $vals['client_name'];
      }
      if (isset($vals['domain'])) {
        $this->domain = $vals['domain'];
      }
      if (isset($vals['hal'])) {
        $this->hal = $vals['hal'];
      }
      if (isset($vals['initiator_name'])) {
        $this->initiator_name = $vals['initiator_name'];
      }
      if (isset($vals['is_oem'])) {
        $this->is_oem = $vals['is_oem'];
      }
      if (isset($vals['logical_processors'])) {
        $this->logical_processors = $vals['logical_processors'];
      }
      if (isset($vals['manufacturer'])) {
        $this->manufacturer = $vals['manufacturer'];
      }
      if (isset($vals['os_name'])) {
        $this->os_name = $vals['os_name'];
      }
      if (isset($vals['os_type'])) {
        $this->os_type = $vals['os_type'];
      }
      if (isset($vals['os_system_info'])) {
        $this->os_system_info = $vals['os_system_info'];
      }
      if (isset($vals['physical_memory'])) {
        $this->physical_memory = $vals['physical_memory'];
      }
      if (isset($vals['processors'])) {
        $this->processors = $vals['processors'];
      }
      if (isset($vals['role'])) {
        $this->role = $vals['role'];
      }
      if (isset($vals['system_model'])) {
        $this->system_model = $vals['system_model'];
      }
      if (isset($vals['system_root'])) {
        $this->system_root = $vals['system_root'];
      }
      if (isset($vals['workgroup'])) {
        $this->workgroup = $vals['workgroup'];
      }
      if (isset($vals['os_version'])) {
        $this->os_version = $vals['os_version'];
      }
      if (isset($vals['disk_infos'])) {
        $this->disk_infos = $vals['disk_infos'];
      }
      if (isset($vals['partition_infos'])) {
        $this->partition_infos = $vals['partition_infos'];
      }
      if (isset($vals['volume_infos'])) {
        $this->volume_infos = $vals['volume_infos'];
      }
      if (isset($vals['network_infos'])) {
        $this->network_infos = $vals['network_infos'];
      }
      if (isset($vals['client_id'])) {
        $this->client_id = $vals['client_id'];
      }
      if (isset($vals['machine_id'])) {
        $this->machine_id = $vals['machine_id'];
      }
    }
  }

  public function getName() {
    return 'physical_client_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->architecture);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->client_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->domain);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->hal);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->initiator_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_oem);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->logical_processors);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->manufacturer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->os_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->os_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->os_system_info);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->physical_memory);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->processors);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->role);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->system_model);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->system_root);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->workgroup);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRUCT) {
            $this->os_version = new \saasame\mgmt\os_version_info();
            $xfer += $this->os_version->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::SET) {
            $this->disk_infos = array();
            $_size44 = 0;
            $_etype47 = 0;
            $xfer += $input->readSetBegin($_etype47, $_size44);
            for ($_i48 = 0; $_i48 < $_size44; ++$_i48)
            {
              $elem49 = null;
              $elem49 = new \saasame\mgmt\disk_info();
              $xfer += $elem49->read($input);
              if (is_scalar($elem49)) {
                $this->disk_infos[$elem49] = true;
              } else {
                $this->disk_infos []= $elem49;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::SET) {
            $this->partition_infos = array();
            $_size50 = 0;
            $_etype53 = 0;
            $xfer += $input->readSetBegin($_etype53, $_size50);
            for ($_i54 = 0; $_i54 < $_size50; ++$_i54)
            {
              $elem55 = null;
              $elem55 = new \saasame\mgmt\partition_info();
              $xfer += $elem55->read($input);
              if (is_scalar($elem55)) {
                $this->partition_infos[$elem55] = true;
              } else {
                $this->partition_infos []= $elem55;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::SET) {
            $this->volume_infos = array();
            $_size56 = 0;
            $_etype59 = 0;
            $xfer += $input->readSetBegin($_etype59, $_size56);
            for ($_i60 = 0; $_i60 < $_size56; ++$_i60)
            {
              $elem61 = null;
              $elem61 = new \saasame\mgmt\volume_info();
              $xfer += $elem61->read($input);
              if (is_scalar($elem61)) {
                $this->volume_infos[$elem61] = true;
              } else {
                $this->volume_infos []= $elem61;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::SET) {
            $this->network_infos = array();
            $_size62 = 0;
            $_etype65 = 0;
            $xfer += $input->readSetBegin($_etype65, $_size62);
            for ($_i66 = 0; $_i66 < $_size62; ++$_i66)
            {
              $elem67 = null;
              $elem67 = new \saasame\mgmt\network_info();
              $xfer += $elem67->read($input);
              if (is_scalar($elem67)) {
                $this->network_infos[$elem67] = true;
              } else {
                $this->network_infos []= $elem67;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->client_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->machine_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_client_info');
    if ($this->architecture !== null) {
      $xfer += $output->writeFieldBegin('architecture', TType::STRING, 1);
      $xfer += $output->writeString($this->architecture);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->client_name !== null) {
      $xfer += $output->writeFieldBegin('client_name', TType::STRING, 2);
      $xfer += $output->writeString($this->client_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->domain !== null) {
      $xfer += $output->writeFieldBegin('domain', TType::STRING, 3);
      $xfer += $output->writeString($this->domain);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hal !== null) {
      $xfer += $output->writeFieldBegin('hal', TType::STRING, 4);
      $xfer += $output->writeString($this->hal);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->initiator_name !== null) {
      $xfer += $output->writeFieldBegin('initiator_name', TType::STRING, 5);
      $xfer += $output->writeString($this->initiator_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_oem !== null) {
      $xfer += $output->writeFieldBegin('is_oem', TType::BOOL, 6);
      $xfer += $output->writeBool($this->is_oem);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logical_processors !== null) {
      $xfer += $output->writeFieldBegin('logical_processors', TType::I16, 7);
      $xfer += $output->writeI16($this->logical_processors);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->manufacturer !== null) {
      $xfer += $output->writeFieldBegin('manufacturer', TType::STRING, 8);
      $xfer += $output->writeString($this->manufacturer);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->os_name !== null) {
      $xfer += $output->writeFieldBegin('os_name', TType::STRING, 9);
      $xfer += $output->writeString($this->os_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->os_type !== null) {
      $xfer += $output->writeFieldBegin('os_type', TType::I32, 10);
      $xfer += $output->writeI32($this->os_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->os_system_info !== null) {
      $xfer += $output->writeFieldBegin('os_system_info', TType::STRING, 11);
      $xfer += $output->writeString($this->os_system_info);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->physical_memory !== null) {
      $xfer += $output->writeFieldBegin('physical_memory', TType::I64, 12);
      $xfer += $output->writeI64($this->physical_memory);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->processors !== null) {
      $xfer += $output->writeFieldBegin('processors', TType::I16, 13);
      $xfer += $output->writeI16($this->processors);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->role !== null) {
      $xfer += $output->writeFieldBegin('role', TType::I32, 14);
      $xfer += $output->writeI32($this->role);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->system_model !== null) {
      $xfer += $output->writeFieldBegin('system_model', TType::STRING, 15);
      $xfer += $output->writeString($this->system_model);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->system_root !== null) {
      $xfer += $output->writeFieldBegin('system_root', TType::STRING, 16);
      $xfer += $output->writeString($this->system_root);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->workgroup !== null) {
      $xfer += $output->writeFieldBegin('workgroup', TType::STRING, 17);
      $xfer += $output->writeString($this->workgroup);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->os_version !== null) {
      if (!is_object($this->os_version)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('os_version', TType::STRUCT, 18);
      $xfer += $this->os_version->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disk_infos !== null) {
      if (!is_array($this->disk_infos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('disk_infos', TType::SET, 19);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->disk_infos));
        {
          foreach ($this->disk_infos as $iter68 => $iter69)
          {
            if (is_scalar($iter69)) {
            $xfer += $iter68->write($output);
            } else {
            $xfer += $iter69->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->partition_infos !== null) {
      if (!is_array($this->partition_infos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('partition_infos', TType::SET, 20);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->partition_infos));
        {
          foreach ($this->partition_infos as $iter70 => $iter71)
          {
            if (is_scalar($iter71)) {
            $xfer += $iter70->write($output);
            } else {
            $xfer += $iter71->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->volume_infos !== null) {
      if (!is_array($this->volume_infos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('volume_infos', TType::SET, 21);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->volume_infos));
        {
          foreach ($this->volume_infos as $iter72 => $iter73)
          {
            if (is_scalar($iter73)) {
            $xfer += $iter72->write($output);
            } else {
            $xfer += $iter73->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->network_infos !== null) {
      if (!is_array($this->network_infos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('network_infos', TType::SET, 22);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->network_infos));
        {
          foreach ($this->network_infos as $iter74 => $iter75)
          {
            if (is_scalar($iter75)) {
            $xfer += $iter74->write($output);
            } else {
            $xfer += $iter75->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->client_id !== null) {
      $xfer += $output->writeFieldBegin('client_id', TType::STRING, 23);
      $xfer += $output->writeString($this->client_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->machine_id !== null) {
      $xfer += $output->writeFieldBegin('machine_id', TType::STRING, 24);
      $xfer += $output->writeString($this->machine_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class virtual_host {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name_ref = "";
  /**
   * @var string
   */
  public $name = "";
  /**
   * @var string[]
   */
  public $ip_addresses = array(
  );
  /**
   * @var string
   */
  public $ip_address = "";
  /**
   * @var string
   */
  public $product_name = "";
  /**
   * @var string
   */
  public $version = "";
  /**
   * @var int
   */
  public $power_state =   0;
  /**
   * @var string
   */
  public $state = "";
  /**
   * @var bool
   */
  public $in_maintenance_mode = false;
  /**
   * @var array
   */
  public $vms = null;
  /**
   * @var array
   */
  public $datastores = null;
  /**
   * @var array
   */
  public $networks = null;
  /**
   * @var string
   */
  public $datacenter_name = "";
  /**
   * @var string
   */
  public $domain_name = "";
  /**
   * @var string
   */
  public $cluster_key = "";
  /**
   * @var string
   */
  public $full_name = "";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name_ref',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ip_addresses',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'ip_address',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'product_name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'version',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'power_state',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'state',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'in_maintenance_mode',
          'type' => TType::BOOL,
          ),
        10 => array(
          'var' => 'vms',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        11 => array(
          'var' => 'datastores',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        12 => array(
          'var' => 'networks',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        13 => array(
          'var' => 'datacenter_name',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'domain_name',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'cluster_key',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'full_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name_ref'])) {
        $this->name_ref = $vals['name_ref'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['ip_addresses'])) {
        $this->ip_addresses = $vals['ip_addresses'];
      }
      if (isset($vals['ip_address'])) {
        $this->ip_address = $vals['ip_address'];
      }
      if (isset($vals['product_name'])) {
        $this->product_name = $vals['product_name'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['power_state'])) {
        $this->power_state = $vals['power_state'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['in_maintenance_mode'])) {
        $this->in_maintenance_mode = $vals['in_maintenance_mode'];
      }
      if (isset($vals['vms'])) {
        $this->vms = $vals['vms'];
      }
      if (isset($vals['datastores'])) {
        $this->datastores = $vals['datastores'];
      }
      if (isset($vals['networks'])) {
        $this->networks = $vals['networks'];
      }
      if (isset($vals['datacenter_name'])) {
        $this->datacenter_name = $vals['datacenter_name'];
      }
      if (isset($vals['domain_name'])) {
        $this->domain_name = $vals['domain_name'];
      }
      if (isset($vals['cluster_key'])) {
        $this->cluster_key = $vals['cluster_key'];
      }
      if (isset($vals['full_name'])) {
        $this->full_name = $vals['full_name'];
      }
    }
  }

  public function getName() {
    return 'virtual_host';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name_ref);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->ip_addresses = array();
            $_size76 = 0;
            $_etype79 = 0;
            $xfer += $input->readListBegin($_etype79, $_size76);
            for ($_i80 = 0; $_i80 < $_size76; ++$_i80)
            {
              $elem81 = null;
              $xfer += $input->readString($elem81);
              $this->ip_addresses []= $elem81;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip_address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->product_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->power_state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->in_maintenance_mode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::MAP) {
            $this->vms = array();
            $_size82 = 0;
            $_ktype83 = 0;
            $_vtype84 = 0;
            $xfer += $input->readMapBegin($_ktype83, $_vtype84, $_size82);
            for ($_i86 = 0; $_i86 < $_size82; ++$_i86)
            {
              $key87 = '';
              $val88 = '';
              $xfer += $input->readString($key87);
              $xfer += $input->readString($val88);
              $this->vms[$key87] = $val88;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::MAP) {
            $this->datastores = array();
            $_size89 = 0;
            $_ktype90 = 0;
            $_vtype91 = 0;
            $xfer += $input->readMapBegin($_ktype90, $_vtype91, $_size89);
            for ($_i93 = 0; $_i93 < $_size89; ++$_i93)
            {
              $key94 = '';
              $val95 = '';
              $xfer += $input->readString($key94);
              $xfer += $input->readString($val95);
              $this->datastores[$key94] = $val95;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::MAP) {
            $this->networks = array();
            $_size96 = 0;
            $_ktype97 = 0;
            $_vtype98 = 0;
            $xfer += $input->readMapBegin($_ktype97, $_vtype98, $_size96);
            for ($_i100 = 0; $_i100 < $_size96; ++$_i100)
            {
              $key101 = '';
              $val102 = '';
              $xfer += $input->readString($key101);
              $xfer += $input->readString($val102);
              $this->networks[$key101] = $val102;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->datacenter_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->domain_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cluster_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->full_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('virtual_host');
    if ($this->name_ref !== null) {
      $xfer += $output->writeFieldBegin('name_ref', TType::STRING, 1);
      $xfer += $output->writeString($this->name_ref);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip_addresses !== null) {
      if (!is_array($this->ip_addresses)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ip_addresses', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->ip_addresses));
        {
          foreach ($this->ip_addresses as $iter103)
          {
            $xfer += $output->writeString($iter103);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip_address !== null) {
      $xfer += $output->writeFieldBegin('ip_address', TType::STRING, 4);
      $xfer += $output->writeString($this->ip_address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->product_name !== null) {
      $xfer += $output->writeFieldBegin('product_name', TType::STRING, 5);
      $xfer += $output->writeString($this->product_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::STRING, 6);
      $xfer += $output->writeString($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->power_state !== null) {
      $xfer += $output->writeFieldBegin('power_state', TType::I32, 7);
      $xfer += $output->writeI32($this->power_state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::STRING, 8);
      $xfer += $output->writeString($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->in_maintenance_mode !== null) {
      $xfer += $output->writeFieldBegin('in_maintenance_mode', TType::BOOL, 9);
      $xfer += $output->writeBool($this->in_maintenance_mode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vms !== null) {
      if (!is_array($this->vms)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('vms', TType::MAP, 10);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->vms));
        {
          foreach ($this->vms as $kiter104 => $viter105)
          {
            $xfer += $output->writeString($kiter104);
            $xfer += $output->writeString($viter105);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->datastores !== null) {
      if (!is_array($this->datastores)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('datastores', TType::MAP, 11);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->datastores));
        {
          foreach ($this->datastores as $kiter106 => $viter107)
          {
            $xfer += $output->writeString($kiter106);
            $xfer += $output->writeString($viter107);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->networks !== null) {
      if (!is_array($this->networks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('networks', TType::MAP, 12);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->networks));
        {
          foreach ($this->networks as $kiter108 => $viter109)
          {
            $xfer += $output->writeString($kiter108);
            $xfer += $output->writeString($viter109);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->datacenter_name !== null) {
      $xfer += $output->writeFieldBegin('datacenter_name', TType::STRING, 13);
      $xfer += $output->writeString($this->datacenter_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->domain_name !== null) {
      $xfer += $output->writeFieldBegin('domain_name', TType::STRING, 14);
      $xfer += $output->writeString($this->domain_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cluster_key !== null) {
      $xfer += $output->writeFieldBegin('cluster_key', TType::STRING, 15);
      $xfer += $output->writeString($this->cluster_key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->full_name !== null) {
      $xfer += $output->writeFieldBegin('full_name', TType::STRING, 16);
      $xfer += $output->writeString($this->full_name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class virtual_network_adapter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $key = 0;
  /**
   * @var string
   */
  public $name = "";
  /**
   * @var string
   */
  public $mac_address = "";
  /**
   * @var string
   */
  public $network = "";
  /**
   * @var string
   */
  public $port_group = "";
  /**
   * @var string
   */
  public $type = "";
  /**
   * @var bool
   */
  public $is_connected = false;
  /**
   * @var bool
   */
  public $is_start_connected = false;
  /**
   * @var bool
   */
  public $is_allow_guest_control = false;
  /**
   * @var string
   */
  public $address_type = "";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'mac_address',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'network',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'port_group',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'is_connected',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'is_start_connected',
          'type' => TType::BOOL,
          ),
        9 => array(
          'var' => 'is_allow_guest_control',
          'type' => TType::BOOL,
          ),
        10 => array(
          'var' => 'address_type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['mac_address'])) {
        $this->mac_address = $vals['mac_address'];
      }
      if (isset($vals['network'])) {
        $this->network = $vals['network'];
      }
      if (isset($vals['port_group'])) {
        $this->port_group = $vals['port_group'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['is_connected'])) {
        $this->is_connected = $vals['is_connected'];
      }
      if (isset($vals['is_start_connected'])) {
        $this->is_start_connected = $vals['is_start_connected'];
      }
      if (isset($vals['is_allow_guest_control'])) {
        $this->is_allow_guest_control = $vals['is_allow_guest_control'];
      }
      if (isset($vals['address_type'])) {
        $this->address_type = $vals['address_type'];
      }
    }
  }

  public function getName() {
    return 'virtual_network_adapter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mac_address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->network);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->port_group);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_connected);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_start_connected);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_allow_guest_control);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('virtual_network_adapter');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::I32, 1);
      $xfer += $output->writeI32($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mac_address !== null) {
      $xfer += $output->writeFieldBegin('mac_address', TType::STRING, 3);
      $xfer += $output->writeString($this->mac_address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->network !== null) {
      $xfer += $output->writeFieldBegin('network', TType::STRING, 4);
      $xfer += $output->writeString($this->network);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->port_group !== null) {
      $xfer += $output->writeFieldBegin('port_group', TType::STRING, 5);
      $xfer += $output->writeString($this->port_group);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 6);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_connected !== null) {
      $xfer += $output->writeFieldBegin('is_connected', TType::BOOL, 7);
      $xfer += $output->writeBool($this->is_connected);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_start_connected !== null) {
      $xfer += $output->writeFieldBegin('is_start_connected', TType::BOOL, 8);
      $xfer += $output->writeBool($this->is_start_connected);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_allow_guest_control !== null) {
      $xfer += $output->writeFieldBegin('is_allow_guest_control', TType::BOOL, 9);
      $xfer += $output->writeBool($this->is_allow_guest_control);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address_type !== null) {
      $xfer += $output->writeFieldBegin('address_type', TType::STRING, 10);
      $xfer += $output->writeString($this->address_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class virtual_machine_snapshots {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = "";
  /**
   * @var string
   */
  public $description = "";
  /**
   * @var string
   */
  public $create_time = "";
  /**
   * @var bool
   */
  public $quiesced = false;
  /**
   * @var int
   */
  public $id = -1;
  /**
   * @var string
   */
  public $backup_manifest = "";
  /**
   * @var bool
   */
  public $replay_supported = false;
  /**
   * @var \saasame\mgmt\virtual_machine_snapshots[]
   */
  public $child_snapshot_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'create_time',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'quiesced',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'backup_manifest',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'replay_supported',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'child_snapshot_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\saasame\mgmt\virtual_machine_snapshots',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['create_time'])) {
        $this->create_time = $vals['create_time'];
      }
      if (isset($vals['quiesced'])) {
        $this->quiesced = $vals['quiesced'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['backup_manifest'])) {
        $this->backup_manifest = $vals['backup_manifest'];
      }
      if (isset($vals['replay_supported'])) {
        $this->replay_supported = $vals['replay_supported'];
      }
      if (isset($vals['child_snapshot_list'])) {
        $this->child_snapshot_list = $vals['child_snapshot_list'];
      }
    }
  }

  public function getName() {
    return 'virtual_machine_snapshots';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->create_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->quiesced);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->backup_manifest);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->replay_supported);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->child_snapshot_list = array();
            $_size110 = 0;
            $_etype113 = 0;
            $xfer += $input->readListBegin($_etype113, $_size110);
            for ($_i114 = 0; $_i114 < $_size110; ++$_i114)
            {
              $elem115 = null;
              $elem115 = new \saasame\mgmt\virtual_machine_snapshots();
              $xfer += $elem115->read($input);
              $this->child_snapshot_list []= $elem115;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('virtual_machine_snapshots');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 2);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_time !== null) {
      $xfer += $output->writeFieldBegin('create_time', TType::STRING, 3);
      $xfer += $output->writeString($this->create_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->quiesced !== null) {
      $xfer += $output->writeFieldBegin('quiesced', TType::BOOL, 4);
      $xfer += $output->writeBool($this->quiesced);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 5);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backup_manifest !== null) {
      $xfer += $output->writeFieldBegin('backup_manifest', TType::STRING, 6);
      $xfer += $output->writeString($this->backup_manifest);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replay_supported !== null) {
      $xfer += $output->writeFieldBegin('replay_supported', TType::BOOL, 7);
      $xfer += $output->writeBool($this->replay_supported);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->child_snapshot_list !== null) {
      if (!is_array($this->child_snapshot_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('child_snapshot_list', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRUCT, count($this->child_snapshot_list));
        {
          foreach ($this->child_snapshot_list as $iter116)
          {
            $xfer += $iter116->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class virtual_disk_info {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = "";
  /**
   * @var string
   */
  public $name = "";
  /**
   * @var int
   */
  public $size_kb = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'size_kb',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['size_kb'])) {
        $this->size_kb = $vals['size_kb'];
      }
    }
  }

  public function getName() {
    return 'virtual_disk_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->size_kb);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('virtual_disk_info');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size_kb !== null) {
      $xfer += $output->writeFieldBegin('size_kb', TType::I64, 3);
      $xfer += $output->writeI64($this->size_kb);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class virtual_machine {
  static $_TSPEC;

  /**
   * @var string
   */
  public $uuid = "";
  /**
   * @var string
   */
  public $name = "";
  /**
   * @var string
   */
  public $host_key = "";
  /**
   * @var string
   */
  public $host_ip = "";
  /**
   * @var string
   */
  public $host_name = "";
  /**
   * @var string
   */
  public $cluster_key = "";
  /**
   * @var string
   */
  public $cluster_name = "";
  /**
   * @var string
   */
  public $annotation = "";
  /**
   * @var bool
   */
  public $is_cpu_hot_add = false;
  /**
   * @var bool
   */
  public $is_cpu_hot_remove = false;
  /**
   * @var int
   */
  public $memory_mb = 0;
  /**
   * @var int
   */
  public $number_of_cpu = 0;
  /**
   * @var bool
   */
  public $is_template = false;
  /**
   * @var string
   */
  public $config_path = "";
  /**
   * @var string
   */
  public $config_path_file = "";
  /**
   * @var int
   */
  public $version = 0;
  /**
   * @var int
   */
  public $power_state =   0;
  /**
   * @var int
   */
  public $connection_state =   0;
  /**
   * @var int
   */
  public $tools_status =   0;
  /**
   * @var int
   */
  public $firmware =   0;
  /**
   * @var int
   */
  public $guest_os_type =   0;
  /**
   * @var string
   */
  public $guest_id = "";
  /**
   * @var string
   */
  public $guest_full_name = "";
  /**
   * @var bool
   */
  public $is_disk_uuid_enabled = false;
  /**
   * @var string
   */
  public $folder_path = "";
  /**
   * @var string
   */
  public $resource_pool_path = "";
  /**
   * @var \saasame\mgmt\virtual_disk_info[]
   */
  public $disks = null;
  /**
   * @var array
   */
  public $networks = null;
  /**
   * @var string
   */
  public $datacenter_name = "";
  /**
   * @var \saasame\mgmt\virtual_network_adapter[]
   */
  public $network_adapters = null;
  /**
   * @var \saasame\mgmt\virtual_machine_snapshots[]
   */
  public $root_snapshot_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uuid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'host_key',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'host_ip',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'host_name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'cluster_key',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'cluster_name',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'annotation',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'is_cpu_hot_add',
          'type' => TType::BOOL,
          ),
        10 => array(
          'var' => 'is_cpu_hot_remove',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'memory_mb',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'number_of_cpu',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'is_template',
          'type' => TType::BOOL,
          ),
        14 => array(
          'var' => 'config_path',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'config_path_file',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'version',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'power_state',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'connection_state',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'tools_status',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'firmware',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'guest_os_type',
          'type' => TType::I32,
          ),
        22 => array(
          'var' => 'guest_id',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'guest_full_name',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'is_disk_uuid_enabled',
          'type' => TType::BOOL,
          ),
        25 => array(
          'var' => 'folder_path',
          'type' => TType::STRING,
          ),
        26 => array(
          'var' => 'resource_pool_path',
          'type' => TType::STRING,
          ),
        27 => array(
          'var' => 'disks',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\saasame\mgmt\virtual_disk_info',
            ),
          ),
        28 => array(
          'var' => 'networks',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        29 => array(
          'var' => 'datacenter_name',
          'type' => TType::STRING,
          ),
        30 => array(
          'var' => 'network_adapters',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\saasame\mgmt\virtual_network_adapter',
            ),
          ),
        31 => array(
          'var' => 'root_snapshot_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\saasame\mgmt\virtual_machine_snapshots',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uuid'])) {
        $this->uuid = $vals['uuid'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['host_key'])) {
        $this->host_key = $vals['host_key'];
      }
      if (isset($vals['host_ip'])) {
        $this->host_ip = $vals['host_ip'];
      }
      if (isset($vals['host_name'])) {
        $this->host_name = $vals['host_name'];
      }
      if (isset($vals['cluster_key'])) {
        $this->cluster_key = $vals['cluster_key'];
      }
      if (isset($vals['cluster_name'])) {
        $this->cluster_name = $vals['cluster_name'];
      }
      if (isset($vals['annotation'])) {
        $this->annotation = $vals['annotation'];
      }
      if (isset($vals['is_cpu_hot_add'])) {
        $this->is_cpu_hot_add = $vals['is_cpu_hot_add'];
      }
      if (isset($vals['is_cpu_hot_remove'])) {
        $this->is_cpu_hot_remove = $vals['is_cpu_hot_remove'];
      }
      if (isset($vals['memory_mb'])) {
        $this->memory_mb = $vals['memory_mb'];
      }
      if (isset($vals['number_of_cpu'])) {
        $this->number_of_cpu = $vals['number_of_cpu'];
      }
      if (isset($vals['is_template'])) {
        $this->is_template = $vals['is_template'];
      }
      if (isset($vals['config_path'])) {
        $this->config_path = $vals['config_path'];
      }
      if (isset($vals['config_path_file'])) {
        $this->config_path_file = $vals['config_path_file'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['power_state'])) {
        $this->power_state = $vals['power_state'];
      }
      if (isset($vals['connection_state'])) {
        $this->connection_state = $vals['connection_state'];
      }
      if (isset($vals['tools_status'])) {
        $this->tools_status = $vals['tools_status'];
      }
      if (isset($vals['firmware'])) {
        $this->firmware = $vals['firmware'];
      }
      if (isset($vals['guest_os_type'])) {
        $this->guest_os_type = $vals['guest_os_type'];
      }
      if (isset($vals['guest_id'])) {
        $this->guest_id = $vals['guest_id'];
      }
      if (isset($vals['guest_full_name'])) {
        $this->guest_full_name = $vals['guest_full_name'];
      }
      if (isset($vals['is_disk_uuid_enabled'])) {
        $this->is_disk_uuid_enabled = $vals['is_disk_uuid_enabled'];
      }
      if (isset($vals['folder_path'])) {
        $this->folder_path = $vals['folder_path'];
      }
      if (isset($vals['resource_pool_path'])) {
        $this->resource_pool_path = $vals['resource_pool_path'];
      }
      if (isset($vals['disks'])) {
        $this->disks = $vals['disks'];
      }
      if (isset($vals['networks'])) {
        $this->networks = $vals['networks'];
      }
      if (isset($vals['datacenter_name'])) {
        $this->datacenter_name = $vals['datacenter_name'];
      }
      if (isset($vals['network_adapters'])) {
        $this->network_adapters = $vals['network_adapters'];
      }
      if (isset($vals['root_snapshot_list'])) {
        $this->root_snapshot_list = $vals['root_snapshot_list'];
      }
    }
  }

  public function getName() {
    return 'virtual_machine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host_ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cluster_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cluster_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->annotation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_cpu_hot_add);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_cpu_hot_remove);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memory_mb);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->number_of_cpu);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_template);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->config_path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->config_path_file);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->power_state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->connection_state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tools_status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->firmware);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->guest_os_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->guest_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->guest_full_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_disk_uuid_enabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->folder_path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->resource_pool_path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::LST) {
            $this->disks = array();
            $_size117 = 0;
            $_etype120 = 0;
            $xfer += $input->readListBegin($_etype120, $_size117);
            for ($_i121 = 0; $_i121 < $_size117; ++$_i121)
            {
              $elem122 = null;
              $elem122 = new \saasame\mgmt\virtual_disk_info();
              $xfer += $elem122->read($input);
              $this->disks []= $elem122;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::MAP) {
            $this->networks = array();
            $_size123 = 0;
            $_ktype124 = 0;
            $_vtype125 = 0;
            $xfer += $input->readMapBegin($_ktype124, $_vtype125, $_size123);
            for ($_i127 = 0; $_i127 < $_size123; ++$_i127)
            {
              $key128 = '';
              $val129 = '';
              $xfer += $input->readString($key128);
              $xfer += $input->readString($val129);
              $this->networks[$key128] = $val129;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->datacenter_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::LST) {
            $this->network_adapters = array();
            $_size130 = 0;
            $_etype133 = 0;
            $xfer += $input->readListBegin($_etype133, $_size130);
            for ($_i134 = 0; $_i134 < $_size130; ++$_i134)
            {
              $elem135 = null;
              $elem135 = new \saasame\mgmt\virtual_network_adapter();
              $xfer += $elem135->read($input);
              $this->network_adapters []= $elem135;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::LST) {
            $this->root_snapshot_list = array();
            $_size136 = 0;
            $_etype139 = 0;
            $xfer += $input->readListBegin($_etype139, $_size136);
            for ($_i140 = 0; $_i140 < $_size136; ++$_i140)
            {
              $elem141 = null;
              $elem141 = new \saasame\mgmt\virtual_machine_snapshots();
              $xfer += $elem141->read($input);
              $this->root_snapshot_list []= $elem141;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('virtual_machine');
    if ($this->uuid !== null) {
      $xfer += $output->writeFieldBegin('uuid', TType::STRING, 1);
      $xfer += $output->writeString($this->uuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host_key !== null) {
      $xfer += $output->writeFieldBegin('host_key', TType::STRING, 3);
      $xfer += $output->writeString($this->host_key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host_ip !== null) {
      $xfer += $output->writeFieldBegin('host_ip', TType::STRING, 4);
      $xfer += $output->writeString($this->host_ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host_name !== null) {
      $xfer += $output->writeFieldBegin('host_name', TType::STRING, 5);
      $xfer += $output->writeString($this->host_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cluster_key !== null) {
      $xfer += $output->writeFieldBegin('cluster_key', TType::STRING, 6);
      $xfer += $output->writeString($this->cluster_key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cluster_name !== null) {
      $xfer += $output->writeFieldBegin('cluster_name', TType::STRING, 7);
      $xfer += $output->writeString($this->cluster_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->annotation !== null) {
      $xfer += $output->writeFieldBegin('annotation', TType::STRING, 8);
      $xfer += $output->writeString($this->annotation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_cpu_hot_add !== null) {
      $xfer += $output->writeFieldBegin('is_cpu_hot_add', TType::BOOL, 9);
      $xfer += $output->writeBool($this->is_cpu_hot_add);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_cpu_hot_remove !== null) {
      $xfer += $output->writeFieldBegin('is_cpu_hot_remove', TType::BOOL, 10);
      $xfer += $output->writeBool($this->is_cpu_hot_remove);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->memory_mb !== null) {
      $xfer += $output->writeFieldBegin('memory_mb', TType::I32, 11);
      $xfer += $output->writeI32($this->memory_mb);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number_of_cpu !== null) {
      $xfer += $output->writeFieldBegin('number_of_cpu', TType::I32, 12);
      $xfer += $output->writeI32($this->number_of_cpu);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_template !== null) {
      $xfer += $output->writeFieldBegin('is_template', TType::BOOL, 13);
      $xfer += $output->writeBool($this->is_template);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->config_path !== null) {
      $xfer += $output->writeFieldBegin('config_path', TType::STRING, 14);
      $xfer += $output->writeString($this->config_path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->config_path_file !== null) {
      $xfer += $output->writeFieldBegin('config_path_file', TType::STRING, 15);
      $xfer += $output->writeString($this->config_path_file);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 16);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->power_state !== null) {
      $xfer += $output->writeFieldBegin('power_state', TType::I32, 17);
      $xfer += $output->writeI32($this->power_state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->connection_state !== null) {
      $xfer += $output->writeFieldBegin('connection_state', TType::I32, 18);
      $xfer += $output->writeI32($this->connection_state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tools_status !== null) {
      $xfer += $output->writeFieldBegin('tools_status', TType::I32, 19);
      $xfer += $output->writeI32($this->tools_status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->firmware !== null) {
      $xfer += $output->writeFieldBegin('firmware', TType::I32, 20);
      $xfer += $output->writeI32($this->firmware);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->guest_os_type !== null) {
      $xfer += $output->writeFieldBegin('guest_os_type', TType::I32, 21);
      $xfer += $output->writeI32($this->guest_os_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->guest_id !== null) {
      $xfer += $output->writeFieldBegin('guest_id', TType::STRING, 22);
      $xfer += $output->writeString($this->guest_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->guest_full_name !== null) {
      $xfer += $output->writeFieldBegin('guest_full_name', TType::STRING, 23);
      $xfer += $output->writeString($this->guest_full_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_disk_uuid_enabled !== null) {
      $xfer += $output->writeFieldBegin('is_disk_uuid_enabled', TType::BOOL, 24);
      $xfer += $output->writeBool($this->is_disk_uuid_enabled);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->folder_path !== null) {
      $xfer += $output->writeFieldBegin('folder_path', TType::STRING, 25);
      $xfer += $output->writeString($this->folder_path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resource_pool_path !== null) {
      $xfer += $output->writeFieldBegin('resource_pool_path', TType::STRING, 26);
      $xfer += $output->writeString($this->resource_pool_path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disks !== null) {
      if (!is_array($this->disks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('disks', TType::LST, 27);
      {
        $output->writeListBegin(TType::STRUCT, count($this->disks));
        {
          foreach ($this->disks as $iter142)
          {
            $xfer += $iter142->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->networks !== null) {
      if (!is_array($this->networks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('networks', TType::MAP, 28);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->networks));
        {
          foreach ($this->networks as $kiter143 => $viter144)
          {
            $xfer += $output->writeString($kiter143);
            $xfer += $output->writeString($viter144);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->datacenter_name !== null) {
      $xfer += $output->writeFieldBegin('datacenter_name', TType::STRING, 29);
      $xfer += $output->writeString($this->datacenter_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->network_adapters !== null) {
      if (!is_array($this->network_adapters)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('network_adapters', TType::LST, 30);
      {
        $output->writeListBegin(TType::STRUCT, count($this->network_adapters));
        {
          foreach ($this->network_adapters as $iter145)
          {
            $xfer += $iter145->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->root_snapshot_list !== null) {
      if (!is_array($this->root_snapshot_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('root_snapshot_list', TType::LST, 31);
      {
        $output->writeListBegin(TType::STRUCT, count($this->root_snapshot_list));
        {
          foreach ($this->root_snapshot_list as $iter146)
          {
            $xfer += $iter146->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class invalid_operation extends TException {
  static $_TSPEC;

  /**
   * @var int
   */
  public $what_op = null;
  /**
   * @var string
   */
  public $why = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'what_op',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'why',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['what_op'])) {
        $this->what_op = $vals['what_op'];
      }
      if (isset($vals['why'])) {
        $this->why = $vals['why'];
      }
    }
  }

  public function getName() {
    return 'invalid_operation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->what_op);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->why);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('invalid_operation');
    if ($this->what_op !== null) {
      $xfer += $output->writeFieldBegin('what_op', TType::I32, 1);
      $xfer += $output->writeI32($this->what_op);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->why !== null) {
      $xfer += $output->writeFieldBegin('why', TType::STRING, 2);
      $xfer += $output->writeString($this->why);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class job_trigger {
  static $_TSPEC;

  /**
   * @var string
   */
  public $start = "";
  /**
   * @var int
   */
  public $interval = 15;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'interval',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['interval'])) {
        $this->interval = $vals['interval'];
      }
    }
  }

  public function getName() {
    return 'job_trigger';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->interval);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('job_trigger');
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 1);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->interval !== null) {
      $xfer += $output->writeFieldBegin('interval', TType::I32, 2);
      $xfer += $output->writeI32($this->interval);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class output_folder {
  static $_TSPEC;

  /**
   * @var string
   */
  public $folder = "";
  /**
   * @var string
   */
  public $username = "";
  /**
   * @var string
   */
  public $password = "";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'folder',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['folder'])) {
        $this->folder = $vals['folder'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
    }
  }

  public function getName() {
    return 'output_folder';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->folder);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('output_folder');
    if ($this->folder !== null) {
      $xfer += $output->writeFieldBegin('folder', TType::STRING, 1);
      $xfer += $output->writeString($this->folder);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 2);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 3);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class create_job_detail {
  static $_TSPEC;

  /**
   * @var string
   */
  public $host = "";
  /**
   * @var string
   */
  public $username = "";
  /**
   * @var string
   */
  public $password = "";
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var bool
   */
  public $select_all = false;
  /**
   * @var int[]
   */
  public $disks = null;
  /**
   * @var string
   */
  public $virtual_machine_id = "";
  /**
   * @var string[]
   */
  public $vdisks = null;
  /**
   * @var \saasame\mgmt\output_folder
   */
  public $output = null;
  /**
   * @var string
   */
  public $display_name = "";
  /**
   * @var \saasame\mgmt\job_trigger[]
   */
  public $triggers = null;
  /**
   * @var string
   */
  public $url = "";
  /**
   * @var string
   */
  public $post = "";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'host',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'select_all',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'disks',
          'type' => TType::SET,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        7 => array(
          'var' => 'virtual_machine_id',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'vdisks',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        9 => array(
          'var' => 'output',
          'type' => TType::STRUCT,
          'class' => '\saasame\mgmt\output_folder',
          ),
        10 => array(
          'var' => 'display_name',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'triggers',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\saasame\mgmt\job_trigger',
            ),
          ),
        12 => array(
          'var' => 'url',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'post',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['select_all'])) {
        $this->select_all = $vals['select_all'];
      }
      if (isset($vals['disks'])) {
        $this->disks = $vals['disks'];
      }
      if (isset($vals['virtual_machine_id'])) {
        $this->virtual_machine_id = $vals['virtual_machine_id'];
      }
      if (isset($vals['vdisks'])) {
        $this->vdisks = $vals['vdisks'];
      }
      if (isset($vals['output'])) {
        $this->output = $vals['output'];
      }
      if (isset($vals['display_name'])) {
        $this->display_name = $vals['display_name'];
      }
      if (isset($vals['triggers'])) {
        $this->triggers = $vals['triggers'];
      }
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
      if (isset($vals['post'])) {
        $this->post = $vals['post'];
      }
    }
  }

  public function getName() {
    return 'create_job_detail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->select_all);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::SET) {
            $this->disks = array();
            $_size147 = 0;
            $_etype150 = 0;
            $xfer += $input->readSetBegin($_etype150, $_size147);
            for ($_i151 = 0; $_i151 < $_size147; ++$_i151)
            {
              $elem152 = null;
              $xfer += $input->readI32($elem152);
              if (is_scalar($elem152)) {
                $this->disks[$elem152] = true;
              } else {
                $this->disks []= $elem152;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->virtual_machine_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::SET) {
            $this->vdisks = array();
            $_size153 = 0;
            $_etype156 = 0;
            $xfer += $input->readSetBegin($_etype156, $_size153);
            for ($_i157 = 0; $_i157 < $_size153; ++$_i157)
            {
              $elem158 = null;
              $xfer += $input->readString($elem158);
              if (is_scalar($elem158)) {
                $this->vdisks[$elem158] = true;
              } else {
                $this->vdisks []= $elem158;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->output = new \saasame\mgmt\output_folder();
            $xfer += $this->output->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->display_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->triggers = array();
            $_size159 = 0;
            $_etype162 = 0;
            $xfer += $input->readListBegin($_etype162, $_size159);
            for ($_i163 = 0; $_i163 < $_size159; ++$_i163)
            {
              $elem164 = null;
              $elem164 = new \saasame\mgmt\job_trigger();
              $xfer += $elem164->read($input);
              $this->triggers []= $elem164;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->post);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('create_job_detail');
    if ($this->host !== null) {
      $xfer += $output->writeFieldBegin('host', TType::STRING, 1);
      $xfer += $output->writeString($this->host);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 2);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 3);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 4);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->select_all !== null) {
      $xfer += $output->writeFieldBegin('select_all', TType::BOOL, 5);
      $xfer += $output->writeBool($this->select_all);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disks !== null) {
      if (!is_array($this->disks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('disks', TType::SET, 6);
      {
        $output->writeSetBegin(TType::I32, count($this->disks));
        {
          foreach ($this->disks as $iter165 => $iter166)
          {
            if (is_scalar($iter166)) {
            $xfer += $output->writeI32($iter165);
            } else {
            $xfer += $output->writeI32($iter166);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->virtual_machine_id !== null) {
      $xfer += $output->writeFieldBegin('virtual_machine_id', TType::STRING, 7);
      $xfer += $output->writeString($this->virtual_machine_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vdisks !== null) {
      if (!is_array($this->vdisks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('vdisks', TType::SET, 8);
      {
        $output->writeSetBegin(TType::STRING, count($this->vdisks));
        {
          foreach ($this->vdisks as $iter167 => $iter168)
          {
            if (is_scalar($iter168)) {
            $xfer += $output->writeString($iter167);
            } else {
            $xfer += $output->writeString($iter168);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->output !== null) {
      if (!is_object($this->output)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('output', TType::STRUCT, 9);
      $xfer += $this->output->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->display_name !== null) {
      $xfer += $output->writeFieldBegin('display_name', TType::STRING, 10);
      $xfer += $output->writeString($this->display_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->triggers !== null) {
      if (!is_array($this->triggers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('triggers', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRUCT, count($this->triggers));
        {
          foreach ($this->triggers as $iter169)
          {
            $xfer += $iter169->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 12);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->post !== null) {
      $xfer += $output->writeFieldBegin('post', TType::STRING, 13);
      $xfer += $output->writeString($this->post);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class job_history {
  static $_TSPEC;

  /**
   * @var string
   */
  public $time = "";
  /**
   * @var int
   */
  public $state =   1;
  /**
   * @var int
   */
  public $error = 0;
  /**
   * @var string
   */
  public $description = "";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'time',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'state',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
    }
  }

  public function getName() {
    return 'job_history';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('job_history');
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::STRING, 1);
      $xfer += $output->writeString($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 2);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::I32, 3);
      $xfer += $output->writeI32($this->error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 4);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class job_detail {
  static $_TSPEC;

  /**
   * @var string
   */
  public $id = "";
  /**
   * @var string
   */
  public $host = "";
  /**
   * @var string
   */
  public $username = "";
  /**
   * @var string
   */
  public $password = "";
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int[]
   */
  public $disks = null;
  /**
   * @var string
   */
  public $virtual_machine_id = "";
  /**
   * @var string[]
   */
  public $vdisks = null;
  /**
   * @var \saasame\mgmt\output_folder
   */
  public $output = null;
  /**
   * @var int
   */
  public $state =   1;
  /**
   * @var array
   */
  public $original_size = null;
  /**
   * @var array
   */
  public $backup_progress = null;
  /**
   * @var array
   */
  public $output_files = null;
  /**
   * @var int
   */
  public $what = 0;
  /**
   * @var string
   */
  public $why = "";
  /**
   * @var string
   */
  public $created_time = "";
  /**
   * @var int
   */
  public $created_time_ll = 0;
  /**
   * @var string
   */
  public $display_name = "";
  /**
   * @var \saasame\mgmt\job_trigger[]
   */
  public $triggers = null;
  /**
   * @var \saasame\mgmt\job_history[]
   */
  public $histories = null;
  /**
   * @var string
   */
  public $url = "";
  /**
   * @var string
   */
  public $post = "";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'host',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'disks',
          'type' => TType::SET,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        7 => array(
          'var' => 'virtual_machine_id',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'vdisks',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        9 => array(
          'var' => 'output',
          'type' => TType::STRUCT,
          'class' => '\saasame\mgmt\output_folder',
          ),
        10 => array(
          'var' => 'state',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'original_size',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I64,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I64,
            ),
          ),
        12 => array(
          'var' => 'backup_progress',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I64,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I64,
            ),
          ),
        13 => array(
          'var' => 'output_files',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        14 => array(
          'var' => 'what',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'why',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'created_time',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'created_time_ll',
          'type' => TType::I64,
          ),
        18 => array(
          'var' => 'display_name',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'triggers',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\saasame\mgmt\job_trigger',
            ),
          ),
        20 => array(
          'var' => 'histories',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\saasame\mgmt\job_history',
            ),
          ),
        21 => array(
          'var' => 'url',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'post',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['disks'])) {
        $this->disks = $vals['disks'];
      }
      if (isset($vals['virtual_machine_id'])) {
        $this->virtual_machine_id = $vals['virtual_machine_id'];
      }
      if (isset($vals['vdisks'])) {
        $this->vdisks = $vals['vdisks'];
      }
      if (isset($vals['output'])) {
        $this->output = $vals['output'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['original_size'])) {
        $this->original_size = $vals['original_size'];
      }
      if (isset($vals['backup_progress'])) {
        $this->backup_progress = $vals['backup_progress'];
      }
      if (isset($vals['output_files'])) {
        $this->output_files = $vals['output_files'];
      }
      if (isset($vals['what'])) {
        $this->what = $vals['what'];
      }
      if (isset($vals['why'])) {
        $this->why = $vals['why'];
      }
      if (isset($vals['created_time'])) {
        $this->created_time = $vals['created_time'];
      }
      if (isset($vals['created_time_ll'])) {
        $this->created_time_ll = $vals['created_time_ll'];
      }
      if (isset($vals['display_name'])) {
        $this->display_name = $vals['display_name'];
      }
      if (isset($vals['triggers'])) {
        $this->triggers = $vals['triggers'];
      }
      if (isset($vals['histories'])) {
        $this->histories = $vals['histories'];
      }
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
      if (isset($vals['post'])) {
        $this->post = $vals['post'];
      }
    }
  }

  public function getName() {
    return 'job_detail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::SET) {
            $this->disks = array();
            $_size170 = 0;
            $_etype173 = 0;
            $xfer += $input->readSetBegin($_etype173, $_size170);
            for ($_i174 = 0; $_i174 < $_size170; ++$_i174)
            {
              $elem175 = null;
              $xfer += $input->readI32($elem175);
              if (is_scalar($elem175)) {
                $this->disks[$elem175] = true;
              } else {
                $this->disks []= $elem175;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->virtual_machine_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::SET) {
            $this->vdisks = array();
            $_size176 = 0;
            $_etype179 = 0;
            $xfer += $input->readSetBegin($_etype179, $_size176);
            for ($_i180 = 0; $_i180 < $_size176; ++$_i180)
            {
              $elem181 = null;
              $xfer += $input->readString($elem181);
              if (is_scalar($elem181)) {
                $this->vdisks[$elem181] = true;
              } else {
                $this->vdisks []= $elem181;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->output = new \saasame\mgmt\output_folder();
            $xfer += $this->output->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::MAP) {
            $this->original_size = array();
            $_size182 = 0;
            $_ktype183 = 0;
            $_vtype184 = 0;
            $xfer += $input->readMapBegin($_ktype183, $_vtype184, $_size182);
            for ($_i186 = 0; $_i186 < $_size182; ++$_i186)
            {
              $key187 = '';
              $val188 = 0;
              $xfer += $input->readString($key187);
              $xfer += $input->readI64($val188);
              $this->original_size[$key187] = $val188;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::MAP) {
            $this->backup_progress = array();
            $_size189 = 0;
            $_ktype190 = 0;
            $_vtype191 = 0;
            $xfer += $input->readMapBegin($_ktype190, $_vtype191, $_size189);
            for ($_i193 = 0; $_i193 < $_size189; ++$_i193)
            {
              $key194 = '';
              $val195 = 0;
              $xfer += $input->readString($key194);
              $xfer += $input->readI64($val195);
              $this->backup_progress[$key194] = $val195;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::MAP) {
            $this->output_files = array();
            $_size196 = 0;
            $_ktype197 = 0;
            $_vtype198 = 0;
            $xfer += $input->readMapBegin($_ktype197, $_vtype198, $_size196);
            for ($_i200 = 0; $_i200 < $_size196; ++$_i200)
            {
              $key201 = '';
              $val202 = '';
              $xfer += $input->readString($key201);
              $xfer += $input->readString($val202);
              $this->output_files[$key201] = $val202;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->what);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->why);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->created_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->created_time_ll);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->display_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::LST) {
            $this->triggers = array();
            $_size203 = 0;
            $_etype206 = 0;
            $xfer += $input->readListBegin($_etype206, $_size203);
            for ($_i207 = 0; $_i207 < $_size203; ++$_i207)
            {
              $elem208 = null;
              $elem208 = new \saasame\mgmt\job_trigger();
              $xfer += $elem208->read($input);
              $this->triggers []= $elem208;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::LST) {
            $this->histories = array();
            $_size209 = 0;
            $_etype212 = 0;
            $xfer += $input->readListBegin($_etype212, $_size209);
            for ($_i213 = 0; $_i213 < $_size209; ++$_i213)
            {
              $elem214 = null;
              $elem214 = new \saasame\mgmt\job_history();
              $xfer += $elem214->read($input);
              $this->histories []= $elem214;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->post);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('job_detail');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host !== null) {
      $xfer += $output->writeFieldBegin('host', TType::STRING, 2);
      $xfer += $output->writeString($this->host);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 3);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 4);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 5);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disks !== null) {
      if (!is_array($this->disks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('disks', TType::SET, 6);
      {
        $output->writeSetBegin(TType::I32, count($this->disks));
        {
          foreach ($this->disks as $iter215 => $iter216)
          {
            if (is_scalar($iter216)) {
            $xfer += $output->writeI32($iter215);
            } else {
            $xfer += $output->writeI32($iter216);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->virtual_machine_id !== null) {
      $xfer += $output->writeFieldBegin('virtual_machine_id', TType::STRING, 7);
      $xfer += $output->writeString($this->virtual_machine_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vdisks !== null) {
      if (!is_array($this->vdisks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('vdisks', TType::SET, 8);
      {
        $output->writeSetBegin(TType::STRING, count($this->vdisks));
        {
          foreach ($this->vdisks as $iter217 => $iter218)
          {
            if (is_scalar($iter218)) {
            $xfer += $output->writeString($iter217);
            } else {
            $xfer += $output->writeString($iter218);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->output !== null) {
      if (!is_object($this->output)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('output', TType::STRUCT, 9);
      $xfer += $this->output->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 10);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->original_size !== null) {
      if (!is_array($this->original_size)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('original_size', TType::MAP, 11);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->original_size));
        {
          foreach ($this->original_size as $kiter219 => $viter220)
          {
            $xfer += $output->writeString($kiter219);
            $xfer += $output->writeI64($viter220);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backup_progress !== null) {
      if (!is_array($this->backup_progress)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('backup_progress', TType::MAP, 12);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_progress));
        {
          foreach ($this->backup_progress as $kiter221 => $viter222)
          {
            $xfer += $output->writeString($kiter221);
            $xfer += $output->writeI64($viter222);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->output_files !== null) {
      if (!is_array($this->output_files)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('output_files', TType::MAP, 13);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->output_files));
        {
          foreach ($this->output_files as $kiter223 => $viter224)
          {
            $xfer += $output->writeString($kiter223);
            $xfer += $output->writeString($viter224);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->what !== null) {
      $xfer += $output->writeFieldBegin('what', TType::I32, 14);
      $xfer += $output->writeI32($this->what);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->why !== null) {
      $xfer += $output->writeFieldBegin('why', TType::STRING, 15);
      $xfer += $output->writeString($this->why);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->created_time !== null) {
      $xfer += $output->writeFieldBegin('created_time', TType::STRING, 16);
      $xfer += $output->writeString($this->created_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->created_time_ll !== null) {
      $xfer += $output->writeFieldBegin('created_time_ll', TType::I64, 17);
      $xfer += $output->writeI64($this->created_time_ll);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->display_name !== null) {
      $xfer += $output->writeFieldBegin('display_name', TType::STRING, 18);
      $xfer += $output->writeString($this->display_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->triggers !== null) {
      if (!is_array($this->triggers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('triggers', TType::LST, 19);
      {
        $output->writeListBegin(TType::STRUCT, count($this->triggers));
        {
          foreach ($this->triggers as $iter225)
          {
            $xfer += $iter225->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->histories !== null) {
      if (!is_array($this->histories)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('histories', TType::LST, 20);
      {
        $output->writeListBegin(TType::STRUCT, count($this->histories));
        {
          foreach ($this->histories as $iter226)
          {
            $xfer += $iter226->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 21);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->post !== null) {
      $xfer += $output->writeFieldBegin('post', TType::STRING, 22);
      $xfer += $output->writeString($this->post);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


