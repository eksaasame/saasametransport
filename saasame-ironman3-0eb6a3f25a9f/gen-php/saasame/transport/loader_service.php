<?php
namespace saasame\transport;
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface loader_serviceIf extends \saasame\transport\common_connection_serviceIf {
  /**
   * @param string $session_id
   * @param string $job_id
   * @param \saasame\transport\create_job_detail $create_job
   * @return \saasame\transport\loader_job_detail
   * @throws \saasame\transport\invalid_operation
   */
  public function create_job_ex($session_id, $job_id, \saasame\transport\create_job_detail $create_job);
  /**
   * @param string $session_id
   * @param \saasame\transport\create_job_detail $create_job
   * @return \saasame\transport\loader_job_detail
   * @throws \saasame\transport\invalid_operation
   */
  public function create_job($session_id, \saasame\transport\create_job_detail $create_job);
  /**
   * @param string $session_id
   * @param string $job_id
   * @return \saasame\transport\loader_job_detail
   * @throws \saasame\transport\invalid_operation
   */
  public function get_job($session_id, $job_id);
  /**
   * @param string $session_id
   * @param string $job_id
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function interrupt_job($session_id, $job_id);
  /**
   * @param string $session_id
   * @param string $job_id
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function resume_job($session_id, $job_id);
  /**
   * @param string $session_id
   * @param string $job_id
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function remove_job($session_id, $job_id);
  /**
   * @param string $session_id
   * @return \saasame\transport\loader_job_detail[]
   * @throws \saasame\transport\invalid_operation
   */
  public function list_jobs($session_id);
  /**
   * @param string $session_id
   * @param string $job_id
   * @param \saasame\transport\create_job_detail $job
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function update_job($session_id, $job_id, \saasame\transport\create_job_detail $job);
  /**
   * @param string $session_id
   */
  public function terminate($session_id);
  /**
   * @param string $session_id
   * @param array $images
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function remove_snapshot_image($session_id, array $images);
  /**
   * @param string $session_id
   * @param string $job_id
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function running_job($session_id, $job_id);
  /**
   * @param string $management
   * @param int $port
   * @param bool $is_ssl
   * @return bool
   */
  public function verify_management($management, $port, $is_ssl);
  /**
   * @param string $session_id
   * @param string $disk_addr
   * @param string $disk_id
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function set_customized_id($session_id, $disk_addr, $disk_id);
  /**
   * @param string $connection_string
   * @param string $container
   * @param string $original_disk_name
   * @param string $target_disk_name
   * @param string $snapshot
   * @return string
   * @throws \saasame\transport\invalid_operation
   */
  public function create_vhd_disk_from_snapshot($connection_string, $container, $original_disk_name, $target_disk_name, $snapshot);
  /**
   * @param string $task_id
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function is_snapshot_vhd_disk_ready($task_id);
  /**
   * @param string $connection_string
   * @param string $container
   * @param string $disk_name
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function delete_vhd_disk($connection_string, $container, $disk_name);
  /**
   * @param string $connection_string
   * @param string $container
   * @param string $disk_name
   * @param string $snapshot
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function delete_vhd_disk_snapshot($connection_string, $container, $disk_name, $snapshot);
  /**
   * @param string $connection_string
   * @param string $container
   * @param string $disk_name
   * @return \saasame\transport\vhd_snapshot[]
   * @throws \saasame\transport\invalid_operation
   */
  public function get_vhd_disk_snapshots($connection_string, $container, $disk_name);
  /**
   * @param string $connection_string
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function verify_connection_string($connection_string);
}


class loader_serviceClient extends \saasame\transport\common_connection_serviceClient implements \saasame\transport\loader_serviceIf {
  public function __construct($input, $output=null) {
    parent::__construct($input, $output);
  }

  public function create_job_ex($session_id, $job_id, \saasame\transport\create_job_detail $create_job)
  {
    $this->send_create_job_ex($session_id, $job_id, $create_job);
    return $this->recv_create_job_ex();
  }

  public function send_create_job_ex($session_id, $job_id, \saasame\transport\create_job_detail $create_job)
  {
    $args = new \saasame\transport\loader_service_create_job_ex_args();
    $args->session_id = $session_id;
    $args->job_id = $job_id;
    $args->create_job = $create_job;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'create_job_ex', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('create_job_ex', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_create_job_ex()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\loader_service_create_job_ex_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\loader_service_create_job_ex_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("create_job_ex failed: unknown result");
  }

  public function create_job($session_id, \saasame\transport\create_job_detail $create_job)
  {
    $this->send_create_job($session_id, $create_job);
    return $this->recv_create_job();
  }

  public function send_create_job($session_id, \saasame\transport\create_job_detail $create_job)
  {
    $args = new \saasame\transport\loader_service_create_job_args();
    $args->session_id = $session_id;
    $args->create_job = $create_job;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'create_job', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('create_job', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_create_job()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\loader_service_create_job_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\loader_service_create_job_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("create_job failed: unknown result");
  }

  public function get_job($session_id, $job_id)
  {
    $this->send_get_job($session_id, $job_id);
    return $this->recv_get_job();
  }

  public function send_get_job($session_id, $job_id)
  {
    $args = new \saasame\transport\loader_service_get_job_args();
    $args->session_id = $session_id;
    $args->job_id = $job_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_job', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_job', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_job()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\loader_service_get_job_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\loader_service_get_job_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("get_job failed: unknown result");
  }

  public function interrupt_job($session_id, $job_id)
  {
    $this->send_interrupt_job($session_id, $job_id);
    return $this->recv_interrupt_job();
  }

  public function send_interrupt_job($session_id, $job_id)
  {
    $args = new \saasame\transport\loader_service_interrupt_job_args();
    $args->session_id = $session_id;
    $args->job_id = $job_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'interrupt_job', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('interrupt_job', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_interrupt_job()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\loader_service_interrupt_job_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\loader_service_interrupt_job_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("interrupt_job failed: unknown result");
  }

  public function resume_job($session_id, $job_id)
  {
    $this->send_resume_job($session_id, $job_id);
    return $this->recv_resume_job();
  }

  public function send_resume_job($session_id, $job_id)
  {
    $args = new \saasame\transport\loader_service_resume_job_args();
    $args->session_id = $session_id;
    $args->job_id = $job_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'resume_job', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('resume_job', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_resume_job()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\loader_service_resume_job_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\loader_service_resume_job_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("resume_job failed: unknown result");
  }

  public function remove_job($session_id, $job_id)
  {
    $this->send_remove_job($session_id, $job_id);
    return $this->recv_remove_job();
  }

  public function send_remove_job($session_id, $job_id)
  {
    $args = new \saasame\transport\loader_service_remove_job_args();
    $args->session_id = $session_id;
    $args->job_id = $job_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'remove_job', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('remove_job', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_remove_job()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\loader_service_remove_job_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\loader_service_remove_job_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("remove_job failed: unknown result");
  }

  public function list_jobs($session_id)
  {
    $this->send_list_jobs($session_id);
    return $this->recv_list_jobs();
  }

  public function send_list_jobs($session_id)
  {
    $args = new \saasame\transport\loader_service_list_jobs_args();
    $args->session_id = $session_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'list_jobs', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('list_jobs', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_list_jobs()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\loader_service_list_jobs_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\loader_service_list_jobs_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("list_jobs failed: unknown result");
  }

  public function update_job($session_id, $job_id, \saasame\transport\create_job_detail $job)
  {
    $this->send_update_job($session_id, $job_id, $job);
    return $this->recv_update_job();
  }

  public function send_update_job($session_id, $job_id, \saasame\transport\create_job_detail $job)
  {
    $args = new \saasame\transport\loader_service_update_job_args();
    $args->session_id = $session_id;
    $args->job_id = $job_id;
    $args->job = $job;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update_job', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update_job', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update_job()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\loader_service_update_job_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\loader_service_update_job_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("update_job failed: unknown result");
  }

  public function terminate($session_id)
  {
    $this->send_terminate($session_id);
    $this->recv_terminate();
  }

  public function send_terminate($session_id)
  {
    $args = new \saasame\transport\loader_service_terminate_args();
    $args->session_id = $session_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'terminate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('terminate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_terminate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\loader_service_terminate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\loader_service_terminate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function remove_snapshot_image($session_id, array $images)
  {
    $this->send_remove_snapshot_image($session_id, $images);
    return $this->recv_remove_snapshot_image();
  }

  public function send_remove_snapshot_image($session_id, array $images)
  {
    $args = new \saasame\transport\loader_service_remove_snapshot_image_args();
    $args->session_id = $session_id;
    $args->images = $images;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'remove_snapshot_image', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('remove_snapshot_image', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_remove_snapshot_image()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\loader_service_remove_snapshot_image_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\loader_service_remove_snapshot_image_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("remove_snapshot_image failed: unknown result");
  }

  public function running_job($session_id, $job_id)
  {
    $this->send_running_job($session_id, $job_id);
    return $this->recv_running_job();
  }

  public function send_running_job($session_id, $job_id)
  {
    $args = new \saasame\transport\loader_service_running_job_args();
    $args->session_id = $session_id;
    $args->job_id = $job_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'running_job', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('running_job', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_running_job()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\loader_service_running_job_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\loader_service_running_job_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("running_job failed: unknown result");
  }

  public function verify_management($management, $port, $is_ssl)
  {
    $this->send_verify_management($management, $port, $is_ssl);
    return $this->recv_verify_management();
  }

  public function send_verify_management($management, $port, $is_ssl)
  {
    $args = new \saasame\transport\loader_service_verify_management_args();
    $args->management = $management;
    $args->port = $port;
    $args->is_ssl = $is_ssl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verify_management', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verify_management', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verify_management()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\loader_service_verify_management_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\loader_service_verify_management_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("verify_management failed: unknown result");
  }

  public function set_customized_id($session_id, $disk_addr, $disk_id)
  {
    $this->send_set_customized_id($session_id, $disk_addr, $disk_id);
    return $this->recv_set_customized_id();
  }

  public function send_set_customized_id($session_id, $disk_addr, $disk_id)
  {
    $args = new \saasame\transport\loader_service_set_customized_id_args();
    $args->session_id = $session_id;
    $args->disk_addr = $disk_addr;
    $args->disk_id = $disk_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'set_customized_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('set_customized_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_set_customized_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\loader_service_set_customized_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\loader_service_set_customized_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("set_customized_id failed: unknown result");
  }

  public function create_vhd_disk_from_snapshot($connection_string, $container, $original_disk_name, $target_disk_name, $snapshot)
  {
    $this->send_create_vhd_disk_from_snapshot($connection_string, $container, $original_disk_name, $target_disk_name, $snapshot);
    return $this->recv_create_vhd_disk_from_snapshot();
  }

  public function send_create_vhd_disk_from_snapshot($connection_string, $container, $original_disk_name, $target_disk_name, $snapshot)
  {
    $args = new \saasame\transport\loader_service_create_vhd_disk_from_snapshot_args();
    $args->connection_string = $connection_string;
    $args->container = $container;
    $args->original_disk_name = $original_disk_name;
    $args->target_disk_name = $target_disk_name;
    $args->snapshot = $snapshot;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'create_vhd_disk_from_snapshot', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('create_vhd_disk_from_snapshot', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_create_vhd_disk_from_snapshot()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\loader_service_create_vhd_disk_from_snapshot_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\loader_service_create_vhd_disk_from_snapshot_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("create_vhd_disk_from_snapshot failed: unknown result");
  }

  public function is_snapshot_vhd_disk_ready($task_id)
  {
    $this->send_is_snapshot_vhd_disk_ready($task_id);
    return $this->recv_is_snapshot_vhd_disk_ready();
  }

  public function send_is_snapshot_vhd_disk_ready($task_id)
  {
    $args = new \saasame\transport\loader_service_is_snapshot_vhd_disk_ready_args();
    $args->task_id = $task_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'is_snapshot_vhd_disk_ready', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('is_snapshot_vhd_disk_ready', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_is_snapshot_vhd_disk_ready()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\loader_service_is_snapshot_vhd_disk_ready_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\loader_service_is_snapshot_vhd_disk_ready_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("is_snapshot_vhd_disk_ready failed: unknown result");
  }

  public function delete_vhd_disk($connection_string, $container, $disk_name)
  {
    $this->send_delete_vhd_disk($connection_string, $container, $disk_name);
    return $this->recv_delete_vhd_disk();
  }

  public function send_delete_vhd_disk($connection_string, $container, $disk_name)
  {
    $args = new \saasame\transport\loader_service_delete_vhd_disk_args();
    $args->connection_string = $connection_string;
    $args->container = $container;
    $args->disk_name = $disk_name;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'delete_vhd_disk', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('delete_vhd_disk', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_delete_vhd_disk()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\loader_service_delete_vhd_disk_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\loader_service_delete_vhd_disk_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("delete_vhd_disk failed: unknown result");
  }

  public function delete_vhd_disk_snapshot($connection_string, $container, $disk_name, $snapshot)
  {
    $this->send_delete_vhd_disk_snapshot($connection_string, $container, $disk_name, $snapshot);
    return $this->recv_delete_vhd_disk_snapshot();
  }

  public function send_delete_vhd_disk_snapshot($connection_string, $container, $disk_name, $snapshot)
  {
    $args = new \saasame\transport\loader_service_delete_vhd_disk_snapshot_args();
    $args->connection_string = $connection_string;
    $args->container = $container;
    $args->disk_name = $disk_name;
    $args->snapshot = $snapshot;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'delete_vhd_disk_snapshot', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('delete_vhd_disk_snapshot', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_delete_vhd_disk_snapshot()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\loader_service_delete_vhd_disk_snapshot_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\loader_service_delete_vhd_disk_snapshot_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("delete_vhd_disk_snapshot failed: unknown result");
  }

  public function get_vhd_disk_snapshots($connection_string, $container, $disk_name)
  {
    $this->send_get_vhd_disk_snapshots($connection_string, $container, $disk_name);
    return $this->recv_get_vhd_disk_snapshots();
  }

  public function send_get_vhd_disk_snapshots($connection_string, $container, $disk_name)
  {
    $args = new \saasame\transport\loader_service_get_vhd_disk_snapshots_args();
    $args->connection_string = $connection_string;
    $args->container = $container;
    $args->disk_name = $disk_name;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_vhd_disk_snapshots', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_vhd_disk_snapshots', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_vhd_disk_snapshots()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\loader_service_get_vhd_disk_snapshots_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\loader_service_get_vhd_disk_snapshots_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("get_vhd_disk_snapshots failed: unknown result");
  }

  public function verify_connection_string($connection_string)
  {
    $this->send_verify_connection_string($connection_string);
    return $this->recv_verify_connection_string();
  }

  public function send_verify_connection_string($connection_string)
  {
    $args = new \saasame\transport\loader_service_verify_connection_string_args();
    $args->connection_string = $connection_string;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verify_connection_string', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verify_connection_string', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verify_connection_string()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\loader_service_verify_connection_string_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\loader_service_verify_connection_string_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("verify_connection_string failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class loader_service_create_job_ex_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'job_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'create_job',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\create_job_detail',
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $job_id = null;
  /**
   * @var \saasame\transport\create_job_detail
   */
  public $create_job = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['job_id'])) {
        $this->job_id = $vals['job_id'];
      }
      if (isset($vals['create_job'])) {
        $this->create_job = $vals['create_job'];
      }
    }
  }

  public function getName() {
    return 'loader_service_create_job_ex_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->job_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->create_job = new \saasame\transport\create_job_detail();
            $xfer += $this->create_job->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_create_job_ex_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->job_id !== null) {
      $xfer += $output->writeFieldBegin('job_id', TType::STRING, 2);
      $xfer += $output->writeString($this->job_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_job !== null) {
      if (!is_object($this->create_job)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('create_job', TType::STRUCT, 3);
      $xfer += $this->create_job->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_create_job_ex_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\loader_job_detail',
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var \saasame\transport\loader_job_detail
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'loader_service_create_job_ex_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \saasame\transport\loader_job_detail();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_create_job_ex_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_create_job_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'create_job',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\create_job_detail',
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var \saasame\transport\create_job_detail
   */
  public $create_job = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['create_job'])) {
        $this->create_job = $vals['create_job'];
      }
    }
  }

  public function getName() {
    return 'loader_service_create_job_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->create_job = new \saasame\transport\create_job_detail();
            $xfer += $this->create_job->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_create_job_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_job !== null) {
      if (!is_object($this->create_job)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('create_job', TType::STRUCT, 2);
      $xfer += $this->create_job->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_create_job_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\loader_job_detail',
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var \saasame\transport\loader_job_detail
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'loader_service_create_job_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \saasame\transport\loader_job_detail();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_create_job_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_get_job_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'job_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $job_id = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['job_id'])) {
        $this->job_id = $vals['job_id'];
      }
    }
  }

  public function getName() {
    return 'loader_service_get_job_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->job_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_get_job_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->job_id !== null) {
      $xfer += $output->writeFieldBegin('job_id', TType::STRING, 2);
      $xfer += $output->writeString($this->job_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_get_job_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\loader_job_detail',
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var \saasame\transport\loader_job_detail
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'loader_service_get_job_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \saasame\transport\loader_job_detail();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_get_job_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_interrupt_job_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'job_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $job_id = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['job_id'])) {
        $this->job_id = $vals['job_id'];
      }
    }
  }

  public function getName() {
    return 'loader_service_interrupt_job_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->job_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_interrupt_job_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->job_id !== null) {
      $xfer += $output->writeFieldBegin('job_id', TType::STRING, 2);
      $xfer += $output->writeString($this->job_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_interrupt_job_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'loader_service_interrupt_job_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_interrupt_job_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_resume_job_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'job_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $job_id = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['job_id'])) {
        $this->job_id = $vals['job_id'];
      }
    }
  }

  public function getName() {
    return 'loader_service_resume_job_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->job_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_resume_job_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->job_id !== null) {
      $xfer += $output->writeFieldBegin('job_id', TType::STRING, 2);
      $xfer += $output->writeString($this->job_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_resume_job_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'loader_service_resume_job_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_resume_job_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_remove_job_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'job_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $job_id = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['job_id'])) {
        $this->job_id = $vals['job_id'];
      }
    }
  }

  public function getName() {
    return 'loader_service_remove_job_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->job_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_remove_job_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->job_id !== null) {
      $xfer += $output->writeFieldBegin('job_id', TType::STRING, 2);
      $xfer += $output->writeString($this->job_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_remove_job_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'loader_service_remove_job_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_remove_job_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_list_jobs_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
    }
  }

  public function getName() {
    return 'loader_service_list_jobs_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_list_jobs_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_list_jobs_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\loader_job_detail',
        ),
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var \saasame\transport\loader_job_detail[]
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'loader_service_list_jobs_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1250 = 0;
            $_etype1253 = 0;
            $xfer += $input->readListBegin($_etype1253, $_size1250);
            for ($_i1254 = 0; $_i1254 < $_size1250; ++$_i1254)
            {
              $elem1255 = null;
              $elem1255 = new \saasame\transport\loader_job_detail();
              $xfer += $elem1255->read($input);
              $this->success []= $elem1255;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_list_jobs_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1256)
          {
            $xfer += $iter1256->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_update_job_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'job_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'job',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\create_job_detail',
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $job_id = null;
  /**
   * @var \saasame\transport\create_job_detail
   */
  public $job = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['job_id'])) {
        $this->job_id = $vals['job_id'];
      }
      if (isset($vals['job'])) {
        $this->job = $vals['job'];
      }
    }
  }

  public function getName() {
    return 'loader_service_update_job_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->job_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->job = new \saasame\transport\create_job_detail();
            $xfer += $this->job->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_update_job_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->job_id !== null) {
      $xfer += $output->writeFieldBegin('job_id', TType::STRING, 2);
      $xfer += $output->writeString($this->job_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->job !== null) {
      if (!is_object($this->job)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('job', TType::STRUCT, 3);
      $xfer += $this->job->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_update_job_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'loader_service_update_job_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_update_job_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_terminate_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
    }
  }

  public function getName() {
    return 'loader_service_terminate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_terminate_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_terminate_result {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'loader_service_terminate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_terminate_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_remove_snapshot_image_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'images',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\image_map_info',
        ),
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var array
   */
  public $images = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['images'])) {
        $this->images = $vals['images'];
      }
    }
  }

  public function getName() {
    return 'loader_service_remove_snapshot_image_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->images = array();
            $_size1257 = 0;
            $_ktype1258 = 0;
            $_vtype1259 = 0;
            $xfer += $input->readMapBegin($_ktype1258, $_vtype1259, $_size1257);
            for ($_i1261 = 0; $_i1261 < $_size1257; ++$_i1261)
            {
              $key1262 = '';
              $val1263 = new \saasame\transport\image_map_info();
              $xfer += $input->readString($key1262);
              $val1263 = new \saasame\transport\image_map_info();
              $xfer += $val1263->read($input);
              $this->images[$key1262] = $val1263;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_remove_snapshot_image_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->images !== null) {
      if (!is_array($this->images)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('images', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->images));
        {
          foreach ($this->images as $kiter1264 => $viter1265)
          {
            $xfer += $output->writeString($kiter1264);
            $xfer += $viter1265->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_remove_snapshot_image_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'loader_service_remove_snapshot_image_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_remove_snapshot_image_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_running_job_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'job_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $job_id = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['job_id'])) {
        $this->job_id = $vals['job_id'];
      }
    }
  }

  public function getName() {
    return 'loader_service_running_job_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->job_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_running_job_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->job_id !== null) {
      $xfer += $output->writeFieldBegin('job_id', TType::STRING, 2);
      $xfer += $output->writeString($this->job_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_running_job_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'loader_service_running_job_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_running_job_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_verify_management_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'management',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'port',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'is_ssl',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var string
   */
  public $management = null;
  /**
   * @var int
   */
  public $port = null;
  /**
   * @var bool
   */
  public $is_ssl = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['management'])) {
        $this->management = $vals['management'];
      }
      if (isset($vals['port'])) {
        $this->port = $vals['port'];
      }
      if (isset($vals['is_ssl'])) {
        $this->is_ssl = $vals['is_ssl'];
      }
    }
  }

  public function getName() {
    return 'loader_service_verify_management_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->management);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->port);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_ssl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_verify_management_args');
    if ($this->management !== null) {
      $xfer += $output->writeFieldBegin('management', TType::STRING, 1);
      $xfer += $output->writeString($this->management);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->port !== null) {
      $xfer += $output->writeFieldBegin('port', TType::I32, 2);
      $xfer += $output->writeI32($this->port);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_ssl !== null) {
      $xfer += $output->writeFieldBegin('is_ssl', TType::BOOL, 3);
      $xfer += $output->writeBool($this->is_ssl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_verify_management_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'loader_service_verify_management_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_verify_management_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_set_customized_id_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'disk_addr',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'disk_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $disk_addr = null;
  /**
   * @var string
   */
  public $disk_id = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['disk_addr'])) {
        $this->disk_addr = $vals['disk_addr'];
      }
      if (isset($vals['disk_id'])) {
        $this->disk_id = $vals['disk_id'];
      }
    }
  }

  public function getName() {
    return 'loader_service_set_customized_id_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->disk_addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->disk_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_set_customized_id_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disk_addr !== null) {
      $xfer += $output->writeFieldBegin('disk_addr', TType::STRING, 2);
      $xfer += $output->writeString($this->disk_addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disk_id !== null) {
      $xfer += $output->writeFieldBegin('disk_id', TType::STRING, 3);
      $xfer += $output->writeString($this->disk_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_set_customized_id_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'loader_service_set_customized_id_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_set_customized_id_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_create_vhd_disk_from_snapshot_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'connection_string',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'container',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'original_disk_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'target_disk_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'snapshot',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $connection_string = null;
  /**
   * @var string
   */
  public $container = null;
  /**
   * @var string
   */
  public $original_disk_name = null;
  /**
   * @var string
   */
  public $target_disk_name = null;
  /**
   * @var string
   */
  public $snapshot = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['connection_string'])) {
        $this->connection_string = $vals['connection_string'];
      }
      if (isset($vals['container'])) {
        $this->container = $vals['container'];
      }
      if (isset($vals['original_disk_name'])) {
        $this->original_disk_name = $vals['original_disk_name'];
      }
      if (isset($vals['target_disk_name'])) {
        $this->target_disk_name = $vals['target_disk_name'];
      }
      if (isset($vals['snapshot'])) {
        $this->snapshot = $vals['snapshot'];
      }
    }
  }

  public function getName() {
    return 'loader_service_create_vhd_disk_from_snapshot_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->connection_string);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->container);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->original_disk_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->target_disk_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snapshot);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_create_vhd_disk_from_snapshot_args');
    if ($this->connection_string !== null) {
      $xfer += $output->writeFieldBegin('connection_string', TType::STRING, 1);
      $xfer += $output->writeString($this->connection_string);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->container !== null) {
      $xfer += $output->writeFieldBegin('container', TType::STRING, 2);
      $xfer += $output->writeString($this->container);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->original_disk_name !== null) {
      $xfer += $output->writeFieldBegin('original_disk_name', TType::STRING, 3);
      $xfer += $output->writeString($this->original_disk_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->target_disk_name !== null) {
      $xfer += $output->writeFieldBegin('target_disk_name', TType::STRING, 4);
      $xfer += $output->writeString($this->target_disk_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snapshot !== null) {
      $xfer += $output->writeFieldBegin('snapshot', TType::STRING, 5);
      $xfer += $output->writeString($this->snapshot);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_create_vhd_disk_from_snapshot_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'loader_service_create_vhd_disk_from_snapshot_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_create_vhd_disk_from_snapshot_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_is_snapshot_vhd_disk_ready_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'task_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $task_id = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['task_id'])) {
        $this->task_id = $vals['task_id'];
      }
    }
  }

  public function getName() {
    return 'loader_service_is_snapshot_vhd_disk_ready_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->task_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_is_snapshot_vhd_disk_ready_args');
    if ($this->task_id !== null) {
      $xfer += $output->writeFieldBegin('task_id', TType::STRING, 1);
      $xfer += $output->writeString($this->task_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_is_snapshot_vhd_disk_ready_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'loader_service_is_snapshot_vhd_disk_ready_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_is_snapshot_vhd_disk_ready_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_delete_vhd_disk_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'connection_string',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'container',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'disk_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $connection_string = null;
  /**
   * @var string
   */
  public $container = null;
  /**
   * @var string
   */
  public $disk_name = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['connection_string'])) {
        $this->connection_string = $vals['connection_string'];
      }
      if (isset($vals['container'])) {
        $this->container = $vals['container'];
      }
      if (isset($vals['disk_name'])) {
        $this->disk_name = $vals['disk_name'];
      }
    }
  }

  public function getName() {
    return 'loader_service_delete_vhd_disk_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->connection_string);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->container);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->disk_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_delete_vhd_disk_args');
    if ($this->connection_string !== null) {
      $xfer += $output->writeFieldBegin('connection_string', TType::STRING, 1);
      $xfer += $output->writeString($this->connection_string);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->container !== null) {
      $xfer += $output->writeFieldBegin('container', TType::STRING, 2);
      $xfer += $output->writeString($this->container);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disk_name !== null) {
      $xfer += $output->writeFieldBegin('disk_name', TType::STRING, 3);
      $xfer += $output->writeString($this->disk_name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_delete_vhd_disk_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'loader_service_delete_vhd_disk_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_delete_vhd_disk_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_delete_vhd_disk_snapshot_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'connection_string',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'container',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'disk_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'snapshot',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $connection_string = null;
  /**
   * @var string
   */
  public $container = null;
  /**
   * @var string
   */
  public $disk_name = null;
  /**
   * @var string
   */
  public $snapshot = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['connection_string'])) {
        $this->connection_string = $vals['connection_string'];
      }
      if (isset($vals['container'])) {
        $this->container = $vals['container'];
      }
      if (isset($vals['disk_name'])) {
        $this->disk_name = $vals['disk_name'];
      }
      if (isset($vals['snapshot'])) {
        $this->snapshot = $vals['snapshot'];
      }
    }
  }

  public function getName() {
    return 'loader_service_delete_vhd_disk_snapshot_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->connection_string);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->container);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->disk_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snapshot);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_delete_vhd_disk_snapshot_args');
    if ($this->connection_string !== null) {
      $xfer += $output->writeFieldBegin('connection_string', TType::STRING, 1);
      $xfer += $output->writeString($this->connection_string);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->container !== null) {
      $xfer += $output->writeFieldBegin('container', TType::STRING, 2);
      $xfer += $output->writeString($this->container);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disk_name !== null) {
      $xfer += $output->writeFieldBegin('disk_name', TType::STRING, 3);
      $xfer += $output->writeString($this->disk_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snapshot !== null) {
      $xfer += $output->writeFieldBegin('snapshot', TType::STRING, 4);
      $xfer += $output->writeString($this->snapshot);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_delete_vhd_disk_snapshot_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'loader_service_delete_vhd_disk_snapshot_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_delete_vhd_disk_snapshot_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_get_vhd_disk_snapshots_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'connection_string',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'container',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'disk_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $connection_string = null;
  /**
   * @var string
   */
  public $container = null;
  /**
   * @var string
   */
  public $disk_name = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['connection_string'])) {
        $this->connection_string = $vals['connection_string'];
      }
      if (isset($vals['container'])) {
        $this->container = $vals['container'];
      }
      if (isset($vals['disk_name'])) {
        $this->disk_name = $vals['disk_name'];
      }
    }
  }

  public function getName() {
    return 'loader_service_get_vhd_disk_snapshots_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->connection_string);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->container);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->disk_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_get_vhd_disk_snapshots_args');
    if ($this->connection_string !== null) {
      $xfer += $output->writeFieldBegin('connection_string', TType::STRING, 1);
      $xfer += $output->writeString($this->connection_string);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->container !== null) {
      $xfer += $output->writeFieldBegin('container', TType::STRING, 2);
      $xfer += $output->writeString($this->container);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disk_name !== null) {
      $xfer += $output->writeFieldBegin('disk_name', TType::STRING, 3);
      $xfer += $output->writeString($this->disk_name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_get_vhd_disk_snapshots_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\vhd_snapshot',
        ),
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var \saasame\transport\vhd_snapshot[]
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'loader_service_get_vhd_disk_snapshots_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1266 = 0;
            $_etype1269 = 0;
            $xfer += $input->readListBegin($_etype1269, $_size1266);
            for ($_i1270 = 0; $_i1270 < $_size1266; ++$_i1270)
            {
              $elem1271 = null;
              $elem1271 = new \saasame\transport\vhd_snapshot();
              $xfer += $elem1271->read($input);
              $this->success []= $elem1271;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_get_vhd_disk_snapshots_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1272)
          {
            $xfer += $iter1272->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_verify_connection_string_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'connection_string',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $connection_string = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['connection_string'])) {
        $this->connection_string = $vals['connection_string'];
      }
    }
  }

  public function getName() {
    return 'loader_service_verify_connection_string_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->connection_string);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_verify_connection_string_args');
    if ($this->connection_string !== null) {
      $xfer += $output->writeFieldBegin('connection_string', TType::STRING, 1);
      $xfer += $output->writeString($this->connection_string);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_service_verify_connection_string_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'loader_service_verify_connection_string_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_service_verify_connection_string_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_serviceProcessor extends \saasame\transport\common_connection_serviceProcessor {
  public function __construct($handler) {
    parent::__construct($handler);
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_create_job_ex($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\loader_service_create_job_ex_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\loader_service_create_job_ex_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\loader_service_create_job_ex_result();
    try {
      $result->success = $this->handler_->create_job_ex($args->session_id, $args->job_id, $args->create_job);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'create_job_ex', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('create_job_ex', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_create_job($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\loader_service_create_job_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\loader_service_create_job_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\loader_service_create_job_result();
    try {
      $result->success = $this->handler_->create_job($args->session_id, $args->create_job);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'create_job', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('create_job', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_job($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\loader_service_get_job_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\loader_service_get_job_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\loader_service_get_job_result();
    try {
      $result->success = $this->handler_->get_job($args->session_id, $args->job_id);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_job', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_job', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_interrupt_job($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\loader_service_interrupt_job_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\loader_service_interrupt_job_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\loader_service_interrupt_job_result();
    try {
      $result->success = $this->handler_->interrupt_job($args->session_id, $args->job_id);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'interrupt_job', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('interrupt_job', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_resume_job($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\loader_service_resume_job_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\loader_service_resume_job_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\loader_service_resume_job_result();
    try {
      $result->success = $this->handler_->resume_job($args->session_id, $args->job_id);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'resume_job', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('resume_job', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_remove_job($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\loader_service_remove_job_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\loader_service_remove_job_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\loader_service_remove_job_result();
    try {
      $result->success = $this->handler_->remove_job($args->session_id, $args->job_id);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'remove_job', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('remove_job', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_list_jobs($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\loader_service_list_jobs_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\loader_service_list_jobs_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\loader_service_list_jobs_result();
    try {
      $result->success = $this->handler_->list_jobs($args->session_id);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'list_jobs', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('list_jobs', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_update_job($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\loader_service_update_job_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\loader_service_update_job_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\loader_service_update_job_result();
    try {
      $result->success = $this->handler_->update_job($args->session_id, $args->job_id, $args->job);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'update_job', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('update_job', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_terminate($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\loader_service_terminate_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\loader_service_terminate_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\loader_service_terminate_result();
    $this->handler_->terminate($args->session_id);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'terminate', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('terminate', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_remove_snapshot_image($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\loader_service_remove_snapshot_image_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\loader_service_remove_snapshot_image_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\loader_service_remove_snapshot_image_result();
    try {
      $result->success = $this->handler_->remove_snapshot_image($args->session_id, $args->images);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'remove_snapshot_image', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('remove_snapshot_image', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_running_job($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\loader_service_running_job_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\loader_service_running_job_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\loader_service_running_job_result();
    try {
      $result->success = $this->handler_->running_job($args->session_id, $args->job_id);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'running_job', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('running_job', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_verify_management($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\loader_service_verify_management_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\loader_service_verify_management_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\loader_service_verify_management_result();
    $result->success = $this->handler_->verify_management($args->management, $args->port, $args->is_ssl);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'verify_management', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('verify_management', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_set_customized_id($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\loader_service_set_customized_id_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\loader_service_set_customized_id_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\loader_service_set_customized_id_result();
    try {
      $result->success = $this->handler_->set_customized_id($args->session_id, $args->disk_addr, $args->disk_id);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'set_customized_id', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('set_customized_id', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_create_vhd_disk_from_snapshot($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\loader_service_create_vhd_disk_from_snapshot_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\loader_service_create_vhd_disk_from_snapshot_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\loader_service_create_vhd_disk_from_snapshot_result();
    try {
      $result->success = $this->handler_->create_vhd_disk_from_snapshot($args->connection_string, $args->container, $args->original_disk_name, $args->target_disk_name, $args->snapshot);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'create_vhd_disk_from_snapshot', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('create_vhd_disk_from_snapshot', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_is_snapshot_vhd_disk_ready($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\loader_service_is_snapshot_vhd_disk_ready_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\loader_service_is_snapshot_vhd_disk_ready_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\loader_service_is_snapshot_vhd_disk_ready_result();
    try {
      $result->success = $this->handler_->is_snapshot_vhd_disk_ready($args->task_id);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'is_snapshot_vhd_disk_ready', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('is_snapshot_vhd_disk_ready', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_delete_vhd_disk($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\loader_service_delete_vhd_disk_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\loader_service_delete_vhd_disk_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\loader_service_delete_vhd_disk_result();
    try {
      $result->success = $this->handler_->delete_vhd_disk($args->connection_string, $args->container, $args->disk_name);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'delete_vhd_disk', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('delete_vhd_disk', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_delete_vhd_disk_snapshot($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\loader_service_delete_vhd_disk_snapshot_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\loader_service_delete_vhd_disk_snapshot_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\loader_service_delete_vhd_disk_snapshot_result();
    try {
      $result->success = $this->handler_->delete_vhd_disk_snapshot($args->connection_string, $args->container, $args->disk_name, $args->snapshot);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'delete_vhd_disk_snapshot', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('delete_vhd_disk_snapshot', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_vhd_disk_snapshots($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\loader_service_get_vhd_disk_snapshots_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\loader_service_get_vhd_disk_snapshots_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\loader_service_get_vhd_disk_snapshots_result();
    try {
      $result->success = $this->handler_->get_vhd_disk_snapshots($args->connection_string, $args->container, $args->disk_name);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_vhd_disk_snapshots', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_vhd_disk_snapshots', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_verify_connection_string($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\loader_service_verify_connection_string_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\loader_service_verify_connection_string_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\loader_service_verify_connection_string_result();
    try {
      $result->success = $this->handler_->verify_connection_string($args->connection_string);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'verify_connection_string', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('verify_connection_string', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
}

















