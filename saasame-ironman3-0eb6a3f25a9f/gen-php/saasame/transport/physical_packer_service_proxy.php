<?php
namespace saasame\transport;
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface physical_packer_service_proxyIf extends \saasame\transport\common_serviceIf {
  /**
   * @param string $session_id
   * @param string $addr
   * @return \saasame\transport\service_info
   */
  public function packer_ping_p($session_id, $addr);
  /**
   * @param string $session_id
   * @param string $addr
   * @param string[] $disks
   * @return \saasame\transport\snapshot[]
   * @throws \saasame\transport\invalid_operation
   */
  public function take_snapshots_p($session_id, $addr, array $disks);
  /**
   * @param string $session_id
   * @param string $addr
   * @param string[] $disks
   * @param string $pre_script
   * @param string $post_script
   * @return \saasame\transport\snapshot[]
   * @throws \saasame\transport\invalid_operation
   */
  public function take_snapshots_ex_p($session_id, $addr, array $disks, $pre_script, $post_script);
  /**
   * @param string $session_id
   * @param string $addr
   * @param string $snapshot_id
   * @return \saasame\transport\delete_snapshot_result
   * @throws \saasame\transport\invalid_operation
   */
  public function delete_snapshot_p($session_id, $addr, $snapshot_id);
  /**
   * @param string $session_id
   * @param string $addr
   * @param string $snapshot_set_id
   * @return \saasame\transport\delete_snapshot_result
   * @throws \saasame\transport\invalid_operation
   */
  public function delete_snapshot_set_p($session_id, $addr, $snapshot_set_id);
  /**
   * @param string $session_id
   * @param string $addr
   * @return array
   * @throws \saasame\transport\invalid_operation
   */
  public function get_all_snapshots_p($session_id, $addr);
  /**
   * @param string $session_id
   * @param string $addr
   * @param string $job_id
   * @param \saasame\transport\create_packer_job_detail $create_job
   * @return \saasame\transport\packer_job_detail
   * @throws \saasame\transport\invalid_operation
   */
  public function create_packer_job_ex_p($session_id, $addr, $job_id, \saasame\transport\create_packer_job_detail $create_job);
  /**
   * @param string $session_id
   * @param string $addr
   * @param string $job_id
   * @param string $previous_updated_time
   * @return \saasame\transport\packer_job_detail
   * @throws \saasame\transport\invalid_operation
   */
  public function get_packer_job_p($session_id, $addr, $job_id, $previous_updated_time);
  /**
   * @param string $session_id
   * @param string $addr
   * @param string $job_id
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function interrupt_packer_job_p($session_id, $addr, $job_id);
  /**
   * @param string $session_id
   * @param string $addr
   * @param string $job_id
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function resume_packer_job_p($session_id, $addr, $job_id);
  /**
   * @param string $session_id
   * @param string $addr
   * @param string $job_id
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function remove_packer_job_p($session_id, $addr, $job_id);
  /**
   * @param string $session_id
   * @param string $addr
   * @param string $job_id
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function running_packer_job_p($session_id, $addr, $job_id);
  /**
   * @param string $session_id
   * @param string $addr
   * @param int $filter
   * @return \saasame\transport\disk_info[]
   * @throws \saasame\transport\invalid_operation
   */
  public function enumerate_packer_disks_p($session_id, $addr, $filter);
  /**
   * @param string $session_id
   * @param string $addr
   * @param string $carrier
   * @param bool $is_ssl
   * @return bool
   * @throws \saasame\transport\invalid_operation
   */
  public function verify_packer_carrier_p($session_id, $addr, $carrier, $is_ssl);
  /**
   * @param string $session_id
   * @param string $addr
   * @param int $filter
   * @return \saasame\transport\physical_machine_info
   * @throws \saasame\transport\invalid_operation
   */
  public function get_packer_host_detail_p($session_id, $addr, $filter);
}


class physical_packer_service_proxyClient extends \saasame\transport\common_serviceClient implements \saasame\transport\physical_packer_service_proxyIf {
  public function __construct($input, $output=null) {
    parent::__construct($input, $output);
  }

  public function packer_ping_p($session_id, $addr)
  {
    $this->send_packer_ping_p($session_id, $addr);
    return $this->recv_packer_ping_p();
  }

  public function send_packer_ping_p($session_id, $addr)
  {
    $args = new \saasame\transport\physical_packer_service_proxy_packer_ping_p_args();
    $args->session_id = $session_id;
    $args->addr = $addr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'packer_ping_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('packer_ping_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_packer_ping_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\physical_packer_service_proxy_packer_ping_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\physical_packer_service_proxy_packer_ping_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("packer_ping_p failed: unknown result");
  }

  public function take_snapshots_p($session_id, $addr, array $disks)
  {
    $this->send_take_snapshots_p($session_id, $addr, $disks);
    return $this->recv_take_snapshots_p();
  }

  public function send_take_snapshots_p($session_id, $addr, array $disks)
  {
    $args = new \saasame\transport\physical_packer_service_proxy_take_snapshots_p_args();
    $args->session_id = $session_id;
    $args->addr = $addr;
    $args->disks = $disks;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'take_snapshots_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('take_snapshots_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_take_snapshots_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\physical_packer_service_proxy_take_snapshots_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\physical_packer_service_proxy_take_snapshots_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("take_snapshots_p failed: unknown result");
  }

  public function take_snapshots_ex_p($session_id, $addr, array $disks, $pre_script, $post_script)
  {
    $this->send_take_snapshots_ex_p($session_id, $addr, $disks, $pre_script, $post_script);
    return $this->recv_take_snapshots_ex_p();
  }

  public function send_take_snapshots_ex_p($session_id, $addr, array $disks, $pre_script, $post_script)
  {
    $args = new \saasame\transport\physical_packer_service_proxy_take_snapshots_ex_p_args();
    $args->session_id = $session_id;
    $args->addr = $addr;
    $args->disks = $disks;
    $args->pre_script = $pre_script;
    $args->post_script = $post_script;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'take_snapshots_ex_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('take_snapshots_ex_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_take_snapshots_ex_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\physical_packer_service_proxy_take_snapshots_ex_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\physical_packer_service_proxy_take_snapshots_ex_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("take_snapshots_ex_p failed: unknown result");
  }

  public function delete_snapshot_p($session_id, $addr, $snapshot_id)
  {
    $this->send_delete_snapshot_p($session_id, $addr, $snapshot_id);
    return $this->recv_delete_snapshot_p();
  }

  public function send_delete_snapshot_p($session_id, $addr, $snapshot_id)
  {
    $args = new \saasame\transport\physical_packer_service_proxy_delete_snapshot_p_args();
    $args->session_id = $session_id;
    $args->addr = $addr;
    $args->snapshot_id = $snapshot_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'delete_snapshot_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('delete_snapshot_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_delete_snapshot_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\physical_packer_service_proxy_delete_snapshot_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\physical_packer_service_proxy_delete_snapshot_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("delete_snapshot_p failed: unknown result");
  }

  public function delete_snapshot_set_p($session_id, $addr, $snapshot_set_id)
  {
    $this->send_delete_snapshot_set_p($session_id, $addr, $snapshot_set_id);
    return $this->recv_delete_snapshot_set_p();
  }

  public function send_delete_snapshot_set_p($session_id, $addr, $snapshot_set_id)
  {
    $args = new \saasame\transport\physical_packer_service_proxy_delete_snapshot_set_p_args();
    $args->session_id = $session_id;
    $args->addr = $addr;
    $args->snapshot_set_id = $snapshot_set_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'delete_snapshot_set_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('delete_snapshot_set_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_delete_snapshot_set_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\physical_packer_service_proxy_delete_snapshot_set_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\physical_packer_service_proxy_delete_snapshot_set_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("delete_snapshot_set_p failed: unknown result");
  }

  public function get_all_snapshots_p($session_id, $addr)
  {
    $this->send_get_all_snapshots_p($session_id, $addr);
    return $this->recv_get_all_snapshots_p();
  }

  public function send_get_all_snapshots_p($session_id, $addr)
  {
    $args = new \saasame\transport\physical_packer_service_proxy_get_all_snapshots_p_args();
    $args->session_id = $session_id;
    $args->addr = $addr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_all_snapshots_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_all_snapshots_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_all_snapshots_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\physical_packer_service_proxy_get_all_snapshots_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\physical_packer_service_proxy_get_all_snapshots_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("get_all_snapshots_p failed: unknown result");
  }

  public function create_packer_job_ex_p($session_id, $addr, $job_id, \saasame\transport\create_packer_job_detail $create_job)
  {
    $this->send_create_packer_job_ex_p($session_id, $addr, $job_id, $create_job);
    return $this->recv_create_packer_job_ex_p();
  }

  public function send_create_packer_job_ex_p($session_id, $addr, $job_id, \saasame\transport\create_packer_job_detail $create_job)
  {
    $args = new \saasame\transport\physical_packer_service_proxy_create_packer_job_ex_p_args();
    $args->session_id = $session_id;
    $args->addr = $addr;
    $args->job_id = $job_id;
    $args->create_job = $create_job;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'create_packer_job_ex_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('create_packer_job_ex_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_create_packer_job_ex_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\physical_packer_service_proxy_create_packer_job_ex_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\physical_packer_service_proxy_create_packer_job_ex_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("create_packer_job_ex_p failed: unknown result");
  }

  public function get_packer_job_p($session_id, $addr, $job_id, $previous_updated_time)
  {
    $this->send_get_packer_job_p($session_id, $addr, $job_id, $previous_updated_time);
    return $this->recv_get_packer_job_p();
  }

  public function send_get_packer_job_p($session_id, $addr, $job_id, $previous_updated_time)
  {
    $args = new \saasame\transport\physical_packer_service_proxy_get_packer_job_p_args();
    $args->session_id = $session_id;
    $args->addr = $addr;
    $args->job_id = $job_id;
    $args->previous_updated_time = $previous_updated_time;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_packer_job_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_packer_job_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_packer_job_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\physical_packer_service_proxy_get_packer_job_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\physical_packer_service_proxy_get_packer_job_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("get_packer_job_p failed: unknown result");
  }

  public function interrupt_packer_job_p($session_id, $addr, $job_id)
  {
    $this->send_interrupt_packer_job_p($session_id, $addr, $job_id);
    return $this->recv_interrupt_packer_job_p();
  }

  public function send_interrupt_packer_job_p($session_id, $addr, $job_id)
  {
    $args = new \saasame\transport\physical_packer_service_proxy_interrupt_packer_job_p_args();
    $args->session_id = $session_id;
    $args->addr = $addr;
    $args->job_id = $job_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'interrupt_packer_job_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('interrupt_packer_job_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_interrupt_packer_job_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\physical_packer_service_proxy_interrupt_packer_job_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\physical_packer_service_proxy_interrupt_packer_job_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("interrupt_packer_job_p failed: unknown result");
  }

  public function resume_packer_job_p($session_id, $addr, $job_id)
  {
    $this->send_resume_packer_job_p($session_id, $addr, $job_id);
    return $this->recv_resume_packer_job_p();
  }

  public function send_resume_packer_job_p($session_id, $addr, $job_id)
  {
    $args = new \saasame\transport\physical_packer_service_proxy_resume_packer_job_p_args();
    $args->session_id = $session_id;
    $args->addr = $addr;
    $args->job_id = $job_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'resume_packer_job_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('resume_packer_job_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_resume_packer_job_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\physical_packer_service_proxy_resume_packer_job_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\physical_packer_service_proxy_resume_packer_job_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("resume_packer_job_p failed: unknown result");
  }

  public function remove_packer_job_p($session_id, $addr, $job_id)
  {
    $this->send_remove_packer_job_p($session_id, $addr, $job_id);
    return $this->recv_remove_packer_job_p();
  }

  public function send_remove_packer_job_p($session_id, $addr, $job_id)
  {
    $args = new \saasame\transport\physical_packer_service_proxy_remove_packer_job_p_args();
    $args->session_id = $session_id;
    $args->addr = $addr;
    $args->job_id = $job_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'remove_packer_job_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('remove_packer_job_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_remove_packer_job_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\physical_packer_service_proxy_remove_packer_job_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\physical_packer_service_proxy_remove_packer_job_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("remove_packer_job_p failed: unknown result");
  }

  public function running_packer_job_p($session_id, $addr, $job_id)
  {
    $this->send_running_packer_job_p($session_id, $addr, $job_id);
    return $this->recv_running_packer_job_p();
  }

  public function send_running_packer_job_p($session_id, $addr, $job_id)
  {
    $args = new \saasame\transport\physical_packer_service_proxy_running_packer_job_p_args();
    $args->session_id = $session_id;
    $args->addr = $addr;
    $args->job_id = $job_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'running_packer_job_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('running_packer_job_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_running_packer_job_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\physical_packer_service_proxy_running_packer_job_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\physical_packer_service_proxy_running_packer_job_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("running_packer_job_p failed: unknown result");
  }

  public function enumerate_packer_disks_p($session_id, $addr, $filter)
  {
    $this->send_enumerate_packer_disks_p($session_id, $addr, $filter);
    return $this->recv_enumerate_packer_disks_p();
  }

  public function send_enumerate_packer_disks_p($session_id, $addr, $filter)
  {
    $args = new \saasame\transport\physical_packer_service_proxy_enumerate_packer_disks_p_args();
    $args->session_id = $session_id;
    $args->addr = $addr;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'enumerate_packer_disks_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('enumerate_packer_disks_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_enumerate_packer_disks_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\physical_packer_service_proxy_enumerate_packer_disks_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\physical_packer_service_proxy_enumerate_packer_disks_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("enumerate_packer_disks_p failed: unknown result");
  }

  public function verify_packer_carrier_p($session_id, $addr, $carrier, $is_ssl)
  {
    $this->send_verify_packer_carrier_p($session_id, $addr, $carrier, $is_ssl);
    return $this->recv_verify_packer_carrier_p();
  }

  public function send_verify_packer_carrier_p($session_id, $addr, $carrier, $is_ssl)
  {
    $args = new \saasame\transport\physical_packer_service_proxy_verify_packer_carrier_p_args();
    $args->session_id = $session_id;
    $args->addr = $addr;
    $args->carrier = $carrier;
    $args->is_ssl = $is_ssl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verify_packer_carrier_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verify_packer_carrier_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verify_packer_carrier_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\physical_packer_service_proxy_verify_packer_carrier_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\physical_packer_service_proxy_verify_packer_carrier_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("verify_packer_carrier_p failed: unknown result");
  }

  public function get_packer_host_detail_p($session_id, $addr, $filter)
  {
    $this->send_get_packer_host_detail_p($session_id, $addr, $filter);
    return $this->recv_get_packer_host_detail_p();
  }

  public function send_get_packer_host_detail_p($session_id, $addr, $filter)
  {
    $args = new \saasame\transport\physical_packer_service_proxy_get_packer_host_detail_p_args();
    $args->session_id = $session_id;
    $args->addr = $addr;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_packer_host_detail_p', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_packer_host_detail_p', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_packer_host_detail_p()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\saasame\transport\physical_packer_service_proxy_get_packer_host_detail_p_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \saasame\transport\physical_packer_service_proxy_get_packer_host_detail_p_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new \Exception("get_packer_host_detail_p failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class physical_packer_service_proxy_packer_ping_p_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'addr',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $addr = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['addr'])) {
        $this->addr = $vals['addr'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_packer_ping_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_packer_ping_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addr !== null) {
      $xfer += $output->writeFieldBegin('addr', TType::STRING, 2);
      $xfer += $output->writeString($this->addr);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_packer_ping_p_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\service_info',
      ),
    );

  /**
   * @var \saasame\transport\service_info
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_packer_ping_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \saasame\transport\service_info();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_packer_ping_p_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_take_snapshots_p_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'addr',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'disks',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $addr = null;
  /**
   * @var string[]
   */
  public $disks = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['addr'])) {
        $this->addr = $vals['addr'];
      }
      if (isset($vals['disks'])) {
        $this->disks = $vals['disks'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_take_snapshots_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::SET) {
            $this->disks = array();
            $_size1273 = 0;
            $_etype1276 = 0;
            $xfer += $input->readSetBegin($_etype1276, $_size1273);
            for ($_i1277 = 0; $_i1277 < $_size1273; ++$_i1277)
            {
              $elem1278 = null;
              $xfer += $input->readString($elem1278);
              $this->disks[$elem1278] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_take_snapshots_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addr !== null) {
      $xfer += $output->writeFieldBegin('addr', TType::STRING, 2);
      $xfer += $output->writeString($this->addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disks !== null) {
      if (!is_array($this->disks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('disks', TType::SET, 3);
      {
        $output->writeSetBegin(TType::STRING, count($this->disks));
        {
          foreach ($this->disks as $iter1279 => $iter1280)
          {
            $xfer += $output->writeString($iter1279);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_take_snapshots_p_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\snapshot',
        ),
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var \saasame\transport\snapshot[]
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_take_snapshots_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1281 = 0;
            $_etype1284 = 0;
            $xfer += $input->readListBegin($_etype1284, $_size1281);
            for ($_i1285 = 0; $_i1285 < $_size1281; ++$_i1285)
            {
              $elem1286 = null;
              $elem1286 = new \saasame\transport\snapshot();
              $xfer += $elem1286->read($input);
              $this->success []= $elem1286;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_take_snapshots_p_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1287)
          {
            $xfer += $iter1287->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_take_snapshots_ex_p_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'addr',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'disks',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    4 => array(
      'var' => 'pre_script',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'post_script',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $addr = null;
  /**
   * @var string[]
   */
  public $disks = null;
  /**
   * @var string
   */
  public $pre_script = null;
  /**
   * @var string
   */
  public $post_script = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['addr'])) {
        $this->addr = $vals['addr'];
      }
      if (isset($vals['disks'])) {
        $this->disks = $vals['disks'];
      }
      if (isset($vals['pre_script'])) {
        $this->pre_script = $vals['pre_script'];
      }
      if (isset($vals['post_script'])) {
        $this->post_script = $vals['post_script'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_take_snapshots_ex_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::SET) {
            $this->disks = array();
            $_size1288 = 0;
            $_etype1291 = 0;
            $xfer += $input->readSetBegin($_etype1291, $_size1288);
            for ($_i1292 = 0; $_i1292 < $_size1288; ++$_i1292)
            {
              $elem1293 = null;
              $xfer += $input->readString($elem1293);
              $this->disks[$elem1293] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pre_script);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->post_script);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_take_snapshots_ex_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addr !== null) {
      $xfer += $output->writeFieldBegin('addr', TType::STRING, 2);
      $xfer += $output->writeString($this->addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disks !== null) {
      if (!is_array($this->disks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('disks', TType::SET, 3);
      {
        $output->writeSetBegin(TType::STRING, count($this->disks));
        {
          foreach ($this->disks as $iter1294 => $iter1295)
          {
            $xfer += $output->writeString($iter1294);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pre_script !== null) {
      $xfer += $output->writeFieldBegin('pre_script', TType::STRING, 4);
      $xfer += $output->writeString($this->pre_script);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->post_script !== null) {
      $xfer += $output->writeFieldBegin('post_script', TType::STRING, 5);
      $xfer += $output->writeString($this->post_script);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_take_snapshots_ex_p_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\snapshot',
        ),
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var \saasame\transport\snapshot[]
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_take_snapshots_ex_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1296 = 0;
            $_etype1299 = 0;
            $xfer += $input->readListBegin($_etype1299, $_size1296);
            for ($_i1300 = 0; $_i1300 < $_size1296; ++$_i1300)
            {
              $elem1301 = null;
              $elem1301 = new \saasame\transport\snapshot();
              $xfer += $elem1301->read($input);
              $this->success []= $elem1301;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_take_snapshots_ex_p_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1302)
          {
            $xfer += $iter1302->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_delete_snapshot_p_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'addr',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'snapshot_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $addr = null;
  /**
   * @var string
   */
  public $snapshot_id = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['addr'])) {
        $this->addr = $vals['addr'];
      }
      if (isset($vals['snapshot_id'])) {
        $this->snapshot_id = $vals['snapshot_id'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_delete_snapshot_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snapshot_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_delete_snapshot_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addr !== null) {
      $xfer += $output->writeFieldBegin('addr', TType::STRING, 2);
      $xfer += $output->writeString($this->addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snapshot_id !== null) {
      $xfer += $output->writeFieldBegin('snapshot_id', TType::STRING, 3);
      $xfer += $output->writeString($this->snapshot_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_delete_snapshot_p_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\delete_snapshot_result',
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var \saasame\transport\delete_snapshot_result
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_delete_snapshot_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \saasame\transport\delete_snapshot_result();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_delete_snapshot_p_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_delete_snapshot_set_p_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'addr',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'snapshot_set_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $addr = null;
  /**
   * @var string
   */
  public $snapshot_set_id = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['addr'])) {
        $this->addr = $vals['addr'];
      }
      if (isset($vals['snapshot_set_id'])) {
        $this->snapshot_set_id = $vals['snapshot_set_id'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_delete_snapshot_set_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snapshot_set_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_delete_snapshot_set_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addr !== null) {
      $xfer += $output->writeFieldBegin('addr', TType::STRING, 2);
      $xfer += $output->writeString($this->addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snapshot_set_id !== null) {
      $xfer += $output->writeFieldBegin('snapshot_set_id', TType::STRING, 3);
      $xfer += $output->writeString($this->snapshot_set_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_delete_snapshot_set_p_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\delete_snapshot_result',
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var \saasame\transport\delete_snapshot_result
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_delete_snapshot_set_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \saasame\transport\delete_snapshot_result();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_delete_snapshot_set_p_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_get_all_snapshots_p_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'addr',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $addr = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['addr'])) {
        $this->addr = $vals['addr'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_get_all_snapshots_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_get_all_snapshots_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addr !== null) {
      $xfer += $output->writeFieldBegin('addr', TType::STRING, 2);
      $xfer += $output->writeString($this->addr);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_get_all_snapshots_p_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::LST,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::LST,
        'etype' => TType::STRUCT,
        'elem' => array(
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\snapshot',
          ),
        ),
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_get_all_snapshots_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1303 = 0;
            $_ktype1304 = 0;
            $_vtype1305 = 0;
            $xfer += $input->readMapBegin($_ktype1304, $_vtype1305, $_size1303);
            for ($_i1307 = 0; $_i1307 < $_size1303; ++$_i1307)
            {
              $key1308 = '';
              $val1309 = array();
              $xfer += $input->readString($key1308);
              $val1309 = array();
              $_size1310 = 0;
              $_etype1313 = 0;
              $xfer += $input->readListBegin($_etype1313, $_size1310);
              for ($_i1314 = 0; $_i1314 < $_size1310; ++$_i1314)
              {
                $elem1315 = null;
                $elem1315 = new \saasame\transport\snapshot();
                $xfer += $elem1315->read($input);
                $val1309 []= $elem1315;
              }
              $xfer += $input->readListEnd();
              $this->success[$key1308] = $val1309;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_get_all_snapshots_p_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::LST, count($this->success));
        {
          foreach ($this->success as $kiter1316 => $viter1317)
          {
            $xfer += $output->writeString($kiter1316);
            {
              $output->writeListBegin(TType::STRUCT, count($viter1317));
              {
                foreach ($viter1317 as $iter1318)
                {
                  $xfer += $iter1318->write($output);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_create_packer_job_ex_p_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'addr',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'job_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'create_job',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\create_packer_job_detail',
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $addr = null;
  /**
   * @var string
   */
  public $job_id = null;
  /**
   * @var \saasame\transport\create_packer_job_detail
   */
  public $create_job = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['addr'])) {
        $this->addr = $vals['addr'];
      }
      if (isset($vals['job_id'])) {
        $this->job_id = $vals['job_id'];
      }
      if (isset($vals['create_job'])) {
        $this->create_job = $vals['create_job'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_create_packer_job_ex_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->job_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->create_job = new \saasame\transport\create_packer_job_detail();
            $xfer += $this->create_job->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_create_packer_job_ex_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addr !== null) {
      $xfer += $output->writeFieldBegin('addr', TType::STRING, 2);
      $xfer += $output->writeString($this->addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->job_id !== null) {
      $xfer += $output->writeFieldBegin('job_id', TType::STRING, 3);
      $xfer += $output->writeString($this->job_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_job !== null) {
      if (!is_object($this->create_job)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('create_job', TType::STRUCT, 4);
      $xfer += $this->create_job->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_create_packer_job_ex_p_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\packer_job_detail',
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var \saasame\transport\packer_job_detail
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_create_packer_job_ex_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \saasame\transport\packer_job_detail();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_create_packer_job_ex_p_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_get_packer_job_p_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'addr',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'job_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'previous_updated_time',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $addr = null;
  /**
   * @var string
   */
  public $job_id = null;
  /**
   * @var string
   */
  public $previous_updated_time = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['addr'])) {
        $this->addr = $vals['addr'];
      }
      if (isset($vals['job_id'])) {
        $this->job_id = $vals['job_id'];
      }
      if (isset($vals['previous_updated_time'])) {
        $this->previous_updated_time = $vals['previous_updated_time'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_get_packer_job_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->job_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->previous_updated_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_get_packer_job_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addr !== null) {
      $xfer += $output->writeFieldBegin('addr', TType::STRING, 2);
      $xfer += $output->writeString($this->addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->job_id !== null) {
      $xfer += $output->writeFieldBegin('job_id', TType::STRING, 3);
      $xfer += $output->writeString($this->job_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->previous_updated_time !== null) {
      $xfer += $output->writeFieldBegin('previous_updated_time', TType::STRING, 4);
      $xfer += $output->writeString($this->previous_updated_time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_get_packer_job_p_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\packer_job_detail',
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var \saasame\transport\packer_job_detail
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_get_packer_job_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \saasame\transport\packer_job_detail();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_get_packer_job_p_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_interrupt_packer_job_p_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'addr',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'job_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $addr = null;
  /**
   * @var string
   */
  public $job_id = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['addr'])) {
        $this->addr = $vals['addr'];
      }
      if (isset($vals['job_id'])) {
        $this->job_id = $vals['job_id'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_interrupt_packer_job_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->job_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_interrupt_packer_job_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addr !== null) {
      $xfer += $output->writeFieldBegin('addr', TType::STRING, 2);
      $xfer += $output->writeString($this->addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->job_id !== null) {
      $xfer += $output->writeFieldBegin('job_id', TType::STRING, 3);
      $xfer += $output->writeString($this->job_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_interrupt_packer_job_p_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_interrupt_packer_job_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_interrupt_packer_job_p_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_resume_packer_job_p_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'addr',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'job_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $addr = null;
  /**
   * @var string
   */
  public $job_id = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['addr'])) {
        $this->addr = $vals['addr'];
      }
      if (isset($vals['job_id'])) {
        $this->job_id = $vals['job_id'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_resume_packer_job_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->job_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_resume_packer_job_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addr !== null) {
      $xfer += $output->writeFieldBegin('addr', TType::STRING, 2);
      $xfer += $output->writeString($this->addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->job_id !== null) {
      $xfer += $output->writeFieldBegin('job_id', TType::STRING, 3);
      $xfer += $output->writeString($this->job_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_resume_packer_job_p_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_resume_packer_job_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_resume_packer_job_p_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_remove_packer_job_p_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'addr',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'job_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $addr = null;
  /**
   * @var string
   */
  public $job_id = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['addr'])) {
        $this->addr = $vals['addr'];
      }
      if (isset($vals['job_id'])) {
        $this->job_id = $vals['job_id'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_remove_packer_job_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->job_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_remove_packer_job_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addr !== null) {
      $xfer += $output->writeFieldBegin('addr', TType::STRING, 2);
      $xfer += $output->writeString($this->addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->job_id !== null) {
      $xfer += $output->writeFieldBegin('job_id', TType::STRING, 3);
      $xfer += $output->writeString($this->job_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_remove_packer_job_p_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_remove_packer_job_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_remove_packer_job_p_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_running_packer_job_p_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'addr',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'job_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $addr = null;
  /**
   * @var string
   */
  public $job_id = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['addr'])) {
        $this->addr = $vals['addr'];
      }
      if (isset($vals['job_id'])) {
        $this->job_id = $vals['job_id'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_running_packer_job_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->job_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_running_packer_job_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addr !== null) {
      $xfer += $output->writeFieldBegin('addr', TType::STRING, 2);
      $xfer += $output->writeString($this->addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->job_id !== null) {
      $xfer += $output->writeFieldBegin('job_id', TType::STRING, 3);
      $xfer += $output->writeString($this->job_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_running_packer_job_p_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_running_packer_job_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_running_packer_job_p_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_enumerate_packer_disks_p_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'addr',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'filter',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $addr = null;
  /**
   * @var int
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['addr'])) {
        $this->addr = $vals['addr'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_enumerate_packer_disks_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->filter);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_enumerate_packer_disks_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addr !== null) {
      $xfer += $output->writeFieldBegin('addr', TType::STRING, 2);
      $xfer += $output->writeString($this->addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      $xfer += $output->writeFieldBegin('filter', TType::I32, 3);
      $xfer += $output->writeI32($this->filter);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_enumerate_packer_disks_p_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\disk_info',
        ),
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var \saasame\transport\disk_info[]
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_enumerate_packer_disks_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size1319 = 0;
            $_etype1322 = 0;
            $xfer += $input->readSetBegin($_etype1322, $_size1319);
            for ($_i1323 = 0; $_i1323 < $_size1319; ++$_i1323)
            {
              $elem1324 = null;
              $elem1324 = new \saasame\transport\disk_info();
              $xfer += $elem1324->read($input);
              $this->success[] = $elem1324;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_enumerate_packer_disks_p_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1325 => $iter1326)
          {
            $xfer += $iter1326->write($output);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_verify_packer_carrier_p_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'addr',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'carrier',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'is_ssl',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $addr = null;
  /**
   * @var string
   */
  public $carrier = null;
  /**
   * @var bool
   */
  public $is_ssl = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['addr'])) {
        $this->addr = $vals['addr'];
      }
      if (isset($vals['carrier'])) {
        $this->carrier = $vals['carrier'];
      }
      if (isset($vals['is_ssl'])) {
        $this->is_ssl = $vals['is_ssl'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_verify_packer_carrier_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->carrier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_ssl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_verify_packer_carrier_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addr !== null) {
      $xfer += $output->writeFieldBegin('addr', TType::STRING, 2);
      $xfer += $output->writeString($this->addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->carrier !== null) {
      $xfer += $output->writeFieldBegin('carrier', TType::STRING, 3);
      $xfer += $output->writeString($this->carrier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_ssl !== null) {
      $xfer += $output->writeFieldBegin('is_ssl', TType::BOOL, 4);
      $xfer += $output->writeBool($this->is_ssl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_verify_packer_carrier_p_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_verify_packer_carrier_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_verify_packer_carrier_p_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_get_packer_host_detail_p_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'session_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'addr',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'filter',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $session_id = null;
  /**
   * @var string
   */
  public $addr = null;
  /**
   * @var int
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['addr'])) {
        $this->addr = $vals['addr'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_get_packer_host_detail_p_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->filter);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_get_packer_host_detail_p_args');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
      $xfer += $output->writeString($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addr !== null) {
      $xfer += $output->writeFieldBegin('addr', TType::STRING, 2);
      $xfer += $output->writeString($this->addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      $xfer += $output->writeFieldBegin('filter', TType::I32, 3);
      $xfer += $output->writeI32($this->filter);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxy_get_packer_host_detail_p_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\physical_machine_info',
      ),
    1 => array(
      'var' => 'ouch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\invalid_operation',
      ),
    );

  /**
   * @var \saasame\transport\physical_machine_info
   */
  public $success = null;
  /**
   * @var \saasame\transport\invalid_operation
   */
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_service_proxy_get_packer_host_detail_p_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \saasame\transport\physical_machine_info();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new \saasame\transport\invalid_operation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_service_proxy_get_packer_host_detail_p_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_service_proxyProcessor extends \saasame\transport\common_serviceProcessor {
  public function __construct($handler) {
    parent::__construct($handler);
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_packer_ping_p($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\physical_packer_service_proxy_packer_ping_p_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\physical_packer_service_proxy_packer_ping_p_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\physical_packer_service_proxy_packer_ping_p_result();
    $result->success = $this->handler_->packer_ping_p($args->session_id, $args->addr);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'packer_ping_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('packer_ping_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_take_snapshots_p($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\physical_packer_service_proxy_take_snapshots_p_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\physical_packer_service_proxy_take_snapshots_p_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\physical_packer_service_proxy_take_snapshots_p_result();
    try {
      $result->success = $this->handler_->take_snapshots_p($args->session_id, $args->addr, $args->disks);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'take_snapshots_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('take_snapshots_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_take_snapshots_ex_p($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\physical_packer_service_proxy_take_snapshots_ex_p_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\physical_packer_service_proxy_take_snapshots_ex_p_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\physical_packer_service_proxy_take_snapshots_ex_p_result();
    try {
      $result->success = $this->handler_->take_snapshots_ex_p($args->session_id, $args->addr, $args->disks, $args->pre_script, $args->post_script);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'take_snapshots_ex_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('take_snapshots_ex_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_delete_snapshot_p($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\physical_packer_service_proxy_delete_snapshot_p_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\physical_packer_service_proxy_delete_snapshot_p_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\physical_packer_service_proxy_delete_snapshot_p_result();
    try {
      $result->success = $this->handler_->delete_snapshot_p($args->session_id, $args->addr, $args->snapshot_id);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'delete_snapshot_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('delete_snapshot_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_delete_snapshot_set_p($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\physical_packer_service_proxy_delete_snapshot_set_p_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\physical_packer_service_proxy_delete_snapshot_set_p_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\physical_packer_service_proxy_delete_snapshot_set_p_result();
    try {
      $result->success = $this->handler_->delete_snapshot_set_p($args->session_id, $args->addr, $args->snapshot_set_id);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'delete_snapshot_set_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('delete_snapshot_set_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_all_snapshots_p($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\physical_packer_service_proxy_get_all_snapshots_p_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\physical_packer_service_proxy_get_all_snapshots_p_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\physical_packer_service_proxy_get_all_snapshots_p_result();
    try {
      $result->success = $this->handler_->get_all_snapshots_p($args->session_id, $args->addr);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_all_snapshots_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_all_snapshots_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_create_packer_job_ex_p($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\physical_packer_service_proxy_create_packer_job_ex_p_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\physical_packer_service_proxy_create_packer_job_ex_p_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\physical_packer_service_proxy_create_packer_job_ex_p_result();
    try {
      $result->success = $this->handler_->create_packer_job_ex_p($args->session_id, $args->addr, $args->job_id, $args->create_job);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'create_packer_job_ex_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('create_packer_job_ex_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_packer_job_p($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\physical_packer_service_proxy_get_packer_job_p_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\physical_packer_service_proxy_get_packer_job_p_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\physical_packer_service_proxy_get_packer_job_p_result();
    try {
      $result->success = $this->handler_->get_packer_job_p($args->session_id, $args->addr, $args->job_id, $args->previous_updated_time);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_packer_job_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_packer_job_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_interrupt_packer_job_p($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\physical_packer_service_proxy_interrupt_packer_job_p_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\physical_packer_service_proxy_interrupt_packer_job_p_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\physical_packer_service_proxy_interrupt_packer_job_p_result();
    try {
      $result->success = $this->handler_->interrupt_packer_job_p($args->session_id, $args->addr, $args->job_id);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'interrupt_packer_job_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('interrupt_packer_job_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_resume_packer_job_p($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\physical_packer_service_proxy_resume_packer_job_p_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\physical_packer_service_proxy_resume_packer_job_p_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\physical_packer_service_proxy_resume_packer_job_p_result();
    try {
      $result->success = $this->handler_->resume_packer_job_p($args->session_id, $args->addr, $args->job_id);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'resume_packer_job_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('resume_packer_job_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_remove_packer_job_p($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\physical_packer_service_proxy_remove_packer_job_p_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\physical_packer_service_proxy_remove_packer_job_p_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\physical_packer_service_proxy_remove_packer_job_p_result();
    try {
      $result->success = $this->handler_->remove_packer_job_p($args->session_id, $args->addr, $args->job_id);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'remove_packer_job_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('remove_packer_job_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_running_packer_job_p($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\physical_packer_service_proxy_running_packer_job_p_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\physical_packer_service_proxy_running_packer_job_p_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\physical_packer_service_proxy_running_packer_job_p_result();
    try {
      $result->success = $this->handler_->running_packer_job_p($args->session_id, $args->addr, $args->job_id);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'running_packer_job_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('running_packer_job_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_enumerate_packer_disks_p($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\physical_packer_service_proxy_enumerate_packer_disks_p_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\physical_packer_service_proxy_enumerate_packer_disks_p_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\physical_packer_service_proxy_enumerate_packer_disks_p_result();
    try {
      $result->success = $this->handler_->enumerate_packer_disks_p($args->session_id, $args->addr, $args->filter);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'enumerate_packer_disks_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('enumerate_packer_disks_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_verify_packer_carrier_p($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\physical_packer_service_proxy_verify_packer_carrier_p_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\physical_packer_service_proxy_verify_packer_carrier_p_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\physical_packer_service_proxy_verify_packer_carrier_p_result();
    try {
      $result->success = $this->handler_->verify_packer_carrier_p($args->session_id, $args->addr, $args->carrier, $args->is_ssl);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'verify_packer_carrier_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('verify_packer_carrier_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_packer_host_detail_p($seqid, $input, $output) {
    $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
    if ($bin_accel)
    {
      $args = thrift_protocol_read_binary_after_message_begin($input, '\saasame\transport\physical_packer_service_proxy_get_packer_host_detail_p_args', $input->isStrictRead());
    }
    else
    {
      $args = new \saasame\transport\physical_packer_service_proxy_get_packer_host_detail_p_args();
      $args->read($input);
      $input->readMessageEnd();
    }
    $result = new \saasame\transport\physical_packer_service_proxy_get_packer_host_detail_p_result();
    try {
      $result->success = $this->handler_->get_packer_host_detail_p($args->session_id, $args->addr, $args->filter);
    } catch (\saasame\transport\invalid_operation $ouch) {
      $result->ouch = $ouch;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_packer_host_detail_p', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_packer_host_detail_p', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
}

















