<?php
namespace saasame\transport;

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class enumerate_disk_filter_style {
  const ALL_DISK = 0;
  const UNINITIALIZED_DISK = 1;
  static public $__names = array(
    0 => 'ALL_DISK',
    1 => 'UNINITIALIZED_DISK',
  );
}

final class machine_detail_filter {
  const FULL = 0;
  const SIMPLE = 1;
  static public $__names = array(
    0 => 'FULL',
    1 => 'SIMPLE',
  );
}

final class partition_style {
  const PARTITION_UNKNOWN = 0;
  const PARTITION_MBR = 1;
  const PARTITION_GPT = 2;
  static public $__names = array(
    0 => 'PARTITION_UNKNOWN',
    1 => 'PARTITION_MBR',
    2 => 'PARTITION_GPT',
  );
}

final class drive_type {
  const DT_UNKNOWN = 0;
  const DT_NO_ROOT_PATH = 1;
  const DT_REMOVABLE = 2;
  const DT_FIXED = 3;
  const DT_REMOTE = 4;
  const DT_CDROM = 5;
  const DT_RAMDISK = 6;
  static public $__names = array(
    0 => 'DT_UNKNOWN',
    1 => 'DT_NO_ROOT_PATH',
    2 => 'DT_REMOVABLE',
    3 => 'DT_FIXED',
    4 => 'DT_REMOTE',
    5 => 'DT_CDROM',
    6 => 'DT_RAMDISK',
  );
}

final class bus_type {
  const Unknown = 0;
  const SCSI = 1;
  const ATAPI = 2;
  const ATA = 3;
  const IEEE_1394 = 4;
  const SSA = 5;
  const Fibre_Channel = 6;
  const USB = 7;
  const RAID = 8;
  const iSCSI = 9;
  const SAS = 10;
  const SATA = 11;
  const SD = 12;
  const MMC = 13;
  const Virtual = 14;
  const File_Backed_Virtual = 15;
  const Storage_Spaces = 16;
  const NVMe = 17;
  static public $__names = array(
    0 => 'Unknown',
    1 => 'SCSI',
    2 => 'ATAPI',
    3 => 'ATA',
    4 => 'IEEE_1394',
    5 => 'SSA',
    6 => 'Fibre_Channel',
    7 => 'USB',
    8 => 'RAID',
    9 => 'iSCSI',
    10 => 'SAS',
    11 => 'SATA',
    12 => 'SD',
    13 => 'MMC',
    14 => 'Virtual',
    15 => 'File_Backed_Virtual',
    16 => 'Storage_Spaces',
    17 => 'NVMe',
  );
}

final class hv_vm_tools_status {
  const HV_VMTOOLS_UNKNOWN = 0;
  const HV_VMTOOLS_OK = 1;
  const HV_VMTOOLS_NOTINSTALLED = 2;
  const HV_VMTOOLS_OLD = 3;
  const HV_VMTOOLS_NOTRUNNING = 4;
  const HV_VMTOOLS_NEEDUPGRADE = 5;
  const HV_VMTOOLS_UNMANAGED = 6;
  const HV_VMTOOLS_NEW = 7;
  const HV_VMTOOLS_BLACKLISTED = 8;
  static public $__names = array(
    0 => 'HV_VMTOOLS_UNKNOWN',
    1 => 'HV_VMTOOLS_OK',
    2 => 'HV_VMTOOLS_NOTINSTALLED',
    3 => 'HV_VMTOOLS_OLD',
    4 => 'HV_VMTOOLS_NOTRUNNING',
    5 => 'HV_VMTOOLS_NEEDUPGRADE',
    6 => 'HV_VMTOOLS_UNMANAGED',
    7 => 'HV_VMTOOLS_NEW',
    8 => 'HV_VMTOOLS_BLACKLISTED',
  );
}

final class hv_vm_power_state {
  const HV_VMPOWER_UNKNOWN = 0;
  const HV_VMPOWER_ON = 1;
  const HV_VMPOWER_OFF = 2;
  const HV_VMPOWER_SUSPENDED = 3;
  static public $__names = array(
    0 => 'HV_VMPOWER_UNKNOWN',
    1 => 'HV_VMPOWER_ON',
    2 => 'HV_VMPOWER_OFF',
    3 => 'HV_VMPOWER_SUSPENDED',
  );
}

final class hv_vm_connection_state {
  const HV_VMCONNECT_UNKNOWN = 0;
  const HV_VMCONNECT_CONNECTED = 1;
  const HV_VMCONNECT_DISCONNECTED = 2;
  const HV_VMCONNECT_INACCESSIBLE = 3;
  const HV_VMCONNECT_INVALID = 4;
  const HV_VMCONNECT_ORPHANED = 5;
  static public $__names = array(
    0 => 'HV_VMCONNECT_UNKNOWN',
    1 => 'HV_VMCONNECT_CONNECTED',
    2 => 'HV_VMCONNECT_DISCONNECTED',
    3 => 'HV_VMCONNECT_INACCESSIBLE',
    4 => 'HV_VMCONNECT_INVALID',
    5 => 'HV_VMCONNECT_ORPHANED',
  );
}

final class hv_host_power_state {
  const HV_HOSTPOWER_UNKNOWN = 0;
  const HV_HOSTPOWER_ON = 1;
  const HV_HOSTPOWER_OFF = 2;
  const HV_HOSTPOWER_STANDBY = 3;
  static public $__names = array(
    0 => 'HV_HOSTPOWER_UNKNOWN',
    1 => 'HV_HOSTPOWER_ON',
    2 => 'HV_HOSTPOWER_OFF',
    3 => 'HV_HOSTPOWER_STANDBY',
  );
}

final class hv_connection_type {
  const HV_CONNECTION_TYPE_UNKNOWN = 0;
  const HV_CONNECTION_TYPE_VCENTER = 1;
  const HV_CONNECTION_TYPE_HOST = 2;
  static public $__names = array(
    0 => 'HV_CONNECTION_TYPE_UNKNOWN',
    1 => 'HV_CONNECTION_TYPE_VCENTER',
    2 => 'HV_CONNECTION_TYPE_HOST',
  );
}

final class hv_guest_os_type {
  const HV_OS_UNKNOWN = 0;
  const HV_OS_WINDOWS = 1;
  const HV_OS_LINUX = 2;
  static public $__names = array(
    0 => 'HV_OS_UNKNOWN',
    1 => 'HV_OS_WINDOWS',
    2 => 'HV_OS_LINUX',
  );
}

final class hv_controller_type {
  const HV_CTRL_ANY = -1;
  const HV_CTRL_IDE = 0;
  const HV_CTRL_PARA_VIRT_SCSI = 1;
  const HV_CTRL_BUS_LOGIC = 2;
  const HV_CTRL_LSI_LOGIC = 3;
  const HV_CTRL_LSI_LOGIC_SAS = 4;
  static public $__names = array(
    -1 => 'HV_CTRL_ANY',
    0 => 'HV_CTRL_IDE',
    1 => 'HV_CTRL_PARA_VIRT_SCSI',
    2 => 'HV_CTRL_BUS_LOGIC',
    3 => 'HV_CTRL_LSI_LOGIC',
    4 => 'HV_CTRL_LSI_LOGIC_SAS',
  );
}

final class hv_vm_firmware {
  const HV_VM_FIRMWARE_BIOS = 0;
  const HV_VM_FIRMWARE_EFI = 1;
  static public $__names = array(
    0 => 'HV_VM_FIRMWARE_BIOS',
    1 => 'HV_VM_FIRMWARE_EFI',
  );
}

final class job_type {
  const physical_packer_job_type = 1;
  const virtual_packer_job_type = 2;
  const physical_transport_type = 3;
  const virtual_transport_type = 4;
  const loader_job_type = 5;
  const launcher_job_type = 6;
  const winpe_packer_job_type = 7;
  const winpe_transport_job_type = 8;
  static public $__names = array(
    1 => 'physical_packer_job_type',
    2 => 'virtual_packer_job_type',
    3 => 'physical_transport_type',
    4 => 'virtual_transport_type',
    5 => 'loader_job_type',
    6 => 'launcher_job_type',
    7 => 'winpe_packer_job_type',
    8 => 'winpe_transport_job_type',
  );
}

final class job_trigger_type {
  const runonce_trigger = 0;
  const interval_trigger = 1;
  static public $__names = array(
    0 => 'runonce_trigger',
    1 => 'interval_trigger',
  );
}

final class job_state {
  const job_state_none = 1;
  const job_state_initialed = 2;
  const job_state_replicating = 4;
  const job_state_replicated = 8;
  const job_state_converting = 16;
  const job_state_finished = 32;
  const job_state_sche_completed = 64;
  const job_state_recover = 128;
  const job_state_resizing = 256;
  const job_state_uploading = 512;
  const job_state_upload_completed = 1024;
  const job_state_discard = 1073741824;
  static public $__names = array(
    1 => 'job_state_none',
    2 => 'job_state_initialed',
    4 => 'job_state_replicating',
    8 => 'job_state_replicated',
    16 => 'job_state_converting',
    32 => 'job_state_finished',
    64 => 'job_state_sche_completed',
    128 => 'job_state_recover',
    256 => 'job_state_resizing',
    512 => 'job_state_uploading',
    1024 => 'job_state_upload_completed',
    1073741824 => 'job_state_discard',
  );
}

final class error_codes {
  const SAASAME_S_OK = 0;
  const SAASAME_NOERROR = 0;
  const SAASAME_E_FAIL = 4096;
  const SAASAME_E_INITIAL_FAIL = 4097;
  const SAASAME_E_DISK_FULL = 4098;
  const SAASAME_E_INVALID_ARG = 4099;
  const SAASAME_E_INVALID_AUTHENTICATION = 4100;
  const SAASAME_E_INTERNAL_FAIL = 4101;
  const SAASAME_E_CANNOT_CONNECT_TO_HOST = 4102;
  const SAASAME_E_QUEUE_FULL = 4103;
  const SAASAME_E_INVALID_LICENSE_KEY = 4104;
  const SAASAME_E_INVALID_LICENSE = 4105;
  const SAASAME_E_JOB_CREATE_FAIL = 12288;
  const SAASAME_E_JOB_REMOVE_FAIL = 12289;
  const SAASAME_E_JOB_NOTFOUND = 12290;
  const SAASAME_E_JOB_CONFIG_NOTFOUND = 12291;
  const SAASAME_E_JOB_STATUS_NOTFOUND = 12292;
  const SAASAME_E_JOB_CANCELLED = 12293;
  const SAASAME_E_JOB_CONVERT_FAIL = 12294;
  const SAASAME_E_JOB_REPLICATE_FAIL = 12295;
  const SAASAME_E_JOB_ID_DUPLICATED = 12296;
  const SAASAME_E_JOB_INTERRUPTED = 12297;
  const SAASAME_E_JOB_RUNNING = 12298;
  const SAASAME_E_JOB_RESPONSE = 12299;
  const SAASAME_E_PHYSICAL_CONFIG_FAILED = 16384;
  const SAASAME_E_VIRTUAL_VM_NOTFOUND = 20480;
  const SAASAME_E_IMAGE_NOTFOUND = 24576;
  const SAASAME_E_IMAGE_CREATE_FAIL = 24577;
  const SAASAME_E_IMAGE_OPEN_FAIL = 24578;
  const SAASAME_E_IMAGE_READ = 24579;
  const SAASAME_E_IMAGE_WRITE = 24580;
  const SAASAME_E_IMAGE_OUTOFRANGE = 24581;
  const SAASAME_E_IMAGE_ATTACH_FAIL = 24582;
  const SAASAME_E_IMAGE_DETACH_FAIL = 24583;
  const SAASAME_E_IMAGE_PROPERTY_FAIL = 24584;
  const SAASAME_E_SNAPSHOT_CREATE_FAIL = 28672;
  const SAASAME_E_SNAPSHOT_REMOVE_FAIL = 28673;
  const SAASAME_E_SNAPSHOT_NOTFOUND = 28674;
  const SAASAME_E_SNAPSHOT_INVALID = 28675;
  static public $__names = array(
    0 => 'SAASAME_S_OK',
    0 => 'SAASAME_NOERROR',
    4096 => 'SAASAME_E_FAIL',
    4097 => 'SAASAME_E_INITIAL_FAIL',
    4098 => 'SAASAME_E_DISK_FULL',
    4099 => 'SAASAME_E_INVALID_ARG',
    4100 => 'SAASAME_E_INVALID_AUTHENTICATION',
    4101 => 'SAASAME_E_INTERNAL_FAIL',
    4102 => 'SAASAME_E_CANNOT_CONNECT_TO_HOST',
    4103 => 'SAASAME_E_QUEUE_FULL',
    4104 => 'SAASAME_E_INVALID_LICENSE_KEY',
    4105 => 'SAASAME_E_INVALID_LICENSE',
    12288 => 'SAASAME_E_JOB_CREATE_FAIL',
    12289 => 'SAASAME_E_JOB_REMOVE_FAIL',
    12290 => 'SAASAME_E_JOB_NOTFOUND',
    12291 => 'SAASAME_E_JOB_CONFIG_NOTFOUND',
    12292 => 'SAASAME_E_JOB_STATUS_NOTFOUND',
    12293 => 'SAASAME_E_JOB_CANCELLED',
    12294 => 'SAASAME_E_JOB_CONVERT_FAIL',
    12295 => 'SAASAME_E_JOB_REPLICATE_FAIL',
    12296 => 'SAASAME_E_JOB_ID_DUPLICATED',
    12297 => 'SAASAME_E_JOB_INTERRUPTED',
    12298 => 'SAASAME_E_JOB_RUNNING',
    12299 => 'SAASAME_E_JOB_RESPONSE',
    16384 => 'SAASAME_E_PHYSICAL_CONFIG_FAILED',
    20480 => 'SAASAME_E_VIRTUAL_VM_NOTFOUND',
    24576 => 'SAASAME_E_IMAGE_NOTFOUND',
    24577 => 'SAASAME_E_IMAGE_CREATE_FAIL',
    24578 => 'SAASAME_E_IMAGE_OPEN_FAIL',
    24579 => 'SAASAME_E_IMAGE_READ',
    24580 => 'SAASAME_E_IMAGE_WRITE',
    24581 => 'SAASAME_E_IMAGE_OUTOFRANGE',
    24582 => 'SAASAME_E_IMAGE_ATTACH_FAIL',
    24583 => 'SAASAME_E_IMAGE_DETACH_FAIL',
    24584 => 'SAASAME_E_IMAGE_PROPERTY_FAIL',
    28672 => 'SAASAME_E_SNAPSHOT_CREATE_FAIL',
    28673 => 'SAASAME_E_SNAPSHOT_REMOVE_FAIL',
    28674 => 'SAASAME_E_SNAPSHOT_NOTFOUND',
    28675 => 'SAASAME_E_SNAPSHOT_INVALID',
  );
}

final class connection_type {
  const LOCAL_FOLDER = 0;
  const NFS_FOLDER = 1;
  const CIFS_FOLDER = 1;
  const WEBDAV = 1;
  const S3_BUCKET = 2;
  const WEBDAV_WITH_SSL = 3;
  const WEBDAV_EX = 4;
  const S3_BUCKET_EX = 5;
  const LOCAL_FOLDER_EX = 6;
  static public $__names = array(
    0 => 'LOCAL_FOLDER',
    1 => 'NFS_FOLDER',
    1 => 'CIFS_FOLDER',
    1 => 'WEBDAV',
    2 => 'S3_BUCKET',
    3 => 'WEBDAV_WITH_SSL',
    4 => 'WEBDAV_EX',
    5 => 'S3_BUCKET_EX',
    6 => 'LOCAL_FOLDER_EX',
  );
}

final class aws_region {
  const US_EAST_1 = 0;
  const US_WEST_1 = 1;
  const US_WEST_2 = 2;
  const EU_WEST_1 = 3;
  const EU_CENTRAL_1 = 4;
  const AP_SOUTHEAST_1 = 5;
  const AP_SOUTHEAST_2 = 6;
  const AP_NORTHEAST_1 = 7;
  const AP_NORTHEAST_2 = 8;
  const SA_EAST_1 = 9;
  static public $__names = array(
    0 => 'US_EAST_1',
    1 => 'US_WEST_1',
    2 => 'US_WEST_2',
    3 => 'EU_WEST_1',
    4 => 'EU_CENTRAL_1',
    5 => 'AP_SOUTHEAST_1',
    6 => 'AP_SOUTHEAST_2',
    7 => 'AP_NORTHEAST_1',
    8 => 'AP_NORTHEAST_2',
    9 => 'SA_EAST_1',
  );
}

final class create_image_option {
  const VERSION_1 = 0;
  const VERSION_2 = 1;
  static public $__names = array(
    0 => 'VERSION_1',
    1 => 'VERSION_2',
  );
}

final class disk_detect_type {
  const SCSI_ADDRESS = 0;
  const LINUX_DEVICE_PATH = 0;
  const SERIAL_NUMBER = 1;
  const EXPORT_IMAGE = 2;
  const UNIQUE_ID = 3;
  const CUSTOMIZED_ID = 4;
  const AZURE_BLOB = 5;
  const VMWARE_VADP = 6;
  static public $__names = array(
    0 => 'SCSI_ADDRESS',
    0 => 'LINUX_DEVICE_PATH',
    1 => 'SERIAL_NUMBER',
    2 => 'EXPORT_IMAGE',
    3 => 'UNIQUE_ID',
    4 => 'CUSTOMIZED_ID',
    5 => 'AZURE_BLOB',
    6 => 'VMWARE_VADP',
  );
}

final class virtual_disk_type {
  const VHD = 0;
  const VHDX = 1;
  static public $__names = array(
    0 => 'VHD',
    1 => 'VHDX',
  );
}

final class conversion_type {
  const ANY_TO_ANY = 0;
  const OPENSTACK = 1;
  const XEN = 2;
  const VMWARE = 3;
  const HYPERV = 4;
  const AUTO = -1;
  static public $__names = array(
    0 => 'ANY_TO_ANY',
    1 => 'OPENSTACK',
    2 => 'XEN',
    3 => 'VMWARE',
    4 => 'HYPERV',
    -1 => 'AUTO',
  );
}

final class recovery_type {
  const TEST_RECOVERY = 0;
  const DISASTER_RECOVERY = 1;
  const MIGRATION_RECOVERY = 2;
  static public $__names = array(
    0 => 'TEST_RECOVERY',
    1 => 'DISASTER_RECOVERY',
    2 => 'MIGRATION_RECOVERY',
  );
}

final class extra_options_type {
  const UNKNOWN = 0;
  const ALIYUN = 1;
  const TENCENT = 2;
  static public $__names = array(
    0 => 'UNKNOWN',
    1 => 'ALIYUN',
    2 => 'TENCENT',
  );
}

class disk_info {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'boot_from_disk',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    2 => array(
      'var' => 'bus_type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'cluster_owner',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'cylinders',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    5 => array(
      'var' => 'friendly_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'guid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'tracks_per_cylinder',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    8 => array(
      'var' => 'is_boot',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    9 => array(
      'var' => 'is_clustered',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    10 => array(
      'var' => 'is_offline',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    11 => array(
      'var' => 'is_readonly',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    12 => array(
      'var' => 'is_snapshot',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    13 => array(
      'var' => 'is_system',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    14 => array(
      'var' => 'location',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    15 => array(
      'var' => 'logical_sector_size',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    16 => array(
      'var' => 'manufacturer',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    17 => array(
      'var' => 'model',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    18 => array(
      'var' => 'number',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    19 => array(
      'var' => 'number_of_partitions',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    20 => array(
      'var' => 'offline_reason',
      'isRequired' => false,
      'type' => TType::I16,
      ),
    21 => array(
      'var' => 'partition_style',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    22 => array(
      'var' => 'path',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    23 => array(
      'var' => 'physical_sector_size',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    24 => array(
      'var' => 'sectors_per_track',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    25 => array(
      'var' => 'serial_number',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    26 => array(
      'var' => 'signature',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    27 => array(
      'var' => 'size',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    28 => array(
      'var' => 'uri',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    29 => array(
      'var' => 'scsi_bus',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    30 => array(
      'var' => 'scsi_logical_unit',
      'isRequired' => false,
      'type' => TType::I16,
      ),
    31 => array(
      'var' => 'scsi_port',
      'isRequired' => false,
      'type' => TType::I16,
      ),
    32 => array(
      'var' => 'scsi_target_id',
      'isRequired' => false,
      'type' => TType::I16,
      ),
    33 => array(
      'var' => 'unique_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    34 => array(
      'var' => 'unique_id_format',
      'isRequired' => false,
      'type' => TType::I16,
      ),
    35 => array(
      'var' => 'customized_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var bool
   */
  public $boot_from_disk = false;
  /**
   * @var int
   */
  public $bus_type =   0;
  /**
   * @var string
   */
  public $cluster_owner = "";
  /**
   * @var int
   */
  public $cylinders = 0;
  /**
   * @var string
   */
  public $friendly_name = "";
  /**
   * @var string
   */
  public $guid = "";
  /**
   * @var int
   */
  public $tracks_per_cylinder = 0;
  /**
   * @var bool
   */
  public $is_boot = false;
  /**
   * @var bool
   */
  public $is_clustered = false;
  /**
   * @var bool
   */
  public $is_offline = false;
  /**
   * @var bool
   */
  public $is_readonly = false;
  /**
   * @var bool
   */
  public $is_snapshot = false;
  /**
   * @var bool
   */
  public $is_system = false;
  /**
   * @var string
   */
  public $location = "";
  /**
   * @var int
   */
  public $logical_sector_size = 0;
  /**
   * @var string
   */
  public $manufacturer = "";
  /**
   * @var string
   */
  public $model = "";
  /**
   * @var int
   */
  public $number = -1;
  /**
   * @var int
   */
  public $number_of_partitions = -1;
  /**
   * @var int
   */
  public $offline_reason = 0;
  /**
   * @var int
   */
  public $partition_style =   0;
  /**
   * @var string
   */
  public $path = "";
  /**
   * @var int
   */
  public $physical_sector_size = 0;
  /**
   * @var int
   */
  public $sectors_per_track = 0;
  /**
   * @var string
   */
  public $serial_number = "";
  /**
   * @var int
   */
  public $signature = 0;
  /**
   * @var int
   */
  public $size = 0;
  /**
   * @var string
   */
  public $uri = "";
  /**
   * @var int
   */
  public $scsi_bus = 0;
  /**
   * @var int
   */
  public $scsi_logical_unit = 0;
  /**
   * @var int
   */
  public $scsi_port = 0;
  /**
   * @var int
   */
  public $scsi_target_id = 0;
  /**
   * @var string
   */
  public $unique_id = "";
  /**
   * @var int
   */
  public $unique_id_format = 0;
  /**
   * @var string
   */
  public $customized_id = "";

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['boot_from_disk'])) {
        $this->boot_from_disk = $vals['boot_from_disk'];
      }
      if (isset($vals['bus_type'])) {
        $this->bus_type = $vals['bus_type'];
      }
      if (isset($vals['cluster_owner'])) {
        $this->cluster_owner = $vals['cluster_owner'];
      }
      if (isset($vals['cylinders'])) {
        $this->cylinders = $vals['cylinders'];
      }
      if (isset($vals['friendly_name'])) {
        $this->friendly_name = $vals['friendly_name'];
      }
      if (isset($vals['guid'])) {
        $this->guid = $vals['guid'];
      }
      if (isset($vals['tracks_per_cylinder'])) {
        $this->tracks_per_cylinder = $vals['tracks_per_cylinder'];
      }
      if (isset($vals['is_boot'])) {
        $this->is_boot = $vals['is_boot'];
      }
      if (isset($vals['is_clustered'])) {
        $this->is_clustered = $vals['is_clustered'];
      }
      if (isset($vals['is_offline'])) {
        $this->is_offline = $vals['is_offline'];
      }
      if (isset($vals['is_readonly'])) {
        $this->is_readonly = $vals['is_readonly'];
      }
      if (isset($vals['is_snapshot'])) {
        $this->is_snapshot = $vals['is_snapshot'];
      }
      if (isset($vals['is_system'])) {
        $this->is_system = $vals['is_system'];
      }
      if (isset($vals['location'])) {
        $this->location = $vals['location'];
      }
      if (isset($vals['logical_sector_size'])) {
        $this->logical_sector_size = $vals['logical_sector_size'];
      }
      if (isset($vals['manufacturer'])) {
        $this->manufacturer = $vals['manufacturer'];
      }
      if (isset($vals['model'])) {
        $this->model = $vals['model'];
      }
      if (isset($vals['number'])) {
        $this->number = $vals['number'];
      }
      if (isset($vals['number_of_partitions'])) {
        $this->number_of_partitions = $vals['number_of_partitions'];
      }
      if (isset($vals['offline_reason'])) {
        $this->offline_reason = $vals['offline_reason'];
      }
      if (isset($vals['partition_style'])) {
        $this->partition_style = $vals['partition_style'];
      }
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
      if (isset($vals['physical_sector_size'])) {
        $this->physical_sector_size = $vals['physical_sector_size'];
      }
      if (isset($vals['sectors_per_track'])) {
        $this->sectors_per_track = $vals['sectors_per_track'];
      }
      if (isset($vals['serial_number'])) {
        $this->serial_number = $vals['serial_number'];
      }
      if (isset($vals['signature'])) {
        $this->signature = $vals['signature'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
      if (isset($vals['uri'])) {
        $this->uri = $vals['uri'];
      }
      if (isset($vals['scsi_bus'])) {
        $this->scsi_bus = $vals['scsi_bus'];
      }
      if (isset($vals['scsi_logical_unit'])) {
        $this->scsi_logical_unit = $vals['scsi_logical_unit'];
      }
      if (isset($vals['scsi_port'])) {
        $this->scsi_port = $vals['scsi_port'];
      }
      if (isset($vals['scsi_target_id'])) {
        $this->scsi_target_id = $vals['scsi_target_id'];
      }
      if (isset($vals['unique_id'])) {
        $this->unique_id = $vals['unique_id'];
      }
      if (isset($vals['unique_id_format'])) {
        $this->unique_id_format = $vals['unique_id_format'];
      }
      if (isset($vals['customized_id'])) {
        $this->customized_id = $vals['customized_id'];
      }
    }
  }

  public function getName() {
    return 'disk_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->boot_from_disk);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bus_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cluster_owner);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cylinders);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->friendly_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->guid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tracks_per_cylinder);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_boot);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_clustered);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_offline);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_readonly);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_snapshot);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_system);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->location);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->logical_sector_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->manufacturer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->model);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->number_of_partitions);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->offline_reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->partition_style);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->physical_sector_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sectors_per_track);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->serial_number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->signature);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uri);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scsi_bus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->scsi_logical_unit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->scsi_port);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->scsi_target_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->unique_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 34:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->unique_id_format);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 35:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->customized_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('disk_info');
    if ($this->boot_from_disk !== null) {
      $xfer += $output->writeFieldBegin('boot_from_disk', TType::BOOL, 1);
      $xfer += $output->writeBool($this->boot_from_disk);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bus_type !== null) {
      $xfer += $output->writeFieldBegin('bus_type', TType::I32, 2);
      $xfer += $output->writeI32($this->bus_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cluster_owner !== null) {
      $xfer += $output->writeFieldBegin('cluster_owner', TType::STRING, 3);
      $xfer += $output->writeString($this->cluster_owner);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cylinders !== null) {
      $xfer += $output->writeFieldBegin('cylinders', TType::I64, 4);
      $xfer += $output->writeI64($this->cylinders);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->friendly_name !== null) {
      $xfer += $output->writeFieldBegin('friendly_name', TType::STRING, 5);
      $xfer += $output->writeString($this->friendly_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->guid !== null) {
      $xfer += $output->writeFieldBegin('guid', TType::STRING, 6);
      $xfer += $output->writeString($this->guid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tracks_per_cylinder !== null) {
      $xfer += $output->writeFieldBegin('tracks_per_cylinder', TType::I32, 7);
      $xfer += $output->writeI32($this->tracks_per_cylinder);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_boot !== null) {
      $xfer += $output->writeFieldBegin('is_boot', TType::BOOL, 8);
      $xfer += $output->writeBool($this->is_boot);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_clustered !== null) {
      $xfer += $output->writeFieldBegin('is_clustered', TType::BOOL, 9);
      $xfer += $output->writeBool($this->is_clustered);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_offline !== null) {
      $xfer += $output->writeFieldBegin('is_offline', TType::BOOL, 10);
      $xfer += $output->writeBool($this->is_offline);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_readonly !== null) {
      $xfer += $output->writeFieldBegin('is_readonly', TType::BOOL, 11);
      $xfer += $output->writeBool($this->is_readonly);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_snapshot !== null) {
      $xfer += $output->writeFieldBegin('is_snapshot', TType::BOOL, 12);
      $xfer += $output->writeBool($this->is_snapshot);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_system !== null) {
      $xfer += $output->writeFieldBegin('is_system', TType::BOOL, 13);
      $xfer += $output->writeBool($this->is_system);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->location !== null) {
      $xfer += $output->writeFieldBegin('location', TType::STRING, 14);
      $xfer += $output->writeString($this->location);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logical_sector_size !== null) {
      $xfer += $output->writeFieldBegin('logical_sector_size', TType::I32, 15);
      $xfer += $output->writeI32($this->logical_sector_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->manufacturer !== null) {
      $xfer += $output->writeFieldBegin('manufacturer', TType::STRING, 16);
      $xfer += $output->writeString($this->manufacturer);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->model !== null) {
      $xfer += $output->writeFieldBegin('model', TType::STRING, 17);
      $xfer += $output->writeString($this->model);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number !== null) {
      $xfer += $output->writeFieldBegin('number', TType::I32, 18);
      $xfer += $output->writeI32($this->number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number_of_partitions !== null) {
      $xfer += $output->writeFieldBegin('number_of_partitions', TType::I32, 19);
      $xfer += $output->writeI32($this->number_of_partitions);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offline_reason !== null) {
      $xfer += $output->writeFieldBegin('offline_reason', TType::I16, 20);
      $xfer += $output->writeI16($this->offline_reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->partition_style !== null) {
      $xfer += $output->writeFieldBegin('partition_style', TType::I32, 21);
      $xfer += $output->writeI32($this->partition_style);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 22);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->physical_sector_size !== null) {
      $xfer += $output->writeFieldBegin('physical_sector_size', TType::I32, 23);
      $xfer += $output->writeI32($this->physical_sector_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sectors_per_track !== null) {
      $xfer += $output->writeFieldBegin('sectors_per_track', TType::I32, 24);
      $xfer += $output->writeI32($this->sectors_per_track);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serial_number !== null) {
      $xfer += $output->writeFieldBegin('serial_number', TType::STRING, 25);
      $xfer += $output->writeString($this->serial_number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->signature !== null) {
      $xfer += $output->writeFieldBegin('signature', TType::I32, 26);
      $xfer += $output->writeI32($this->signature);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I64, 27);
      $xfer += $output->writeI64($this->size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uri !== null) {
      $xfer += $output->writeFieldBegin('uri', TType::STRING, 28);
      $xfer += $output->writeString($this->uri);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scsi_bus !== null) {
      $xfer += $output->writeFieldBegin('scsi_bus', TType::I32, 29);
      $xfer += $output->writeI32($this->scsi_bus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scsi_logical_unit !== null) {
      $xfer += $output->writeFieldBegin('scsi_logical_unit', TType::I16, 30);
      $xfer += $output->writeI16($this->scsi_logical_unit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scsi_port !== null) {
      $xfer += $output->writeFieldBegin('scsi_port', TType::I16, 31);
      $xfer += $output->writeI16($this->scsi_port);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scsi_target_id !== null) {
      $xfer += $output->writeFieldBegin('scsi_target_id', TType::I16, 32);
      $xfer += $output->writeI16($this->scsi_target_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unique_id !== null) {
      $xfer += $output->writeFieldBegin('unique_id', TType::STRING, 33);
      $xfer += $output->writeString($this->unique_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unique_id_format !== null) {
      $xfer += $output->writeFieldBegin('unique_id_format', TType::I16, 34);
      $xfer += $output->writeI16($this->unique_id_format);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->customized_id !== null) {
      $xfer += $output->writeFieldBegin('customized_id', TType::STRING, 35);
      $xfer += $output->writeString($this->customized_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class partition_info {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'access_paths',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    2 => array(
      'var' => 'disk_number',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'drive_letter',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'gpt_type',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'guid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'is_active',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    7 => array(
      'var' => 'is_boot',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    8 => array(
      'var' => 'is_hidden',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    9 => array(
      'var' => 'is_offline',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    10 => array(
      'var' => 'is_readonly',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    11 => array(
      'var' => 'is_shadowcopy',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    12 => array(
      'var' => 'is_system',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    13 => array(
      'var' => 'mbr_type',
      'isRequired' => false,
      'type' => TType::I16,
      ),
    14 => array(
      'var' => 'offset',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    15 => array(
      'var' => 'partition_number',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    16 => array(
      'var' => 'size',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var string[]
   */
  public $access_paths = null;
  /**
   * @var int
   */
  public $disk_number = -1;
  /**
   * @var string
   */
  public $drive_letter = "";
  /**
   * @var string
   */
  public $gpt_type = "";
  /**
   * @var string
   */
  public $guid = "";
  /**
   * @var bool
   */
  public $is_active = false;
  /**
   * @var bool
   */
  public $is_boot = false;
  /**
   * @var bool
   */
  public $is_hidden = false;
  /**
   * @var bool
   */
  public $is_offline = false;
  /**
   * @var bool
   */
  public $is_readonly = false;
  /**
   * @var bool
   */
  public $is_shadowcopy = false;
  /**
   * @var bool
   */
  public $is_system = false;
  /**
   * @var int
   */
  public $mbr_type = 0;
  /**
   * @var int
   */
  public $offset = 0;
  /**
   * @var int
   */
  public $partition_number = -1;
  /**
   * @var int
   */
  public $size = 0;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['access_paths'])) {
        $this->access_paths = $vals['access_paths'];
      }
      if (isset($vals['disk_number'])) {
        $this->disk_number = $vals['disk_number'];
      }
      if (isset($vals['drive_letter'])) {
        $this->drive_letter = $vals['drive_letter'];
      }
      if (isset($vals['gpt_type'])) {
        $this->gpt_type = $vals['gpt_type'];
      }
      if (isset($vals['guid'])) {
        $this->guid = $vals['guid'];
      }
      if (isset($vals['is_active'])) {
        $this->is_active = $vals['is_active'];
      }
      if (isset($vals['is_boot'])) {
        $this->is_boot = $vals['is_boot'];
      }
      if (isset($vals['is_hidden'])) {
        $this->is_hidden = $vals['is_hidden'];
      }
      if (isset($vals['is_offline'])) {
        $this->is_offline = $vals['is_offline'];
      }
      if (isset($vals['is_readonly'])) {
        $this->is_readonly = $vals['is_readonly'];
      }
      if (isset($vals['is_shadowcopy'])) {
        $this->is_shadowcopy = $vals['is_shadowcopy'];
      }
      if (isset($vals['is_system'])) {
        $this->is_system = $vals['is_system'];
      }
      if (isset($vals['mbr_type'])) {
        $this->mbr_type = $vals['mbr_type'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['partition_number'])) {
        $this->partition_number = $vals['partition_number'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
    }
  }

  public function getName() {
    return 'partition_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::SET) {
            $this->access_paths = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readSetBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->access_paths[$elem5] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->disk_number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->drive_letter);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gpt_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->guid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_active);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_boot);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_hidden);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_offline);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_readonly);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_shadowcopy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_system);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->mbr_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->partition_number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('partition_info');
    if ($this->access_paths !== null) {
      if (!is_array($this->access_paths)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('access_paths', TType::SET, 1);
      {
        $output->writeSetBegin(TType::STRING, count($this->access_paths));
        {
          foreach ($this->access_paths as $iter6 => $iter7)
          {
            $xfer += $output->writeString($iter6);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disk_number !== null) {
      $xfer += $output->writeFieldBegin('disk_number', TType::I32, 2);
      $xfer += $output->writeI32($this->disk_number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->drive_letter !== null) {
      $xfer += $output->writeFieldBegin('drive_letter', TType::STRING, 3);
      $xfer += $output->writeString($this->drive_letter);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gpt_type !== null) {
      $xfer += $output->writeFieldBegin('gpt_type', TType::STRING, 4);
      $xfer += $output->writeString($this->gpt_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->guid !== null) {
      $xfer += $output->writeFieldBegin('guid', TType::STRING, 5);
      $xfer += $output->writeString($this->guid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_active !== null) {
      $xfer += $output->writeFieldBegin('is_active', TType::BOOL, 6);
      $xfer += $output->writeBool($this->is_active);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_boot !== null) {
      $xfer += $output->writeFieldBegin('is_boot', TType::BOOL, 7);
      $xfer += $output->writeBool($this->is_boot);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_hidden !== null) {
      $xfer += $output->writeFieldBegin('is_hidden', TType::BOOL, 8);
      $xfer += $output->writeBool($this->is_hidden);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_offline !== null) {
      $xfer += $output->writeFieldBegin('is_offline', TType::BOOL, 9);
      $xfer += $output->writeBool($this->is_offline);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_readonly !== null) {
      $xfer += $output->writeFieldBegin('is_readonly', TType::BOOL, 10);
      $xfer += $output->writeBool($this->is_readonly);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_shadowcopy !== null) {
      $xfer += $output->writeFieldBegin('is_shadowcopy', TType::BOOL, 11);
      $xfer += $output->writeBool($this->is_shadowcopy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_system !== null) {
      $xfer += $output->writeFieldBegin('is_system', TType::BOOL, 12);
      $xfer += $output->writeBool($this->is_system);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mbr_type !== null) {
      $xfer += $output->writeFieldBegin('mbr_type', TType::I16, 13);
      $xfer += $output->writeI16($this->mbr_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I64, 14);
      $xfer += $output->writeI64($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->partition_number !== null) {
      $xfer += $output->writeFieldBegin('partition_number', TType::I32, 15);
      $xfer += $output->writeI32($this->partition_number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I64, 16);
      $xfer += $output->writeI64($this->size);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class volume_info {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'access_paths',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    2 => array(
      'var' => 'cluster_access_path',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'drive_letter',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'drive_type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'file_system',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'file_system_catalogid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'file_system_label',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'object_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'path',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'size',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    11 => array(
      'var' => 'size_remaining',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var string[]
   */
  public $access_paths = null;
  /**
   * @var string
   */
  public $cluster_access_path = "";
  /**
   * @var string
   */
  public $drive_letter = "";
  /**
   * @var int
   */
  public $drive_type =   0;
  /**
   * @var string
   */
  public $file_system = "";
  /**
   * @var string
   */
  public $file_system_catalogid = "";
  /**
   * @var string
   */
  public $file_system_label = "";
  /**
   * @var string
   */
  public $object_id = "";
  /**
   * @var string
   */
  public $path = "";
  /**
   * @var int
   */
  public $size = 0;
  /**
   * @var int
   */
  public $size_remaining = 0;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['access_paths'])) {
        $this->access_paths = $vals['access_paths'];
      }
      if (isset($vals['cluster_access_path'])) {
        $this->cluster_access_path = $vals['cluster_access_path'];
      }
      if (isset($vals['drive_letter'])) {
        $this->drive_letter = $vals['drive_letter'];
      }
      if (isset($vals['drive_type'])) {
        $this->drive_type = $vals['drive_type'];
      }
      if (isset($vals['file_system'])) {
        $this->file_system = $vals['file_system'];
      }
      if (isset($vals['file_system_catalogid'])) {
        $this->file_system_catalogid = $vals['file_system_catalogid'];
      }
      if (isset($vals['file_system_label'])) {
        $this->file_system_label = $vals['file_system_label'];
      }
      if (isset($vals['object_id'])) {
        $this->object_id = $vals['object_id'];
      }
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
      if (isset($vals['size_remaining'])) {
        $this->size_remaining = $vals['size_remaining'];
      }
    }
  }

  public function getName() {
    return 'volume_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::SET) {
            $this->access_paths = array();
            $_size8 = 0;
            $_etype11 = 0;
            $xfer += $input->readSetBegin($_etype11, $_size8);
            for ($_i12 = 0; $_i12 < $_size8; ++$_i12)
            {
              $elem13 = null;
              $xfer += $input->readString($elem13);
              $this->access_paths[$elem13] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cluster_access_path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->drive_letter);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->drive_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->file_system);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->file_system_catalogid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->file_system_label);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->object_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->size_remaining);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('volume_info');
    if ($this->access_paths !== null) {
      if (!is_array($this->access_paths)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('access_paths', TType::SET, 1);
      {
        $output->writeSetBegin(TType::STRING, count($this->access_paths));
        {
          foreach ($this->access_paths as $iter14 => $iter15)
          {
            $xfer += $output->writeString($iter14);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cluster_access_path !== null) {
      $xfer += $output->writeFieldBegin('cluster_access_path', TType::STRING, 2);
      $xfer += $output->writeString($this->cluster_access_path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->drive_letter !== null) {
      $xfer += $output->writeFieldBegin('drive_letter', TType::STRING, 3);
      $xfer += $output->writeString($this->drive_letter);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->drive_type !== null) {
      $xfer += $output->writeFieldBegin('drive_type', TType::I32, 4);
      $xfer += $output->writeI32($this->drive_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->file_system !== null) {
      $xfer += $output->writeFieldBegin('file_system', TType::STRING, 5);
      $xfer += $output->writeString($this->file_system);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->file_system_catalogid !== null) {
      $xfer += $output->writeFieldBegin('file_system_catalogid', TType::STRING, 6);
      $xfer += $output->writeString($this->file_system_catalogid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->file_system_label !== null) {
      $xfer += $output->writeFieldBegin('file_system_label', TType::STRING, 7);
      $xfer += $output->writeString($this->file_system_label);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->object_id !== null) {
      $xfer += $output->writeFieldBegin('object_id', TType::STRING, 8);
      $xfer += $output->writeString($this->object_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 9);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I64, 10);
      $xfer += $output->writeI64($this->size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size_remaining !== null) {
      $xfer += $output->writeFieldBegin('size_remaining', TType::I64, 11);
      $xfer += $output->writeI64($this->size_remaining);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class network_info {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'adapter_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'description',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'dnss',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    4 => array(
      'var' => 'gateways',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    5 => array(
      'var' => 'ip_addresses',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    6 => array(
      'var' => 'is_dhcp_v4',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    7 => array(
      'var' => 'is_dhcp_v6',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    8 => array(
      'var' => 'mac_address',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'subnet_masks',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var string
   */
  public $adapter_name = "";
  /**
   * @var string
   */
  public $description = "";
  /**
   * @var string[]
   */
  public $dnss = null;
  /**
   * @var string[]
   */
  public $gateways = null;
  /**
   * @var string[]
   */
  public $ip_addresses = null;
  /**
   * @var bool
   */
  public $is_dhcp_v4 = false;
  /**
   * @var bool
   */
  public $is_dhcp_v6 = false;
  /**
   * @var string
   */
  public $mac_address = "";
  /**
   * @var string[]
   */
  public $subnet_masks = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['adapter_name'])) {
        $this->adapter_name = $vals['adapter_name'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['dnss'])) {
        $this->dnss = $vals['dnss'];
      }
      if (isset($vals['gateways'])) {
        $this->gateways = $vals['gateways'];
      }
      if (isset($vals['ip_addresses'])) {
        $this->ip_addresses = $vals['ip_addresses'];
      }
      if (isset($vals['is_dhcp_v4'])) {
        $this->is_dhcp_v4 = $vals['is_dhcp_v4'];
      }
      if (isset($vals['is_dhcp_v6'])) {
        $this->is_dhcp_v6 = $vals['is_dhcp_v6'];
      }
      if (isset($vals['mac_address'])) {
        $this->mac_address = $vals['mac_address'];
      }
      if (isset($vals['subnet_masks'])) {
        $this->subnet_masks = $vals['subnet_masks'];
      }
    }
  }

  public function getName() {
    return 'network_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->adapter_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->dnss = array();
            $_size16 = 0;
            $_etype19 = 0;
            $xfer += $input->readListBegin($_etype19, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $elem21 = null;
              $xfer += $input->readString($elem21);
              $this->dnss []= $elem21;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->gateways = array();
            $_size22 = 0;
            $_etype25 = 0;
            $xfer += $input->readListBegin($_etype25, $_size22);
            for ($_i26 = 0; $_i26 < $_size22; ++$_i26)
            {
              $elem27 = null;
              $xfer += $input->readString($elem27);
              $this->gateways []= $elem27;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->ip_addresses = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $xfer += $input->readString($elem33);
              $this->ip_addresses []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_dhcp_v4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_dhcp_v6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mac_address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->subnet_masks = array();
            $_size34 = 0;
            $_etype37 = 0;
            $xfer += $input->readListBegin($_etype37, $_size34);
            for ($_i38 = 0; $_i38 < $_size34; ++$_i38)
            {
              $elem39 = null;
              $xfer += $input->readString($elem39);
              $this->subnet_masks []= $elem39;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('network_info');
    if ($this->adapter_name !== null) {
      $xfer += $output->writeFieldBegin('adapter_name', TType::STRING, 1);
      $xfer += $output->writeString($this->adapter_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 2);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dnss !== null) {
      if (!is_array($this->dnss)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('dnss', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->dnss));
        {
          foreach ($this->dnss as $iter40)
          {
            $xfer += $output->writeString($iter40);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gateways !== null) {
      if (!is_array($this->gateways)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('gateways', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->gateways));
        {
          foreach ($this->gateways as $iter41)
          {
            $xfer += $output->writeString($iter41);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip_addresses !== null) {
      if (!is_array($this->ip_addresses)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ip_addresses', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRING, count($this->ip_addresses));
        {
          foreach ($this->ip_addresses as $iter42)
          {
            $xfer += $output->writeString($iter42);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_dhcp_v4 !== null) {
      $xfer += $output->writeFieldBegin('is_dhcp_v4', TType::BOOL, 6);
      $xfer += $output->writeBool($this->is_dhcp_v4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_dhcp_v6 !== null) {
      $xfer += $output->writeFieldBegin('is_dhcp_v6', TType::BOOL, 7);
      $xfer += $output->writeBool($this->is_dhcp_v6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mac_address !== null) {
      $xfer += $output->writeFieldBegin('mac_address', TType::STRING, 8);
      $xfer += $output->writeString($this->mac_address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subnet_masks !== null) {
      if (!is_array($this->subnet_masks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('subnet_masks', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRING, count($this->subnet_masks));
        {
          foreach ($this->subnet_masks as $iter43)
          {
            $xfer += $output->writeString($iter43);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class cluster_network {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'cluster_network_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'cluster_network_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'cluster_network_address',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'cluster_network_address_mask',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'network_infos',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\network_info',
        ),
      ),
    );

  /**
   * @var string
   */
  public $cluster_network_name = "";
  /**
   * @var string
   */
  public $cluster_network_id = "";
  /**
   * @var string
   */
  public $cluster_network_address = "";
  /**
   * @var string
   */
  public $cluster_network_address_mask = "";
  /**
   * @var \saasame\transport\network_info[]
   */
  public $network_infos = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['cluster_network_name'])) {
        $this->cluster_network_name = $vals['cluster_network_name'];
      }
      if (isset($vals['cluster_network_id'])) {
        $this->cluster_network_id = $vals['cluster_network_id'];
      }
      if (isset($vals['cluster_network_address'])) {
        $this->cluster_network_address = $vals['cluster_network_address'];
      }
      if (isset($vals['cluster_network_address_mask'])) {
        $this->cluster_network_address_mask = $vals['cluster_network_address_mask'];
      }
      if (isset($vals['network_infos'])) {
        $this->network_infos = $vals['network_infos'];
      }
    }
  }

  public function getName() {
    return 'cluster_network';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cluster_network_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cluster_network_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cluster_network_address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cluster_network_address_mask);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::SET) {
            $this->network_infos = array();
            $_size44 = 0;
            $_etype47 = 0;
            $xfer += $input->readSetBegin($_etype47, $_size44);
            for ($_i48 = 0; $_i48 < $_size44; ++$_i48)
            {
              $elem49 = null;
              $elem49 = new \saasame\transport\network_info();
              $xfer += $elem49->read($input);
              $this->network_infos[] = $elem49;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('cluster_network');
    if ($this->cluster_network_name !== null) {
      $xfer += $output->writeFieldBegin('cluster_network_name', TType::STRING, 1);
      $xfer += $output->writeString($this->cluster_network_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cluster_network_id !== null) {
      $xfer += $output->writeFieldBegin('cluster_network_id', TType::STRING, 2);
      $xfer += $output->writeString($this->cluster_network_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cluster_network_address !== null) {
      $xfer += $output->writeFieldBegin('cluster_network_address', TType::STRING, 3);
      $xfer += $output->writeString($this->cluster_network_address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cluster_network_address_mask !== null) {
      $xfer += $output->writeFieldBegin('cluster_network_address_mask', TType::STRING, 4);
      $xfer += $output->writeString($this->cluster_network_address_mask);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->network_infos !== null) {
      if (!is_array($this->network_infos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('network_infos', TType::SET, 5);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->network_infos));
        {
          foreach ($this->network_infos as $iter50 => $iter51)
          {
            $xfer += $iter51->write($output);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class cluster_group {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'group_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'group_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'group_owner',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'cluster_disks',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\disk_info',
        ),
      ),
    5 => array(
      'var' => 'cluster_partitions',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\volume_info',
        ),
      ),
    6 => array(
      'var' => 'cluster_network_infos',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\cluster_network',
        ),
      ),
    );

  /**
   * @var string
   */
  public $group_id = "";
  /**
   * @var string
   */
  public $group_name = "";
  /**
   * @var string
   */
  public $group_owner = "";
  /**
   * @var \saasame\transport\disk_info[]
   */
  public $cluster_disks = null;
  /**
   * @var \saasame\transport\volume_info[]
   */
  public $cluster_partitions = null;
  /**
   * @var \saasame\transport\cluster_network[]
   */
  public $cluster_network_infos = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['group_id'])) {
        $this->group_id = $vals['group_id'];
      }
      if (isset($vals['group_name'])) {
        $this->group_name = $vals['group_name'];
      }
      if (isset($vals['group_owner'])) {
        $this->group_owner = $vals['group_owner'];
      }
      if (isset($vals['cluster_disks'])) {
        $this->cluster_disks = $vals['cluster_disks'];
      }
      if (isset($vals['cluster_partitions'])) {
        $this->cluster_partitions = $vals['cluster_partitions'];
      }
      if (isset($vals['cluster_network_infos'])) {
        $this->cluster_network_infos = $vals['cluster_network_infos'];
      }
    }
  }

  public function getName() {
    return 'cluster_group';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->group_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->group_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->group_owner);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::SET) {
            $this->cluster_disks = array();
            $_size52 = 0;
            $_etype55 = 0;
            $xfer += $input->readSetBegin($_etype55, $_size52);
            for ($_i56 = 0; $_i56 < $_size52; ++$_i56)
            {
              $elem57 = null;
              $elem57 = new \saasame\transport\disk_info();
              $xfer += $elem57->read($input);
              $this->cluster_disks[] = $elem57;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::SET) {
            $this->cluster_partitions = array();
            $_size58 = 0;
            $_etype61 = 0;
            $xfer += $input->readSetBegin($_etype61, $_size58);
            for ($_i62 = 0; $_i62 < $_size58; ++$_i62)
            {
              $elem63 = null;
              $elem63 = new \saasame\transport\volume_info();
              $xfer += $elem63->read($input);
              $this->cluster_partitions[] = $elem63;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::SET) {
            $this->cluster_network_infos = array();
            $_size64 = 0;
            $_etype67 = 0;
            $xfer += $input->readSetBegin($_etype67, $_size64);
            for ($_i68 = 0; $_i68 < $_size64; ++$_i68)
            {
              $elem69 = null;
              $elem69 = new \saasame\transport\cluster_network();
              $xfer += $elem69->read($input);
              $this->cluster_network_infos[] = $elem69;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('cluster_group');
    if ($this->group_id !== null) {
      $xfer += $output->writeFieldBegin('group_id', TType::STRING, 1);
      $xfer += $output->writeString($this->group_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->group_name !== null) {
      $xfer += $output->writeFieldBegin('group_name', TType::STRING, 2);
      $xfer += $output->writeString($this->group_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->group_owner !== null) {
      $xfer += $output->writeFieldBegin('group_owner', TType::STRING, 3);
      $xfer += $output->writeString($this->group_owner);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cluster_disks !== null) {
      if (!is_array($this->cluster_disks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cluster_disks', TType::SET, 4);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->cluster_disks));
        {
          foreach ($this->cluster_disks as $iter70 => $iter71)
          {
            $xfer += $iter71->write($output);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cluster_partitions !== null) {
      if (!is_array($this->cluster_partitions)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cluster_partitions', TType::SET, 5);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->cluster_partitions));
        {
          foreach ($this->cluster_partitions as $iter72 => $iter73)
          {
            $xfer += $iter73->write($output);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cluster_network_infos !== null) {
      if (!is_array($this->cluster_network_infos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cluster_network_infos', TType::SET, 6);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->cluster_network_infos));
        {
          foreach ($this->cluster_network_infos as $iter74 => $iter75)
          {
            $xfer += $iter75->write($output);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class cluster_info {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'cluster_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'quorum_disk',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\disk_info',
      ),
    3 => array(
      'var' => 'cluster_nodes',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    4 => array(
      'var' => 'client_ids',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    5 => array(
      'var' => 'machine_ids',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    6 => array(
      'var' => 'cluster_network_infos',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\cluster_network',
        ),
      ),
    7 => array(
      'var' => 'cluster_groups',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\cluster_group',
        ),
      ),
    );

  /**
   * @var string
   */
  public $cluster_name = "";
  /**
   * @var \saasame\transport\disk_info
   */
  public $quorum_disk = null;
  /**
   * @var string[]
   */
  public $cluster_nodes = null;
  /**
   * @var string[]
   */
  public $client_ids = null;
  /**
   * @var string[]
   */
  public $machine_ids = null;
  /**
   * @var \saasame\transport\cluster_network[]
   */
  public $cluster_network_infos = null;
  /**
   * @var \saasame\transport\cluster_group[]
   */
  public $cluster_groups = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['cluster_name'])) {
        $this->cluster_name = $vals['cluster_name'];
      }
      if (isset($vals['quorum_disk'])) {
        $this->quorum_disk = $vals['quorum_disk'];
      }
      if (isset($vals['cluster_nodes'])) {
        $this->cluster_nodes = $vals['cluster_nodes'];
      }
      if (isset($vals['client_ids'])) {
        $this->client_ids = $vals['client_ids'];
      }
      if (isset($vals['machine_ids'])) {
        $this->machine_ids = $vals['machine_ids'];
      }
      if (isset($vals['cluster_network_infos'])) {
        $this->cluster_network_infos = $vals['cluster_network_infos'];
      }
      if (isset($vals['cluster_groups'])) {
        $this->cluster_groups = $vals['cluster_groups'];
      }
    }
  }

  public function getName() {
    return 'cluster_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cluster_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->quorum_disk = new \saasame\transport\disk_info();
            $xfer += $this->quorum_disk->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::SET) {
            $this->cluster_nodes = array();
            $_size76 = 0;
            $_etype79 = 0;
            $xfer += $input->readSetBegin($_etype79, $_size76);
            for ($_i80 = 0; $_i80 < $_size76; ++$_i80)
            {
              $elem81 = null;
              $xfer += $input->readString($elem81);
              $this->cluster_nodes[$elem81] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::SET) {
            $this->client_ids = array();
            $_size82 = 0;
            $_etype85 = 0;
            $xfer += $input->readSetBegin($_etype85, $_size82);
            for ($_i86 = 0; $_i86 < $_size82; ++$_i86)
            {
              $elem87 = null;
              $xfer += $input->readString($elem87);
              $this->client_ids[$elem87] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::SET) {
            $this->machine_ids = array();
            $_size88 = 0;
            $_etype91 = 0;
            $xfer += $input->readSetBegin($_etype91, $_size88);
            for ($_i92 = 0; $_i92 < $_size88; ++$_i92)
            {
              $elem93 = null;
              $xfer += $input->readString($elem93);
              $this->machine_ids[$elem93] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::SET) {
            $this->cluster_network_infos = array();
            $_size94 = 0;
            $_etype97 = 0;
            $xfer += $input->readSetBegin($_etype97, $_size94);
            for ($_i98 = 0; $_i98 < $_size94; ++$_i98)
            {
              $elem99 = null;
              $elem99 = new \saasame\transport\cluster_network();
              $xfer += $elem99->read($input);
              $this->cluster_network_infos[] = $elem99;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::SET) {
            $this->cluster_groups = array();
            $_size100 = 0;
            $_etype103 = 0;
            $xfer += $input->readSetBegin($_etype103, $_size100);
            for ($_i104 = 0; $_i104 < $_size100; ++$_i104)
            {
              $elem105 = null;
              $elem105 = new \saasame\transport\cluster_group();
              $xfer += $elem105->read($input);
              $this->cluster_groups[] = $elem105;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('cluster_info');
    if ($this->cluster_name !== null) {
      $xfer += $output->writeFieldBegin('cluster_name', TType::STRING, 1);
      $xfer += $output->writeString($this->cluster_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->quorum_disk !== null) {
      if (!is_object($this->quorum_disk)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('quorum_disk', TType::STRUCT, 2);
      $xfer += $this->quorum_disk->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cluster_nodes !== null) {
      if (!is_array($this->cluster_nodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cluster_nodes', TType::SET, 3);
      {
        $output->writeSetBegin(TType::STRING, count($this->cluster_nodes));
        {
          foreach ($this->cluster_nodes as $iter106 => $iter107)
          {
            $xfer += $output->writeString($iter106);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->client_ids !== null) {
      if (!is_array($this->client_ids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('client_ids', TType::SET, 4);
      {
        $output->writeSetBegin(TType::STRING, count($this->client_ids));
        {
          foreach ($this->client_ids as $iter108 => $iter109)
          {
            $xfer += $output->writeString($iter108);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->machine_ids !== null) {
      if (!is_array($this->machine_ids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('machine_ids', TType::SET, 5);
      {
        $output->writeSetBegin(TType::STRING, count($this->machine_ids));
        {
          foreach ($this->machine_ids as $iter110 => $iter111)
          {
            $xfer += $output->writeString($iter110);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cluster_network_infos !== null) {
      if (!is_array($this->cluster_network_infos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cluster_network_infos', TType::SET, 6);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->cluster_network_infos));
        {
          foreach ($this->cluster_network_infos as $iter112 => $iter113)
          {
            $xfer += $iter113->write($output);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cluster_groups !== null) {
      if (!is_array($this->cluster_groups)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cluster_groups', TType::SET, 7);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->cluster_groups));
        {
          foreach ($this->cluster_groups as $iter114 => $iter115)
          {
            $xfer += $iter115->write($output);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class os_version_info {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'csd_version',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'build_number',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'major_version',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'minor_version',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'platform_id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'product_type',
      'isRequired' => false,
      'type' => TType::I16,
      ),
    7 => array(
      'var' => 'servicepack_major',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    8 => array(
      'var' => 'servicepack_minor',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    9 => array(
      'var' => 'suite_mask',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $csd_version = "";
  /**
   * @var int
   */
  public $build_number = -1;
  /**
   * @var int
   */
  public $major_version = -1;
  /**
   * @var int
   */
  public $minor_version = -1;
  /**
   * @var int
   */
  public $platform_id = -1;
  /**
   * @var int
   */
  public $product_type = -1;
  /**
   * @var int
   */
  public $servicepack_major = -1;
  /**
   * @var int
   */
  public $servicepack_minor = -1;
  /**
   * @var int
   */
  public $suite_mask = -1;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['csd_version'])) {
        $this->csd_version = $vals['csd_version'];
      }
      if (isset($vals['build_number'])) {
        $this->build_number = $vals['build_number'];
      }
      if (isset($vals['major_version'])) {
        $this->major_version = $vals['major_version'];
      }
      if (isset($vals['minor_version'])) {
        $this->minor_version = $vals['minor_version'];
      }
      if (isset($vals['platform_id'])) {
        $this->platform_id = $vals['platform_id'];
      }
      if (isset($vals['product_type'])) {
        $this->product_type = $vals['product_type'];
      }
      if (isset($vals['servicepack_major'])) {
        $this->servicepack_major = $vals['servicepack_major'];
      }
      if (isset($vals['servicepack_minor'])) {
        $this->servicepack_minor = $vals['servicepack_minor'];
      }
      if (isset($vals['suite_mask'])) {
        $this->suite_mask = $vals['suite_mask'];
      }
    }
  }

  public function getName() {
    return 'os_version_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->csd_version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->build_number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->major_version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->minor_version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->platform_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->product_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->servicepack_major);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->servicepack_minor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->suite_mask);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('os_version_info');
    if ($this->csd_version !== null) {
      $xfer += $output->writeFieldBegin('csd_version', TType::STRING, 1);
      $xfer += $output->writeString($this->csd_version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->build_number !== null) {
      $xfer += $output->writeFieldBegin('build_number', TType::I32, 2);
      $xfer += $output->writeI32($this->build_number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->major_version !== null) {
      $xfer += $output->writeFieldBegin('major_version', TType::I32, 3);
      $xfer += $output->writeI32($this->major_version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->minor_version !== null) {
      $xfer += $output->writeFieldBegin('minor_version', TType::I32, 4);
      $xfer += $output->writeI32($this->minor_version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platform_id !== null) {
      $xfer += $output->writeFieldBegin('platform_id', TType::I32, 5);
      $xfer += $output->writeI32($this->platform_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->product_type !== null) {
      $xfer += $output->writeFieldBegin('product_type', TType::I16, 6);
      $xfer += $output->writeI16($this->product_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->servicepack_major !== null) {
      $xfer += $output->writeFieldBegin('servicepack_major', TType::I32, 7);
      $xfer += $output->writeI32($this->servicepack_major);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->servicepack_minor !== null) {
      $xfer += $output->writeFieldBegin('servicepack_minor', TType::I32, 8);
      $xfer += $output->writeI32($this->servicepack_minor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->suite_mask !== null) {
      $xfer += $output->writeFieldBegin('suite_mask', TType::I32, 9);
      $xfer += $output->writeI32($this->suite_mask);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class snapshot {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'snapshot_set_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'snapshot_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'original_volume_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'snapshot_device_object',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'creation_time_stamp',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'snapshots_count',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $snapshot_set_id = "";
  /**
   * @var string
   */
  public $snapshot_id = "";
  /**
   * @var string
   */
  public $original_volume_name = "";
  /**
   * @var string
   */
  public $snapshot_device_object = "";
  /**
   * @var string
   */
  public $creation_time_stamp = "";
  /**
   * @var int
   */
  public $snapshots_count = 0;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['snapshot_set_id'])) {
        $this->snapshot_set_id = $vals['snapshot_set_id'];
      }
      if (isset($vals['snapshot_id'])) {
        $this->snapshot_id = $vals['snapshot_id'];
      }
      if (isset($vals['original_volume_name'])) {
        $this->original_volume_name = $vals['original_volume_name'];
      }
      if (isset($vals['snapshot_device_object'])) {
        $this->snapshot_device_object = $vals['snapshot_device_object'];
      }
      if (isset($vals['creation_time_stamp'])) {
        $this->creation_time_stamp = $vals['creation_time_stamp'];
      }
      if (isset($vals['snapshots_count'])) {
        $this->snapshots_count = $vals['snapshots_count'];
      }
    }
  }

  public function getName() {
    return 'snapshot';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snapshot_set_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snapshot_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->original_volume_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snapshot_device_object);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->creation_time_stamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->snapshots_count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('snapshot');
    if ($this->snapshot_set_id !== null) {
      $xfer += $output->writeFieldBegin('snapshot_set_id', TType::STRING, 1);
      $xfer += $output->writeString($this->snapshot_set_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snapshot_id !== null) {
      $xfer += $output->writeFieldBegin('snapshot_id', TType::STRING, 2);
      $xfer += $output->writeString($this->snapshot_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->original_volume_name !== null) {
      $xfer += $output->writeFieldBegin('original_volume_name', TType::STRING, 3);
      $xfer += $output->writeString($this->original_volume_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snapshot_device_object !== null) {
      $xfer += $output->writeFieldBegin('snapshot_device_object', TType::STRING, 4);
      $xfer += $output->writeString($this->snapshot_device_object);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creation_time_stamp !== null) {
      $xfer += $output->writeFieldBegin('creation_time_stamp', TType::STRING, 5);
      $xfer += $output->writeString($this->creation_time_stamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snapshots_count !== null) {
      $xfer += $output->writeFieldBegin('snapshots_count', TType::I32, 6);
      $xfer += $output->writeI32($this->snapshots_count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class snapshot_result {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'snapshots',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\snapshot',
        ),
      ),
    );

  /**
   * @var \saasame\transport\snapshot[]
   */
  public $snapshots = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['snapshots'])) {
        $this->snapshots = $vals['snapshots'];
      }
    }
  }

  public function getName() {
    return 'snapshot_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->snapshots = array();
            $_size116 = 0;
            $_etype119 = 0;
            $xfer += $input->readListBegin($_etype119, $_size116);
            for ($_i120 = 0; $_i120 < $_size116; ++$_i120)
            {
              $elem121 = null;
              $elem121 = new \saasame\transport\snapshot();
              $xfer += $elem121->read($input);
              $this->snapshots []= $elem121;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('snapshot_result');
    if ($this->snapshots !== null) {
      if (!is_array($this->snapshots)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('snapshots', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->snapshots));
        {
          foreach ($this->snapshots as $iter122)
          {
            $xfer += $iter122->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class volume_bit_map {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'cluster_size',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'starting_lcn',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    3 => array(
      'var' => 'total_number_of_clusters',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    4 => array(
      'var' => 'bit_map',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'compressed',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var int
   */
  public $cluster_size = 0;
  /**
   * @var int
   */
  public $starting_lcn = 0;
  /**
   * @var int
   */
  public $total_number_of_clusters = 0;
  /**
   * @var string
   */
  public $bit_map = "";
  /**
   * @var bool
   */
  public $compressed = false;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['cluster_size'])) {
        $this->cluster_size = $vals['cluster_size'];
      }
      if (isset($vals['starting_lcn'])) {
        $this->starting_lcn = $vals['starting_lcn'];
      }
      if (isset($vals['total_number_of_clusters'])) {
        $this->total_number_of_clusters = $vals['total_number_of_clusters'];
      }
      if (isset($vals['bit_map'])) {
        $this->bit_map = $vals['bit_map'];
      }
      if (isset($vals['compressed'])) {
        $this->compressed = $vals['compressed'];
      }
    }
  }

  public function getName() {
    return 'volume_bit_map';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cluster_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->starting_lcn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->total_number_of_clusters);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bit_map);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->compressed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('volume_bit_map');
    if ($this->cluster_size !== null) {
      $xfer += $output->writeFieldBegin('cluster_size', TType::I32, 1);
      $xfer += $output->writeI32($this->cluster_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->starting_lcn !== null) {
      $xfer += $output->writeFieldBegin('starting_lcn', TType::I64, 2);
      $xfer += $output->writeI64($this->starting_lcn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total_number_of_clusters !== null) {
      $xfer += $output->writeFieldBegin('total_number_of_clusters', TType::I64, 3);
      $xfer += $output->writeI64($this->total_number_of_clusters);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bit_map !== null) {
      $xfer += $output->writeFieldBegin('bit_map', TType::STRING, 4);
      $xfer += $output->writeString($this->bit_map);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compressed !== null) {
      $xfer += $output->writeFieldBegin('compressed', TType::BOOL, 5);
      $xfer += $output->writeBool($this->compressed);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class replication_result {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'result',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'compressed',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var string
   */
  public $result = "";
  /**
   * @var bool
   */
  public $compressed = false;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['compressed'])) {
        $this->compressed = $vals['compressed'];
      }
    }
  }

  public function getName() {
    return 'replication_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->compressed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('replication_result');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compressed !== null) {
      $xfer += $output->writeFieldBegin('compressed', TType::BOOL, 2);
      $xfer += $output->writeBool($this->compressed);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class delete_snapshot_result {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'code',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'deleted_snapshots',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'non_deleted_snapshot_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $code = 0;
  /**
   * @var int
   */
  public $deleted_snapshots = 0;
  /**
   * @var string
   */
  public $non_deleted_snapshot_id = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['deleted_snapshots'])) {
        $this->deleted_snapshots = $vals['deleted_snapshots'];
      }
      if (isset($vals['non_deleted_snapshot_id'])) {
        $this->non_deleted_snapshot_id = $vals['non_deleted_snapshot_id'];
      }
    }
  }

  public function getName() {
    return 'delete_snapshot_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->deleted_snapshots);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->non_deleted_snapshot_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('delete_snapshot_result');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deleted_snapshots !== null) {
      $xfer += $output->writeFieldBegin('deleted_snapshots', TType::I32, 2);
      $xfer += $output->writeI32($this->deleted_snapshots);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->non_deleted_snapshot_id !== null) {
      $xfer += $output->writeFieldBegin('non_deleted_snapshot_id', TType::STRING, 3);
      $xfer += $output->writeString($this->non_deleted_snapshot_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_machine_info {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'architecture',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'client_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'client_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'domain',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'hal',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'initiator_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'is_oem',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    8 => array(
      'var' => 'logical_processors',
      'isRequired' => false,
      'type' => TType::I16,
      ),
    9 => array(
      'var' => 'machine_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'manufacturer',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'os_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'os_type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    13 => array(
      'var' => 'os_system_info',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    14 => array(
      'var' => 'physical_memory',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    15 => array(
      'var' => 'processors',
      'isRequired' => false,
      'type' => TType::I16,
      ),
    16 => array(
      'var' => 'role',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    17 => array(
      'var' => 'system_model',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    18 => array(
      'var' => 'system_root',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    19 => array(
      'var' => 'workgroup',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    20 => array(
      'var' => 'os_version',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\os_version_info',
      ),
    21 => array(
      'var' => 'cluster_infos',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\cluster_info',
        ),
      ),
    22 => array(
      'var' => 'disk_infos',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\disk_info',
        ),
      ),
    23 => array(
      'var' => 'network_infos',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\network_info',
        ),
      ),
    24 => array(
      'var' => 'partition_infos',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\partition_info',
        ),
      ),
    25 => array(
      'var' => 'volume_infos',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\volume_info',
        ),
      ),
    26 => array(
      'var' => 'is_vcbt_driver_installed',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    27 => array(
      'var' => 'is_vcbt_enabled',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    28 => array(
      'var' => 'current_vcbt_version',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    29 => array(
      'var' => 'installed_vcbt_version',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    30 => array(
      'var' => 'is_winpe',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    31 => array(
      'var' => 'system_default_ui_language',
      'isRequired' => false,
      'type' => TType::I16,
      ),
    );

  /**
   * @var string
   */
  public $architecture = "";
  /**
   * @var string
   */
  public $client_id = "";
  /**
   * @var string
   */
  public $client_name = "";
  /**
   * @var string
   */
  public $domain = "";
  /**
   * @var string
   */
  public $hal = "";
  /**
   * @var string
   */
  public $initiator_name = "";
  /**
   * @var bool
   */
  public $is_oem = false;
  /**
   * @var int
   */
  public $logical_processors = 0;
  /**
   * @var string
   */
  public $machine_id = "";
  /**
   * @var string
   */
  public $manufacturer = "";
  /**
   * @var string
   */
  public $os_name = "";
  /**
   * @var int
   */
  public $os_type = 0;
  /**
   * @var string
   */
  public $os_system_info = null;
  /**
   * @var int
   */
  public $physical_memory = 0;
  /**
   * @var int
   */
  public $processors = 0;
  /**
   * @var int
   */
  public $role = 0;
  /**
   * @var string
   */
  public $system_model = "";
  /**
   * @var string
   */
  public $system_root = "";
  /**
   * @var string
   */
  public $workgroup = "";
  /**
   * @var \saasame\transport\os_version_info
   */
  public $os_version = null;
  /**
   * @var \saasame\transport\cluster_info[]
   */
  public $cluster_infos = null;
  /**
   * @var \saasame\transport\disk_info[]
   */
  public $disk_infos = null;
  /**
   * @var \saasame\transport\network_info[]
   */
  public $network_infos = null;
  /**
   * @var \saasame\transport\partition_info[]
   */
  public $partition_infos = null;
  /**
   * @var \saasame\transport\volume_info[]
   */
  public $volume_infos = null;
  /**
   * @var bool
   */
  public $is_vcbt_driver_installed = false;
  /**
   * @var bool
   */
  public $is_vcbt_enabled = false;
  /**
   * @var string
   */
  public $current_vcbt_version = null;
  /**
   * @var string
   */
  public $installed_vcbt_version = null;
  /**
   * @var bool
   */
  public $is_winpe = false;
  /**
   * @var int
   */
  public $system_default_ui_language = 1033;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['architecture'])) {
        $this->architecture = $vals['architecture'];
      }
      if (isset($vals['client_id'])) {
        $this->client_id = $vals['client_id'];
      }
      if (isset($vals['client_name'])) {
        $this->client_name = $vals['client_name'];
      }
      if (isset($vals['domain'])) {
        $this->domain = $vals['domain'];
      }
      if (isset($vals['hal'])) {
        $this->hal = $vals['hal'];
      }
      if (isset($vals['initiator_name'])) {
        $this->initiator_name = $vals['initiator_name'];
      }
      if (isset($vals['is_oem'])) {
        $this->is_oem = $vals['is_oem'];
      }
      if (isset($vals['logical_processors'])) {
        $this->logical_processors = $vals['logical_processors'];
      }
      if (isset($vals['machine_id'])) {
        $this->machine_id = $vals['machine_id'];
      }
      if (isset($vals['manufacturer'])) {
        $this->manufacturer = $vals['manufacturer'];
      }
      if (isset($vals['os_name'])) {
        $this->os_name = $vals['os_name'];
      }
      if (isset($vals['os_type'])) {
        $this->os_type = $vals['os_type'];
      }
      if (isset($vals['os_system_info'])) {
        $this->os_system_info = $vals['os_system_info'];
      }
      if (isset($vals['physical_memory'])) {
        $this->physical_memory = $vals['physical_memory'];
      }
      if (isset($vals['processors'])) {
        $this->processors = $vals['processors'];
      }
      if (isset($vals['role'])) {
        $this->role = $vals['role'];
      }
      if (isset($vals['system_model'])) {
        $this->system_model = $vals['system_model'];
      }
      if (isset($vals['system_root'])) {
        $this->system_root = $vals['system_root'];
      }
      if (isset($vals['workgroup'])) {
        $this->workgroup = $vals['workgroup'];
      }
      if (isset($vals['os_version'])) {
        $this->os_version = $vals['os_version'];
      }
      if (isset($vals['cluster_infos'])) {
        $this->cluster_infos = $vals['cluster_infos'];
      }
      if (isset($vals['disk_infos'])) {
        $this->disk_infos = $vals['disk_infos'];
      }
      if (isset($vals['network_infos'])) {
        $this->network_infos = $vals['network_infos'];
      }
      if (isset($vals['partition_infos'])) {
        $this->partition_infos = $vals['partition_infos'];
      }
      if (isset($vals['volume_infos'])) {
        $this->volume_infos = $vals['volume_infos'];
      }
      if (isset($vals['is_vcbt_driver_installed'])) {
        $this->is_vcbt_driver_installed = $vals['is_vcbt_driver_installed'];
      }
      if (isset($vals['is_vcbt_enabled'])) {
        $this->is_vcbt_enabled = $vals['is_vcbt_enabled'];
      }
      if (isset($vals['current_vcbt_version'])) {
        $this->current_vcbt_version = $vals['current_vcbt_version'];
      }
      if (isset($vals['installed_vcbt_version'])) {
        $this->installed_vcbt_version = $vals['installed_vcbt_version'];
      }
      if (isset($vals['is_winpe'])) {
        $this->is_winpe = $vals['is_winpe'];
      }
      if (isset($vals['system_default_ui_language'])) {
        $this->system_default_ui_language = $vals['system_default_ui_language'];
      }
    }
  }

  public function getName() {
    return 'physical_machine_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->architecture);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->client_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->client_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->domain);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->hal);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->initiator_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_oem);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->logical_processors);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->machine_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->manufacturer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->os_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->os_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->os_system_info);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->physical_memory);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->processors);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->role);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->system_model);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->system_root);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->workgroup);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRUCT) {
            $this->os_version = new \saasame\transport\os_version_info();
            $xfer += $this->os_version->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::SET) {
            $this->cluster_infos = array();
            $_size123 = 0;
            $_etype126 = 0;
            $xfer += $input->readSetBegin($_etype126, $_size123);
            for ($_i127 = 0; $_i127 < $_size123; ++$_i127)
            {
              $elem128 = null;
              $elem128 = new \saasame\transport\cluster_info();
              $xfer += $elem128->read($input);
              $this->cluster_infos[] = $elem128;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::SET) {
            $this->disk_infos = array();
            $_size129 = 0;
            $_etype132 = 0;
            $xfer += $input->readSetBegin($_etype132, $_size129);
            for ($_i133 = 0; $_i133 < $_size129; ++$_i133)
            {
              $elem134 = null;
              $elem134 = new \saasame\transport\disk_info();
              $xfer += $elem134->read($input);
              $this->disk_infos[] = $elem134;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::SET) {
            $this->network_infos = array();
            $_size135 = 0;
            $_etype138 = 0;
            $xfer += $input->readSetBegin($_etype138, $_size135);
            for ($_i139 = 0; $_i139 < $_size135; ++$_i139)
            {
              $elem140 = null;
              $elem140 = new \saasame\transport\network_info();
              $xfer += $elem140->read($input);
              $this->network_infos[] = $elem140;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::SET) {
            $this->partition_infos = array();
            $_size141 = 0;
            $_etype144 = 0;
            $xfer += $input->readSetBegin($_etype144, $_size141);
            for ($_i145 = 0; $_i145 < $_size141; ++$_i145)
            {
              $elem146 = null;
              $elem146 = new \saasame\transport\partition_info();
              $xfer += $elem146->read($input);
              $this->partition_infos[] = $elem146;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::SET) {
            $this->volume_infos = array();
            $_size147 = 0;
            $_etype150 = 0;
            $xfer += $input->readSetBegin($_etype150, $_size147);
            for ($_i151 = 0; $_i151 < $_size147; ++$_i151)
            {
              $elem152 = null;
              $elem152 = new \saasame\transport\volume_info();
              $xfer += $elem152->read($input);
              $this->volume_infos[] = $elem152;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_vcbt_driver_installed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_vcbt_enabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->current_vcbt_version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->installed_vcbt_version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_winpe);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->system_default_ui_language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_machine_info');
    if ($this->architecture !== null) {
      $xfer += $output->writeFieldBegin('architecture', TType::STRING, 1);
      $xfer += $output->writeString($this->architecture);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->client_id !== null) {
      $xfer += $output->writeFieldBegin('client_id', TType::STRING, 2);
      $xfer += $output->writeString($this->client_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->client_name !== null) {
      $xfer += $output->writeFieldBegin('client_name', TType::STRING, 3);
      $xfer += $output->writeString($this->client_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->domain !== null) {
      $xfer += $output->writeFieldBegin('domain', TType::STRING, 4);
      $xfer += $output->writeString($this->domain);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hal !== null) {
      $xfer += $output->writeFieldBegin('hal', TType::STRING, 5);
      $xfer += $output->writeString($this->hal);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->initiator_name !== null) {
      $xfer += $output->writeFieldBegin('initiator_name', TType::STRING, 6);
      $xfer += $output->writeString($this->initiator_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_oem !== null) {
      $xfer += $output->writeFieldBegin('is_oem', TType::BOOL, 7);
      $xfer += $output->writeBool($this->is_oem);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logical_processors !== null) {
      $xfer += $output->writeFieldBegin('logical_processors', TType::I16, 8);
      $xfer += $output->writeI16($this->logical_processors);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->machine_id !== null) {
      $xfer += $output->writeFieldBegin('machine_id', TType::STRING, 9);
      $xfer += $output->writeString($this->machine_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->manufacturer !== null) {
      $xfer += $output->writeFieldBegin('manufacturer', TType::STRING, 10);
      $xfer += $output->writeString($this->manufacturer);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->os_name !== null) {
      $xfer += $output->writeFieldBegin('os_name', TType::STRING, 11);
      $xfer += $output->writeString($this->os_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->os_type !== null) {
      $xfer += $output->writeFieldBegin('os_type', TType::I32, 12);
      $xfer += $output->writeI32($this->os_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->os_system_info !== null) {
      $xfer += $output->writeFieldBegin('os_system_info', TType::STRING, 13);
      $xfer += $output->writeString($this->os_system_info);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->physical_memory !== null) {
      $xfer += $output->writeFieldBegin('physical_memory', TType::I64, 14);
      $xfer += $output->writeI64($this->physical_memory);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->processors !== null) {
      $xfer += $output->writeFieldBegin('processors', TType::I16, 15);
      $xfer += $output->writeI16($this->processors);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->role !== null) {
      $xfer += $output->writeFieldBegin('role', TType::I32, 16);
      $xfer += $output->writeI32($this->role);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->system_model !== null) {
      $xfer += $output->writeFieldBegin('system_model', TType::STRING, 17);
      $xfer += $output->writeString($this->system_model);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->system_root !== null) {
      $xfer += $output->writeFieldBegin('system_root', TType::STRING, 18);
      $xfer += $output->writeString($this->system_root);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->workgroup !== null) {
      $xfer += $output->writeFieldBegin('workgroup', TType::STRING, 19);
      $xfer += $output->writeString($this->workgroup);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->os_version !== null) {
      if (!is_object($this->os_version)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('os_version', TType::STRUCT, 20);
      $xfer += $this->os_version->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cluster_infos !== null) {
      if (!is_array($this->cluster_infos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cluster_infos', TType::SET, 21);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->cluster_infos));
        {
          foreach ($this->cluster_infos as $iter153 => $iter154)
          {
            $xfer += $iter154->write($output);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disk_infos !== null) {
      if (!is_array($this->disk_infos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('disk_infos', TType::SET, 22);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->disk_infos));
        {
          foreach ($this->disk_infos as $iter155 => $iter156)
          {
            $xfer += $iter156->write($output);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->network_infos !== null) {
      if (!is_array($this->network_infos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('network_infos', TType::SET, 23);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->network_infos));
        {
          foreach ($this->network_infos as $iter157 => $iter158)
          {
            $xfer += $iter158->write($output);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->partition_infos !== null) {
      if (!is_array($this->partition_infos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('partition_infos', TType::SET, 24);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->partition_infos));
        {
          foreach ($this->partition_infos as $iter159 => $iter160)
          {
            $xfer += $iter160->write($output);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->volume_infos !== null) {
      if (!is_array($this->volume_infos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('volume_infos', TType::SET, 25);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->volume_infos));
        {
          foreach ($this->volume_infos as $iter161 => $iter162)
          {
            $xfer += $iter162->write($output);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_vcbt_driver_installed !== null) {
      $xfer += $output->writeFieldBegin('is_vcbt_driver_installed', TType::BOOL, 26);
      $xfer += $output->writeBool($this->is_vcbt_driver_installed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_vcbt_enabled !== null) {
      $xfer += $output->writeFieldBegin('is_vcbt_enabled', TType::BOOL, 27);
      $xfer += $output->writeBool($this->is_vcbt_enabled);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->current_vcbt_version !== null) {
      $xfer += $output->writeFieldBegin('current_vcbt_version', TType::STRING, 28);
      $xfer += $output->writeString($this->current_vcbt_version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->installed_vcbt_version !== null) {
      $xfer += $output->writeFieldBegin('installed_vcbt_version', TType::STRING, 29);
      $xfer += $output->writeString($this->installed_vcbt_version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_winpe !== null) {
      $xfer += $output->writeFieldBegin('is_winpe', TType::BOOL, 30);
      $xfer += $output->writeBool($this->is_winpe);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->system_default_ui_language !== null) {
      $xfer += $output->writeFieldBegin('system_default_ui_language', TType::I16, 31);
      $xfer += $output->writeI16($this->system_default_ui_language);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class virtual_host {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'name_ref',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'ip_addresses',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    4 => array(
      'var' => 'ip_address',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'product_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'version',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'power_state',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    8 => array(
      'var' => 'state',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'in_maintenance_mode',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    10 => array(
      'var' => 'vms',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    11 => array(
      'var' => 'datastores',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    12 => array(
      'var' => 'networks',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    13 => array(
      'var' => 'datacenter_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    14 => array(
      'var' => 'domain_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    15 => array(
      'var' => 'cluster_key',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    16 => array(
      'var' => 'full_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    17 => array(
      'var' => 'lic_features',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::LST,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::LST,
        'etype' => TType::STRING,
        'elem' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    18 => array(
      'var' => 'name_list',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    19 => array(
      'var' => 'domain_name_list',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    20 => array(
      'var' => 'connection_type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    21 => array(
      'var' => 'virtual_center_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    22 => array(
      'var' => 'virtual_center_version',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    23 => array(
      'var' => 'uuid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    24 => array(
      'var' => 'number_of_cpu_cores',
      'isRequired' => false,
      'type' => TType::I16,
      ),
    25 => array(
      'var' => 'number_of_cpu_packages',
      'isRequired' => false,
      'type' => TType::I16,
      ),
    26 => array(
      'var' => 'size_of_memory',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var string
   */
  public $name_ref = "";
  /**
   * @var string
   */
  public $name = "";
  /**
   * @var string[]
   */
  public $ip_addresses = null;
  /**
   * @var string
   */
  public $ip_address = "";
  /**
   * @var string
   */
  public $product_name = "";
  /**
   * @var string
   */
  public $version = "";
  /**
   * @var int
   */
  public $power_state =   0;
  /**
   * @var string
   */
  public $state = "";
  /**
   * @var bool
   */
  public $in_maintenance_mode = false;
  /**
   * @var array
   */
  public $vms = null;
  /**
   * @var array
   */
  public $datastores = null;
  /**
   * @var array
   */
  public $networks = null;
  /**
   * @var string
   */
  public $datacenter_name = "";
  /**
   * @var string
   */
  public $domain_name = "";
  /**
   * @var string
   */
  public $cluster_key = "";
  /**
   * @var string
   */
  public $full_name = "";
  /**
   * @var array
   */
  public $lic_features = null;
  /**
   * @var string[]
   */
  public $name_list = null;
  /**
   * @var string[]
   */
  public $domain_name_list = null;
  /**
   * @var int
   */
  public $connection_type =   0;
  /**
   * @var string
   */
  public $virtual_center_name = null;
  /**
   * @var string
   */
  public $virtual_center_version = null;
  /**
   * @var string
   */
  public $uuid = null;
  /**
   * @var int
   */
  public $number_of_cpu_cores = 0;
  /**
   * @var int
   */
  public $number_of_cpu_packages = 0;
  /**
   * @var int
   */
  public $size_of_memory = 0;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['name_ref'])) {
        $this->name_ref = $vals['name_ref'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['ip_addresses'])) {
        $this->ip_addresses = $vals['ip_addresses'];
      }
      if (isset($vals['ip_address'])) {
        $this->ip_address = $vals['ip_address'];
      }
      if (isset($vals['product_name'])) {
        $this->product_name = $vals['product_name'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['power_state'])) {
        $this->power_state = $vals['power_state'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['in_maintenance_mode'])) {
        $this->in_maintenance_mode = $vals['in_maintenance_mode'];
      }
      if (isset($vals['vms'])) {
        $this->vms = $vals['vms'];
      }
      if (isset($vals['datastores'])) {
        $this->datastores = $vals['datastores'];
      }
      if (isset($vals['networks'])) {
        $this->networks = $vals['networks'];
      }
      if (isset($vals['datacenter_name'])) {
        $this->datacenter_name = $vals['datacenter_name'];
      }
      if (isset($vals['domain_name'])) {
        $this->domain_name = $vals['domain_name'];
      }
      if (isset($vals['cluster_key'])) {
        $this->cluster_key = $vals['cluster_key'];
      }
      if (isset($vals['full_name'])) {
        $this->full_name = $vals['full_name'];
      }
      if (isset($vals['lic_features'])) {
        $this->lic_features = $vals['lic_features'];
      }
      if (isset($vals['name_list'])) {
        $this->name_list = $vals['name_list'];
      }
      if (isset($vals['domain_name_list'])) {
        $this->domain_name_list = $vals['domain_name_list'];
      }
      if (isset($vals['connection_type'])) {
        $this->connection_type = $vals['connection_type'];
      }
      if (isset($vals['virtual_center_name'])) {
        $this->virtual_center_name = $vals['virtual_center_name'];
      }
      if (isset($vals['virtual_center_version'])) {
        $this->virtual_center_version = $vals['virtual_center_version'];
      }
      if (isset($vals['uuid'])) {
        $this->uuid = $vals['uuid'];
      }
      if (isset($vals['number_of_cpu_cores'])) {
        $this->number_of_cpu_cores = $vals['number_of_cpu_cores'];
      }
      if (isset($vals['number_of_cpu_packages'])) {
        $this->number_of_cpu_packages = $vals['number_of_cpu_packages'];
      }
      if (isset($vals['size_of_memory'])) {
        $this->size_of_memory = $vals['size_of_memory'];
      }
    }
  }

  public function getName() {
    return 'virtual_host';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name_ref);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->ip_addresses = array();
            $_size163 = 0;
            $_etype166 = 0;
            $xfer += $input->readListBegin($_etype166, $_size163);
            for ($_i167 = 0; $_i167 < $_size163; ++$_i167)
            {
              $elem168 = null;
              $xfer += $input->readString($elem168);
              $this->ip_addresses []= $elem168;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip_address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->product_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->power_state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->in_maintenance_mode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::MAP) {
            $this->vms = array();
            $_size169 = 0;
            $_ktype170 = 0;
            $_vtype171 = 0;
            $xfer += $input->readMapBegin($_ktype170, $_vtype171, $_size169);
            for ($_i173 = 0; $_i173 < $_size169; ++$_i173)
            {
              $key174 = '';
              $val175 = '';
              $xfer += $input->readString($key174);
              $xfer += $input->readString($val175);
              $this->vms[$key174] = $val175;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::MAP) {
            $this->datastores = array();
            $_size176 = 0;
            $_ktype177 = 0;
            $_vtype178 = 0;
            $xfer += $input->readMapBegin($_ktype177, $_vtype178, $_size176);
            for ($_i180 = 0; $_i180 < $_size176; ++$_i180)
            {
              $key181 = '';
              $val182 = '';
              $xfer += $input->readString($key181);
              $xfer += $input->readString($val182);
              $this->datastores[$key181] = $val182;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::MAP) {
            $this->networks = array();
            $_size183 = 0;
            $_ktype184 = 0;
            $_vtype185 = 0;
            $xfer += $input->readMapBegin($_ktype184, $_vtype185, $_size183);
            for ($_i187 = 0; $_i187 < $_size183; ++$_i187)
            {
              $key188 = '';
              $val189 = '';
              $xfer += $input->readString($key188);
              $xfer += $input->readString($val189);
              $this->networks[$key188] = $val189;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->datacenter_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->domain_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cluster_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->full_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::MAP) {
            $this->lic_features = array();
            $_size190 = 0;
            $_ktype191 = 0;
            $_vtype192 = 0;
            $xfer += $input->readMapBegin($_ktype191, $_vtype192, $_size190);
            for ($_i194 = 0; $_i194 < $_size190; ++$_i194)
            {
              $key195 = '';
              $val196 = array();
              $xfer += $input->readString($key195);
              $val196 = array();
              $_size197 = 0;
              $_etype200 = 0;
              $xfer += $input->readListBegin($_etype200, $_size197);
              for ($_i201 = 0; $_i201 < $_size197; ++$_i201)
              {
                $elem202 = null;
                $xfer += $input->readString($elem202);
                $val196 []= $elem202;
              }
              $xfer += $input->readListEnd();
              $this->lic_features[$key195] = $val196;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::LST) {
            $this->name_list = array();
            $_size203 = 0;
            $_etype206 = 0;
            $xfer += $input->readListBegin($_etype206, $_size203);
            for ($_i207 = 0; $_i207 < $_size203; ++$_i207)
            {
              $elem208 = null;
              $xfer += $input->readString($elem208);
              $this->name_list []= $elem208;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::LST) {
            $this->domain_name_list = array();
            $_size209 = 0;
            $_etype212 = 0;
            $xfer += $input->readListBegin($_etype212, $_size209);
            for ($_i213 = 0; $_i213 < $_size209; ++$_i213)
            {
              $elem214 = null;
              $xfer += $input->readString($elem214);
              $this->domain_name_list []= $elem214;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->connection_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->virtual_center_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->virtual_center_version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->number_of_cpu_cores);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->number_of_cpu_packages);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->size_of_memory);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('virtual_host');
    if ($this->name_ref !== null) {
      $xfer += $output->writeFieldBegin('name_ref', TType::STRING, 1);
      $xfer += $output->writeString($this->name_ref);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip_addresses !== null) {
      if (!is_array($this->ip_addresses)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ip_addresses', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->ip_addresses));
        {
          foreach ($this->ip_addresses as $iter215)
          {
            $xfer += $output->writeString($iter215);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip_address !== null) {
      $xfer += $output->writeFieldBegin('ip_address', TType::STRING, 4);
      $xfer += $output->writeString($this->ip_address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->product_name !== null) {
      $xfer += $output->writeFieldBegin('product_name', TType::STRING, 5);
      $xfer += $output->writeString($this->product_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::STRING, 6);
      $xfer += $output->writeString($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->power_state !== null) {
      $xfer += $output->writeFieldBegin('power_state', TType::I32, 7);
      $xfer += $output->writeI32($this->power_state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::STRING, 8);
      $xfer += $output->writeString($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->in_maintenance_mode !== null) {
      $xfer += $output->writeFieldBegin('in_maintenance_mode', TType::BOOL, 9);
      $xfer += $output->writeBool($this->in_maintenance_mode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vms !== null) {
      if (!is_array($this->vms)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('vms', TType::MAP, 10);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->vms));
        {
          foreach ($this->vms as $kiter216 => $viter217)
          {
            $xfer += $output->writeString($kiter216);
            $xfer += $output->writeString($viter217);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->datastores !== null) {
      if (!is_array($this->datastores)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('datastores', TType::MAP, 11);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->datastores));
        {
          foreach ($this->datastores as $kiter218 => $viter219)
          {
            $xfer += $output->writeString($kiter218);
            $xfer += $output->writeString($viter219);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->networks !== null) {
      if (!is_array($this->networks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('networks', TType::MAP, 12);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->networks));
        {
          foreach ($this->networks as $kiter220 => $viter221)
          {
            $xfer += $output->writeString($kiter220);
            $xfer += $output->writeString($viter221);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->datacenter_name !== null) {
      $xfer += $output->writeFieldBegin('datacenter_name', TType::STRING, 13);
      $xfer += $output->writeString($this->datacenter_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->domain_name !== null) {
      $xfer += $output->writeFieldBegin('domain_name', TType::STRING, 14);
      $xfer += $output->writeString($this->domain_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cluster_key !== null) {
      $xfer += $output->writeFieldBegin('cluster_key', TType::STRING, 15);
      $xfer += $output->writeString($this->cluster_key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->full_name !== null) {
      $xfer += $output->writeFieldBegin('full_name', TType::STRING, 16);
      $xfer += $output->writeString($this->full_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lic_features !== null) {
      if (!is_array($this->lic_features)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lic_features', TType::MAP, 17);
      {
        $output->writeMapBegin(TType::STRING, TType::LST, count($this->lic_features));
        {
          foreach ($this->lic_features as $kiter222 => $viter223)
          {
            $xfer += $output->writeString($kiter222);
            {
              $output->writeListBegin(TType::STRING, count($viter223));
              {
                foreach ($viter223 as $iter224)
                {
                  $xfer += $output->writeString($iter224);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name_list !== null) {
      if (!is_array($this->name_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('name_list', TType::LST, 18);
      {
        $output->writeListBegin(TType::STRING, count($this->name_list));
        {
          foreach ($this->name_list as $iter225)
          {
            $xfer += $output->writeString($iter225);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->domain_name_list !== null) {
      if (!is_array($this->domain_name_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('domain_name_list', TType::LST, 19);
      {
        $output->writeListBegin(TType::STRING, count($this->domain_name_list));
        {
          foreach ($this->domain_name_list as $iter226)
          {
            $xfer += $output->writeString($iter226);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->connection_type !== null) {
      $xfer += $output->writeFieldBegin('connection_type', TType::I32, 20);
      $xfer += $output->writeI32($this->connection_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->virtual_center_name !== null) {
      $xfer += $output->writeFieldBegin('virtual_center_name', TType::STRING, 21);
      $xfer += $output->writeString($this->virtual_center_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->virtual_center_version !== null) {
      $xfer += $output->writeFieldBegin('virtual_center_version', TType::STRING, 22);
      $xfer += $output->writeString($this->virtual_center_version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uuid !== null) {
      $xfer += $output->writeFieldBegin('uuid', TType::STRING, 23);
      $xfer += $output->writeString($this->uuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number_of_cpu_cores !== null) {
      $xfer += $output->writeFieldBegin('number_of_cpu_cores', TType::I16, 24);
      $xfer += $output->writeI16($this->number_of_cpu_cores);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number_of_cpu_packages !== null) {
      $xfer += $output->writeFieldBegin('number_of_cpu_packages', TType::I16, 25);
      $xfer += $output->writeI16($this->number_of_cpu_packages);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size_of_memory !== null) {
      $xfer += $output->writeFieldBegin('size_of_memory', TType::I64, 26);
      $xfer += $output->writeI64($this->size_of_memory);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class virtual_network_adapter {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'key',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'mac_address',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'network',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'port_group',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'is_connected',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    8 => array(
      'var' => 'is_start_connected',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    9 => array(
      'var' => 'is_allow_guest_control',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    10 => array(
      'var' => 'address_type',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'ip_addresses',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $key = 0;
  /**
   * @var string
   */
  public $name = "";
  /**
   * @var string
   */
  public $mac_address = "";
  /**
   * @var string
   */
  public $network = "";
  /**
   * @var string
   */
  public $port_group = "";
  /**
   * @var string
   */
  public $type = "";
  /**
   * @var bool
   */
  public $is_connected = false;
  /**
   * @var bool
   */
  public $is_start_connected = false;
  /**
   * @var bool
   */
  public $is_allow_guest_control = false;
  /**
   * @var string
   */
  public $address_type = "";
  /**
   * @var string[]
   */
  public $ip_addresses = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['mac_address'])) {
        $this->mac_address = $vals['mac_address'];
      }
      if (isset($vals['network'])) {
        $this->network = $vals['network'];
      }
      if (isset($vals['port_group'])) {
        $this->port_group = $vals['port_group'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['is_connected'])) {
        $this->is_connected = $vals['is_connected'];
      }
      if (isset($vals['is_start_connected'])) {
        $this->is_start_connected = $vals['is_start_connected'];
      }
      if (isset($vals['is_allow_guest_control'])) {
        $this->is_allow_guest_control = $vals['is_allow_guest_control'];
      }
      if (isset($vals['address_type'])) {
        $this->address_type = $vals['address_type'];
      }
      if (isset($vals['ip_addresses'])) {
        $this->ip_addresses = $vals['ip_addresses'];
      }
    }
  }

  public function getName() {
    return 'virtual_network_adapter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mac_address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->network);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->port_group);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_connected);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_start_connected);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_allow_guest_control);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->ip_addresses = array();
            $_size227 = 0;
            $_etype230 = 0;
            $xfer += $input->readListBegin($_etype230, $_size227);
            for ($_i231 = 0; $_i231 < $_size227; ++$_i231)
            {
              $elem232 = null;
              $xfer += $input->readString($elem232);
              $this->ip_addresses []= $elem232;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('virtual_network_adapter');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::I32, 1);
      $xfer += $output->writeI32($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mac_address !== null) {
      $xfer += $output->writeFieldBegin('mac_address', TType::STRING, 3);
      $xfer += $output->writeString($this->mac_address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->network !== null) {
      $xfer += $output->writeFieldBegin('network', TType::STRING, 4);
      $xfer += $output->writeString($this->network);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->port_group !== null) {
      $xfer += $output->writeFieldBegin('port_group', TType::STRING, 5);
      $xfer += $output->writeString($this->port_group);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 6);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_connected !== null) {
      $xfer += $output->writeFieldBegin('is_connected', TType::BOOL, 7);
      $xfer += $output->writeBool($this->is_connected);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_start_connected !== null) {
      $xfer += $output->writeFieldBegin('is_start_connected', TType::BOOL, 8);
      $xfer += $output->writeBool($this->is_start_connected);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_allow_guest_control !== null) {
      $xfer += $output->writeFieldBegin('is_allow_guest_control', TType::BOOL, 9);
      $xfer += $output->writeBool($this->is_allow_guest_control);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address_type !== null) {
      $xfer += $output->writeFieldBegin('address_type', TType::STRING, 10);
      $xfer += $output->writeString($this->address_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip_addresses !== null) {
      if (!is_array($this->ip_addresses)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ip_addresses', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRING, count($this->ip_addresses));
        {
          foreach ($this->ip_addresses as $iter233)
          {
            $xfer += $output->writeString($iter233);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class virtual_machine_snapshots {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'description',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'create_time',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'quiesced',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    5 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'backup_manifest',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'replay_supported',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    8 => array(
      'var' => 'child_snapshot_list',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\virtual_machine_snapshots',
        ),
      ),
    );

  /**
   * @var string
   */
  public $name = "";
  /**
   * @var string
   */
  public $description = "";
  /**
   * @var string
   */
  public $create_time = "";
  /**
   * @var bool
   */
  public $quiesced = false;
  /**
   * @var int
   */
  public $id = -1;
  /**
   * @var string
   */
  public $backup_manifest = "";
  /**
   * @var bool
   */
  public $replay_supported = false;
  /**
   * @var \saasame\transport\virtual_machine_snapshots[]
   */
  public $child_snapshot_list = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['create_time'])) {
        $this->create_time = $vals['create_time'];
      }
      if (isset($vals['quiesced'])) {
        $this->quiesced = $vals['quiesced'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['backup_manifest'])) {
        $this->backup_manifest = $vals['backup_manifest'];
      }
      if (isset($vals['replay_supported'])) {
        $this->replay_supported = $vals['replay_supported'];
      }
      if (isset($vals['child_snapshot_list'])) {
        $this->child_snapshot_list = $vals['child_snapshot_list'];
      }
    }
  }

  public function getName() {
    return 'virtual_machine_snapshots';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->create_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->quiesced);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->backup_manifest);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->replay_supported);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->child_snapshot_list = array();
            $_size234 = 0;
            $_etype237 = 0;
            $xfer += $input->readListBegin($_etype237, $_size234);
            for ($_i238 = 0; $_i238 < $_size234; ++$_i238)
            {
              $elem239 = null;
              $elem239 = new \saasame\transport\virtual_machine_snapshots();
              $xfer += $elem239->read($input);
              $this->child_snapshot_list []= $elem239;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('virtual_machine_snapshots');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 2);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_time !== null) {
      $xfer += $output->writeFieldBegin('create_time', TType::STRING, 3);
      $xfer += $output->writeString($this->create_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->quiesced !== null) {
      $xfer += $output->writeFieldBegin('quiesced', TType::BOOL, 4);
      $xfer += $output->writeBool($this->quiesced);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 5);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backup_manifest !== null) {
      $xfer += $output->writeFieldBegin('backup_manifest', TType::STRING, 6);
      $xfer += $output->writeString($this->backup_manifest);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replay_supported !== null) {
      $xfer += $output->writeFieldBegin('replay_supported', TType::BOOL, 7);
      $xfer += $output->writeBool($this->replay_supported);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->child_snapshot_list !== null) {
      if (!is_array($this->child_snapshot_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('child_snapshot_list', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRUCT, count($this->child_snapshot_list));
        {
          foreach ($this->child_snapshot_list as $iter240)
          {
            $xfer += $iter240->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class virtual_disk_info {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'key',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'size_kb',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    5 => array(
      'var' => 'size',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    6 => array(
      'var' => 'controller_type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'thin_provisioned',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var string
   */
  public $key = "";
  /**
   * @var string
   */
  public $name = "";
  /**
   * @var string
   */
  public $id = "";
  /**
   * @var int
   */
  public $size_kb = 0;
  /**
   * @var int
   */
  public $size = 0;
  /**
   * @var int
   */
  public $controller_type =   -1;
  /**
   * @var bool
   */
  public $thin_provisioned = false;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['size_kb'])) {
        $this->size_kb = $vals['size_kb'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
      if (isset($vals['controller_type'])) {
        $this->controller_type = $vals['controller_type'];
      }
      if (isset($vals['thin_provisioned'])) {
        $this->thin_provisioned = $vals['thin_provisioned'];
      }
    }
  }

  public function getName() {
    return 'virtual_disk_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->size_kb);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->controller_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->thin_provisioned);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('virtual_disk_info');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 3);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size_kb !== null) {
      $xfer += $output->writeFieldBegin('size_kb', TType::I64, 4);
      $xfer += $output->writeI64($this->size_kb);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I64, 5);
      $xfer += $output->writeI64($this->size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->controller_type !== null) {
      $xfer += $output->writeFieldBegin('controller_type', TType::I32, 6);
      $xfer += $output->writeI32($this->controller_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thin_provisioned !== null) {
      $xfer += $output->writeFieldBegin('thin_provisioned', TType::BOOL, 7);
      $xfer += $output->writeBool($this->thin_provisioned);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class virtual_machine {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'uuid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'host_key',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'host_ip',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'host_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'cluster_key',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'cluster_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'annotation',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'is_cpu_hot_add',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    10 => array(
      'var' => 'is_cpu_hot_remove',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    11 => array(
      'var' => 'memory_mb',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    12 => array(
      'var' => 'number_of_cpu',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    13 => array(
      'var' => 'is_template',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    14 => array(
      'var' => 'config_path',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    15 => array(
      'var' => 'config_path_file',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    16 => array(
      'var' => 'version',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    17 => array(
      'var' => 'power_state',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    18 => array(
      'var' => 'connection_state',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    19 => array(
      'var' => 'tools_status',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    20 => array(
      'var' => 'firmware',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    21 => array(
      'var' => 'guest_os_type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    22 => array(
      'var' => 'guest_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    23 => array(
      'var' => 'guest_os_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    24 => array(
      'var' => 'is_disk_uuid_enabled',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    25 => array(
      'var' => 'folder_path',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    26 => array(
      'var' => 'resource_pool_path',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    27 => array(
      'var' => 'disks',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\virtual_disk_info',
        ),
      ),
    28 => array(
      'var' => 'networks',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    29 => array(
      'var' => 'datacenter_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    30 => array(
      'var' => 'network_adapters',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\virtual_network_adapter',
        ),
      ),
    31 => array(
      'var' => 'root_snapshot_list',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\virtual_machine_snapshots',
        ),
      ),
    32 => array(
      'var' => 'guest_host_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    33 => array(
      'var' => 'guest_ip',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    34 => array(
      'var' => 'has_cdrom',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var string
   */
  public $uuid = "";
  /**
   * @var string
   */
  public $name = "";
  /**
   * @var string
   */
  public $host_key = "";
  /**
   * @var string
   */
  public $host_ip = "";
  /**
   * @var string
   */
  public $host_name = "";
  /**
   * @var string
   */
  public $cluster_key = "";
  /**
   * @var string
   */
  public $cluster_name = "";
  /**
   * @var string
   */
  public $annotation = "";
  /**
   * @var bool
   */
  public $is_cpu_hot_add = false;
  /**
   * @var bool
   */
  public $is_cpu_hot_remove = false;
  /**
   * @var int
   */
  public $memory_mb = 0;
  /**
   * @var int
   */
  public $number_of_cpu = 0;
  /**
   * @var bool
   */
  public $is_template = false;
  /**
   * @var string
   */
  public $config_path = "";
  /**
   * @var string
   */
  public $config_path_file = "";
  /**
   * @var int
   */
  public $version = 0;
  /**
   * @var int
   */
  public $power_state =   0;
  /**
   * @var int
   */
  public $connection_state =   0;
  /**
   * @var int
   */
  public $tools_status =   0;
  /**
   * @var int
   */
  public $firmware =   0;
  /**
   * @var int
   */
  public $guest_os_type =   0;
  /**
   * @var string
   */
  public $guest_id = "";
  /**
   * @var string
   */
  public $guest_os_name = "";
  /**
   * @var bool
   */
  public $is_disk_uuid_enabled = false;
  /**
   * @var string
   */
  public $folder_path = "";
  /**
   * @var string
   */
  public $resource_pool_path = "";
  /**
   * @var \saasame\transport\virtual_disk_info[]
   */
  public $disks = null;
  /**
   * @var array
   */
  public $networks = null;
  /**
   * @var string
   */
  public $datacenter_name = "";
  /**
   * @var \saasame\transport\virtual_network_adapter[]
   */
  public $network_adapters = null;
  /**
   * @var \saasame\transport\virtual_machine_snapshots[]
   */
  public $root_snapshot_list = null;
  /**
   * @var string
   */
  public $guest_host_name = "";
  /**
   * @var string
   */
  public $guest_ip = "";
  /**
   * @var bool
   */
  public $has_cdrom = false;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['uuid'])) {
        $this->uuid = $vals['uuid'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['host_key'])) {
        $this->host_key = $vals['host_key'];
      }
      if (isset($vals['host_ip'])) {
        $this->host_ip = $vals['host_ip'];
      }
      if (isset($vals['host_name'])) {
        $this->host_name = $vals['host_name'];
      }
      if (isset($vals['cluster_key'])) {
        $this->cluster_key = $vals['cluster_key'];
      }
      if (isset($vals['cluster_name'])) {
        $this->cluster_name = $vals['cluster_name'];
      }
      if (isset($vals['annotation'])) {
        $this->annotation = $vals['annotation'];
      }
      if (isset($vals['is_cpu_hot_add'])) {
        $this->is_cpu_hot_add = $vals['is_cpu_hot_add'];
      }
      if (isset($vals['is_cpu_hot_remove'])) {
        $this->is_cpu_hot_remove = $vals['is_cpu_hot_remove'];
      }
      if (isset($vals['memory_mb'])) {
        $this->memory_mb = $vals['memory_mb'];
      }
      if (isset($vals['number_of_cpu'])) {
        $this->number_of_cpu = $vals['number_of_cpu'];
      }
      if (isset($vals['is_template'])) {
        $this->is_template = $vals['is_template'];
      }
      if (isset($vals['config_path'])) {
        $this->config_path = $vals['config_path'];
      }
      if (isset($vals['config_path_file'])) {
        $this->config_path_file = $vals['config_path_file'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['power_state'])) {
        $this->power_state = $vals['power_state'];
      }
      if (isset($vals['connection_state'])) {
        $this->connection_state = $vals['connection_state'];
      }
      if (isset($vals['tools_status'])) {
        $this->tools_status = $vals['tools_status'];
      }
      if (isset($vals['firmware'])) {
        $this->firmware = $vals['firmware'];
      }
      if (isset($vals['guest_os_type'])) {
        $this->guest_os_type = $vals['guest_os_type'];
      }
      if (isset($vals['guest_id'])) {
        $this->guest_id = $vals['guest_id'];
      }
      if (isset($vals['guest_os_name'])) {
        $this->guest_os_name = $vals['guest_os_name'];
      }
      if (isset($vals['is_disk_uuid_enabled'])) {
        $this->is_disk_uuid_enabled = $vals['is_disk_uuid_enabled'];
      }
      if (isset($vals['folder_path'])) {
        $this->folder_path = $vals['folder_path'];
      }
      if (isset($vals['resource_pool_path'])) {
        $this->resource_pool_path = $vals['resource_pool_path'];
      }
      if (isset($vals['disks'])) {
        $this->disks = $vals['disks'];
      }
      if (isset($vals['networks'])) {
        $this->networks = $vals['networks'];
      }
      if (isset($vals['datacenter_name'])) {
        $this->datacenter_name = $vals['datacenter_name'];
      }
      if (isset($vals['network_adapters'])) {
        $this->network_adapters = $vals['network_adapters'];
      }
      if (isset($vals['root_snapshot_list'])) {
        $this->root_snapshot_list = $vals['root_snapshot_list'];
      }
      if (isset($vals['guest_host_name'])) {
        $this->guest_host_name = $vals['guest_host_name'];
      }
      if (isset($vals['guest_ip'])) {
        $this->guest_ip = $vals['guest_ip'];
      }
      if (isset($vals['has_cdrom'])) {
        $this->has_cdrom = $vals['has_cdrom'];
      }
    }
  }

  public function getName() {
    return 'virtual_machine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host_ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cluster_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cluster_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->annotation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_cpu_hot_add);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_cpu_hot_remove);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memory_mb);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->number_of_cpu);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_template);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->config_path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->config_path_file);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->power_state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->connection_state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tools_status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->firmware);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->guest_os_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->guest_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->guest_os_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_disk_uuid_enabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->folder_path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->resource_pool_path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::LST) {
            $this->disks = array();
            $_size241 = 0;
            $_etype244 = 0;
            $xfer += $input->readListBegin($_etype244, $_size241);
            for ($_i245 = 0; $_i245 < $_size241; ++$_i245)
            {
              $elem246 = null;
              $elem246 = new \saasame\transport\virtual_disk_info();
              $xfer += $elem246->read($input);
              $this->disks []= $elem246;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::MAP) {
            $this->networks = array();
            $_size247 = 0;
            $_ktype248 = 0;
            $_vtype249 = 0;
            $xfer += $input->readMapBegin($_ktype248, $_vtype249, $_size247);
            for ($_i251 = 0; $_i251 < $_size247; ++$_i251)
            {
              $key252 = '';
              $val253 = '';
              $xfer += $input->readString($key252);
              $xfer += $input->readString($val253);
              $this->networks[$key252] = $val253;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->datacenter_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::LST) {
            $this->network_adapters = array();
            $_size254 = 0;
            $_etype257 = 0;
            $xfer += $input->readListBegin($_etype257, $_size254);
            for ($_i258 = 0; $_i258 < $_size254; ++$_i258)
            {
              $elem259 = null;
              $elem259 = new \saasame\transport\virtual_network_adapter();
              $xfer += $elem259->read($input);
              $this->network_adapters []= $elem259;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::LST) {
            $this->root_snapshot_list = array();
            $_size260 = 0;
            $_etype263 = 0;
            $xfer += $input->readListBegin($_etype263, $_size260);
            for ($_i264 = 0; $_i264 < $_size260; ++$_i264)
            {
              $elem265 = null;
              $elem265 = new \saasame\transport\virtual_machine_snapshots();
              $xfer += $elem265->read($input);
              $this->root_snapshot_list []= $elem265;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->guest_host_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->guest_ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 34:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->has_cdrom);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('virtual_machine');
    if ($this->uuid !== null) {
      $xfer += $output->writeFieldBegin('uuid', TType::STRING, 1);
      $xfer += $output->writeString($this->uuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host_key !== null) {
      $xfer += $output->writeFieldBegin('host_key', TType::STRING, 3);
      $xfer += $output->writeString($this->host_key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host_ip !== null) {
      $xfer += $output->writeFieldBegin('host_ip', TType::STRING, 4);
      $xfer += $output->writeString($this->host_ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host_name !== null) {
      $xfer += $output->writeFieldBegin('host_name', TType::STRING, 5);
      $xfer += $output->writeString($this->host_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cluster_key !== null) {
      $xfer += $output->writeFieldBegin('cluster_key', TType::STRING, 6);
      $xfer += $output->writeString($this->cluster_key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cluster_name !== null) {
      $xfer += $output->writeFieldBegin('cluster_name', TType::STRING, 7);
      $xfer += $output->writeString($this->cluster_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->annotation !== null) {
      $xfer += $output->writeFieldBegin('annotation', TType::STRING, 8);
      $xfer += $output->writeString($this->annotation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_cpu_hot_add !== null) {
      $xfer += $output->writeFieldBegin('is_cpu_hot_add', TType::BOOL, 9);
      $xfer += $output->writeBool($this->is_cpu_hot_add);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_cpu_hot_remove !== null) {
      $xfer += $output->writeFieldBegin('is_cpu_hot_remove', TType::BOOL, 10);
      $xfer += $output->writeBool($this->is_cpu_hot_remove);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->memory_mb !== null) {
      $xfer += $output->writeFieldBegin('memory_mb', TType::I32, 11);
      $xfer += $output->writeI32($this->memory_mb);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number_of_cpu !== null) {
      $xfer += $output->writeFieldBegin('number_of_cpu', TType::I32, 12);
      $xfer += $output->writeI32($this->number_of_cpu);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_template !== null) {
      $xfer += $output->writeFieldBegin('is_template', TType::BOOL, 13);
      $xfer += $output->writeBool($this->is_template);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->config_path !== null) {
      $xfer += $output->writeFieldBegin('config_path', TType::STRING, 14);
      $xfer += $output->writeString($this->config_path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->config_path_file !== null) {
      $xfer += $output->writeFieldBegin('config_path_file', TType::STRING, 15);
      $xfer += $output->writeString($this->config_path_file);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 16);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->power_state !== null) {
      $xfer += $output->writeFieldBegin('power_state', TType::I32, 17);
      $xfer += $output->writeI32($this->power_state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->connection_state !== null) {
      $xfer += $output->writeFieldBegin('connection_state', TType::I32, 18);
      $xfer += $output->writeI32($this->connection_state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tools_status !== null) {
      $xfer += $output->writeFieldBegin('tools_status', TType::I32, 19);
      $xfer += $output->writeI32($this->tools_status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->firmware !== null) {
      $xfer += $output->writeFieldBegin('firmware', TType::I32, 20);
      $xfer += $output->writeI32($this->firmware);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->guest_os_type !== null) {
      $xfer += $output->writeFieldBegin('guest_os_type', TType::I32, 21);
      $xfer += $output->writeI32($this->guest_os_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->guest_id !== null) {
      $xfer += $output->writeFieldBegin('guest_id', TType::STRING, 22);
      $xfer += $output->writeString($this->guest_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->guest_os_name !== null) {
      $xfer += $output->writeFieldBegin('guest_os_name', TType::STRING, 23);
      $xfer += $output->writeString($this->guest_os_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_disk_uuid_enabled !== null) {
      $xfer += $output->writeFieldBegin('is_disk_uuid_enabled', TType::BOOL, 24);
      $xfer += $output->writeBool($this->is_disk_uuid_enabled);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->folder_path !== null) {
      $xfer += $output->writeFieldBegin('folder_path', TType::STRING, 25);
      $xfer += $output->writeString($this->folder_path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resource_pool_path !== null) {
      $xfer += $output->writeFieldBegin('resource_pool_path', TType::STRING, 26);
      $xfer += $output->writeString($this->resource_pool_path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disks !== null) {
      if (!is_array($this->disks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('disks', TType::LST, 27);
      {
        $output->writeListBegin(TType::STRUCT, count($this->disks));
        {
          foreach ($this->disks as $iter266)
          {
            $xfer += $iter266->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->networks !== null) {
      if (!is_array($this->networks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('networks', TType::MAP, 28);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->networks));
        {
          foreach ($this->networks as $kiter267 => $viter268)
          {
            $xfer += $output->writeString($kiter267);
            $xfer += $output->writeString($viter268);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->datacenter_name !== null) {
      $xfer += $output->writeFieldBegin('datacenter_name', TType::STRING, 29);
      $xfer += $output->writeString($this->datacenter_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->network_adapters !== null) {
      if (!is_array($this->network_adapters)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('network_adapters', TType::LST, 30);
      {
        $output->writeListBegin(TType::STRUCT, count($this->network_adapters));
        {
          foreach ($this->network_adapters as $iter269)
          {
            $xfer += $iter269->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->root_snapshot_list !== null) {
      if (!is_array($this->root_snapshot_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('root_snapshot_list', TType::LST, 31);
      {
        $output->writeListBegin(TType::STRUCT, count($this->root_snapshot_list));
        {
          foreach ($this->root_snapshot_list as $iter270)
          {
            $xfer += $iter270->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->guest_host_name !== null) {
      $xfer += $output->writeFieldBegin('guest_host_name', TType::STRING, 32);
      $xfer += $output->writeString($this->guest_host_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->guest_ip !== null) {
      $xfer += $output->writeFieldBegin('guest_ip', TType::STRING, 33);
      $xfer += $output->writeString($this->guest_ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->has_cdrom !== null) {
      $xfer += $output->writeFieldBegin('has_cdrom', TType::BOOL, 34);
      $xfer += $output->writeBool($this->has_cdrom);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class invalid_operation extends TException {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'what_op',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'why',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'format',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'arguments',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var int
   */
  public $what_op = null;
  /**
   * @var string
   */
  public $why = null;
  /**
   * @var string
   */
  public $format = "";
  /**
   * @var string[]
   */
  public $arguments = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['what_op'])) {
        $this->what_op = $vals['what_op'];
      }
      if (isset($vals['why'])) {
        $this->why = $vals['why'];
      }
      if (isset($vals['format'])) {
        $this->format = $vals['format'];
      }
      if (isset($vals['arguments'])) {
        $this->arguments = $vals['arguments'];
      }
    }
  }

  public function getName() {
    return 'invalid_operation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->what_op);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->why);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->format);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->arguments = array();
            $_size271 = 0;
            $_etype274 = 0;
            $xfer += $input->readListBegin($_etype274, $_size271);
            for ($_i275 = 0; $_i275 < $_size271; ++$_i275)
            {
              $elem276 = null;
              $xfer += $input->readString($elem276);
              $this->arguments []= $elem276;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('invalid_operation');
    if ($this->what_op !== null) {
      $xfer += $output->writeFieldBegin('what_op', TType::I32, 1);
      $xfer += $output->writeI32($this->what_op);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->why !== null) {
      $xfer += $output->writeFieldBegin('why', TType::STRING, 2);
      $xfer += $output->writeString($this->why);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->format !== null) {
      $xfer += $output->writeFieldBegin('format', TType::STRING, 5);
      $xfer += $output->writeString($this->format);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->arguments !== null) {
      if (!is_array($this->arguments)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('arguments', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRING, count($this->arguments));
        {
          foreach ($this->arguments as $iter277)
          {
            $xfer += $output->writeString($iter277);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class job_trigger {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'start',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'finish',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'interval',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'duration',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $type =   1;
  /**
   * @var string
   */
  public $start = "";
  /**
   * @var string
   */
  public $finish = "";
  /**
   * @var int
   */
  public $interval = 15;
  /**
   * @var string
   */
  public $id = "";
  /**
   * @var int
   */
  public $duration = 0;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['finish'])) {
        $this->finish = $vals['finish'];
      }
      if (isset($vals['interval'])) {
        $this->interval = $vals['interval'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['duration'])) {
        $this->duration = $vals['duration'];
      }
    }
  }

  public function getName() {
    return 'job_trigger';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->finish);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->interval);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->duration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('job_trigger');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 2);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->finish !== null) {
      $xfer += $output->writeFieldBegin('finish', TType::STRING, 3);
      $xfer += $output->writeString($this->finish);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->interval !== null) {
      $xfer += $output->writeFieldBegin('interval', TType::I32, 4);
      $xfer += $output->writeI32($this->interval);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 5);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->duration !== null) {
      $xfer += $output->writeFieldBegin('duration', TType::I32, 6);
      $xfer += $output->writeI32($this->duration);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class job_history {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'time',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'state',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'error',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'description',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'format',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'arguments',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    9 => array(
      'var' => 'is_display',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var string
   */
  public $time = "";
  /**
   * @var int
   */
  public $state =   1;
  /**
   * @var int
   */
  public $error = 0;
  /**
   * @var string
   */
  public $description = "";
  /**
   * @var string
   */
  public $format = "";
  /**
   * @var string[]
   */
  public $arguments = null;
  /**
   * @var bool
   */
  public $is_display = true;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['format'])) {
        $this->format = $vals['format'];
      }
      if (isset($vals['arguments'])) {
        $this->arguments = $vals['arguments'];
      }
      if (isset($vals['is_display'])) {
        $this->is_display = $vals['is_display'];
      }
    }
  }

  public function getName() {
    return 'job_history';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->format);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->arguments = array();
            $_size278 = 0;
            $_etype281 = 0;
            $xfer += $input->readListBegin($_etype281, $_size278);
            for ($_i282 = 0; $_i282 < $_size278; ++$_i282)
            {
              $elem283 = null;
              $xfer += $input->readString($elem283);
              $this->arguments []= $elem283;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_display);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('job_history');
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::STRING, 1);
      $xfer += $output->writeString($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 2);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::I32, 3);
      $xfer += $output->writeI32($this->error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 4);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->format !== null) {
      $xfer += $output->writeFieldBegin('format', TType::STRING, 7);
      $xfer += $output->writeString($this->format);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->arguments !== null) {
      if (!is_array($this->arguments)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('arguments', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRING, count($this->arguments));
        {
          foreach ($this->arguments as $iter284)
          {
            $xfer += $output->writeString($iter284);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_display !== null) {
      $xfer += $output->writeFieldBegin('is_display', TType::BOOL, 9);
      $xfer += $output->writeBool($this->is_display);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class create_job_detail {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'triggers',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\job_trigger',
        ),
      ),
    3 => array(
      'var' => 'management_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'mgmt_addr',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    5 => array(
      'var' => 'mgmt_port',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'is_ssl',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var int
   */
  public $type =   1;
  /**
   * @var \saasame\transport\job_trigger[]
   */
  public $triggers = null;
  /**
   * @var string
   */
  public $management_id = "";
  /**
   * @var string[]
   */
  public $mgmt_addr = null;
  /**
   * @var int
   */
  public $mgmt_port = 80;
  /**
   * @var bool
   */
  public $is_ssl = false;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['triggers'])) {
        $this->triggers = $vals['triggers'];
      }
      if (isset($vals['management_id'])) {
        $this->management_id = $vals['management_id'];
      }
      if (isset($vals['mgmt_addr'])) {
        $this->mgmt_addr = $vals['mgmt_addr'];
      }
      if (isset($vals['mgmt_port'])) {
        $this->mgmt_port = $vals['mgmt_port'];
      }
      if (isset($vals['is_ssl'])) {
        $this->is_ssl = $vals['is_ssl'];
      }
    }
  }

  public function getName() {
    return 'create_job_detail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->triggers = array();
            $_size285 = 0;
            $_etype288 = 0;
            $xfer += $input->readListBegin($_etype288, $_size285);
            for ($_i289 = 0; $_i289 < $_size285; ++$_i289)
            {
              $elem290 = null;
              $elem290 = new \saasame\transport\job_trigger();
              $xfer += $elem290->read($input);
              $this->triggers []= $elem290;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->management_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::SET) {
            $this->mgmt_addr = array();
            $_size291 = 0;
            $_etype294 = 0;
            $xfer += $input->readSetBegin($_etype294, $_size291);
            for ($_i295 = 0; $_i295 < $_size291; ++$_i295)
            {
              $elem296 = null;
              $xfer += $input->readString($elem296);
              $this->mgmt_addr[$elem296] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mgmt_port);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_ssl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('create_job_detail');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->triggers !== null) {
      if (!is_array($this->triggers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('triggers', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->triggers));
        {
          foreach ($this->triggers as $iter297)
          {
            $xfer += $iter297->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->management_id !== null) {
      $xfer += $output->writeFieldBegin('management_id', TType::STRING, 3);
      $xfer += $output->writeString($this->management_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mgmt_addr !== null) {
      if (!is_array($this->mgmt_addr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mgmt_addr', TType::SET, 4);
      {
        $output->writeSetBegin(TType::STRING, count($this->mgmt_addr));
        {
          foreach ($this->mgmt_addr as $iter298 => $iter299)
          {
            $xfer += $output->writeString($iter298);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mgmt_port !== null) {
      $xfer += $output->writeFieldBegin('mgmt_port', TType::I32, 5);
      $xfer += $output->writeI32($this->mgmt_port);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_ssl !== null) {
      $xfer += $output->writeFieldBegin('is_ssl', TType::BOOL, 6);
      $xfer += $output->writeBool($this->is_ssl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class packer_disk_image {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'parent',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'base',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $name = "";
  /**
   * @var string
   */
  public $parent = "";
  /**
   * @var string
   */
  public $base = "";

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['parent'])) {
        $this->parent = $vals['parent'];
      }
      if (isset($vals['base'])) {
        $this->base = $vals['base'];
      }
    }
  }

  public function getName() {
    return 'packer_disk_image';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->base);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('packer_disk_image');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parent !== null) {
      $xfer += $output->writeFieldBegin('parent', TType::STRING, 2);
      $xfer += $output->writeString($this->parent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->base !== null) {
      $xfer += $output->writeFieldBegin('base', TType::STRING, 3);
      $xfer += $output->writeString($this->base);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class virtual_partition_info {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'partition_number',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'offset',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    3 => array(
      'var' => 'size',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var int
   */
  public $partition_number = 0;
  /**
   * @var int
   */
  public $offset = 0;
  /**
   * @var int
   */
  public $size = 0;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['partition_number'])) {
        $this->partition_number = $vals['partition_number'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
    }
  }

  public function getName() {
    return 'virtual_partition_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->partition_number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('virtual_partition_info');
    if ($this->partition_number !== null) {
      $xfer += $output->writeFieldBegin('partition_number', TType::I32, 1);
      $xfer += $output->writeI32($this->partition_number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I64, 2);
      $xfer += $output->writeI64($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I64, 3);
      $xfer += $output->writeI64($this->size);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class virtual_disk_info_ex {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'size',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    3 => array(
      'var' => 'partition_style',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'guid',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'signature',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'is_system',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    7 => array(
      'var' => 'partitions',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\virtual_partition_info',
        ),
      ),
    );

  /**
   * @var string
   */
  public $id = "";
  /**
   * @var int
   */
  public $size = 0;
  /**
   * @var int
   */
  public $partition_style =   0;
  /**
   * @var string
   */
  public $guid = "";
  /**
   * @var int
   */
  public $signature = 0;
  /**
   * @var bool
   */
  public $is_system = false;
  /**
   * @var \saasame\transport\virtual_partition_info[]
   */
  public $partitions = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
      if (isset($vals['partition_style'])) {
        $this->partition_style = $vals['partition_style'];
      }
      if (isset($vals['guid'])) {
        $this->guid = $vals['guid'];
      }
      if (isset($vals['signature'])) {
        $this->signature = $vals['signature'];
      }
      if (isset($vals['is_system'])) {
        $this->is_system = $vals['is_system'];
      }
      if (isset($vals['partitions'])) {
        $this->partitions = $vals['partitions'];
      }
    }
  }

  public function getName() {
    return 'virtual_disk_info_ex';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->partition_style);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->guid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->signature);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_system);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::SET) {
            $this->partitions = array();
            $_size300 = 0;
            $_etype303 = 0;
            $xfer += $input->readSetBegin($_etype303, $_size300);
            for ($_i304 = 0; $_i304 < $_size300; ++$_i304)
            {
              $elem305 = null;
              $elem305 = new \saasame\transport\virtual_partition_info();
              $xfer += $elem305->read($input);
              $this->partitions[] = $elem305;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('virtual_disk_info_ex');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I64, 2);
      $xfer += $output->writeI64($this->size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->partition_style !== null) {
      $xfer += $output->writeFieldBegin('partition_style', TType::I32, 3);
      $xfer += $output->writeI32($this->partition_style);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->guid !== null) {
      $xfer += $output->writeFieldBegin('guid', TType::STRING, 4);
      $xfer += $output->writeString($this->guid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->signature !== null) {
      $xfer += $output->writeFieldBegin('signature', TType::I32, 5);
      $xfer += $output->writeI32($this->signature);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_system !== null) {
      $xfer += $output->writeFieldBegin('is_system', TType::BOOL, 6);
      $xfer += $output->writeBool($this->is_system);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->partitions !== null) {
      if (!is_array($this->partitions)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('partitions', TType::SET, 7);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->partitions));
        {
          foreach ($this->partitions as $iter306 => $iter307)
          {
            $xfer += $iter307->write($output);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class virtual_create_packer_job_detail {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'disks',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    2 => array(
      'var' => 'host',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'addr',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    4 => array(
      'var' => 'username',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'password',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'virtual_machine_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'snapshot',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'images',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\packer_disk_image',
        ),
      ),
    14 => array(
      'var' => 'backup_size',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I64,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I64,
        ),
      ),
    15 => array(
      'var' => 'backup_progress',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I64,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I64,
        ),
      ),
    16 => array(
      'var' => 'backup_image_offset',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I64,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I64,
        ),
      ),
    17 => array(
      'var' => 'previous_change_ids',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    18 => array(
      'var' => 'completed_blocks',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::LST,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::LST,
        'etype' => TType::STRUCT,
        'elem' => array(
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\io_changed_range',
          ),
        ),
      ),
    );

  /**
   * @var string[]
   */
  public $disks = null;
  /**
   * @var string
   */
  public $host = "";
  /**
   * @var string[]
   */
  public $addr = null;
  /**
   * @var string
   */
  public $username = "";
  /**
   * @var string
   */
  public $password = "";
  /**
   * @var string
   */
  public $virtual_machine_id = "";
  /**
   * @var string
   */
  public $snapshot = "";
  /**
   * @var array
   */
  public $images = null;
  /**
   * @var array
   */
  public $backup_size = null;
  /**
   * @var array
   */
  public $backup_progress = null;
  /**
   * @var array
   */
  public $backup_image_offset = null;
  /**
   * @var array
   */
  public $previous_change_ids = null;
  /**
   * @var array
   */
  public $completed_blocks = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['disks'])) {
        $this->disks = $vals['disks'];
      }
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
      if (isset($vals['addr'])) {
        $this->addr = $vals['addr'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['virtual_machine_id'])) {
        $this->virtual_machine_id = $vals['virtual_machine_id'];
      }
      if (isset($vals['snapshot'])) {
        $this->snapshot = $vals['snapshot'];
      }
      if (isset($vals['images'])) {
        $this->images = $vals['images'];
      }
      if (isset($vals['backup_size'])) {
        $this->backup_size = $vals['backup_size'];
      }
      if (isset($vals['backup_progress'])) {
        $this->backup_progress = $vals['backup_progress'];
      }
      if (isset($vals['backup_image_offset'])) {
        $this->backup_image_offset = $vals['backup_image_offset'];
      }
      if (isset($vals['previous_change_ids'])) {
        $this->previous_change_ids = $vals['previous_change_ids'];
      }
      if (isset($vals['completed_blocks'])) {
        $this->completed_blocks = $vals['completed_blocks'];
      }
    }
  }

  public function getName() {
    return 'virtual_create_packer_job_detail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::SET) {
            $this->disks = array();
            $_size308 = 0;
            $_etype311 = 0;
            $xfer += $input->readSetBegin($_etype311, $_size308);
            for ($_i312 = 0; $_i312 < $_size308; ++$_i312)
            {
              $elem313 = null;
              $xfer += $input->readString($elem313);
              $this->disks[$elem313] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::SET) {
            $this->addr = array();
            $_size314 = 0;
            $_etype317 = 0;
            $xfer += $input->readSetBegin($_etype317, $_size314);
            for ($_i318 = 0; $_i318 < $_size314; ++$_i318)
            {
              $elem319 = null;
              $xfer += $input->readString($elem319);
              $this->addr[$elem319] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->virtual_machine_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snapshot);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::MAP) {
            $this->images = array();
            $_size320 = 0;
            $_ktype321 = 0;
            $_vtype322 = 0;
            $xfer += $input->readMapBegin($_ktype321, $_vtype322, $_size320);
            for ($_i324 = 0; $_i324 < $_size320; ++$_i324)
            {
              $key325 = '';
              $val326 = new \saasame\transport\packer_disk_image();
              $xfer += $input->readString($key325);
              $val326 = new \saasame\transport\packer_disk_image();
              $xfer += $val326->read($input);
              $this->images[$key325] = $val326;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::MAP) {
            $this->backup_size = array();
            $_size327 = 0;
            $_ktype328 = 0;
            $_vtype329 = 0;
            $xfer += $input->readMapBegin($_ktype328, $_vtype329, $_size327);
            for ($_i331 = 0; $_i331 < $_size327; ++$_i331)
            {
              $key332 = '';
              $val333 = 0;
              $xfer += $input->readString($key332);
              $xfer += $input->readI64($val333);
              $this->backup_size[$key332] = $val333;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::MAP) {
            $this->backup_progress = array();
            $_size334 = 0;
            $_ktype335 = 0;
            $_vtype336 = 0;
            $xfer += $input->readMapBegin($_ktype335, $_vtype336, $_size334);
            for ($_i338 = 0; $_i338 < $_size334; ++$_i338)
            {
              $key339 = '';
              $val340 = 0;
              $xfer += $input->readString($key339);
              $xfer += $input->readI64($val340);
              $this->backup_progress[$key339] = $val340;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::MAP) {
            $this->backup_image_offset = array();
            $_size341 = 0;
            $_ktype342 = 0;
            $_vtype343 = 0;
            $xfer += $input->readMapBegin($_ktype342, $_vtype343, $_size341);
            for ($_i345 = 0; $_i345 < $_size341; ++$_i345)
            {
              $key346 = '';
              $val347 = 0;
              $xfer += $input->readString($key346);
              $xfer += $input->readI64($val347);
              $this->backup_image_offset[$key346] = $val347;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::MAP) {
            $this->previous_change_ids = array();
            $_size348 = 0;
            $_ktype349 = 0;
            $_vtype350 = 0;
            $xfer += $input->readMapBegin($_ktype349, $_vtype350, $_size348);
            for ($_i352 = 0; $_i352 < $_size348; ++$_i352)
            {
              $key353 = '';
              $val354 = '';
              $xfer += $input->readString($key353);
              $xfer += $input->readString($val354);
              $this->previous_change_ids[$key353] = $val354;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::MAP) {
            $this->completed_blocks = array();
            $_size355 = 0;
            $_ktype356 = 0;
            $_vtype357 = 0;
            $xfer += $input->readMapBegin($_ktype356, $_vtype357, $_size355);
            for ($_i359 = 0; $_i359 < $_size355; ++$_i359)
            {
              $key360 = '';
              $val361 = array();
              $xfer += $input->readString($key360);
              $val361 = array();
              $_size362 = 0;
              $_etype365 = 0;
              $xfer += $input->readListBegin($_etype365, $_size362);
              for ($_i366 = 0; $_i366 < $_size362; ++$_i366)
              {
                $elem367 = null;
                $elem367 = new \saasame\transport\io_changed_range();
                $xfer += $elem367->read($input);
                $val361 []= $elem367;
              }
              $xfer += $input->readListEnd();
              $this->completed_blocks[$key360] = $val361;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('virtual_create_packer_job_detail');
    if ($this->disks !== null) {
      if (!is_array($this->disks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('disks', TType::SET, 1);
      {
        $output->writeSetBegin(TType::STRING, count($this->disks));
        {
          foreach ($this->disks as $iter368 => $iter369)
          {
            $xfer += $output->writeString($iter368);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host !== null) {
      $xfer += $output->writeFieldBegin('host', TType::STRING, 2);
      $xfer += $output->writeString($this->host);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addr !== null) {
      if (!is_array($this->addr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('addr', TType::SET, 3);
      {
        $output->writeSetBegin(TType::STRING, count($this->addr));
        {
          foreach ($this->addr as $iter370 => $iter371)
          {
            $xfer += $output->writeString($iter370);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 4);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 5);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->virtual_machine_id !== null) {
      $xfer += $output->writeFieldBegin('virtual_machine_id', TType::STRING, 6);
      $xfer += $output->writeString($this->virtual_machine_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snapshot !== null) {
      $xfer += $output->writeFieldBegin('snapshot', TType::STRING, 9);
      $xfer += $output->writeString($this->snapshot);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->images !== null) {
      if (!is_array($this->images)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('images', TType::MAP, 10);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->images));
        {
          foreach ($this->images as $kiter372 => $viter373)
          {
            $xfer += $output->writeString($kiter372);
            $xfer += $viter373->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backup_size !== null) {
      if (!is_array($this->backup_size)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('backup_size', TType::MAP, 14);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_size));
        {
          foreach ($this->backup_size as $kiter374 => $viter375)
          {
            $xfer += $output->writeString($kiter374);
            $xfer += $output->writeI64($viter375);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backup_progress !== null) {
      if (!is_array($this->backup_progress)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('backup_progress', TType::MAP, 15);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_progress));
        {
          foreach ($this->backup_progress as $kiter376 => $viter377)
          {
            $xfer += $output->writeString($kiter376);
            $xfer += $output->writeI64($viter377);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backup_image_offset !== null) {
      if (!is_array($this->backup_image_offset)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('backup_image_offset', TType::MAP, 16);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_image_offset));
        {
          foreach ($this->backup_image_offset as $kiter378 => $viter379)
          {
            $xfer += $output->writeString($kiter378);
            $xfer += $output->writeI64($viter379);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->previous_change_ids !== null) {
      if (!is_array($this->previous_change_ids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('previous_change_ids', TType::MAP, 17);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->previous_change_ids));
        {
          foreach ($this->previous_change_ids as $kiter380 => $viter381)
          {
            $xfer += $output->writeString($kiter380);
            $xfer += $output->writeString($viter381);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->completed_blocks !== null) {
      if (!is_array($this->completed_blocks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('completed_blocks', TType::MAP, 18);
      {
        $output->writeMapBegin(TType::STRING, TType::LST, count($this->completed_blocks));
        {
          foreach ($this->completed_blocks as $kiter382 => $viter383)
          {
            $xfer += $output->writeString($kiter382);
            {
              $output->writeListBegin(TType::STRUCT, count($viter383));
              {
                foreach ($viter383 as $iter384)
                {
                  $xfer += $iter384->write($output);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_vcbt_journal {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'first_key',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    3 => array(
      'var' => 'latest_key',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    4 => array(
      'var' => 'lowest_valid_key',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var int
   */
  public $id = 0;
  /**
   * @var int
   */
  public $first_key = 0;
  /**
   * @var int
   */
  public $latest_key = 0;
  /**
   * @var int
   */
  public $lowest_valid_key = 0;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['first_key'])) {
        $this->first_key = $vals['first_key'];
      }
      if (isset($vals['latest_key'])) {
        $this->latest_key = $vals['latest_key'];
      }
      if (isset($vals['lowest_valid_key'])) {
        $this->lowest_valid_key = $vals['lowest_valid_key'];
      }
    }
  }

  public function getName() {
    return 'physical_vcbt_journal';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->first_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->latest_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lowest_valid_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_vcbt_journal');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 1);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->first_key !== null) {
      $xfer += $output->writeFieldBegin('first_key', TType::I64, 2);
      $xfer += $output->writeI64($this->first_key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->latest_key !== null) {
      $xfer += $output->writeFieldBegin('latest_key', TType::I64, 3);
      $xfer += $output->writeI64($this->latest_key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lowest_valid_key !== null) {
      $xfer += $output->writeFieldBegin('lowest_valid_key', TType::I64, 4);
      $xfer += $output->writeI64($this->lowest_valid_key);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class io_changed_range {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'offset',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'start',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    3 => array(
      'var' => 'length',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var int
   */
  public $offset = 0;
  /**
   * @var int
   */
  public $start = 0;
  /**
   * @var int
   */
  public $length = 0;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['length'])) {
        $this->length = $vals['length'];
      }
    }
  }

  public function getName() {
    return 'io_changed_range';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->length);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('io_changed_range');
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I64, 1);
      $xfer += $output->writeI64($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 2);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->length !== null) {
      $xfer += $output->writeFieldBegin('length', TType::I64, 3);
      $xfer += $output->writeI64($this->length);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_create_packer_job_detail {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'disks',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    2 => array(
      'var' => 'snapshots',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\snapshot',
        ),
      ),
    3 => array(
      'var' => 'previous_journals',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::I64,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::I64,
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\physical_vcbt_journal',
        ),
      ),
    4 => array(
      'var' => 'images',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\packer_disk_image',
        ),
      ),
    5 => array(
      'var' => 'backup_size',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I64,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I64,
        ),
      ),
    6 => array(
      'var' => 'backup_progress',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I64,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I64,
        ),
      ),
    7 => array(
      'var' => 'backup_image_offset',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I64,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I64,
        ),
      ),
    8 => array(
      'var' => 'cdr_journals',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::I64,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::I64,
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\physical_vcbt_journal',
        ),
      ),
    9 => array(
      'var' => 'cdr_changed_ranges',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::LST,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::LST,
        'etype' => TType::STRUCT,
        'elem' => array(
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\io_changed_range',
          ),
        ),
      ),
    10 => array(
      'var' => 'completed_blocks',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::LST,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::LST,
        'etype' => TType::STRUCT,
        'elem' => array(
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\io_changed_range',
          ),
        ),
      ),
    );

  /**
   * @var string[]
   */
  public $disks = null;
  /**
   * @var \saasame\transport\snapshot[]
   */
  public $snapshots = null;
  /**
   * @var array
   */
  public $previous_journals = null;
  /**
   * @var array
   */
  public $images = null;
  /**
   * @var array
   */
  public $backup_size = null;
  /**
   * @var array
   */
  public $backup_progress = null;
  /**
   * @var array
   */
  public $backup_image_offset = null;
  /**
   * @var array
   */
  public $cdr_journals = null;
  /**
   * @var array
   */
  public $cdr_changed_ranges = null;
  /**
   * @var array
   */
  public $completed_blocks = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['disks'])) {
        $this->disks = $vals['disks'];
      }
      if (isset($vals['snapshots'])) {
        $this->snapshots = $vals['snapshots'];
      }
      if (isset($vals['previous_journals'])) {
        $this->previous_journals = $vals['previous_journals'];
      }
      if (isset($vals['images'])) {
        $this->images = $vals['images'];
      }
      if (isset($vals['backup_size'])) {
        $this->backup_size = $vals['backup_size'];
      }
      if (isset($vals['backup_progress'])) {
        $this->backup_progress = $vals['backup_progress'];
      }
      if (isset($vals['backup_image_offset'])) {
        $this->backup_image_offset = $vals['backup_image_offset'];
      }
      if (isset($vals['cdr_journals'])) {
        $this->cdr_journals = $vals['cdr_journals'];
      }
      if (isset($vals['cdr_changed_ranges'])) {
        $this->cdr_changed_ranges = $vals['cdr_changed_ranges'];
      }
      if (isset($vals['completed_blocks'])) {
        $this->completed_blocks = $vals['completed_blocks'];
      }
    }
  }

  public function getName() {
    return 'physical_create_packer_job_detail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::SET) {
            $this->disks = array();
            $_size385 = 0;
            $_etype388 = 0;
            $xfer += $input->readSetBegin($_etype388, $_size385);
            for ($_i389 = 0; $_i389 < $_size385; ++$_i389)
            {
              $elem390 = null;
              $xfer += $input->readString($elem390);
              $this->disks[$elem390] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->snapshots = array();
            $_size391 = 0;
            $_etype394 = 0;
            $xfer += $input->readListBegin($_etype394, $_size391);
            for ($_i395 = 0; $_i395 < $_size391; ++$_i395)
            {
              $elem396 = null;
              $elem396 = new \saasame\transport\snapshot();
              $xfer += $elem396->read($input);
              $this->snapshots []= $elem396;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->previous_journals = array();
            $_size397 = 0;
            $_ktype398 = 0;
            $_vtype399 = 0;
            $xfer += $input->readMapBegin($_ktype398, $_vtype399, $_size397);
            for ($_i401 = 0; $_i401 < $_size397; ++$_i401)
            {
              $key402 = 0;
              $val403 = new \saasame\transport\physical_vcbt_journal();
              $xfer += $input->readI64($key402);
              $val403 = new \saasame\transport\physical_vcbt_journal();
              $xfer += $val403->read($input);
              $this->previous_journals[$key402] = $val403;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->images = array();
            $_size404 = 0;
            $_ktype405 = 0;
            $_vtype406 = 0;
            $xfer += $input->readMapBegin($_ktype405, $_vtype406, $_size404);
            for ($_i408 = 0; $_i408 < $_size404; ++$_i408)
            {
              $key409 = '';
              $val410 = new \saasame\transport\packer_disk_image();
              $xfer += $input->readString($key409);
              $val410 = new \saasame\transport\packer_disk_image();
              $xfer += $val410->read($input);
              $this->images[$key409] = $val410;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->backup_size = array();
            $_size411 = 0;
            $_ktype412 = 0;
            $_vtype413 = 0;
            $xfer += $input->readMapBegin($_ktype412, $_vtype413, $_size411);
            for ($_i415 = 0; $_i415 < $_size411; ++$_i415)
            {
              $key416 = '';
              $val417 = 0;
              $xfer += $input->readString($key416);
              $xfer += $input->readI64($val417);
              $this->backup_size[$key416] = $val417;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::MAP) {
            $this->backup_progress = array();
            $_size418 = 0;
            $_ktype419 = 0;
            $_vtype420 = 0;
            $xfer += $input->readMapBegin($_ktype419, $_vtype420, $_size418);
            for ($_i422 = 0; $_i422 < $_size418; ++$_i422)
            {
              $key423 = '';
              $val424 = 0;
              $xfer += $input->readString($key423);
              $xfer += $input->readI64($val424);
              $this->backup_progress[$key423] = $val424;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::MAP) {
            $this->backup_image_offset = array();
            $_size425 = 0;
            $_ktype426 = 0;
            $_vtype427 = 0;
            $xfer += $input->readMapBegin($_ktype426, $_vtype427, $_size425);
            for ($_i429 = 0; $_i429 < $_size425; ++$_i429)
            {
              $key430 = '';
              $val431 = 0;
              $xfer += $input->readString($key430);
              $xfer += $input->readI64($val431);
              $this->backup_image_offset[$key430] = $val431;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::MAP) {
            $this->cdr_journals = array();
            $_size432 = 0;
            $_ktype433 = 0;
            $_vtype434 = 0;
            $xfer += $input->readMapBegin($_ktype433, $_vtype434, $_size432);
            for ($_i436 = 0; $_i436 < $_size432; ++$_i436)
            {
              $key437 = 0;
              $val438 = new \saasame\transport\physical_vcbt_journal();
              $xfer += $input->readI64($key437);
              $val438 = new \saasame\transport\physical_vcbt_journal();
              $xfer += $val438->read($input);
              $this->cdr_journals[$key437] = $val438;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::MAP) {
            $this->cdr_changed_ranges = array();
            $_size439 = 0;
            $_ktype440 = 0;
            $_vtype441 = 0;
            $xfer += $input->readMapBegin($_ktype440, $_vtype441, $_size439);
            for ($_i443 = 0; $_i443 < $_size439; ++$_i443)
            {
              $key444 = '';
              $val445 = array();
              $xfer += $input->readString($key444);
              $val445 = array();
              $_size446 = 0;
              $_etype449 = 0;
              $xfer += $input->readListBegin($_etype449, $_size446);
              for ($_i450 = 0; $_i450 < $_size446; ++$_i450)
              {
                $elem451 = null;
                $elem451 = new \saasame\transport\io_changed_range();
                $xfer += $elem451->read($input);
                $val445 []= $elem451;
              }
              $xfer += $input->readListEnd();
              $this->cdr_changed_ranges[$key444] = $val445;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::MAP) {
            $this->completed_blocks = array();
            $_size452 = 0;
            $_ktype453 = 0;
            $_vtype454 = 0;
            $xfer += $input->readMapBegin($_ktype453, $_vtype454, $_size452);
            for ($_i456 = 0; $_i456 < $_size452; ++$_i456)
            {
              $key457 = '';
              $val458 = array();
              $xfer += $input->readString($key457);
              $val458 = array();
              $_size459 = 0;
              $_etype462 = 0;
              $xfer += $input->readListBegin($_etype462, $_size459);
              for ($_i463 = 0; $_i463 < $_size459; ++$_i463)
              {
                $elem464 = null;
                $elem464 = new \saasame\transport\io_changed_range();
                $xfer += $elem464->read($input);
                $val458 []= $elem464;
              }
              $xfer += $input->readListEnd();
              $this->completed_blocks[$key457] = $val458;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_create_packer_job_detail');
    if ($this->disks !== null) {
      if (!is_array($this->disks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('disks', TType::SET, 1);
      {
        $output->writeSetBegin(TType::STRING, count($this->disks));
        {
          foreach ($this->disks as $iter465 => $iter466)
          {
            $xfer += $output->writeString($iter465);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snapshots !== null) {
      if (!is_array($this->snapshots)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('snapshots', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->snapshots));
        {
          foreach ($this->snapshots as $iter467)
          {
            $xfer += $iter467->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->previous_journals !== null) {
      if (!is_array($this->previous_journals)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('previous_journals', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->previous_journals));
        {
          foreach ($this->previous_journals as $kiter468 => $viter469)
          {
            $xfer += $output->writeI64($kiter468);
            $xfer += $viter469->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->images !== null) {
      if (!is_array($this->images)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('images', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->images));
        {
          foreach ($this->images as $kiter470 => $viter471)
          {
            $xfer += $output->writeString($kiter470);
            $xfer += $viter471->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backup_size !== null) {
      if (!is_array($this->backup_size)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('backup_size', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_size));
        {
          foreach ($this->backup_size as $kiter472 => $viter473)
          {
            $xfer += $output->writeString($kiter472);
            $xfer += $output->writeI64($viter473);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backup_progress !== null) {
      if (!is_array($this->backup_progress)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('backup_progress', TType::MAP, 6);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_progress));
        {
          foreach ($this->backup_progress as $kiter474 => $viter475)
          {
            $xfer += $output->writeString($kiter474);
            $xfer += $output->writeI64($viter475);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backup_image_offset !== null) {
      if (!is_array($this->backup_image_offset)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('backup_image_offset', TType::MAP, 7);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_image_offset));
        {
          foreach ($this->backup_image_offset as $kiter476 => $viter477)
          {
            $xfer += $output->writeString($kiter476);
            $xfer += $output->writeI64($viter477);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cdr_journals !== null) {
      if (!is_array($this->cdr_journals)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cdr_journals', TType::MAP, 8);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->cdr_journals));
        {
          foreach ($this->cdr_journals as $kiter478 => $viter479)
          {
            $xfer += $output->writeI64($kiter478);
            $xfer += $viter479->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cdr_changed_ranges !== null) {
      if (!is_array($this->cdr_changed_ranges)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cdr_changed_ranges', TType::MAP, 9);
      {
        $output->writeMapBegin(TType::STRING, TType::LST, count($this->cdr_changed_ranges));
        {
          foreach ($this->cdr_changed_ranges as $kiter480 => $viter481)
          {
            $xfer += $output->writeString($kiter480);
            {
              $output->writeListBegin(TType::STRUCT, count($viter481));
              {
                foreach ($viter481 as $iter482)
                {
                  $xfer += $iter482->write($output);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->completed_blocks !== null) {
      if (!is_array($this->completed_blocks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('completed_blocks', TType::MAP, 10);
      {
        $output->writeMapBegin(TType::STRING, TType::LST, count($this->completed_blocks));
        {
          foreach ($this->completed_blocks as $kiter483 => $viter484)
          {
            $xfer += $output->writeString($kiter483);
            {
              $output->writeListBegin(TType::STRUCT, count($viter484));
              {
                foreach ($viter484 as $iter485)
                {
                  $xfer += $iter485->write($output);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class _create_packer_job_detail {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'p',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\physical_create_packer_job_detail',
      ),
    2 => array(
      'var' => 'v',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\virtual_create_packer_job_detail',
      ),
    );

  /**
   * @var \saasame\transport\physical_create_packer_job_detail
   */
  public $p = null;
  /**
   * @var \saasame\transport\virtual_create_packer_job_detail
   */
  public $v = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['p'])) {
        $this->p = $vals['p'];
      }
      if (isset($vals['v'])) {
        $this->v = $vals['v'];
      }
    }
  }

  public function getName() {
    return '_create_packer_job_detail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->p = new \saasame\transport\physical_create_packer_job_detail();
            $xfer += $this->p->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->v = new \saasame\transport\virtual_create_packer_job_detail();
            $xfer += $this->v->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('_create_packer_job_detail');
    if ($this->p !== null) {
      if (!is_object($this->p)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('p', TType::STRUCT, 1);
      $xfer += $this->p->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->v !== null) {
      if (!is_object($this->v)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('v', TType::STRUCT, 2);
      $xfer += $this->v->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class create_packer_job_detail {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'connection_ids',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    3 => array(
      'var' => 'carriers',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::SET,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::SET,
        'etype' => TType::STRING,
        'elem' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    4 => array(
      'var' => 'detail',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\_create_packer_job_detail',
      ),
    5 => array(
      'var' => 'checksum_verify',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    6 => array(
      'var' => 'timeout',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'is_encrypted',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    8 => array(
      'var' => 'worker_thread_number',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    9 => array(
      'var' => 'file_system_filter_enable',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    10 => array(
      'var' => 'min_transport_size',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    11 => array(
      'var' => 'full_min_transport_size',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    12 => array(
      'var' => 'is_compressed',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    13 => array(
      'var' => 'is_checksum',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    14 => array(
      'var' => 'priority_carrier',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    15 => array(
      'var' => 'is_only_single_system_disk',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    16 => array(
      'var' => 'is_compressed_by_packer',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var string[]
   */
  public $connection_ids = null;
  /**
   * @var array
   */
  public $carriers = null;
  /**
   * @var \saasame\transport\_create_packer_job_detail
   */
  public $detail = null;
  /**
   * @var bool
   */
  public $checksum_verify = true;
  /**
   * @var int
   */
  public $timeout = 300;
  /**
   * @var bool
   */
  public $is_encrypted = false;
  /**
   * @var int
   */
  public $worker_thread_number = 0;
  /**
   * @var bool
   */
  public $file_system_filter_enable = true;
  /**
   * @var int
   */
  public $min_transport_size = 0;
  /**
   * @var int
   */
  public $full_min_transport_size = 0;
  /**
   * @var bool
   */
  public $is_compressed = true;
  /**
   * @var bool
   */
  public $is_checksum = false;
  /**
   * @var array
   */
  public $priority_carrier = null;
  /**
   * @var bool
   */
  public $is_only_single_system_disk = false;
  /**
   * @var bool
   */
  public $is_compressed_by_packer = false;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['connection_ids'])) {
        $this->connection_ids = $vals['connection_ids'];
      }
      if (isset($vals['carriers'])) {
        $this->carriers = $vals['carriers'];
      }
      if (isset($vals['detail'])) {
        $this->detail = $vals['detail'];
      }
      if (isset($vals['checksum_verify'])) {
        $this->checksum_verify = $vals['checksum_verify'];
      }
      if (isset($vals['timeout'])) {
        $this->timeout = $vals['timeout'];
      }
      if (isset($vals['is_encrypted'])) {
        $this->is_encrypted = $vals['is_encrypted'];
      }
      if (isset($vals['worker_thread_number'])) {
        $this->worker_thread_number = $vals['worker_thread_number'];
      }
      if (isset($vals['file_system_filter_enable'])) {
        $this->file_system_filter_enable = $vals['file_system_filter_enable'];
      }
      if (isset($vals['min_transport_size'])) {
        $this->min_transport_size = $vals['min_transport_size'];
      }
      if (isset($vals['full_min_transport_size'])) {
        $this->full_min_transport_size = $vals['full_min_transport_size'];
      }
      if (isset($vals['is_compressed'])) {
        $this->is_compressed = $vals['is_compressed'];
      }
      if (isset($vals['is_checksum'])) {
        $this->is_checksum = $vals['is_checksum'];
      }
      if (isset($vals['priority_carrier'])) {
        $this->priority_carrier = $vals['priority_carrier'];
      }
      if (isset($vals['is_only_single_system_disk'])) {
        $this->is_only_single_system_disk = $vals['is_only_single_system_disk'];
      }
      if (isset($vals['is_compressed_by_packer'])) {
        $this->is_compressed_by_packer = $vals['is_compressed_by_packer'];
      }
    }
  }

  public function getName() {
    return 'create_packer_job_detail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::SET) {
            $this->connection_ids = array();
            $_size486 = 0;
            $_etype489 = 0;
            $xfer += $input->readSetBegin($_etype489, $_size486);
            for ($_i490 = 0; $_i490 < $_size486; ++$_i490)
            {
              $elem491 = null;
              $xfer += $input->readString($elem491);
              $this->connection_ids[$elem491] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->carriers = array();
            $_size492 = 0;
            $_ktype493 = 0;
            $_vtype494 = 0;
            $xfer += $input->readMapBegin($_ktype493, $_vtype494, $_size492);
            for ($_i496 = 0; $_i496 < $_size492; ++$_i496)
            {
              $key497 = '';
              $val498 = array();
              $xfer += $input->readString($key497);
              $val498 = array();
              $_size499 = 0;
              $_etype502 = 0;
              $xfer += $input->readSetBegin($_etype502, $_size499);
              for ($_i503 = 0; $_i503 < $_size499; ++$_i503)
              {
                $elem504 = null;
                $xfer += $input->readString($elem504);
                $val498[$elem504] = true;
              }
              $xfer += $input->readSetEnd();
              $this->carriers[$key497] = $val498;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->detail = new \saasame\transport\_create_packer_job_detail();
            $xfer += $this->detail->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->checksum_verify);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timeout);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_encrypted);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->worker_thread_number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->file_system_filter_enable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->min_transport_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->full_min_transport_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_compressed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_checksum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::MAP) {
            $this->priority_carrier = array();
            $_size505 = 0;
            $_ktype506 = 0;
            $_vtype507 = 0;
            $xfer += $input->readMapBegin($_ktype506, $_vtype507, $_size505);
            for ($_i509 = 0; $_i509 < $_size505; ++$_i509)
            {
              $key510 = '';
              $val511 = '';
              $xfer += $input->readString($key510);
              $xfer += $input->readString($val511);
              $this->priority_carrier[$key510] = $val511;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_only_single_system_disk);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_compressed_by_packer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('create_packer_job_detail');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->connection_ids !== null) {
      if (!is_array($this->connection_ids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('connection_ids', TType::SET, 2);
      {
        $output->writeSetBegin(TType::STRING, count($this->connection_ids));
        {
          foreach ($this->connection_ids as $iter512 => $iter513)
          {
            $xfer += $output->writeString($iter512);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->carriers !== null) {
      if (!is_array($this->carriers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('carriers', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::SET, count($this->carriers));
        {
          foreach ($this->carriers as $kiter514 => $viter515)
          {
            $xfer += $output->writeString($kiter514);
            {
              $output->writeSetBegin(TType::STRING, count($viter515));
              {
                foreach ($viter515 as $iter516 => $iter517)
                {
                  $xfer += $output->writeString($iter516);
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->detail !== null) {
      if (!is_object($this->detail)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('detail', TType::STRUCT, 4);
      $xfer += $this->detail->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->checksum_verify !== null) {
      $xfer += $output->writeFieldBegin('checksum_verify', TType::BOOL, 5);
      $xfer += $output->writeBool($this->checksum_verify);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeout !== null) {
      $xfer += $output->writeFieldBegin('timeout', TType::I32, 6);
      $xfer += $output->writeI32($this->timeout);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_encrypted !== null) {
      $xfer += $output->writeFieldBegin('is_encrypted', TType::BOOL, 7);
      $xfer += $output->writeBool($this->is_encrypted);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->worker_thread_number !== null) {
      $xfer += $output->writeFieldBegin('worker_thread_number', TType::I32, 8);
      $xfer += $output->writeI32($this->worker_thread_number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->file_system_filter_enable !== null) {
      $xfer += $output->writeFieldBegin('file_system_filter_enable', TType::BOOL, 9);
      $xfer += $output->writeBool($this->file_system_filter_enable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->min_transport_size !== null) {
      $xfer += $output->writeFieldBegin('min_transport_size', TType::I32, 10);
      $xfer += $output->writeI32($this->min_transport_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->full_min_transport_size !== null) {
      $xfer += $output->writeFieldBegin('full_min_transport_size', TType::I32, 11);
      $xfer += $output->writeI32($this->full_min_transport_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_compressed !== null) {
      $xfer += $output->writeFieldBegin('is_compressed', TType::BOOL, 12);
      $xfer += $output->writeBool($this->is_compressed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_checksum !== null) {
      $xfer += $output->writeFieldBegin('is_checksum', TType::BOOL, 13);
      $xfer += $output->writeBool($this->is_checksum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priority_carrier !== null) {
      if (!is_array($this->priority_carrier)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('priority_carrier', TType::MAP, 14);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->priority_carrier));
        {
          foreach ($this->priority_carrier as $kiter518 => $viter519)
          {
            $xfer += $output->writeString($kiter518);
            $xfer += $output->writeString($viter519);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_only_single_system_disk !== null) {
      $xfer += $output->writeFieldBegin('is_only_single_system_disk', TType::BOOL, 15);
      $xfer += $output->writeBool($this->is_only_single_system_disk);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_compressed_by_packer !== null) {
      $xfer += $output->writeFieldBegin('is_compressed_by_packer', TType::BOOL, 16);
      $xfer += $output->writeBool($this->is_compressed_by_packer);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class virtual_packer_job_detail {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'original_size',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I64,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I64,
        ),
      ),
    2 => array(
      'var' => 'backup_size',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I64,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I64,
        ),
      ),
    3 => array(
      'var' => 'backup_progress',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I64,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I64,
        ),
      ),
    4 => array(
      'var' => 'backup_image_offset',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I64,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I64,
        ),
      ),
    5 => array(
      'var' => 'change_ids',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    6 => array(
      'var' => 'guest_os_type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'completed_blocks',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::LST,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::LST,
        'etype' => TType::STRUCT,
        'elem' => array(
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\io_changed_range',
          ),
        ),
      ),
    8 => array(
      'var' => 'disk_infos',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\virtual_disk_info_ex',
        ),
      ),
    );

  /**
   * @var array
   */
  public $original_size = null;
  /**
   * @var array
   */
  public $backup_size = null;
  /**
   * @var array
   */
  public $backup_progress = null;
  /**
   * @var array
   */
  public $backup_image_offset = null;
  /**
   * @var array
   */
  public $change_ids = null;
  /**
   * @var int
   */
  public $guest_os_type =   0;
  /**
   * @var array
   */
  public $completed_blocks = null;
  /**
   * @var \saasame\transport\virtual_disk_info_ex[]
   */
  public $disk_infos = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['original_size'])) {
        $this->original_size = $vals['original_size'];
      }
      if (isset($vals['backup_size'])) {
        $this->backup_size = $vals['backup_size'];
      }
      if (isset($vals['backup_progress'])) {
        $this->backup_progress = $vals['backup_progress'];
      }
      if (isset($vals['backup_image_offset'])) {
        $this->backup_image_offset = $vals['backup_image_offset'];
      }
      if (isset($vals['change_ids'])) {
        $this->change_ids = $vals['change_ids'];
      }
      if (isset($vals['guest_os_type'])) {
        $this->guest_os_type = $vals['guest_os_type'];
      }
      if (isset($vals['completed_blocks'])) {
        $this->completed_blocks = $vals['completed_blocks'];
      }
      if (isset($vals['disk_infos'])) {
        $this->disk_infos = $vals['disk_infos'];
      }
    }
  }

  public function getName() {
    return 'virtual_packer_job_detail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->original_size = array();
            $_size520 = 0;
            $_ktype521 = 0;
            $_vtype522 = 0;
            $xfer += $input->readMapBegin($_ktype521, $_vtype522, $_size520);
            for ($_i524 = 0; $_i524 < $_size520; ++$_i524)
            {
              $key525 = '';
              $val526 = 0;
              $xfer += $input->readString($key525);
              $xfer += $input->readI64($val526);
              $this->original_size[$key525] = $val526;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->backup_size = array();
            $_size527 = 0;
            $_ktype528 = 0;
            $_vtype529 = 0;
            $xfer += $input->readMapBegin($_ktype528, $_vtype529, $_size527);
            for ($_i531 = 0; $_i531 < $_size527; ++$_i531)
            {
              $key532 = '';
              $val533 = 0;
              $xfer += $input->readString($key532);
              $xfer += $input->readI64($val533);
              $this->backup_size[$key532] = $val533;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->backup_progress = array();
            $_size534 = 0;
            $_ktype535 = 0;
            $_vtype536 = 0;
            $xfer += $input->readMapBegin($_ktype535, $_vtype536, $_size534);
            for ($_i538 = 0; $_i538 < $_size534; ++$_i538)
            {
              $key539 = '';
              $val540 = 0;
              $xfer += $input->readString($key539);
              $xfer += $input->readI64($val540);
              $this->backup_progress[$key539] = $val540;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->backup_image_offset = array();
            $_size541 = 0;
            $_ktype542 = 0;
            $_vtype543 = 0;
            $xfer += $input->readMapBegin($_ktype542, $_vtype543, $_size541);
            for ($_i545 = 0; $_i545 < $_size541; ++$_i545)
            {
              $key546 = '';
              $val547 = 0;
              $xfer += $input->readString($key546);
              $xfer += $input->readI64($val547);
              $this->backup_image_offset[$key546] = $val547;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->change_ids = array();
            $_size548 = 0;
            $_ktype549 = 0;
            $_vtype550 = 0;
            $xfer += $input->readMapBegin($_ktype549, $_vtype550, $_size548);
            for ($_i552 = 0; $_i552 < $_size548; ++$_i552)
            {
              $key553 = '';
              $val554 = '';
              $xfer += $input->readString($key553);
              $xfer += $input->readString($val554);
              $this->change_ids[$key553] = $val554;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->guest_os_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::MAP) {
            $this->completed_blocks = array();
            $_size555 = 0;
            $_ktype556 = 0;
            $_vtype557 = 0;
            $xfer += $input->readMapBegin($_ktype556, $_vtype557, $_size555);
            for ($_i559 = 0; $_i559 < $_size555; ++$_i559)
            {
              $key560 = '';
              $val561 = array();
              $xfer += $input->readString($key560);
              $val561 = array();
              $_size562 = 0;
              $_etype565 = 0;
              $xfer += $input->readListBegin($_etype565, $_size562);
              for ($_i566 = 0; $_i566 < $_size562; ++$_i566)
              {
                $elem567 = null;
                $elem567 = new \saasame\transport\io_changed_range();
                $xfer += $elem567->read($input);
                $val561 []= $elem567;
              }
              $xfer += $input->readListEnd();
              $this->completed_blocks[$key560] = $val561;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->disk_infos = array();
            $_size568 = 0;
            $_etype571 = 0;
            $xfer += $input->readListBegin($_etype571, $_size568);
            for ($_i572 = 0; $_i572 < $_size568; ++$_i572)
            {
              $elem573 = null;
              $elem573 = new \saasame\transport\virtual_disk_info_ex();
              $xfer += $elem573->read($input);
              $this->disk_infos []= $elem573;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('virtual_packer_job_detail');
    if ($this->original_size !== null) {
      if (!is_array($this->original_size)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('original_size', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->original_size));
        {
          foreach ($this->original_size as $kiter574 => $viter575)
          {
            $xfer += $output->writeString($kiter574);
            $xfer += $output->writeI64($viter575);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backup_size !== null) {
      if (!is_array($this->backup_size)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('backup_size', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_size));
        {
          foreach ($this->backup_size as $kiter576 => $viter577)
          {
            $xfer += $output->writeString($kiter576);
            $xfer += $output->writeI64($viter577);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backup_progress !== null) {
      if (!is_array($this->backup_progress)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('backup_progress', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_progress));
        {
          foreach ($this->backup_progress as $kiter578 => $viter579)
          {
            $xfer += $output->writeString($kiter578);
            $xfer += $output->writeI64($viter579);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backup_image_offset !== null) {
      if (!is_array($this->backup_image_offset)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('backup_image_offset', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_image_offset));
        {
          foreach ($this->backup_image_offset as $kiter580 => $viter581)
          {
            $xfer += $output->writeString($kiter580);
            $xfer += $output->writeI64($viter581);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->change_ids !== null) {
      if (!is_array($this->change_ids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('change_ids', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->change_ids));
        {
          foreach ($this->change_ids as $kiter582 => $viter583)
          {
            $xfer += $output->writeString($kiter582);
            $xfer += $output->writeString($viter583);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->guest_os_type !== null) {
      $xfer += $output->writeFieldBegin('guest_os_type', TType::I32, 6);
      $xfer += $output->writeI32($this->guest_os_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->completed_blocks !== null) {
      if (!is_array($this->completed_blocks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('completed_blocks', TType::MAP, 7);
      {
        $output->writeMapBegin(TType::STRING, TType::LST, count($this->completed_blocks));
        {
          foreach ($this->completed_blocks as $kiter584 => $viter585)
          {
            $xfer += $output->writeString($kiter584);
            {
              $output->writeListBegin(TType::STRUCT, count($viter585));
              {
                foreach ($viter585 as $iter586)
                {
                  $xfer += $iter586->write($output);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disk_infos !== null) {
      if (!is_array($this->disk_infos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('disk_infos', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRUCT, count($this->disk_infos));
        {
          foreach ($this->disk_infos as $iter587)
          {
            $xfer += $iter587->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class physical_packer_job_detail {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'original_size',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I64,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I64,
        ),
      ),
    2 => array(
      'var' => 'backup_size',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I64,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I64,
        ),
      ),
    3 => array(
      'var' => 'backup_progress',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I64,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I64,
        ),
      ),
    4 => array(
      'var' => 'backup_image_offset',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I64,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I64,
        ),
      ),
    5 => array(
      'var' => 'vcbt_journals',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::I64,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::I64,
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\physical_vcbt_journal',
        ),
      ),
    6 => array(
      'var' => 'guest_os_type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'cdr_changed_ranges',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::LST,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::LST,
        'etype' => TType::STRUCT,
        'elem' => array(
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\io_changed_range',
          ),
        ),
      ),
    8 => array(
      'var' => 'completed_blocks',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::LST,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::LST,
        'etype' => TType::STRUCT,
        'elem' => array(
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\io_changed_range',
          ),
        ),
      ),
    );

  /**
   * @var array
   */
  public $original_size = null;
  /**
   * @var array
   */
  public $backup_size = null;
  /**
   * @var array
   */
  public $backup_progress = null;
  /**
   * @var array
   */
  public $backup_image_offset = null;
  /**
   * @var array
   */
  public $vcbt_journals = null;
  /**
   * @var int
   */
  public $guest_os_type =   1;
  /**
   * @var array
   */
  public $cdr_changed_ranges = null;
  /**
   * @var array
   */
  public $completed_blocks = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['original_size'])) {
        $this->original_size = $vals['original_size'];
      }
      if (isset($vals['backup_size'])) {
        $this->backup_size = $vals['backup_size'];
      }
      if (isset($vals['backup_progress'])) {
        $this->backup_progress = $vals['backup_progress'];
      }
      if (isset($vals['backup_image_offset'])) {
        $this->backup_image_offset = $vals['backup_image_offset'];
      }
      if (isset($vals['vcbt_journals'])) {
        $this->vcbt_journals = $vals['vcbt_journals'];
      }
      if (isset($vals['guest_os_type'])) {
        $this->guest_os_type = $vals['guest_os_type'];
      }
      if (isset($vals['cdr_changed_ranges'])) {
        $this->cdr_changed_ranges = $vals['cdr_changed_ranges'];
      }
      if (isset($vals['completed_blocks'])) {
        $this->completed_blocks = $vals['completed_blocks'];
      }
    }
  }

  public function getName() {
    return 'physical_packer_job_detail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->original_size = array();
            $_size588 = 0;
            $_ktype589 = 0;
            $_vtype590 = 0;
            $xfer += $input->readMapBegin($_ktype589, $_vtype590, $_size588);
            for ($_i592 = 0; $_i592 < $_size588; ++$_i592)
            {
              $key593 = '';
              $val594 = 0;
              $xfer += $input->readString($key593);
              $xfer += $input->readI64($val594);
              $this->original_size[$key593] = $val594;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->backup_size = array();
            $_size595 = 0;
            $_ktype596 = 0;
            $_vtype597 = 0;
            $xfer += $input->readMapBegin($_ktype596, $_vtype597, $_size595);
            for ($_i599 = 0; $_i599 < $_size595; ++$_i599)
            {
              $key600 = '';
              $val601 = 0;
              $xfer += $input->readString($key600);
              $xfer += $input->readI64($val601);
              $this->backup_size[$key600] = $val601;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->backup_progress = array();
            $_size602 = 0;
            $_ktype603 = 0;
            $_vtype604 = 0;
            $xfer += $input->readMapBegin($_ktype603, $_vtype604, $_size602);
            for ($_i606 = 0; $_i606 < $_size602; ++$_i606)
            {
              $key607 = '';
              $val608 = 0;
              $xfer += $input->readString($key607);
              $xfer += $input->readI64($val608);
              $this->backup_progress[$key607] = $val608;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->backup_image_offset = array();
            $_size609 = 0;
            $_ktype610 = 0;
            $_vtype611 = 0;
            $xfer += $input->readMapBegin($_ktype610, $_vtype611, $_size609);
            for ($_i613 = 0; $_i613 < $_size609; ++$_i613)
            {
              $key614 = '';
              $val615 = 0;
              $xfer += $input->readString($key614);
              $xfer += $input->readI64($val615);
              $this->backup_image_offset[$key614] = $val615;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->vcbt_journals = array();
            $_size616 = 0;
            $_ktype617 = 0;
            $_vtype618 = 0;
            $xfer += $input->readMapBegin($_ktype617, $_vtype618, $_size616);
            for ($_i620 = 0; $_i620 < $_size616; ++$_i620)
            {
              $key621 = 0;
              $val622 = new \saasame\transport\physical_vcbt_journal();
              $xfer += $input->readI64($key621);
              $val622 = new \saasame\transport\physical_vcbt_journal();
              $xfer += $val622->read($input);
              $this->vcbt_journals[$key621] = $val622;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->guest_os_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::MAP) {
            $this->cdr_changed_ranges = array();
            $_size623 = 0;
            $_ktype624 = 0;
            $_vtype625 = 0;
            $xfer += $input->readMapBegin($_ktype624, $_vtype625, $_size623);
            for ($_i627 = 0; $_i627 < $_size623; ++$_i627)
            {
              $key628 = '';
              $val629 = array();
              $xfer += $input->readString($key628);
              $val629 = array();
              $_size630 = 0;
              $_etype633 = 0;
              $xfer += $input->readListBegin($_etype633, $_size630);
              for ($_i634 = 0; $_i634 < $_size630; ++$_i634)
              {
                $elem635 = null;
                $elem635 = new \saasame\transport\io_changed_range();
                $xfer += $elem635->read($input);
                $val629 []= $elem635;
              }
              $xfer += $input->readListEnd();
              $this->cdr_changed_ranges[$key628] = $val629;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::MAP) {
            $this->completed_blocks = array();
            $_size636 = 0;
            $_ktype637 = 0;
            $_vtype638 = 0;
            $xfer += $input->readMapBegin($_ktype637, $_vtype638, $_size636);
            for ($_i640 = 0; $_i640 < $_size636; ++$_i640)
            {
              $key641 = '';
              $val642 = array();
              $xfer += $input->readString($key641);
              $val642 = array();
              $_size643 = 0;
              $_etype646 = 0;
              $xfer += $input->readListBegin($_etype646, $_size643);
              for ($_i647 = 0; $_i647 < $_size643; ++$_i647)
              {
                $elem648 = null;
                $elem648 = new \saasame\transport\io_changed_range();
                $xfer += $elem648->read($input);
                $val642 []= $elem648;
              }
              $xfer += $input->readListEnd();
              $this->completed_blocks[$key641] = $val642;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('physical_packer_job_detail');
    if ($this->original_size !== null) {
      if (!is_array($this->original_size)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('original_size', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->original_size));
        {
          foreach ($this->original_size as $kiter649 => $viter650)
          {
            $xfer += $output->writeString($kiter649);
            $xfer += $output->writeI64($viter650);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backup_size !== null) {
      if (!is_array($this->backup_size)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('backup_size', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_size));
        {
          foreach ($this->backup_size as $kiter651 => $viter652)
          {
            $xfer += $output->writeString($kiter651);
            $xfer += $output->writeI64($viter652);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backup_progress !== null) {
      if (!is_array($this->backup_progress)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('backup_progress', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_progress));
        {
          foreach ($this->backup_progress as $kiter653 => $viter654)
          {
            $xfer += $output->writeString($kiter653);
            $xfer += $output->writeI64($viter654);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backup_image_offset !== null) {
      if (!is_array($this->backup_image_offset)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('backup_image_offset', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_image_offset));
        {
          foreach ($this->backup_image_offset as $kiter655 => $viter656)
          {
            $xfer += $output->writeString($kiter655);
            $xfer += $output->writeI64($viter656);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vcbt_journals !== null) {
      if (!is_array($this->vcbt_journals)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('vcbt_journals', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->vcbt_journals));
        {
          foreach ($this->vcbt_journals as $kiter657 => $viter658)
          {
            $xfer += $output->writeI64($kiter657);
            $xfer += $viter658->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->guest_os_type !== null) {
      $xfer += $output->writeFieldBegin('guest_os_type', TType::I32, 6);
      $xfer += $output->writeI32($this->guest_os_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cdr_changed_ranges !== null) {
      if (!is_array($this->cdr_changed_ranges)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cdr_changed_ranges', TType::MAP, 7);
      {
        $output->writeMapBegin(TType::STRING, TType::LST, count($this->cdr_changed_ranges));
        {
          foreach ($this->cdr_changed_ranges as $kiter659 => $viter660)
          {
            $xfer += $output->writeString($kiter659);
            {
              $output->writeListBegin(TType::STRUCT, count($viter660));
              {
                foreach ($viter660 as $iter661)
                {
                  $xfer += $iter661->write($output);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->completed_blocks !== null) {
      if (!is_array($this->completed_blocks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('completed_blocks', TType::MAP, 8);
      {
        $output->writeMapBegin(TType::STRING, TType::LST, count($this->completed_blocks));
        {
          foreach ($this->completed_blocks as $kiter662 => $viter663)
          {
            $xfer += $output->writeString($kiter662);
            {
              $output->writeListBegin(TType::STRUCT, count($viter663));
              {
                foreach ($viter663 as $iter664)
                {
                  $xfer += $iter664->write($output);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class _packer_job_detail {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'p',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\physical_packer_job_detail',
      ),
    2 => array(
      'var' => 'v',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\virtual_packer_job_detail',
      ),
    );

  /**
   * @var \saasame\transport\physical_packer_job_detail
   */
  public $p = null;
  /**
   * @var \saasame\transport\virtual_packer_job_detail
   */
  public $v = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['p'])) {
        $this->p = $vals['p'];
      }
      if (isset($vals['v'])) {
        $this->v = $vals['v'];
      }
    }
  }

  public function getName() {
    return '_packer_job_detail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->p = new \saasame\transport\physical_packer_job_detail();
            $xfer += $this->p->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->v = new \saasame\transport\virtual_packer_job_detail();
            $xfer += $this->v->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('_packer_job_detail');
    if ($this->p !== null) {
      if (!is_object($this->p)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('p', TType::STRUCT, 1);
      $xfer += $this->p->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->v !== null) {
      if (!is_object($this->v)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('v', TType::STRUCT, 2);
      $xfer += $this->v->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class packer_job_detail {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'state',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'created_time',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'updated_time',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'histories',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\job_history',
        ),
      ),
    7 => array(
      'var' => 'detail',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\_packer_job_detail',
      ),
    8 => array(
      'var' => 'is_error',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    9 => array(
      'var' => 'boot_disk',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'system_disks',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    11 => array(
      'var' => 'completed_blocks',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::LST,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::LST,
        'etype' => TType::STRUCT,
        'elem' => array(
          'type' => TType::STRUCT,
          'class' => '\saasame\transport\io_changed_range',
          ),
        ),
      ),
    );

  /**
   * @var string
   */
  public $id = "";
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $state =   1;
  /**
   * @var string
   */
  public $created_time = "";
  /**
   * @var string
   */
  public $updated_time = "";
  /**
   * @var \saasame\transport\job_history[]
   */
  public $histories = null;
  /**
   * @var \saasame\transport\_packer_job_detail
   */
  public $detail = null;
  /**
   * @var bool
   */
  public $is_error = false;
  /**
   * @var string
   */
  public $boot_disk = "";
  /**
   * @var string[]
   */
  public $system_disks = null;
  /**
   * @var array
   */
  public $completed_blocks = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['created_time'])) {
        $this->created_time = $vals['created_time'];
      }
      if (isset($vals['updated_time'])) {
        $this->updated_time = $vals['updated_time'];
      }
      if (isset($vals['histories'])) {
        $this->histories = $vals['histories'];
      }
      if (isset($vals['detail'])) {
        $this->detail = $vals['detail'];
      }
      if (isset($vals['is_error'])) {
        $this->is_error = $vals['is_error'];
      }
      if (isset($vals['boot_disk'])) {
        $this->boot_disk = $vals['boot_disk'];
      }
      if (isset($vals['system_disks'])) {
        $this->system_disks = $vals['system_disks'];
      }
      if (isset($vals['completed_blocks'])) {
        $this->completed_blocks = $vals['completed_blocks'];
      }
    }
  }

  public function getName() {
    return 'packer_job_detail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->created_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->updated_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->histories = array();
            $_size665 = 0;
            $_etype668 = 0;
            $xfer += $input->readListBegin($_etype668, $_size665);
            for ($_i669 = 0; $_i669 < $_size665; ++$_i669)
            {
              $elem670 = null;
              $elem670 = new \saasame\transport\job_history();
              $xfer += $elem670->read($input);
              $this->histories []= $elem670;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->detail = new \saasame\transport\_packer_job_detail();
            $xfer += $this->detail->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->boot_disk);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->system_disks = array();
            $_size671 = 0;
            $_etype674 = 0;
            $xfer += $input->readListBegin($_etype674, $_size671);
            for ($_i675 = 0; $_i675 < $_size671; ++$_i675)
            {
              $elem676 = null;
              $xfer += $input->readString($elem676);
              $this->system_disks []= $elem676;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::MAP) {
            $this->completed_blocks = array();
            $_size677 = 0;
            $_ktype678 = 0;
            $_vtype679 = 0;
            $xfer += $input->readMapBegin($_ktype678, $_vtype679, $_size677);
            for ($_i681 = 0; $_i681 < $_size677; ++$_i681)
            {
              $key682 = '';
              $val683 = array();
              $xfer += $input->readString($key682);
              $val683 = array();
              $_size684 = 0;
              $_etype687 = 0;
              $xfer += $input->readListBegin($_etype687, $_size684);
              for ($_i688 = 0; $_i688 < $_size684; ++$_i688)
              {
                $elem689 = null;
                $elem689 = new \saasame\transport\io_changed_range();
                $xfer += $elem689->read($input);
                $val683 []= $elem689;
              }
              $xfer += $input->readListEnd();
              $this->completed_blocks[$key682] = $val683;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('packer_job_detail');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 3);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->created_time !== null) {
      $xfer += $output->writeFieldBegin('created_time', TType::STRING, 4);
      $xfer += $output->writeString($this->created_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updated_time !== null) {
      $xfer += $output->writeFieldBegin('updated_time', TType::STRING, 5);
      $xfer += $output->writeString($this->updated_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->histories !== null) {
      if (!is_array($this->histories)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('histories', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRUCT, count($this->histories));
        {
          foreach ($this->histories as $iter690)
          {
            $xfer += $iter690->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->detail !== null) {
      if (!is_object($this->detail)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('detail', TType::STRUCT, 7);
      $xfer += $this->detail->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_error !== null) {
      $xfer += $output->writeFieldBegin('is_error', TType::BOOL, 8);
      $xfer += $output->writeBool($this->is_error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->boot_disk !== null) {
      $xfer += $output->writeFieldBegin('boot_disk', TType::STRING, 9);
      $xfer += $output->writeString($this->boot_disk);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->system_disks !== null) {
      if (!is_array($this->system_disks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('system_disks', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRING, count($this->system_disks));
        {
          foreach ($this->system_disks as $iter691)
          {
            $xfer += $output->writeString($iter691);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->completed_blocks !== null) {
      if (!is_array($this->completed_blocks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('completed_blocks', TType::MAP, 11);
      {
        $output->writeMapBegin(TType::STRING, TType::LST, count($this->completed_blocks));
        {
          foreach ($this->completed_blocks as $kiter692 => $viter693)
          {
            $xfer += $output->writeString($kiter692);
            {
              $output->writeListBegin(TType::STRUCT, count($viter693));
              {
                foreach ($viter693 as $iter694)
                {
                  $xfer += $iter694->write($output);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class replica_job_detail {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'replica_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'host',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'state',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'is_error',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    7 => array(
      'var' => 'created_time',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'updated_time',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'virtual_machine_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'disks',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    11 => array(
      'var' => 'connection_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'original_size',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I64,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I64,
        ),
      ),
    13 => array(
      'var' => 'backup_progress',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I64,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I64,
        ),
      ),
    14 => array(
      'var' => 'snapshot_mapping',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    15 => array(
      'var' => 'backup_size',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I64,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I64,
        ),
      ),
    16 => array(
      'var' => 'backup_image_offset',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I64,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I64,
        ),
      ),
    17 => array(
      'var' => 'cbt_info',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    18 => array(
      'var' => 'histories',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\job_history',
        ),
      ),
    19 => array(
      'var' => 'snapshot_time',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    20 => array(
      'var' => 'snapshot_info',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    21 => array(
      'var' => 'boot_disk',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    22 => array(
      'var' => 'system_disks',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    23 => array(
      'var' => 'is_pending_rerun',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    24 => array(
      'var' => 'is_cdr',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    25 => array(
      'var' => 'virtual_disk_infos',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\virtual_disk_info_ex',
        ),
      ),
    );

  /**
   * @var string
   */
  public $replica_id = "";
  /**
   * @var string
   */
  public $host = "";
  /**
   * @var string
   */
  public $id = "";
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $state =   1;
  /**
   * @var bool
   */
  public $is_error = false;
  /**
   * @var string
   */
  public $created_time = "";
  /**
   * @var string
   */
  public $updated_time = "";
  /**
   * @var string
   */
  public $virtual_machine_id = "";
  /**
   * @var string[]
   */
  public $disks = null;
  /**
   * @var string
   */
  public $connection_id = null;
  /**
   * @var array
   */
  public $original_size = null;
  /**
   * @var array
   */
  public $backup_progress = null;
  /**
   * @var array
   */
  public $snapshot_mapping = null;
  /**
   * @var array
   */
  public $backup_size = null;
  /**
   * @var array
   */
  public $backup_image_offset = null;
  /**
   * @var string
   */
  public $cbt_info = "";
  /**
   * @var \saasame\transport\job_history[]
   */
  public $histories = null;
  /**
   * @var string
   */
  public $snapshot_time = "";
  /**
   * @var string
   */
  public $snapshot_info = "";
  /**
   * @var string
   */
  public $boot_disk = "";
  /**
   * @var string[]
   */
  public $system_disks = null;
  /**
   * @var bool
   */
  public $is_pending_rerun = false;
  /**
   * @var bool
   */
  public $is_cdr = false;
  /**
   * @var \saasame\transport\virtual_disk_info_ex[]
   */
  public $virtual_disk_infos = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['replica_id'])) {
        $this->replica_id = $vals['replica_id'];
      }
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['is_error'])) {
        $this->is_error = $vals['is_error'];
      }
      if (isset($vals['created_time'])) {
        $this->created_time = $vals['created_time'];
      }
      if (isset($vals['updated_time'])) {
        $this->updated_time = $vals['updated_time'];
      }
      if (isset($vals['virtual_machine_id'])) {
        $this->virtual_machine_id = $vals['virtual_machine_id'];
      }
      if (isset($vals['disks'])) {
        $this->disks = $vals['disks'];
      }
      if (isset($vals['connection_id'])) {
        $this->connection_id = $vals['connection_id'];
      }
      if (isset($vals['original_size'])) {
        $this->original_size = $vals['original_size'];
      }
      if (isset($vals['backup_progress'])) {
        $this->backup_progress = $vals['backup_progress'];
      }
      if (isset($vals['snapshot_mapping'])) {
        $this->snapshot_mapping = $vals['snapshot_mapping'];
      }
      if (isset($vals['backup_size'])) {
        $this->backup_size = $vals['backup_size'];
      }
      if (isset($vals['backup_image_offset'])) {
        $this->backup_image_offset = $vals['backup_image_offset'];
      }
      if (isset($vals['cbt_info'])) {
        $this->cbt_info = $vals['cbt_info'];
      }
      if (isset($vals['histories'])) {
        $this->histories = $vals['histories'];
      }
      if (isset($vals['snapshot_time'])) {
        $this->snapshot_time = $vals['snapshot_time'];
      }
      if (isset($vals['snapshot_info'])) {
        $this->snapshot_info = $vals['snapshot_info'];
      }
      if (isset($vals['boot_disk'])) {
        $this->boot_disk = $vals['boot_disk'];
      }
      if (isset($vals['system_disks'])) {
        $this->system_disks = $vals['system_disks'];
      }
      if (isset($vals['is_pending_rerun'])) {
        $this->is_pending_rerun = $vals['is_pending_rerun'];
      }
      if (isset($vals['is_cdr'])) {
        $this->is_cdr = $vals['is_cdr'];
      }
      if (isset($vals['virtual_disk_infos'])) {
        $this->virtual_disk_infos = $vals['virtual_disk_infos'];
      }
    }
  }

  public function getName() {
    return 'replica_job_detail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->replica_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->created_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->updated_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->virtual_machine_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::SET) {
            $this->disks = array();
            $_size695 = 0;
            $_etype698 = 0;
            $xfer += $input->readSetBegin($_etype698, $_size695);
            for ($_i699 = 0; $_i699 < $_size695; ++$_i699)
            {
              $elem700 = null;
              $xfer += $input->readString($elem700);
              $this->disks[$elem700] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->connection_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::MAP) {
            $this->original_size = array();
            $_size701 = 0;
            $_ktype702 = 0;
            $_vtype703 = 0;
            $xfer += $input->readMapBegin($_ktype702, $_vtype703, $_size701);
            for ($_i705 = 0; $_i705 < $_size701; ++$_i705)
            {
              $key706 = '';
              $val707 = 0;
              $xfer += $input->readString($key706);
              $xfer += $input->readI64($val707);
              $this->original_size[$key706] = $val707;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::MAP) {
            $this->backup_progress = array();
            $_size708 = 0;
            $_ktype709 = 0;
            $_vtype710 = 0;
            $xfer += $input->readMapBegin($_ktype709, $_vtype710, $_size708);
            for ($_i712 = 0; $_i712 < $_size708; ++$_i712)
            {
              $key713 = '';
              $val714 = 0;
              $xfer += $input->readString($key713);
              $xfer += $input->readI64($val714);
              $this->backup_progress[$key713] = $val714;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::MAP) {
            $this->snapshot_mapping = array();
            $_size715 = 0;
            $_ktype716 = 0;
            $_vtype717 = 0;
            $xfer += $input->readMapBegin($_ktype716, $_vtype717, $_size715);
            for ($_i719 = 0; $_i719 < $_size715; ++$_i719)
            {
              $key720 = '';
              $val721 = '';
              $xfer += $input->readString($key720);
              $xfer += $input->readString($val721);
              $this->snapshot_mapping[$key720] = $val721;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::MAP) {
            $this->backup_size = array();
            $_size722 = 0;
            $_ktype723 = 0;
            $_vtype724 = 0;
            $xfer += $input->readMapBegin($_ktype723, $_vtype724, $_size722);
            for ($_i726 = 0; $_i726 < $_size722; ++$_i726)
            {
              $key727 = '';
              $val728 = 0;
              $xfer += $input->readString($key727);
              $xfer += $input->readI64($val728);
              $this->backup_size[$key727] = $val728;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::MAP) {
            $this->backup_image_offset = array();
            $_size729 = 0;
            $_ktype730 = 0;
            $_vtype731 = 0;
            $xfer += $input->readMapBegin($_ktype730, $_vtype731, $_size729);
            for ($_i733 = 0; $_i733 < $_size729; ++$_i733)
            {
              $key734 = '';
              $val735 = 0;
              $xfer += $input->readString($key734);
              $xfer += $input->readI64($val735);
              $this->backup_image_offset[$key734] = $val735;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cbt_info);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::LST) {
            $this->histories = array();
            $_size736 = 0;
            $_etype739 = 0;
            $xfer += $input->readListBegin($_etype739, $_size736);
            for ($_i740 = 0; $_i740 < $_size736; ++$_i740)
            {
              $elem741 = null;
              $elem741 = new \saasame\transport\job_history();
              $xfer += $elem741->read($input);
              $this->histories []= $elem741;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snapshot_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snapshot_info);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->boot_disk);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::LST) {
            $this->system_disks = array();
            $_size742 = 0;
            $_etype745 = 0;
            $xfer += $input->readListBegin($_etype745, $_size742);
            for ($_i746 = 0; $_i746 < $_size742; ++$_i746)
            {
              $elem747 = null;
              $xfer += $input->readString($elem747);
              $this->system_disks []= $elem747;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_pending_rerun);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_cdr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::LST) {
            $this->virtual_disk_infos = array();
            $_size748 = 0;
            $_etype751 = 0;
            $xfer += $input->readListBegin($_etype751, $_size748);
            for ($_i752 = 0; $_i752 < $_size748; ++$_i752)
            {
              $elem753 = null;
              $elem753 = new \saasame\transport\virtual_disk_info_ex();
              $xfer += $elem753->read($input);
              $this->virtual_disk_infos []= $elem753;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('replica_job_detail');
    if ($this->replica_id !== null) {
      $xfer += $output->writeFieldBegin('replica_id', TType::STRING, 1);
      $xfer += $output->writeString($this->replica_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host !== null) {
      $xfer += $output->writeFieldBegin('host', TType::STRING, 2);
      $xfer += $output->writeString($this->host);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 3);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 4);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 5);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_error !== null) {
      $xfer += $output->writeFieldBegin('is_error', TType::BOOL, 6);
      $xfer += $output->writeBool($this->is_error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->created_time !== null) {
      $xfer += $output->writeFieldBegin('created_time', TType::STRING, 7);
      $xfer += $output->writeString($this->created_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updated_time !== null) {
      $xfer += $output->writeFieldBegin('updated_time', TType::STRING, 8);
      $xfer += $output->writeString($this->updated_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->virtual_machine_id !== null) {
      $xfer += $output->writeFieldBegin('virtual_machine_id', TType::STRING, 9);
      $xfer += $output->writeString($this->virtual_machine_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disks !== null) {
      if (!is_array($this->disks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('disks', TType::SET, 10);
      {
        $output->writeSetBegin(TType::STRING, count($this->disks));
        {
          foreach ($this->disks as $iter754 => $iter755)
          {
            $xfer += $output->writeString($iter754);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->connection_id !== null) {
      $xfer += $output->writeFieldBegin('connection_id', TType::STRING, 11);
      $xfer += $output->writeString($this->connection_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->original_size !== null) {
      if (!is_array($this->original_size)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('original_size', TType::MAP, 12);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->original_size));
        {
          foreach ($this->original_size as $kiter756 => $viter757)
          {
            $xfer += $output->writeString($kiter756);
            $xfer += $output->writeI64($viter757);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backup_progress !== null) {
      if (!is_array($this->backup_progress)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('backup_progress', TType::MAP, 13);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_progress));
        {
          foreach ($this->backup_progress as $kiter758 => $viter759)
          {
            $xfer += $output->writeString($kiter758);
            $xfer += $output->writeI64($viter759);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snapshot_mapping !== null) {
      if (!is_array($this->snapshot_mapping)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('snapshot_mapping', TType::MAP, 14);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->snapshot_mapping));
        {
          foreach ($this->snapshot_mapping as $kiter760 => $viter761)
          {
            $xfer += $output->writeString($kiter760);
            $xfer += $output->writeString($viter761);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backup_size !== null) {
      if (!is_array($this->backup_size)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('backup_size', TType::MAP, 15);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_size));
        {
          foreach ($this->backup_size as $kiter762 => $viter763)
          {
            $xfer += $output->writeString($kiter762);
            $xfer += $output->writeI64($viter763);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->backup_image_offset !== null) {
      if (!is_array($this->backup_image_offset)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('backup_image_offset', TType::MAP, 16);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_image_offset));
        {
          foreach ($this->backup_image_offset as $kiter764 => $viter765)
          {
            $xfer += $output->writeString($kiter764);
            $xfer += $output->writeI64($viter765);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cbt_info !== null) {
      $xfer += $output->writeFieldBegin('cbt_info', TType::STRING, 17);
      $xfer += $output->writeString($this->cbt_info);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->histories !== null) {
      if (!is_array($this->histories)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('histories', TType::LST, 18);
      {
        $output->writeListBegin(TType::STRUCT, count($this->histories));
        {
          foreach ($this->histories as $iter766)
          {
            $xfer += $iter766->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snapshot_time !== null) {
      $xfer += $output->writeFieldBegin('snapshot_time', TType::STRING, 19);
      $xfer += $output->writeString($this->snapshot_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snapshot_info !== null) {
      $xfer += $output->writeFieldBegin('snapshot_info', TType::STRING, 20);
      $xfer += $output->writeString($this->snapshot_info);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->boot_disk !== null) {
      $xfer += $output->writeFieldBegin('boot_disk', TType::STRING, 21);
      $xfer += $output->writeString($this->boot_disk);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->system_disks !== null) {
      if (!is_array($this->system_disks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('system_disks', TType::LST, 22);
      {
        $output->writeListBegin(TType::STRING, count($this->system_disks));
        {
          foreach ($this->system_disks as $iter767)
          {
            $xfer += $output->writeString($iter767);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_pending_rerun !== null) {
      $xfer += $output->writeFieldBegin('is_pending_rerun', TType::BOOL, 23);
      $xfer += $output->writeBool($this->is_pending_rerun);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_cdr !== null) {
      $xfer += $output->writeFieldBegin('is_cdr', TType::BOOL, 24);
      $xfer += $output->writeBool($this->is_cdr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->virtual_disk_infos !== null) {
      if (!is_array($this->virtual_disk_infos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('virtual_disk_infos', TType::LST, 25);
      {
        $output->writeListBegin(TType::STRUCT, count($this->virtual_disk_infos));
        {
          foreach ($this->virtual_disk_infos as $iter768)
          {
            $xfer += $iter768->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class service_info {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'version',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'path',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $version = null;
  /**
   * @var string
   */
  public $path = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
    }
  }

  public function getName() {
    return 'service_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('service_info');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::STRING, 2);
      $xfer += $output->writeString($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 3);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class vmware_snapshot {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'datetime',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = "";
  /**
   * @var string
   */
  public $name = "";
  /**
   * @var string
   */
  public $datetime = "";

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['datetime'])) {
        $this->datetime = $vals['datetime'];
      }
    }
  }

  public function getName() {
    return 'vmware_snapshot';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->datetime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('vmware_snapshot');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->datetime !== null) {
      $xfer += $output->writeFieldBegin('datetime', TType::STRING, 3);
      $xfer += $output->writeString($this->datetime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class local_folder {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'path',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $path = "";

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
    }
  }

  public function getName() {
    return 'local_folder';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('local_folder');
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 1);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class network_folder {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'path',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'username',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'password',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'port',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'proxy_host',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'proxy_port',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'proxy_username',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'proxy_password',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 's3_region',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    10 => array(
      'var' => 'timeout',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $path = "";
  /**
   * @var string
   */
  public $username = "";
  /**
   * @var string
   */
  public $password = "";
  /**
   * @var int
   */
  public $port = 0;
  /**
   * @var string
   */
  public $proxy_host = "";
  /**
   * @var int
   */
  public $proxy_port = 0;
  /**
   * @var string
   */
  public $proxy_username = "";
  /**
   * @var string
   */
  public $proxy_password = "";
  /**
   * @var int
   */
  public $s3_region =   0;
  /**
   * @var int
   */
  public $timeout = 300;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['port'])) {
        $this->port = $vals['port'];
      }
      if (isset($vals['proxy_host'])) {
        $this->proxy_host = $vals['proxy_host'];
      }
      if (isset($vals['proxy_port'])) {
        $this->proxy_port = $vals['proxy_port'];
      }
      if (isset($vals['proxy_username'])) {
        $this->proxy_username = $vals['proxy_username'];
      }
      if (isset($vals['proxy_password'])) {
        $this->proxy_password = $vals['proxy_password'];
      }
      if (isset($vals['s3_region'])) {
        $this->s3_region = $vals['s3_region'];
      }
      if (isset($vals['timeout'])) {
        $this->timeout = $vals['timeout'];
      }
    }
  }

  public function getName() {
    return 'network_folder';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->port);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->proxy_host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->proxy_port);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->proxy_username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->proxy_password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->s3_region);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timeout);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('network_folder');
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 1);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 2);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 3);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->port !== null) {
      $xfer += $output->writeFieldBegin('port', TType::I32, 4);
      $xfer += $output->writeI32($this->port);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->proxy_host !== null) {
      $xfer += $output->writeFieldBegin('proxy_host', TType::STRING, 5);
      $xfer += $output->writeString($this->proxy_host);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->proxy_port !== null) {
      $xfer += $output->writeFieldBegin('proxy_port', TType::I32, 6);
      $xfer += $output->writeI32($this->proxy_port);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->proxy_username !== null) {
      $xfer += $output->writeFieldBegin('proxy_username', TType::STRING, 7);
      $xfer += $output->writeString($this->proxy_username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->proxy_password !== null) {
      $xfer += $output->writeFieldBegin('proxy_password', TType::STRING, 8);
      $xfer += $output->writeString($this->proxy_password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->s3_region !== null) {
      $xfer += $output->writeFieldBegin('s3_region', TType::I32, 9);
      $xfer += $output->writeI32($this->s3_region);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeout !== null) {
      $xfer += $output->writeFieldBegin('timeout', TType::I32, 10);
      $xfer += $output->writeI32($this->timeout);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class _detail {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'local',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\local_folder',
      ),
    2 => array(
      'var' => 'remote',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\network_folder',
      ),
    );

  /**
   * @var \saasame\transport\local_folder
   */
  public $local = null;
  /**
   * @var \saasame\transport\network_folder
   */
  public $remote = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['local'])) {
        $this->local = $vals['local'];
      }
      if (isset($vals['remote'])) {
        $this->remote = $vals['remote'];
      }
    }
  }

  public function getName() {
    return '_detail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->local = new \saasame\transport\local_folder();
            $xfer += $this->local->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->remote = new \saasame\transport\network_folder();
            $xfer += $this->remote->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('_detail');
    if ($this->local !== null) {
      if (!is_object($this->local)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('local', TType::STRUCT, 1);
      $xfer += $this->local->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remote !== null) {
      if (!is_object($this->remote)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('remote', TType::STRUCT, 2);
      $xfer += $this->remote->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class connection {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'options',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    4 => array(
      'var' => 'compressed',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    5 => array(
      'var' => 'checksum',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    6 => array(
      'var' => 'encrypted',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    7 => array(
      'var' => 'detail',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\_detail',
      ),
    );

  /**
   * @var int
   */
  public $type =   0;
  /**
   * @var string
   */
  public $id = "";
  /**
   * @var array
   */
  public $options = null;
  /**
   * @var bool
   */
  public $compressed = true;
  /**
   * @var bool
   */
  public $checksum = false;
  /**
   * @var bool
   */
  public $encrypted = false;
  /**
   * @var \saasame\transport\_detail
   */
  public $detail = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['options'])) {
        $this->options = $vals['options'];
      }
      if (isset($vals['compressed'])) {
        $this->compressed = $vals['compressed'];
      }
      if (isset($vals['checksum'])) {
        $this->checksum = $vals['checksum'];
      }
      if (isset($vals['encrypted'])) {
        $this->encrypted = $vals['encrypted'];
      }
      if (isset($vals['detail'])) {
        $this->detail = $vals['detail'];
      }
    }
  }

  public function getName() {
    return 'connection';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->options = array();
            $_size769 = 0;
            $_ktype770 = 0;
            $_vtype771 = 0;
            $xfer += $input->readMapBegin($_ktype770, $_vtype771, $_size769);
            for ($_i773 = 0; $_i773 < $_size769; ++$_i773)
            {
              $key774 = '';
              $val775 = '';
              $xfer += $input->readString($key774);
              $xfer += $input->readString($val775);
              $this->options[$key774] = $val775;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->compressed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->checksum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->encrypted);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->detail = new \saasame\transport\_detail();
            $xfer += $this->detail->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('connection');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 2);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->options !== null) {
      if (!is_array($this->options)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('options', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->options));
        {
          foreach ($this->options as $kiter776 => $viter777)
          {
            $xfer += $output->writeString($kiter776);
            $xfer += $output->writeString($viter777);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compressed !== null) {
      $xfer += $output->writeFieldBegin('compressed', TType::BOOL, 4);
      $xfer += $output->writeBool($this->compressed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->checksum !== null) {
      $xfer += $output->writeFieldBegin('checksum', TType::BOOL, 5);
      $xfer += $output->writeBool($this->checksum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->encrypted !== null) {
      $xfer += $output->writeFieldBegin('encrypted', TType::BOOL, 6);
      $xfer += $output->writeBool($this->encrypted);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->detail !== null) {
      if (!is_object($this->detail)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('detail', TType::STRUCT, 7);
      $xfer += $this->detail->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class image_map_info {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'image',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'base_image',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'connection_ids',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var string
   */
  public $image = "";
  /**
   * @var string
   */
  public $base_image = "";
  /**
   * @var string[]
   */
  public $connection_ids = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['image'])) {
        $this->image = $vals['image'];
      }
      if (isset($vals['base_image'])) {
        $this->base_image = $vals['base_image'];
      }
      if (isset($vals['connection_ids'])) {
        $this->connection_ids = $vals['connection_ids'];
      }
    }
  }

  public function getName() {
    return 'image_map_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->image);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->base_image);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::SET) {
            $this->connection_ids = array();
            $_size778 = 0;
            $_etype781 = 0;
            $xfer += $input->readSetBegin($_etype781, $_size778);
            for ($_i782 = 0; $_i782 < $_size778; ++$_i782)
            {
              $elem783 = null;
              $xfer += $input->readString($elem783);
              $this->connection_ids[$elem783] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('image_map_info');
    if ($this->image !== null) {
      $xfer += $output->writeFieldBegin('image', TType::STRING, 1);
      $xfer += $output->writeString($this->image);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->base_image !== null) {
      $xfer += $output->writeFieldBegin('base_image', TType::STRING, 2);
      $xfer += $output->writeString($this->base_image);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->connection_ids !== null) {
      if (!is_array($this->connection_ids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('connection_ids', TType::SET, 3);
      {
        $output->writeSetBegin(TType::STRING, count($this->connection_ids));
        {
          foreach ($this->connection_ids as $iter784 => $iter785)
          {
            $xfer += $output->writeString($iter784);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class create_image_info {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'base',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'parent',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'connection_ids',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    5 => array(
      'var' => 'size',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    6 => array(
      'var' => 'block_size',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'checksum_verify',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    8 => array(
      'var' => 'comment',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'version',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    10 => array(
      'var' => 'compressed',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    11 => array(
      'var' => 'checksum',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    12 => array(
      'var' => 'cdr',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    13 => array(
      'var' => 'mode',
      'isRequired' => false,
      'type' => TType::BYTE,
      ),
    );

  /**
   * @var string
   */
  public $name = "";
  /**
   * @var string
   */
  public $base = "";
  /**
   * @var string
   */
  public $parent = "";
  /**
   * @var string[]
   */
  public $connection_ids = null;
  /**
   * @var int
   */
  public $size = 0;
  /**
   * @var int
   */
  public $block_size = 0;
  /**
   * @var bool
   */
  public $checksum_verify = true;
  /**
   * @var string
   */
  public $comment = "";
  /**
   * @var int
   */
  public $version =   0;
  /**
   * @var bool
   */
  public $compressed = true;
  /**
   * @var bool
   */
  public $checksum = false;
  /**
   * @var bool
   */
  public $cdr = false;
  /**
   * @var int
   */
  public $mode = 2;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['base'])) {
        $this->base = $vals['base'];
      }
      if (isset($vals['parent'])) {
        $this->parent = $vals['parent'];
      }
      if (isset($vals['connection_ids'])) {
        $this->connection_ids = $vals['connection_ids'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
      if (isset($vals['block_size'])) {
        $this->block_size = $vals['block_size'];
      }
      if (isset($vals['checksum_verify'])) {
        $this->checksum_verify = $vals['checksum_verify'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['compressed'])) {
        $this->compressed = $vals['compressed'];
      }
      if (isset($vals['checksum'])) {
        $this->checksum = $vals['checksum'];
      }
      if (isset($vals['cdr'])) {
        $this->cdr = $vals['cdr'];
      }
      if (isset($vals['mode'])) {
        $this->mode = $vals['mode'];
      }
    }
  }

  public function getName() {
    return 'create_image_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->base);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::SET) {
            $this->connection_ids = array();
            $_size786 = 0;
            $_etype789 = 0;
            $xfer += $input->readSetBegin($_etype789, $_size786);
            for ($_i790 = 0; $_i790 < $_size786; ++$_i790)
            {
              $elem791 = null;
              $xfer += $input->readString($elem791);
              $this->connection_ids[$elem791] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->block_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->checksum_verify);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->compressed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->checksum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->cdr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->mode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('create_image_info');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->base !== null) {
      $xfer += $output->writeFieldBegin('base', TType::STRING, 2);
      $xfer += $output->writeString($this->base);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parent !== null) {
      $xfer += $output->writeFieldBegin('parent', TType::STRING, 3);
      $xfer += $output->writeString($this->parent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->connection_ids !== null) {
      if (!is_array($this->connection_ids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('connection_ids', TType::SET, 4);
      {
        $output->writeSetBegin(TType::STRING, count($this->connection_ids));
        {
          foreach ($this->connection_ids as $iter792 => $iter793)
          {
            $xfer += $output->writeString($iter792);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I64, 5);
      $xfer += $output->writeI64($this->size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->block_size !== null) {
      $xfer += $output->writeFieldBegin('block_size', TType::I32, 6);
      $xfer += $output->writeI32($this->block_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->checksum_verify !== null) {
      $xfer += $output->writeFieldBegin('checksum_verify', TType::BOOL, 7);
      $xfer += $output->writeBool($this->checksum_verify);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 8);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 9);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compressed !== null) {
      $xfer += $output->writeFieldBegin('compressed', TType::BOOL, 10);
      $xfer += $output->writeBool($this->compressed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->checksum !== null) {
      $xfer += $output->writeFieldBegin('checksum', TType::BOOL, 11);
      $xfer += $output->writeBool($this->checksum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cdr !== null) {
      $xfer += $output->writeFieldBegin('cdr', TType::BOOL, 12);
      $xfer += $output->writeBool($this->cdr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mode !== null) {
      $xfer += $output->writeFieldBegin('mode', TType::BYTE, 13);
      $xfer += $output->writeByte($this->mode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_job_detail {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'replica_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'state',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'created_time',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'updated_time',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'progress',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I64,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I64,
        ),
      ),
    7 => array(
      'var' => 'histories',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\job_history',
        ),
      ),
    8 => array(
      'var' => 'connection_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'data',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I64,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I64,
        ),
      ),
    10 => array(
      'var' => 'snapshot_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'duplicated_data',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I64,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I64,
        ),
      ),
    12 => array(
      'var' => 'transport_data',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I64,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I64,
        ),
      ),
    );

  /**
   * @var string
   */
  public $replica_id = "";
  /**
   * @var string
   */
  public $id = "";
  /**
   * @var int
   */
  public $state =   1;
  /**
   * @var string
   */
  public $created_time = "";
  /**
   * @var string
   */
  public $updated_time = "";
  /**
   * @var array
   */
  public $progress = null;
  /**
   * @var \saasame\transport\job_history[]
   */
  public $histories = null;
  /**
   * @var string
   */
  public $connection_id = null;
  /**
   * @var array
   */
  public $data = null;
  /**
   * @var string
   */
  public $snapshot_id = "";
  /**
   * @var array
   */
  public $duplicated_data = null;
  /**
   * @var array
   */
  public $transport_data = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['replica_id'])) {
        $this->replica_id = $vals['replica_id'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['created_time'])) {
        $this->created_time = $vals['created_time'];
      }
      if (isset($vals['updated_time'])) {
        $this->updated_time = $vals['updated_time'];
      }
      if (isset($vals['progress'])) {
        $this->progress = $vals['progress'];
      }
      if (isset($vals['histories'])) {
        $this->histories = $vals['histories'];
      }
      if (isset($vals['connection_id'])) {
        $this->connection_id = $vals['connection_id'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
      if (isset($vals['snapshot_id'])) {
        $this->snapshot_id = $vals['snapshot_id'];
      }
      if (isset($vals['duplicated_data'])) {
        $this->duplicated_data = $vals['duplicated_data'];
      }
      if (isset($vals['transport_data'])) {
        $this->transport_data = $vals['transport_data'];
      }
    }
  }

  public function getName() {
    return 'loader_job_detail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->replica_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->created_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->updated_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::MAP) {
            $this->progress = array();
            $_size794 = 0;
            $_ktype795 = 0;
            $_vtype796 = 0;
            $xfer += $input->readMapBegin($_ktype795, $_vtype796, $_size794);
            for ($_i798 = 0; $_i798 < $_size794; ++$_i798)
            {
              $key799 = '';
              $val800 = 0;
              $xfer += $input->readString($key799);
              $xfer += $input->readI64($val800);
              $this->progress[$key799] = $val800;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->histories = array();
            $_size801 = 0;
            $_etype804 = 0;
            $xfer += $input->readListBegin($_etype804, $_size801);
            for ($_i805 = 0; $_i805 < $_size801; ++$_i805)
            {
              $elem806 = null;
              $elem806 = new \saasame\transport\job_history();
              $xfer += $elem806->read($input);
              $this->histories []= $elem806;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->connection_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::MAP) {
            $this->data = array();
            $_size807 = 0;
            $_ktype808 = 0;
            $_vtype809 = 0;
            $xfer += $input->readMapBegin($_ktype808, $_vtype809, $_size807);
            for ($_i811 = 0; $_i811 < $_size807; ++$_i811)
            {
              $key812 = '';
              $val813 = 0;
              $xfer += $input->readString($key812);
              $xfer += $input->readI64($val813);
              $this->data[$key812] = $val813;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snapshot_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::MAP) {
            $this->duplicated_data = array();
            $_size814 = 0;
            $_ktype815 = 0;
            $_vtype816 = 0;
            $xfer += $input->readMapBegin($_ktype815, $_vtype816, $_size814);
            for ($_i818 = 0; $_i818 < $_size814; ++$_i818)
            {
              $key819 = '';
              $val820 = 0;
              $xfer += $input->readString($key819);
              $xfer += $input->readI64($val820);
              $this->duplicated_data[$key819] = $val820;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::MAP) {
            $this->transport_data = array();
            $_size821 = 0;
            $_ktype822 = 0;
            $_vtype823 = 0;
            $xfer += $input->readMapBegin($_ktype822, $_vtype823, $_size821);
            for ($_i825 = 0; $_i825 < $_size821; ++$_i825)
            {
              $key826 = '';
              $val827 = 0;
              $xfer += $input->readString($key826);
              $xfer += $input->readI64($val827);
              $this->transport_data[$key826] = $val827;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_job_detail');
    if ($this->replica_id !== null) {
      $xfer += $output->writeFieldBegin('replica_id', TType::STRING, 1);
      $xfer += $output->writeString($this->replica_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 2);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 3);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->created_time !== null) {
      $xfer += $output->writeFieldBegin('created_time', TType::STRING, 4);
      $xfer += $output->writeString($this->created_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updated_time !== null) {
      $xfer += $output->writeFieldBegin('updated_time', TType::STRING, 5);
      $xfer += $output->writeString($this->updated_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->progress !== null) {
      if (!is_array($this->progress)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('progress', TType::MAP, 6);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->progress));
        {
          foreach ($this->progress as $kiter828 => $viter829)
          {
            $xfer += $output->writeString($kiter828);
            $xfer += $output->writeI64($viter829);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->histories !== null) {
      if (!is_array($this->histories)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('histories', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRUCT, count($this->histories));
        {
          foreach ($this->histories as $iter830)
          {
            $xfer += $iter830->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->connection_id !== null) {
      $xfer += $output->writeFieldBegin('connection_id', TType::STRING, 8);
      $xfer += $output->writeString($this->connection_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::MAP, 9);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->data));
        {
          foreach ($this->data as $kiter831 => $viter832)
          {
            $xfer += $output->writeString($kiter831);
            $xfer += $output->writeI64($viter832);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snapshot_id !== null) {
      $xfer += $output->writeFieldBegin('snapshot_id', TType::STRING, 10);
      $xfer += $output->writeString($this->snapshot_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->duplicated_data !== null) {
      if (!is_array($this->duplicated_data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('duplicated_data', TType::MAP, 11);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->duplicated_data));
        {
          foreach ($this->duplicated_data as $kiter833 => $viter834)
          {
            $xfer += $output->writeString($kiter833);
            $xfer += $output->writeI64($viter834);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transport_data !== null) {
      if (!is_array($this->transport_data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transport_data', TType::MAP, 12);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->transport_data));
        {
          foreach ($this->transport_data as $kiter835 => $viter836)
          {
            $xfer += $output->writeString($kiter835);
            $xfer += $output->writeI64($viter836);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class upload_progress {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'size',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'progress',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    3 => array(
      'var' => 'vhd_size',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    4 => array(
      'var' => 'upload_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'completed',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var int
   */
  public $size = 0;
  /**
   * @var int
   */
  public $progress = 0;
  /**
   * @var int
   */
  public $vhd_size = 0;
  /**
   * @var string
   */
  public $upload_id = "";
  /**
   * @var bool
   */
  public $completed = false;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
      if (isset($vals['progress'])) {
        $this->progress = $vals['progress'];
      }
      if (isset($vals['vhd_size'])) {
        $this->vhd_size = $vals['vhd_size'];
      }
      if (isset($vals['upload_id'])) {
        $this->upload_id = $vals['upload_id'];
      }
      if (isset($vals['completed'])) {
        $this->completed = $vals['completed'];
      }
    }
  }

  public function getName() {
    return 'upload_progress';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->progress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->vhd_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->upload_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->completed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('upload_progress');
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I64, 1);
      $xfer += $output->writeI64($this->size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->progress !== null) {
      $xfer += $output->writeFieldBegin('progress', TType::I64, 2);
      $xfer += $output->writeI64($this->progress);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vhd_size !== null) {
      $xfer += $output->writeFieldBegin('vhd_size', TType::I64, 3);
      $xfer += $output->writeI64($this->vhd_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->upload_id !== null) {
      $xfer += $output->writeFieldBegin('upload_id', TType::STRING, 4);
      $xfer += $output->writeString($this->upload_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->completed !== null) {
      $xfer += $output->writeFieldBegin('completed', TType::BOOL, 5);
      $xfer += $output->writeBool($this->completed);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class launcher_job_detail {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'replica_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'state',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'created_time',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'updated_time',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'boot_disk',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'histories',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\job_history',
        ),
      ),
    8 => array(
      'var' => 'is_error',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    9 => array(
      'var' => 'is_windows_update',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    10 => array(
      'var' => 'platform',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'architecture',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'size',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    13 => array(
      'var' => 'progress',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    14 => array(
      'var' => 'vhd_size',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    15 => array(
      'var' => 'upload_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    16 => array(
      'var' => 'host_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    17 => array(
      'var' => 'vhd_upload_progress',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\upload_progress',
        ),
      ),
    18 => array(
      'var' => 'virtual_machine_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $replica_id = "";
  /**
   * @var string
   */
  public $id = "";
  /**
   * @var int
   */
  public $state =   1;
  /**
   * @var string
   */
  public $created_time = "";
  /**
   * @var string
   */
  public $updated_time = "";
  /**
   * @var string
   */
  public $boot_disk = "";
  /**
   * @var \saasame\transport\job_history[]
   */
  public $histories = null;
  /**
   * @var bool
   */
  public $is_error = false;
  /**
   * @var bool
   */
  public $is_windows_update = false;
  /**
   * @var string
   */
  public $platform = "";
  /**
   * @var string
   */
  public $architecture = "";
  /**
   * @var int
   */
  public $size = 0;
  /**
   * @var int
   */
  public $progress = 0;
  /**
   * @var int
   */
  public $vhd_size = 0;
  /**
   * @var string
   */
  public $upload_id = "";
  /**
   * @var string
   */
  public $host_name = "";
  /**
   * @var array
   */
  public $vhd_upload_progress = null;
  /**
   * @var string
   */
  public $virtual_machine_id = "";

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['replica_id'])) {
        $this->replica_id = $vals['replica_id'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['created_time'])) {
        $this->created_time = $vals['created_time'];
      }
      if (isset($vals['updated_time'])) {
        $this->updated_time = $vals['updated_time'];
      }
      if (isset($vals['boot_disk'])) {
        $this->boot_disk = $vals['boot_disk'];
      }
      if (isset($vals['histories'])) {
        $this->histories = $vals['histories'];
      }
      if (isset($vals['is_error'])) {
        $this->is_error = $vals['is_error'];
      }
      if (isset($vals['is_windows_update'])) {
        $this->is_windows_update = $vals['is_windows_update'];
      }
      if (isset($vals['platform'])) {
        $this->platform = $vals['platform'];
      }
      if (isset($vals['architecture'])) {
        $this->architecture = $vals['architecture'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
      if (isset($vals['progress'])) {
        $this->progress = $vals['progress'];
      }
      if (isset($vals['vhd_size'])) {
        $this->vhd_size = $vals['vhd_size'];
      }
      if (isset($vals['upload_id'])) {
        $this->upload_id = $vals['upload_id'];
      }
      if (isset($vals['host_name'])) {
        $this->host_name = $vals['host_name'];
      }
      if (isset($vals['vhd_upload_progress'])) {
        $this->vhd_upload_progress = $vals['vhd_upload_progress'];
      }
      if (isset($vals['virtual_machine_id'])) {
        $this->virtual_machine_id = $vals['virtual_machine_id'];
      }
    }
  }

  public function getName() {
    return 'launcher_job_detail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->replica_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->created_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->updated_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->boot_disk);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->histories = array();
            $_size837 = 0;
            $_etype840 = 0;
            $xfer += $input->readListBegin($_etype840, $_size837);
            for ($_i841 = 0; $_i841 < $_size837; ++$_i841)
            {
              $elem842 = null;
              $elem842 = new \saasame\transport\job_history();
              $xfer += $elem842->read($input);
              $this->histories []= $elem842;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_windows_update);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->platform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->architecture);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->progress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->vhd_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->upload_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::MAP) {
            $this->vhd_upload_progress = array();
            $_size843 = 0;
            $_ktype844 = 0;
            $_vtype845 = 0;
            $xfer += $input->readMapBegin($_ktype844, $_vtype845, $_size843);
            for ($_i847 = 0; $_i847 < $_size843; ++$_i847)
            {
              $key848 = '';
              $val849 = new \saasame\transport\upload_progress();
              $xfer += $input->readString($key848);
              $val849 = new \saasame\transport\upload_progress();
              $xfer += $val849->read($input);
              $this->vhd_upload_progress[$key848] = $val849;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->virtual_machine_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('launcher_job_detail');
    if ($this->replica_id !== null) {
      $xfer += $output->writeFieldBegin('replica_id', TType::STRING, 1);
      $xfer += $output->writeString($this->replica_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 2);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 3);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->created_time !== null) {
      $xfer += $output->writeFieldBegin('created_time', TType::STRING, 4);
      $xfer += $output->writeString($this->created_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updated_time !== null) {
      $xfer += $output->writeFieldBegin('updated_time', TType::STRING, 5);
      $xfer += $output->writeString($this->updated_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->boot_disk !== null) {
      $xfer += $output->writeFieldBegin('boot_disk', TType::STRING, 6);
      $xfer += $output->writeString($this->boot_disk);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->histories !== null) {
      if (!is_array($this->histories)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('histories', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRUCT, count($this->histories));
        {
          foreach ($this->histories as $iter850)
          {
            $xfer += $iter850->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_error !== null) {
      $xfer += $output->writeFieldBegin('is_error', TType::BOOL, 8);
      $xfer += $output->writeBool($this->is_error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_windows_update !== null) {
      $xfer += $output->writeFieldBegin('is_windows_update', TType::BOOL, 9);
      $xfer += $output->writeBool($this->is_windows_update);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platform !== null) {
      $xfer += $output->writeFieldBegin('platform', TType::STRING, 10);
      $xfer += $output->writeString($this->platform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->architecture !== null) {
      $xfer += $output->writeFieldBegin('architecture', TType::STRING, 11);
      $xfer += $output->writeString($this->architecture);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I64, 12);
      $xfer += $output->writeI64($this->size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->progress !== null) {
      $xfer += $output->writeFieldBegin('progress', TType::I64, 13);
      $xfer += $output->writeI64($this->progress);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vhd_size !== null) {
      $xfer += $output->writeFieldBegin('vhd_size', TType::I64, 14);
      $xfer += $output->writeI64($this->vhd_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->upload_id !== null) {
      $xfer += $output->writeFieldBegin('upload_id', TType::STRING, 15);
      $xfer += $output->writeString($this->upload_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host_name !== null) {
      $xfer += $output->writeFieldBegin('host_name', TType::STRING, 16);
      $xfer += $output->writeString($this->host_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vhd_upload_progress !== null) {
      if (!is_array($this->vhd_upload_progress)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('vhd_upload_progress', TType::MAP, 17);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->vhd_upload_progress));
        {
          foreach ($this->vhd_upload_progress as $kiter851 => $viter852)
          {
            $xfer += $output->writeString($kiter851);
            $xfer += $viter852->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->virtual_machine_id !== null) {
      $xfer += $output->writeFieldBegin('virtual_machine_id', TType::STRING, 18);
      $xfer += $output->writeString($this->virtual_machine_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class job_detail {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'scheduler',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\replica_job_detail',
      ),
    2 => array(
      'var' => 'launcher',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\launcher_job_detail',
      ),
    3 => array(
      'var' => 'loader',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\loader_job_detail',
      ),
    );

  /**
   * @var \saasame\transport\replica_job_detail
   */
  public $scheduler = null;
  /**
   * @var \saasame\transport\launcher_job_detail
   */
  public $launcher = null;
  /**
   * @var \saasame\transport\loader_job_detail
   */
  public $loader = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['scheduler'])) {
        $this->scheduler = $vals['scheduler'];
      }
      if (isset($vals['launcher'])) {
        $this->launcher = $vals['launcher'];
      }
      if (isset($vals['loader'])) {
        $this->loader = $vals['loader'];
      }
    }
  }

  public function getName() {
    return 'job_detail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->scheduler = new \saasame\transport\replica_job_detail();
            $xfer += $this->scheduler->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->launcher = new \saasame\transport\launcher_job_detail();
            $xfer += $this->launcher->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->loader = new \saasame\transport\loader_job_detail();
            $xfer += $this->loader->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('job_detail');
    if ($this->scheduler !== null) {
      if (!is_object($this->scheduler)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('scheduler', TType::STRUCT, 1);
      $xfer += $this->scheduler->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->launcher !== null) {
      if (!is_object($this->launcher)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('launcher', TType::STRUCT, 2);
      $xfer += $this->launcher->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loader !== null) {
      if (!is_object($this->loader)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('loader', TType::STRUCT, 3);
      $xfer += $this->loader->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class replica_job_create_detail {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'host',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'addr',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    3 => array(
      'var' => 'username',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'password',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'virtual_machine_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'disks',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    8 => array(
      'var' => 'targets',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    9 => array(
      'var' => 'carriers',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::SET,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::SET,
        'etype' => TType::STRING,
        'elem' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    10 => array(
      'var' => 'full_replicas',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    11 => array(
      'var' => 'disk_ids',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    12 => array(
      'var' => 'cbt_info',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    13 => array(
      'var' => 'snapshot_info',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    14 => array(
      'var' => 'checksum_verify',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    15 => array(
      'var' => 'always_retry',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    16 => array(
      'var' => 'timeout',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    17 => array(
      'var' => 'is_encrypted',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    18 => array(
      'var' => 'is_paused',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    19 => array(
      'var' => 'worker_thread_number',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    20 => array(
      'var' => 'block_mode_enable',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    21 => array(
      'var' => 'file_system_filter_enable',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    22 => array(
      'var' => 'min_transport_size',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    23 => array(
      'var' => 'full_min_transport_size',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    24 => array(
      'var' => 'is_full_replica',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    25 => array(
      'var' => 'buffer_size',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    26 => array(
      'var' => 'is_compressed',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    27 => array(
      'var' => 'is_checksum',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    28 => array(
      'var' => 'time',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    29 => array(
      'var' => 'priority_carrier',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    30 => array(
      'var' => 'is_only_single_system_disk',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    31 => array(
      'var' => 'is_continuous_data_replication',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    32 => array(
      'var' => 'pre_snapshot_script',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    33 => array(
      'var' => 'post_snapshot_script',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    34 => array(
      'var' => 'is_compressed_by_packer',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var string
   */
  public $host = "";
  /**
   * @var string[]
   */
  public $addr = null;
  /**
   * @var string
   */
  public $username = "";
  /**
   * @var string
   */
  public $password = "";
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var string
   */
  public $virtual_machine_id = "";
  /**
   * @var string[]
   */
  public $disks = null;
  /**
   * @var array
   */
  public $targets = null;
  /**
   * @var array
   */
  public $carriers = null;
  /**
   * @var string[]
   */
  public $full_replicas = null;
  /**
   * @var array
   */
  public $disk_ids = null;
  /**
   * @var string
   */
  public $cbt_info = "";
  /**
   * @var string
   */
  public $snapshot_info = "";
  /**
   * @var bool
   */
  public $checksum_verify = true;
  /**
   * @var bool
   */
  public $always_retry = false;
  /**
   * @var int
   */
  public $timeout = 300;
  /**
   * @var bool
   */
  public $is_encrypted = false;
  /**
   * @var bool
   */
  public $is_paused = false;
  /**
   * @var int
   */
  public $worker_thread_number = 0;
  /**
   * @var bool
   */
  public $block_mode_enable = false;
  /**
   * @var bool
   */
  public $file_system_filter_enable = true;
  /**
   * @var int
   */
  public $min_transport_size = 0;
  /**
   * @var int
   */
  public $full_min_transport_size = 0;
  /**
   * @var bool
   */
  public $is_full_replica = false;
  /**
   * @var int
   */
  public $buffer_size = 0;
  /**
   * @var bool
   */
  public $is_compressed = true;
  /**
   * @var bool
   */
  public $is_checksum = false;
  /**
   * @var string
   */
  public $time = "";
  /**
   * @var array
   */
  public $priority_carrier = null;
  /**
   * @var bool
   */
  public $is_only_single_system_disk = false;
  /**
   * @var bool
   */
  public $is_continuous_data_replication = false;
  /**
   * @var string
   */
  public $pre_snapshot_script = null;
  /**
   * @var string
   */
  public $post_snapshot_script = null;
  /**
   * @var bool
   */
  public $is_compressed_by_packer = false;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
      if (isset($vals['addr'])) {
        $this->addr = $vals['addr'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['virtual_machine_id'])) {
        $this->virtual_machine_id = $vals['virtual_machine_id'];
      }
      if (isset($vals['disks'])) {
        $this->disks = $vals['disks'];
      }
      if (isset($vals['targets'])) {
        $this->targets = $vals['targets'];
      }
      if (isset($vals['carriers'])) {
        $this->carriers = $vals['carriers'];
      }
      if (isset($vals['full_replicas'])) {
        $this->full_replicas = $vals['full_replicas'];
      }
      if (isset($vals['disk_ids'])) {
        $this->disk_ids = $vals['disk_ids'];
      }
      if (isset($vals['cbt_info'])) {
        $this->cbt_info = $vals['cbt_info'];
      }
      if (isset($vals['snapshot_info'])) {
        $this->snapshot_info = $vals['snapshot_info'];
      }
      if (isset($vals['checksum_verify'])) {
        $this->checksum_verify = $vals['checksum_verify'];
      }
      if (isset($vals['always_retry'])) {
        $this->always_retry = $vals['always_retry'];
      }
      if (isset($vals['timeout'])) {
        $this->timeout = $vals['timeout'];
      }
      if (isset($vals['is_encrypted'])) {
        $this->is_encrypted = $vals['is_encrypted'];
      }
      if (isset($vals['is_paused'])) {
        $this->is_paused = $vals['is_paused'];
      }
      if (isset($vals['worker_thread_number'])) {
        $this->worker_thread_number = $vals['worker_thread_number'];
      }
      if (isset($vals['block_mode_enable'])) {
        $this->block_mode_enable = $vals['block_mode_enable'];
      }
      if (isset($vals['file_system_filter_enable'])) {
        $this->file_system_filter_enable = $vals['file_system_filter_enable'];
      }
      if (isset($vals['min_transport_size'])) {
        $this->min_transport_size = $vals['min_transport_size'];
      }
      if (isset($vals['full_min_transport_size'])) {
        $this->full_min_transport_size = $vals['full_min_transport_size'];
      }
      if (isset($vals['is_full_replica'])) {
        $this->is_full_replica = $vals['is_full_replica'];
      }
      if (isset($vals['buffer_size'])) {
        $this->buffer_size = $vals['buffer_size'];
      }
      if (isset($vals['is_compressed'])) {
        $this->is_compressed = $vals['is_compressed'];
      }
      if (isset($vals['is_checksum'])) {
        $this->is_checksum = $vals['is_checksum'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['priority_carrier'])) {
        $this->priority_carrier = $vals['priority_carrier'];
      }
      if (isset($vals['is_only_single_system_disk'])) {
        $this->is_only_single_system_disk = $vals['is_only_single_system_disk'];
      }
      if (isset($vals['is_continuous_data_replication'])) {
        $this->is_continuous_data_replication = $vals['is_continuous_data_replication'];
      }
      if (isset($vals['pre_snapshot_script'])) {
        $this->pre_snapshot_script = $vals['pre_snapshot_script'];
      }
      if (isset($vals['post_snapshot_script'])) {
        $this->post_snapshot_script = $vals['post_snapshot_script'];
      }
      if (isset($vals['is_compressed_by_packer'])) {
        $this->is_compressed_by_packer = $vals['is_compressed_by_packer'];
      }
    }
  }

  public function getName() {
    return 'replica_job_create_detail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::SET) {
            $this->addr = array();
            $_size853 = 0;
            $_etype856 = 0;
            $xfer += $input->readSetBegin($_etype856, $_size853);
            for ($_i857 = 0; $_i857 < $_size853; ++$_i857)
            {
              $elem858 = null;
              $xfer += $input->readString($elem858);
              $this->addr[$elem858] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->virtual_machine_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::SET) {
            $this->disks = array();
            $_size859 = 0;
            $_etype862 = 0;
            $xfer += $input->readSetBegin($_etype862, $_size859);
            for ($_i863 = 0; $_i863 < $_size859; ++$_i863)
            {
              $elem864 = null;
              $xfer += $input->readString($elem864);
              $this->disks[$elem864] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::MAP) {
            $this->targets = array();
            $_size865 = 0;
            $_ktype866 = 0;
            $_vtype867 = 0;
            $xfer += $input->readMapBegin($_ktype866, $_vtype867, $_size865);
            for ($_i869 = 0; $_i869 < $_size865; ++$_i869)
            {
              $key870 = '';
              $val871 = '';
              $xfer += $input->readString($key870);
              $xfer += $input->readString($val871);
              $this->targets[$key870] = $val871;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::MAP) {
            $this->carriers = array();
            $_size872 = 0;
            $_ktype873 = 0;
            $_vtype874 = 0;
            $xfer += $input->readMapBegin($_ktype873, $_vtype874, $_size872);
            for ($_i876 = 0; $_i876 < $_size872; ++$_i876)
            {
              $key877 = '';
              $val878 = array();
              $xfer += $input->readString($key877);
              $val878 = array();
              $_size879 = 0;
              $_etype882 = 0;
              $xfer += $input->readSetBegin($_etype882, $_size879);
              for ($_i883 = 0; $_i883 < $_size879; ++$_i883)
              {
                $elem884 = null;
                $xfer += $input->readString($elem884);
                $val878[$elem884] = true;
              }
              $xfer += $input->readSetEnd();
              $this->carriers[$key877] = $val878;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::SET) {
            $this->full_replicas = array();
            $_size885 = 0;
            $_etype888 = 0;
            $xfer += $input->readSetBegin($_etype888, $_size885);
            for ($_i889 = 0; $_i889 < $_size885; ++$_i889)
            {
              $elem890 = null;
              $xfer += $input->readString($elem890);
              $this->full_replicas[$elem890] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::MAP) {
            $this->disk_ids = array();
            $_size891 = 0;
            $_ktype892 = 0;
            $_vtype893 = 0;
            $xfer += $input->readMapBegin($_ktype892, $_vtype893, $_size891);
            for ($_i895 = 0; $_i895 < $_size891; ++$_i895)
            {
              $key896 = '';
              $val897 = '';
              $xfer += $input->readString($key896);
              $xfer += $input->readString($val897);
              $this->disk_ids[$key896] = $val897;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cbt_info);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snapshot_info);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->checksum_verify);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->always_retry);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timeout);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_encrypted);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_paused);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->worker_thread_number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->block_mode_enable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->file_system_filter_enable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->min_transport_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->full_min_transport_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_full_replica);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->buffer_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_compressed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_checksum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::MAP) {
            $this->priority_carrier = array();
            $_size898 = 0;
            $_ktype899 = 0;
            $_vtype900 = 0;
            $xfer += $input->readMapBegin($_ktype899, $_vtype900, $_size898);
            for ($_i902 = 0; $_i902 < $_size898; ++$_i902)
            {
              $key903 = '';
              $val904 = '';
              $xfer += $input->readString($key903);
              $xfer += $input->readString($val904);
              $this->priority_carrier[$key903] = $val904;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_only_single_system_disk);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_continuous_data_replication);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pre_snapshot_script);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->post_snapshot_script);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 34:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_compressed_by_packer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('replica_job_create_detail');
    if ($this->host !== null) {
      $xfer += $output->writeFieldBegin('host', TType::STRING, 1);
      $xfer += $output->writeString($this->host);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addr !== null) {
      if (!is_array($this->addr)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('addr', TType::SET, 2);
      {
        $output->writeSetBegin(TType::STRING, count($this->addr));
        {
          foreach ($this->addr as $iter905 => $iter906)
          {
            $xfer += $output->writeString($iter905);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 3);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 4);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 5);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->virtual_machine_id !== null) {
      $xfer += $output->writeFieldBegin('virtual_machine_id', TType::STRING, 6);
      $xfer += $output->writeString($this->virtual_machine_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disks !== null) {
      if (!is_array($this->disks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('disks', TType::SET, 7);
      {
        $output->writeSetBegin(TType::STRING, count($this->disks));
        {
          foreach ($this->disks as $iter907 => $iter908)
          {
            $xfer += $output->writeString($iter907);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->targets !== null) {
      if (!is_array($this->targets)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('targets', TType::MAP, 8);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->targets));
        {
          foreach ($this->targets as $kiter909 => $viter910)
          {
            $xfer += $output->writeString($kiter909);
            $xfer += $output->writeString($viter910);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->carriers !== null) {
      if (!is_array($this->carriers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('carriers', TType::MAP, 9);
      {
        $output->writeMapBegin(TType::STRING, TType::SET, count($this->carriers));
        {
          foreach ($this->carriers as $kiter911 => $viter912)
          {
            $xfer += $output->writeString($kiter911);
            {
              $output->writeSetBegin(TType::STRING, count($viter912));
              {
                foreach ($viter912 as $iter913 => $iter914)
                {
                  $xfer += $output->writeString($iter913);
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->full_replicas !== null) {
      if (!is_array($this->full_replicas)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('full_replicas', TType::SET, 10);
      {
        $output->writeSetBegin(TType::STRING, count($this->full_replicas));
        {
          foreach ($this->full_replicas as $iter915 => $iter916)
          {
            $xfer += $output->writeString($iter915);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disk_ids !== null) {
      if (!is_array($this->disk_ids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('disk_ids', TType::MAP, 11);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->disk_ids));
        {
          foreach ($this->disk_ids as $kiter917 => $viter918)
          {
            $xfer += $output->writeString($kiter917);
            $xfer += $output->writeString($viter918);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cbt_info !== null) {
      $xfer += $output->writeFieldBegin('cbt_info', TType::STRING, 12);
      $xfer += $output->writeString($this->cbt_info);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snapshot_info !== null) {
      $xfer += $output->writeFieldBegin('snapshot_info', TType::STRING, 13);
      $xfer += $output->writeString($this->snapshot_info);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->checksum_verify !== null) {
      $xfer += $output->writeFieldBegin('checksum_verify', TType::BOOL, 14);
      $xfer += $output->writeBool($this->checksum_verify);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->always_retry !== null) {
      $xfer += $output->writeFieldBegin('always_retry', TType::BOOL, 15);
      $xfer += $output->writeBool($this->always_retry);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeout !== null) {
      $xfer += $output->writeFieldBegin('timeout', TType::I32, 16);
      $xfer += $output->writeI32($this->timeout);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_encrypted !== null) {
      $xfer += $output->writeFieldBegin('is_encrypted', TType::BOOL, 17);
      $xfer += $output->writeBool($this->is_encrypted);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_paused !== null) {
      $xfer += $output->writeFieldBegin('is_paused', TType::BOOL, 18);
      $xfer += $output->writeBool($this->is_paused);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->worker_thread_number !== null) {
      $xfer += $output->writeFieldBegin('worker_thread_number', TType::I32, 19);
      $xfer += $output->writeI32($this->worker_thread_number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->block_mode_enable !== null) {
      $xfer += $output->writeFieldBegin('block_mode_enable', TType::BOOL, 20);
      $xfer += $output->writeBool($this->block_mode_enable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->file_system_filter_enable !== null) {
      $xfer += $output->writeFieldBegin('file_system_filter_enable', TType::BOOL, 21);
      $xfer += $output->writeBool($this->file_system_filter_enable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->min_transport_size !== null) {
      $xfer += $output->writeFieldBegin('min_transport_size', TType::I32, 22);
      $xfer += $output->writeI32($this->min_transport_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->full_min_transport_size !== null) {
      $xfer += $output->writeFieldBegin('full_min_transport_size', TType::I32, 23);
      $xfer += $output->writeI32($this->full_min_transport_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_full_replica !== null) {
      $xfer += $output->writeFieldBegin('is_full_replica', TType::BOOL, 24);
      $xfer += $output->writeBool($this->is_full_replica);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buffer_size !== null) {
      $xfer += $output->writeFieldBegin('buffer_size', TType::I32, 25);
      $xfer += $output->writeI32($this->buffer_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_compressed !== null) {
      $xfer += $output->writeFieldBegin('is_compressed', TType::BOOL, 26);
      $xfer += $output->writeBool($this->is_compressed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_checksum !== null) {
      $xfer += $output->writeFieldBegin('is_checksum', TType::BOOL, 27);
      $xfer += $output->writeBool($this->is_checksum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::STRING, 28);
      $xfer += $output->writeString($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priority_carrier !== null) {
      if (!is_array($this->priority_carrier)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('priority_carrier', TType::MAP, 29);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->priority_carrier));
        {
          foreach ($this->priority_carrier as $kiter919 => $viter920)
          {
            $xfer += $output->writeString($kiter919);
            $xfer += $output->writeString($viter920);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_only_single_system_disk !== null) {
      $xfer += $output->writeFieldBegin('is_only_single_system_disk', TType::BOOL, 30);
      $xfer += $output->writeBool($this->is_only_single_system_disk);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_continuous_data_replication !== null) {
      $xfer += $output->writeFieldBegin('is_continuous_data_replication', TType::BOOL, 31);
      $xfer += $output->writeBool($this->is_continuous_data_replication);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pre_snapshot_script !== null) {
      $xfer += $output->writeFieldBegin('pre_snapshot_script', TType::STRING, 32);
      $xfer += $output->writeString($this->pre_snapshot_script);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->post_snapshot_script !== null) {
      $xfer += $output->writeFieldBegin('post_snapshot_script', TType::STRING, 33);
      $xfer += $output->writeString($this->post_snapshot_script);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_compressed_by_packer !== null) {
      $xfer += $output->writeFieldBegin('is_compressed_by_packer', TType::BOOL, 34);
      $xfer += $output->writeBool($this->is_compressed_by_packer);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class vmware_connection_info {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'host',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'username',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'password',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'esx',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'datastore',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'folder_path',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $host = "";
  /**
   * @var string
   */
  public $username = "";
  /**
   * @var string
   */
  public $password = "";
  /**
   * @var string
   */
  public $esx = "";
  /**
   * @var string
   */
  public $datastore = "";
  /**
   * @var string
   */
  public $folder_path = "";

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['esx'])) {
        $this->esx = $vals['esx'];
      }
      if (isset($vals['datastore'])) {
        $this->datastore = $vals['datastore'];
      }
      if (isset($vals['folder_path'])) {
        $this->folder_path = $vals['folder_path'];
      }
    }
  }

  public function getName() {
    return 'vmware_connection_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->esx);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->datastore);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->folder_path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('vmware_connection_info');
    if ($this->host !== null) {
      $xfer += $output->writeFieldBegin('host', TType::STRING, 1);
      $xfer += $output->writeString($this->host);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 2);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 3);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->esx !== null) {
      $xfer += $output->writeFieldBegin('esx', TType::STRING, 4);
      $xfer += $output->writeString($this->esx);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->datastore !== null) {
      $xfer += $output->writeFieldBegin('datastore', TType::STRING, 5);
      $xfer += $output->writeString($this->datastore);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->folder_path !== null) {
      $xfer += $output->writeFieldBegin('folder_path', TType::STRING, 6);
      $xfer += $output->writeString($this->folder_path);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class vmware_options {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'connection',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\vmware_connection_info',
      ),
    2 => array(
      'var' => 'virtual_machine_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'virtual_machine_snapshot',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'number_of_cpus',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'number_of_memory_in_mb',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'vm_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'network_connections',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    8 => array(
      'var' => 'network_adapters',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    9 => array(
      'var' => 'scsi_adapters',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::I32,
      'vtype' => TType::LST,
      'key' => array(
        'type' => TType::I32,
      ),
      'val' => array(
        'type' => TType::LST,
        'etype' => TType::STRING,
        'elem' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    10 => array(
      'var' => 'guest_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'firmware',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    12 => array(
      'var' => 'install_vm_tools',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var \saasame\transport\vmware_connection_info
   */
  public $connection = null;
  /**
   * @var string
   */
  public $virtual_machine_id = "";
  /**
   * @var string
   */
  public $virtual_machine_snapshot = "";
  /**
   * @var int
   */
  public $number_of_cpus = 1;
  /**
   * @var int
   */
  public $number_of_memory_in_mb = 1024;
  /**
   * @var string
   */
  public $vm_name = null;
  /**
   * @var string[]
   */
  public $network_connections = null;
  /**
   * @var string[]
   */
  public $network_adapters = null;
  /**
   * @var array
   */
  public $scsi_adapters = null;
  /**
   * @var string
   */
  public $guest_id = null;
  /**
   * @var int
   */
  public $firmware =   0;
  /**
   * @var bool
   */
  public $install_vm_tools = true;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['connection'])) {
        $this->connection = $vals['connection'];
      }
      if (isset($vals['virtual_machine_id'])) {
        $this->virtual_machine_id = $vals['virtual_machine_id'];
      }
      if (isset($vals['virtual_machine_snapshot'])) {
        $this->virtual_machine_snapshot = $vals['virtual_machine_snapshot'];
      }
      if (isset($vals['number_of_cpus'])) {
        $this->number_of_cpus = $vals['number_of_cpus'];
      }
      if (isset($vals['number_of_memory_in_mb'])) {
        $this->number_of_memory_in_mb = $vals['number_of_memory_in_mb'];
      }
      if (isset($vals['vm_name'])) {
        $this->vm_name = $vals['vm_name'];
      }
      if (isset($vals['network_connections'])) {
        $this->network_connections = $vals['network_connections'];
      }
      if (isset($vals['network_adapters'])) {
        $this->network_adapters = $vals['network_adapters'];
      }
      if (isset($vals['scsi_adapters'])) {
        $this->scsi_adapters = $vals['scsi_adapters'];
      }
      if (isset($vals['guest_id'])) {
        $this->guest_id = $vals['guest_id'];
      }
      if (isset($vals['firmware'])) {
        $this->firmware = $vals['firmware'];
      }
      if (isset($vals['install_vm_tools'])) {
        $this->install_vm_tools = $vals['install_vm_tools'];
      }
    }
  }

  public function getName() {
    return 'vmware_options';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->connection = new \saasame\transport\vmware_connection_info();
            $xfer += $this->connection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->virtual_machine_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->virtual_machine_snapshot);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->number_of_cpus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->number_of_memory_in_mb);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->vm_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->network_connections = array();
            $_size921 = 0;
            $_etype924 = 0;
            $xfer += $input->readListBegin($_etype924, $_size921);
            for ($_i925 = 0; $_i925 < $_size921; ++$_i925)
            {
              $elem926 = null;
              $xfer += $input->readString($elem926);
              $this->network_connections []= $elem926;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->network_adapters = array();
            $_size927 = 0;
            $_etype930 = 0;
            $xfer += $input->readListBegin($_etype930, $_size927);
            for ($_i931 = 0; $_i931 < $_size927; ++$_i931)
            {
              $elem932 = null;
              $xfer += $input->readString($elem932);
              $this->network_adapters []= $elem932;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::MAP) {
            $this->scsi_adapters = array();
            $_size933 = 0;
            $_ktype934 = 0;
            $_vtype935 = 0;
            $xfer += $input->readMapBegin($_ktype934, $_vtype935, $_size933);
            for ($_i937 = 0; $_i937 < $_size933; ++$_i937)
            {
              $key938 = 0;
              $val939 = array();
              $xfer += $input->readI32($key938);
              $val939 = array();
              $_size940 = 0;
              $_etype943 = 0;
              $xfer += $input->readListBegin($_etype943, $_size940);
              for ($_i944 = 0; $_i944 < $_size940; ++$_i944)
              {
                $elem945 = null;
                $xfer += $input->readString($elem945);
                $val939 []= $elem945;
              }
              $xfer += $input->readListEnd();
              $this->scsi_adapters[$key938] = $val939;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->guest_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->firmware);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->install_vm_tools);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('vmware_options');
    if ($this->connection !== null) {
      if (!is_object($this->connection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('connection', TType::STRUCT, 1);
      $xfer += $this->connection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->virtual_machine_id !== null) {
      $xfer += $output->writeFieldBegin('virtual_machine_id', TType::STRING, 2);
      $xfer += $output->writeString($this->virtual_machine_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->virtual_machine_snapshot !== null) {
      $xfer += $output->writeFieldBegin('virtual_machine_snapshot', TType::STRING, 3);
      $xfer += $output->writeString($this->virtual_machine_snapshot);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number_of_cpus !== null) {
      $xfer += $output->writeFieldBegin('number_of_cpus', TType::I32, 4);
      $xfer += $output->writeI32($this->number_of_cpus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number_of_memory_in_mb !== null) {
      $xfer += $output->writeFieldBegin('number_of_memory_in_mb', TType::I32, 5);
      $xfer += $output->writeI32($this->number_of_memory_in_mb);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vm_name !== null) {
      $xfer += $output->writeFieldBegin('vm_name', TType::STRING, 6);
      $xfer += $output->writeString($this->vm_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->network_connections !== null) {
      if (!is_array($this->network_connections)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('network_connections', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRING, count($this->network_connections));
        {
          foreach ($this->network_connections as $iter946)
          {
            $xfer += $output->writeString($iter946);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->network_adapters !== null) {
      if (!is_array($this->network_adapters)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('network_adapters', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRING, count($this->network_adapters));
        {
          foreach ($this->network_adapters as $iter947)
          {
            $xfer += $output->writeString($iter947);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scsi_adapters !== null) {
      if (!is_array($this->scsi_adapters)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('scsi_adapters', TType::MAP, 9);
      {
        $output->writeMapBegin(TType::I32, TType::LST, count($this->scsi_adapters));
        {
          foreach ($this->scsi_adapters as $kiter948 => $viter949)
          {
            $xfer += $output->writeI32($kiter948);
            {
              $output->writeListBegin(TType::STRING, count($viter949));
              {
                foreach ($viter949 as $iter950)
                {
                  $xfer += $output->writeString($iter950);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->guest_id !== null) {
      $xfer += $output->writeFieldBegin('guest_id', TType::STRING, 10);
      $xfer += $output->writeString($this->guest_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->firmware !== null) {
      $xfer += $output->writeFieldBegin('firmware', TType::I32, 11);
      $xfer += $output->writeI32($this->firmware);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->install_vm_tools !== null) {
      $xfer += $output->writeFieldBegin('install_vm_tools', TType::BOOL, 12);
      $xfer += $output->writeBool($this->install_vm_tools);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class aliyun_options {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'access_key',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'secret_key',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'objectname',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'bucketname',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'region',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'max_size',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'file_system_filter_enable',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    8 => array(
      'var' => 'number_of_upload_threads',
      'isRequired' => false,
      'type' => TType::I16,
      ),
    9 => array(
      'var' => 'disks_object_name_mapping',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var string
   */
  public $access_key = "";
  /**
   * @var string
   */
  public $secret_key = "";
  /**
   * @var string
   */
  public $objectname = "";
  /**
   * @var string
   */
  public $bucketname = "";
  /**
   * @var string
   */
  public $region = "";
  /**
   * @var int
   */
  public $max_size = 500;
  /**
   * @var bool
   */
  public $file_system_filter_enable = true;
  /**
   * @var int
   */
  public $number_of_upload_threads = 0;
  /**
   * @var array
   */
  public $disks_object_name_mapping = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['access_key'])) {
        $this->access_key = $vals['access_key'];
      }
      if (isset($vals['secret_key'])) {
        $this->secret_key = $vals['secret_key'];
      }
      if (isset($vals['objectname'])) {
        $this->objectname = $vals['objectname'];
      }
      if (isset($vals['bucketname'])) {
        $this->bucketname = $vals['bucketname'];
      }
      if (isset($vals['region'])) {
        $this->region = $vals['region'];
      }
      if (isset($vals['max_size'])) {
        $this->max_size = $vals['max_size'];
      }
      if (isset($vals['file_system_filter_enable'])) {
        $this->file_system_filter_enable = $vals['file_system_filter_enable'];
      }
      if (isset($vals['number_of_upload_threads'])) {
        $this->number_of_upload_threads = $vals['number_of_upload_threads'];
      }
      if (isset($vals['disks_object_name_mapping'])) {
        $this->disks_object_name_mapping = $vals['disks_object_name_mapping'];
      }
    }
  }

  public function getName() {
    return 'aliyun_options';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->access_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->secret_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->objectname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bucketname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->region);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->max_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->file_system_filter_enable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->number_of_upload_threads);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::MAP) {
            $this->disks_object_name_mapping = array();
            $_size951 = 0;
            $_ktype952 = 0;
            $_vtype953 = 0;
            $xfer += $input->readMapBegin($_ktype952, $_vtype953, $_size951);
            for ($_i955 = 0; $_i955 < $_size951; ++$_i955)
            {
              $key956 = '';
              $val957 = '';
              $xfer += $input->readString($key956);
              $xfer += $input->readString($val957);
              $this->disks_object_name_mapping[$key956] = $val957;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('aliyun_options');
    if ($this->access_key !== null) {
      $xfer += $output->writeFieldBegin('access_key', TType::STRING, 1);
      $xfer += $output->writeString($this->access_key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->secret_key !== null) {
      $xfer += $output->writeFieldBegin('secret_key', TType::STRING, 2);
      $xfer += $output->writeString($this->secret_key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objectname !== null) {
      $xfer += $output->writeFieldBegin('objectname', TType::STRING, 3);
      $xfer += $output->writeString($this->objectname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bucketname !== null) {
      $xfer += $output->writeFieldBegin('bucketname', TType::STRING, 4);
      $xfer += $output->writeString($this->bucketname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->region !== null) {
      $xfer += $output->writeFieldBegin('region', TType::STRING, 5);
      $xfer += $output->writeString($this->region);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->max_size !== null) {
      $xfer += $output->writeFieldBegin('max_size', TType::I32, 6);
      $xfer += $output->writeI32($this->max_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->file_system_filter_enable !== null) {
      $xfer += $output->writeFieldBegin('file_system_filter_enable', TType::BOOL, 7);
      $xfer += $output->writeBool($this->file_system_filter_enable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number_of_upload_threads !== null) {
      $xfer += $output->writeFieldBegin('number_of_upload_threads', TType::I16, 8);
      $xfer += $output->writeI16($this->number_of_upload_threads);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disks_object_name_mapping !== null) {
      if (!is_array($this->disks_object_name_mapping)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('disks_object_name_mapping', TType::MAP, 9);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->disks_object_name_mapping));
        {
          foreach ($this->disks_object_name_mapping as $kiter958 => $viter959)
          {
            $xfer += $output->writeString($kiter958);
            $xfer += $output->writeString($viter959);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class tencent_options {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'access_key',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'secret_key',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'objectname',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'bucketname',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'region',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'max_size',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'file_system_filter_enable',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    8 => array(
      'var' => 'number_of_upload_threads',
      'isRequired' => false,
      'type' => TType::I16,
      ),
    9 => array(
      'var' => 'disks_object_name_mapping',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    );

  /**
   * @var string
   */
  public $access_key = "";
  /**
   * @var string
   */
  public $secret_key = "";
  /**
   * @var string
   */
  public $objectname = "";
  /**
   * @var string
   */
  public $bucketname = "";
  /**
   * @var string
   */
  public $region = "";
  /**
   * @var int
   */
  public $max_size = 500;
  /**
   * @var bool
   */
  public $file_system_filter_enable = true;
  /**
   * @var int
   */
  public $number_of_upload_threads = 0;
  /**
   * @var array
   */
  public $disks_object_name_mapping = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['access_key'])) {
        $this->access_key = $vals['access_key'];
      }
      if (isset($vals['secret_key'])) {
        $this->secret_key = $vals['secret_key'];
      }
      if (isset($vals['objectname'])) {
        $this->objectname = $vals['objectname'];
      }
      if (isset($vals['bucketname'])) {
        $this->bucketname = $vals['bucketname'];
      }
      if (isset($vals['region'])) {
        $this->region = $vals['region'];
      }
      if (isset($vals['max_size'])) {
        $this->max_size = $vals['max_size'];
      }
      if (isset($vals['file_system_filter_enable'])) {
        $this->file_system_filter_enable = $vals['file_system_filter_enable'];
      }
      if (isset($vals['number_of_upload_threads'])) {
        $this->number_of_upload_threads = $vals['number_of_upload_threads'];
      }
      if (isset($vals['disks_object_name_mapping'])) {
        $this->disks_object_name_mapping = $vals['disks_object_name_mapping'];
      }
    }
  }

  public function getName() {
    return 'tencent_options';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->access_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->secret_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->objectname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bucketname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->region);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->max_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->file_system_filter_enable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->number_of_upload_threads);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::MAP) {
            $this->disks_object_name_mapping = array();
            $_size960 = 0;
            $_ktype961 = 0;
            $_vtype962 = 0;
            $xfer += $input->readMapBegin($_ktype961, $_vtype962, $_size960);
            for ($_i964 = 0; $_i964 < $_size960; ++$_i964)
            {
              $key965 = '';
              $val966 = '';
              $xfer += $input->readString($key965);
              $xfer += $input->readString($val966);
              $this->disks_object_name_mapping[$key965] = $val966;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('tencent_options');
    if ($this->access_key !== null) {
      $xfer += $output->writeFieldBegin('access_key', TType::STRING, 1);
      $xfer += $output->writeString($this->access_key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->secret_key !== null) {
      $xfer += $output->writeFieldBegin('secret_key', TType::STRING, 2);
      $xfer += $output->writeString($this->secret_key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objectname !== null) {
      $xfer += $output->writeFieldBegin('objectname', TType::STRING, 3);
      $xfer += $output->writeString($this->objectname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bucketname !== null) {
      $xfer += $output->writeFieldBegin('bucketname', TType::STRING, 4);
      $xfer += $output->writeString($this->bucketname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->region !== null) {
      $xfer += $output->writeFieldBegin('region', TType::STRING, 5);
      $xfer += $output->writeString($this->region);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->max_size !== null) {
      $xfer += $output->writeFieldBegin('max_size', TType::I32, 6);
      $xfer += $output->writeI32($this->max_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->file_system_filter_enable !== null) {
      $xfer += $output->writeFieldBegin('file_system_filter_enable', TType::BOOL, 7);
      $xfer += $output->writeBool($this->file_system_filter_enable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number_of_upload_threads !== null) {
      $xfer += $output->writeFieldBegin('number_of_upload_threads', TType::I16, 8);
      $xfer += $output->writeI16($this->number_of_upload_threads);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disks_object_name_mapping !== null) {
      if (!is_array($this->disks_object_name_mapping)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('disks_object_name_mapping', TType::MAP, 9);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->disks_object_name_mapping));
        {
          foreach ($this->disks_object_name_mapping as $kiter967 => $viter968)
          {
            $xfer += $output->writeString($kiter967);
            $xfer += $output->writeString($viter968);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class extra_options {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'aliyun',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\aliyun_options',
      ),
    2 => array(
      'var' => 'tencent',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\tencent_options',
      ),
    );

  /**
   * @var \saasame\transport\aliyun_options
   */
  public $aliyun = null;
  /**
   * @var \saasame\transport\tencent_options
   */
  public $tencent = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['aliyun'])) {
        $this->aliyun = $vals['aliyun'];
      }
      if (isset($vals['tencent'])) {
        $this->tencent = $vals['tencent'];
      }
    }
  }

  public function getName() {
    return 'extra_options';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aliyun = new \saasame\transport\aliyun_options();
            $xfer += $this->aliyun->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->tencent = new \saasame\transport\tencent_options();
            $xfer += $this->tencent->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('extra_options');
    if ($this->aliyun !== null) {
      if (!is_object($this->aliyun)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('aliyun', TType::STRUCT, 1);
      $xfer += $this->aliyun->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tencent !== null) {
      if (!is_object($this->tencent)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tencent', TType::STRUCT, 2);
      $xfer += $this->tencent->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class vhd_snapshot {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'datetime',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = "";
  /**
   * @var string
   */
  public $datetime = "";
  /**
   * @var string
   */
  public $name = "";

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['datetime'])) {
        $this->datetime = $vals['datetime'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'vhd_snapshot';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->datetime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('vhd_snapshot');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->datetime !== null) {
      $xfer += $output->writeFieldBegin('datetime', TType::STRING, 2);
      $xfer += $output->writeString($this->datetime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class cascading {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'level',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'machine_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'connection_info',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\connection',
      ),
    4 => array(
      'var' => 'branches',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\cascading',
        ),
      ),
    );

  /**
   * @var int
   */
  public $level = 0;
  /**
   * @var string
   */
  public $machine_id = "";
  /**
   * @var \saasame\transport\connection
   */
  public $connection_info = null;
  /**
   * @var array
   */
  public $branches = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['level'])) {
        $this->level = $vals['level'];
      }
      if (isset($vals['machine_id'])) {
        $this->machine_id = $vals['machine_id'];
      }
      if (isset($vals['connection_info'])) {
        $this->connection_info = $vals['connection_info'];
      }
      if (isset($vals['branches'])) {
        $this->branches = $vals['branches'];
      }
    }
  }

  public function getName() {
    return 'cascading';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->level);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->machine_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->connection_info = new \saasame\transport\connection();
            $xfer += $this->connection_info->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->branches = array();
            $_size969 = 0;
            $_ktype970 = 0;
            $_vtype971 = 0;
            $xfer += $input->readMapBegin($_ktype970, $_vtype971, $_size969);
            for ($_i973 = 0; $_i973 < $_size969; ++$_i973)
            {
              $key974 = '';
              $val975 = new \saasame\transport\cascading();
              $xfer += $input->readString($key974);
              $val975 = new \saasame\transport\cascading();
              $xfer += $val975->read($input);
              $this->branches[$key974] = $val975;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('cascading');
    if ($this->level !== null) {
      $xfer += $output->writeFieldBegin('level', TType::I32, 1);
      $xfer += $output->writeI32($this->level);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->machine_id !== null) {
      $xfer += $output->writeFieldBegin('machine_id', TType::STRING, 2);
      $xfer += $output->writeString($this->machine_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->connection_info !== null) {
      if (!is_object($this->connection_info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('connection_info', TType::STRUCT, 3);
      $xfer += $this->connection_info->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->branches !== null) {
      if (!is_array($this->branches)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('branches', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->branches));
        {
          foreach ($this->branches as $kiter976 => $viter977)
          {
            $xfer += $output->writeString($kiter976);
            $xfer += $viter977->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loader_job_create_detail {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'replica_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'disks_lun_mapping',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    3 => array(
      'var' => 'snapshots',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    4 => array(
      'var' => 'disks_snapshot_mapping',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::MAP,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::MAP,
        'ktype' => TType::STRING,
        'vtype' => TType::STRING,
        'key' => array(
          'type' => TType::STRING,
        ),
        'val' => array(
          'type' => TType::STRING,
          ),
        ),
      ),
    5 => array(
      'var' => 'connection_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'block_mode_enable',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    7 => array(
      'var' => 'purge_data',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    8 => array(
      'var' => 'remap',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    9 => array(
      'var' => 'detect_type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    10 => array(
      'var' => 'worker_thread_number',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    11 => array(
      'var' => 'host_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'export_disk_type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    13 => array(
      'var' => 'export_path',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    14 => array(
      'var' => 'disks_size_mapping',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::I64,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::I64,
        ),
      ),
    15 => array(
      'var' => 'keep_alive',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    16 => array(
      'var' => 'time',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    17 => array(
      'var' => 'is_continuous_data_replication',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    18 => array(
      'var' => 'azure_storage_connection_string',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    19 => array(
      'var' => 'vmware_connection',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\vmware_connection_info',
      ),
    20 => array(
      'var' => 'thin_provisioned',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    21 => array(
      'var' => 'is_paused',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    22 => array(
      'var' => 'cascadings',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\cascading',
      ),
    );

  /**
   * @var string
   */
  public $replica_id = "";
  /**
   * @var array
   */
  public $disks_lun_mapping = null;
  /**
   * @var string[]
   */
  public $snapshots = null;
  /**
   * @var array
   */
  public $disks_snapshot_mapping = null;
  /**
   * @var string
   */
  public $connection_id = null;
  /**
   * @var bool
   */
  public $block_mode_enable = false;
  /**
   * @var bool
   */
  public $purge_data = true;
  /**
   * @var bool
   */
  public $remap = false;
  /**
   * @var int
   */
  public $detect_type =   0;
  /**
   * @var int
   */
  public $worker_thread_number = 0;
  /**
   * @var string
   */
  public $host_name = "";
  /**
   * @var int
   */
  public $export_disk_type =   0;
  /**
   * @var string
   */
  public $export_path = "";
  /**
   * @var array
   */
  public $disks_size_mapping = null;
  /**
   * @var bool
   */
  public $keep_alive = true;
  /**
   * @var string
   */
  public $time = "";
  /**
   * @var bool
   */
  public $is_continuous_data_replication = false;
  /**
   * @var string
   */
  public $azure_storage_connection_string = "";
  /**
   * @var \saasame\transport\vmware_connection_info
   */
  public $vmware_connection = null;
  /**
   * @var bool
   */
  public $thin_provisioned = true;
  /**
   * @var bool
   */
  public $is_paused = false;
  /**
   * @var \saasame\transport\cascading
   */
  public $cascadings = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['replica_id'])) {
        $this->replica_id = $vals['replica_id'];
      }
      if (isset($vals['disks_lun_mapping'])) {
        $this->disks_lun_mapping = $vals['disks_lun_mapping'];
      }
      if (isset($vals['snapshots'])) {
        $this->snapshots = $vals['snapshots'];
      }
      if (isset($vals['disks_snapshot_mapping'])) {
        $this->disks_snapshot_mapping = $vals['disks_snapshot_mapping'];
      }
      if (isset($vals['connection_id'])) {
        $this->connection_id = $vals['connection_id'];
      }
      if (isset($vals['block_mode_enable'])) {
        $this->block_mode_enable = $vals['block_mode_enable'];
      }
      if (isset($vals['purge_data'])) {
        $this->purge_data = $vals['purge_data'];
      }
      if (isset($vals['remap'])) {
        $this->remap = $vals['remap'];
      }
      if (isset($vals['detect_type'])) {
        $this->detect_type = $vals['detect_type'];
      }
      if (isset($vals['worker_thread_number'])) {
        $this->worker_thread_number = $vals['worker_thread_number'];
      }
      if (isset($vals['host_name'])) {
        $this->host_name = $vals['host_name'];
      }
      if (isset($vals['export_disk_type'])) {
        $this->export_disk_type = $vals['export_disk_type'];
      }
      if (isset($vals['export_path'])) {
        $this->export_path = $vals['export_path'];
      }
      if (isset($vals['disks_size_mapping'])) {
        $this->disks_size_mapping = $vals['disks_size_mapping'];
      }
      if (isset($vals['keep_alive'])) {
        $this->keep_alive = $vals['keep_alive'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['is_continuous_data_replication'])) {
        $this->is_continuous_data_replication = $vals['is_continuous_data_replication'];
      }
      if (isset($vals['azure_storage_connection_string'])) {
        $this->azure_storage_connection_string = $vals['azure_storage_connection_string'];
      }
      if (isset($vals['vmware_connection'])) {
        $this->vmware_connection = $vals['vmware_connection'];
      }
      if (isset($vals['thin_provisioned'])) {
        $this->thin_provisioned = $vals['thin_provisioned'];
      }
      if (isset($vals['is_paused'])) {
        $this->is_paused = $vals['is_paused'];
      }
      if (isset($vals['cascadings'])) {
        $this->cascadings = $vals['cascadings'];
      }
    }
  }

  public function getName() {
    return 'loader_job_create_detail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->replica_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->disks_lun_mapping = array();
            $_size978 = 0;
            $_ktype979 = 0;
            $_vtype980 = 0;
            $xfer += $input->readMapBegin($_ktype979, $_vtype980, $_size978);
            for ($_i982 = 0; $_i982 < $_size978; ++$_i982)
            {
              $key983 = '';
              $val984 = '';
              $xfer += $input->readString($key983);
              $xfer += $input->readString($val984);
              $this->disks_lun_mapping[$key983] = $val984;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->snapshots = array();
            $_size985 = 0;
            $_etype988 = 0;
            $xfer += $input->readListBegin($_etype988, $_size985);
            for ($_i989 = 0; $_i989 < $_size985; ++$_i989)
            {
              $elem990 = null;
              $xfer += $input->readString($elem990);
              $this->snapshots []= $elem990;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->disks_snapshot_mapping = array();
            $_size991 = 0;
            $_ktype992 = 0;
            $_vtype993 = 0;
            $xfer += $input->readMapBegin($_ktype992, $_vtype993, $_size991);
            for ($_i995 = 0; $_i995 < $_size991; ++$_i995)
            {
              $key996 = '';
              $val997 = array();
              $xfer += $input->readString($key996);
              $val997 = array();
              $_size998 = 0;
              $_ktype999 = 0;
              $_vtype1000 = 0;
              $xfer += $input->readMapBegin($_ktype999, $_vtype1000, $_size998);
              for ($_i1002 = 0; $_i1002 < $_size998; ++$_i1002)
              {
                $key1003 = '';
                $val1004 = '';
                $xfer += $input->readString($key1003);
                $xfer += $input->readString($val1004);
                $val997[$key1003] = $val1004;
              }
              $xfer += $input->readMapEnd();
              $this->disks_snapshot_mapping[$key996] = $val997;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->connection_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->block_mode_enable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->purge_data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->remap);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->detect_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->worker_thread_number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->export_disk_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->export_path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::MAP) {
            $this->disks_size_mapping = array();
            $_size1005 = 0;
            $_ktype1006 = 0;
            $_vtype1007 = 0;
            $xfer += $input->readMapBegin($_ktype1006, $_vtype1007, $_size1005);
            for ($_i1009 = 0; $_i1009 < $_size1005; ++$_i1009)
            {
              $key1010 = '';
              $val1011 = 0;
              $xfer += $input->readString($key1010);
              $xfer += $input->readI64($val1011);
              $this->disks_size_mapping[$key1010] = $val1011;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->keep_alive);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_continuous_data_replication);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->azure_storage_connection_string);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRUCT) {
            $this->vmware_connection = new \saasame\transport\vmware_connection_info();
            $xfer += $this->vmware_connection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->thin_provisioned);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_paused);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRUCT) {
            $this->cascadings = new \saasame\transport\cascading();
            $xfer += $this->cascadings->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loader_job_create_detail');
    if ($this->replica_id !== null) {
      $xfer += $output->writeFieldBegin('replica_id', TType::STRING, 1);
      $xfer += $output->writeString($this->replica_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disks_lun_mapping !== null) {
      if (!is_array($this->disks_lun_mapping)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('disks_lun_mapping', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->disks_lun_mapping));
        {
          foreach ($this->disks_lun_mapping as $kiter1012 => $viter1013)
          {
            $xfer += $output->writeString($kiter1012);
            $xfer += $output->writeString($viter1013);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snapshots !== null) {
      if (!is_array($this->snapshots)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('snapshots', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->snapshots));
        {
          foreach ($this->snapshots as $iter1014)
          {
            $xfer += $output->writeString($iter1014);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disks_snapshot_mapping !== null) {
      if (!is_array($this->disks_snapshot_mapping)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('disks_snapshot_mapping', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->disks_snapshot_mapping));
        {
          foreach ($this->disks_snapshot_mapping as $kiter1015 => $viter1016)
          {
            $xfer += $output->writeString($kiter1015);
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($viter1016));
              {
                foreach ($viter1016 as $kiter1017 => $viter1018)
                {
                  $xfer += $output->writeString($kiter1017);
                  $xfer += $output->writeString($viter1018);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->connection_id !== null) {
      $xfer += $output->writeFieldBegin('connection_id', TType::STRING, 5);
      $xfer += $output->writeString($this->connection_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->block_mode_enable !== null) {
      $xfer += $output->writeFieldBegin('block_mode_enable', TType::BOOL, 6);
      $xfer += $output->writeBool($this->block_mode_enable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->purge_data !== null) {
      $xfer += $output->writeFieldBegin('purge_data', TType::BOOL, 7);
      $xfer += $output->writeBool($this->purge_data);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remap !== null) {
      $xfer += $output->writeFieldBegin('remap', TType::BOOL, 8);
      $xfer += $output->writeBool($this->remap);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->detect_type !== null) {
      $xfer += $output->writeFieldBegin('detect_type', TType::I32, 9);
      $xfer += $output->writeI32($this->detect_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->worker_thread_number !== null) {
      $xfer += $output->writeFieldBegin('worker_thread_number', TType::I32, 10);
      $xfer += $output->writeI32($this->worker_thread_number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host_name !== null) {
      $xfer += $output->writeFieldBegin('host_name', TType::STRING, 11);
      $xfer += $output->writeString($this->host_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->export_disk_type !== null) {
      $xfer += $output->writeFieldBegin('export_disk_type', TType::I32, 12);
      $xfer += $output->writeI32($this->export_disk_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->export_path !== null) {
      $xfer += $output->writeFieldBegin('export_path', TType::STRING, 13);
      $xfer += $output->writeString($this->export_path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disks_size_mapping !== null) {
      if (!is_array($this->disks_size_mapping)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('disks_size_mapping', TType::MAP, 14);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->disks_size_mapping));
        {
          foreach ($this->disks_size_mapping as $kiter1019 => $viter1020)
          {
            $xfer += $output->writeString($kiter1019);
            $xfer += $output->writeI64($viter1020);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->keep_alive !== null) {
      $xfer += $output->writeFieldBegin('keep_alive', TType::BOOL, 15);
      $xfer += $output->writeBool($this->keep_alive);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::STRING, 16);
      $xfer += $output->writeString($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_continuous_data_replication !== null) {
      $xfer += $output->writeFieldBegin('is_continuous_data_replication', TType::BOOL, 17);
      $xfer += $output->writeBool($this->is_continuous_data_replication);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->azure_storage_connection_string !== null) {
      $xfer += $output->writeFieldBegin('azure_storage_connection_string', TType::STRING, 18);
      $xfer += $output->writeString($this->azure_storage_connection_string);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vmware_connection !== null) {
      if (!is_object($this->vmware_connection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('vmware_connection', TType::STRUCT, 19);
      $xfer += $this->vmware_connection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thin_provisioned !== null) {
      $xfer += $output->writeFieldBegin('thin_provisioned', TType::BOOL, 20);
      $xfer += $output->writeBool($this->thin_provisioned);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_paused !== null) {
      $xfer += $output->writeFieldBegin('is_paused', TType::BOOL, 21);
      $xfer += $output->writeBool($this->is_paused);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cascadings !== null) {
      if (!is_object($this->cascadings)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cascadings', TType::STRUCT, 22);
      $xfer += $this->cascadings->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class launcher_job_create_detail {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'replica_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'disks_lun_mapping',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
      ),
    3 => array(
      'var' => 'is_sysvol_authoritative_restore',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    4 => array(
      'var' => 'is_enable_debug',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    5 => array(
      'var' => 'is_disable_machine_password_change',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    6 => array(
      'var' => 'is_force_normal_boot',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    7 => array(
      'var' => 'network_infos',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\network_info',
        ),
      ),
    8 => array(
      'var' => 'config',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'gpt_to_mbr',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    10 => array(
      'var' => 'detect_type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    11 => array(
      'var' => 'skip_system_injection',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    12 => array(
      'var' => 'reboot_winpe',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    13 => array(
      'var' => 'callbacks',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    14 => array(
      'var' => 'callback_timeout',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    15 => array(
      'var' => 'host_name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    16 => array(
      'var' => 'export_disk_type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    17 => array(
      'var' => 'export_path',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    18 => array(
      'var' => 'target_type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    19 => array(
      'var' => 'os_type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    20 => array(
      'var' => 'is_update_ex',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    21 => array(
      'var' => 'options_type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    22 => array(
      'var' => 'options',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\extra_options',
      ),
    23 => array(
      'var' => 'pre_scripts',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    24 => array(
      'var' => 'post_scripts',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    25 => array(
      'var' => 'vmware',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\saasame\transport\vmware_options',
      ),
    26 => array(
      'var' => 'mode',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $replica_id = "";
  /**
   * @var array
   */
  public $disks_lun_mapping = null;
  /**
   * @var bool
   */
  public $is_sysvol_authoritative_restore = false;
  /**
   * @var bool
   */
  public $is_enable_debug = false;
  /**
   * @var bool
   */
  public $is_disable_machine_password_change = false;
  /**
   * @var bool
   */
  public $is_force_normal_boot = false;
  /**
   * @var \saasame\transport\network_info[]
   */
  public $network_infos = null;
  /**
   * @var string
   */
  public $config = null;
  /**
   * @var bool
   */
  public $gpt_to_mbr = true;
  /**
   * @var int
   */
  public $detect_type =   0;
  /**
   * @var bool
   */
  public $skip_system_injection = false;
  /**
   * @var bool
   */
  public $reboot_winpe = false;
  /**
   * @var string[]
   */
  public $callbacks = null;
  /**
   * @var int
   */
  public $callback_timeout = 30;
  /**
   * @var string
   */
  public $host_name = "";
  /**
   * @var int
   */
  public $export_disk_type =   0;
  /**
   * @var string
   */
  public $export_path = "";
  /**
   * @var int
   */
  public $target_type =   -1;
  /**
   * @var int
   */
  public $os_type =   1;
  /**
   * @var bool
   */
  public $is_update_ex = false;
  /**
   * @var int
   */
  public $options_type =   0;
  /**
   * @var \saasame\transport\extra_options
   */
  public $options = null;
  /**
   * @var string[]
   */
  public $pre_scripts = null;
  /**
   * @var string[]
   */
  public $post_scripts = null;
  /**
   * @var \saasame\transport\vmware_options
   */
  public $vmware = null;
  /**
   * @var int
   */
  public $mode =   0;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['replica_id'])) {
        $this->replica_id = $vals['replica_id'];
      }
      if (isset($vals['disks_lun_mapping'])) {
        $this->disks_lun_mapping = $vals['disks_lun_mapping'];
      }
      if (isset($vals['is_sysvol_authoritative_restore'])) {
        $this->is_sysvol_authoritative_restore = $vals['is_sysvol_authoritative_restore'];
      }
      if (isset($vals['is_enable_debug'])) {
        $this->is_enable_debug = $vals['is_enable_debug'];
      }
      if (isset($vals['is_disable_machine_password_change'])) {
        $this->is_disable_machine_password_change = $vals['is_disable_machine_password_change'];
      }
      if (isset($vals['is_force_normal_boot'])) {
        $this->is_force_normal_boot = $vals['is_force_normal_boot'];
      }
      if (isset($vals['network_infos'])) {
        $this->network_infos = $vals['network_infos'];
      }
      if (isset($vals['config'])) {
        $this->config = $vals['config'];
      }
      if (isset($vals['gpt_to_mbr'])) {
        $this->gpt_to_mbr = $vals['gpt_to_mbr'];
      }
      if (isset($vals['detect_type'])) {
        $this->detect_type = $vals['detect_type'];
      }
      if (isset($vals['skip_system_injection'])) {
        $this->skip_system_injection = $vals['skip_system_injection'];
      }
      if (isset($vals['reboot_winpe'])) {
        $this->reboot_winpe = $vals['reboot_winpe'];
      }
      if (isset($vals['callbacks'])) {
        $this->callbacks = $vals['callbacks'];
      }
      if (isset($vals['callback_timeout'])) {
        $this->callback_timeout = $vals['callback_timeout'];
      }
      if (isset($vals['host_name'])) {
        $this->host_name = $vals['host_name'];
      }
      if (isset($vals['export_disk_type'])) {
        $this->export_disk_type = $vals['export_disk_type'];
      }
      if (isset($vals['export_path'])) {
        $this->export_path = $vals['export_path'];
      }
      if (isset($vals['target_type'])) {
        $this->target_type = $vals['target_type'];
      }
      if (isset($vals['os_type'])) {
        $this->os_type = $vals['os_type'];
      }
      if (isset($vals['is_update_ex'])) {
        $this->is_update_ex = $vals['is_update_ex'];
      }
      if (isset($vals['options_type'])) {
        $this->options_type = $vals['options_type'];
      }
      if (isset($vals['options'])) {
        $this->options = $vals['options'];
      }
      if (isset($vals['pre_scripts'])) {
        $this->pre_scripts = $vals['pre_scripts'];
      }
      if (isset($vals['post_scripts'])) {
        $this->post_scripts = $vals['post_scripts'];
      }
      if (isset($vals['vmware'])) {
        $this->vmware = $vals['vmware'];
      }
      if (isset($vals['mode'])) {
        $this->mode = $vals['mode'];
      }
    }
  }

  public function getName() {
    return 'launcher_job_create_detail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->replica_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->disks_lun_mapping = array();
            $_size1021 = 0;
            $_ktype1022 = 0;
            $_vtype1023 = 0;
            $xfer += $input->readMapBegin($_ktype1022, $_vtype1023, $_size1021);
            for ($_i1025 = 0; $_i1025 < $_size1021; ++$_i1025)
            {
              $key1026 = '';
              $val1027 = '';
              $xfer += $input->readString($key1026);
              $xfer += $input->readString($val1027);
              $this->disks_lun_mapping[$key1026] = $val1027;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_sysvol_authoritative_restore);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_enable_debug);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_disable_machine_password_change);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_force_normal_boot);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::SET) {
            $this->network_infos = array();
            $_size1028 = 0;
            $_etype1031 = 0;
            $xfer += $input->readSetBegin($_etype1031, $_size1028);
            for ($_i1032 = 0; $_i1032 < $_size1028; ++$_i1032)
            {
              $elem1033 = null;
              $elem1033 = new \saasame\transport\network_info();
              $xfer += $elem1033->read($input);
              $this->network_infos[] = $elem1033;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->config);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->gpt_to_mbr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->detect_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->skip_system_injection);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->reboot_winpe);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::SET) {
            $this->callbacks = array();
            $_size1034 = 0;
            $_etype1037 = 0;
            $xfer += $input->readSetBegin($_etype1037, $_size1034);
            for ($_i1038 = 0; $_i1038 < $_size1034; ++$_i1038)
            {
              $elem1039 = null;
              $xfer += $input->readString($elem1039);
              $this->callbacks[$elem1039] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->callback_timeout);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->export_disk_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->export_path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->target_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->os_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_update_ex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->options_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRUCT) {
            $this->options = new \saasame\transport\extra_options();
            $xfer += $this->options->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::SET) {
            $this->pre_scripts = array();
            $_size1040 = 0;
            $_etype1043 = 0;
            $xfer += $input->readSetBegin($_etype1043, $_size1040);
            for ($_i1044 = 0; $_i1044 < $_size1040; ++$_i1044)
            {
              $elem1045 = null;
              $xfer += $input->readString($elem1045);
              $this->pre_scripts[$elem1045] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::SET) {
            $this->post_scripts = array();
            $_size1046 = 0;
            $_etype1049 = 0;
            $xfer += $input->readSetBegin($_etype1049, $_size1046);
            for ($_i1050 = 0; $_i1050 < $_size1046; ++$_i1050)
            {
              $elem1051 = null;
              $xfer += $input->readString($elem1051);
              $this->post_scripts[$elem1051] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::STRUCT) {
            $this->vmware = new \saasame\transport\vmware_options();
            $xfer += $this->vmware->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('launcher_job_create_detail');
    if ($this->replica_id !== null) {
      $xfer += $output->writeFieldBegin('replica_id', TType::STRING, 1);
      $xfer += $output->writeString($this->replica_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disks_lun_mapping !== null) {
      if (!is_array($this->disks_lun_mapping)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('disks_lun_mapping', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->disks_lun_mapping));
        {
          foreach ($this->disks_lun_mapping as $kiter1052 => $viter1053)
          {
            $xfer += $output->writeString($kiter1052);
            $xfer += $output->writeString($viter1053);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_sysvol_authoritative_restore !== null) {
      $xfer += $output->writeFieldBegin('is_sysvol_authoritative_restore', TType::BOOL, 3);
      $xfer += $output->writeBool($this->is_sysvol_authoritative_restore);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_enable_debug !== null) {
      $xfer += $output->writeFieldBegin('is_enable_debug', TType::BOOL, 4);
      $xfer += $output->writeBool($this->is_enable_debug);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_disable_machine_password_change !== null) {
      $xfer += $output->writeFieldBegin('is_disable_machine_password_change', TType::BOOL, 5);
      $xfer += $output->writeBool($this->is_disable_machine_password_change);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_force_normal_boot !== null) {
      $xfer += $output->writeFieldBegin('is_force_normal_boot', TType::BOOL, 6);
      $xfer += $output->writeBool($this->is_force_normal_boot);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->network_infos !== null) {
      if (!is_array($this->network_infos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('network_infos', TType::SET, 7);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->network_infos));
        {
          foreach ($this->network_infos as $iter1054 => $iter1055)
          {
            $xfer += $iter1055->write($output);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->config !== null) {
      $xfer += $output->writeFieldBegin('config', TType::STRING, 8);
      $xfer += $output->writeString($this->config);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gpt_to_mbr !== null) {
      $xfer += $output->writeFieldBegin('gpt_to_mbr', TType::BOOL, 9);
      $xfer += $output->writeBool($this->gpt_to_mbr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->detect_type !== null) {
      $xfer += $output->writeFieldBegin('detect_type', TType::I32, 10);
      $xfer += $output->writeI32($this->detect_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->skip_system_injection !== null) {
      $xfer += $output->writeFieldBegin('skip_system_injection', TType::BOOL, 11);
      $xfer += $output->writeBool($this->skip_system_injection);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reboot_winpe !== null) {
      $xfer += $output->writeFieldBegin('reboot_winpe', TType::BOOL, 12);
      $xfer += $output->writeBool($this->reboot_winpe);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->callbacks !== null) {
      if (!is_array($this->callbacks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('callbacks', TType::SET, 13);
      {
        $output->writeSetBegin(TType::STRING, count($this->callbacks));
        {
          foreach ($this->callbacks as $iter1056 => $iter1057)
          {
            $xfer += $output->writeString($iter1056);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->callback_timeout !== null) {
      $xfer += $output->writeFieldBegin('callback_timeout', TType::I32, 14);
      $xfer += $output->writeI32($this->callback_timeout);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host_name !== null) {
      $xfer += $output->writeFieldBegin('host_name', TType::STRING, 15);
      $xfer += $output->writeString($this->host_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->export_disk_type !== null) {
      $xfer += $output->writeFieldBegin('export_disk_type', TType::I32, 16);
      $xfer += $output->writeI32($this->export_disk_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->export_path !== null) {
      $xfer += $output->writeFieldBegin('export_path', TType::STRING, 17);
      $xfer += $output->writeString($this->export_path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->target_type !== null) {
      $xfer += $output->writeFieldBegin('target_type', TType::I32, 18);
      $xfer += $output->writeI32($this->target_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->os_type !== null) {
      $xfer += $output->writeFieldBegin('os_type', TType::I32, 19);
      $xfer += $output->writeI32($this->os_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_update_ex !== null) {
      $xfer += $output->writeFieldBegin('is_update_ex', TType::BOOL, 20);
      $xfer += $output->writeBool($this->is_update_ex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->options_type !== null) {
      $xfer += $output->writeFieldBegin('options_type', TType::I32, 21);
      $xfer += $output->writeI32($this->options_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->options !== null) {
      if (!is_object($this->options)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('options', TType::STRUCT, 22);
      $xfer += $this->options->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pre_scripts !== null) {
      if (!is_array($this->pre_scripts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pre_scripts', TType::SET, 23);
      {
        $output->writeSetBegin(TType::STRING, count($this->pre_scripts));
        {
          foreach ($this->pre_scripts as $iter1058 => $iter1059)
          {
            $xfer += $output->writeString($iter1058);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->post_scripts !== null) {
      if (!is_array($this->post_scripts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('post_scripts', TType::SET, 24);
      {
        $output->writeSetBegin(TType::STRING, count($this->post_scripts));
        {
          foreach ($this->post_scripts as $iter1060 => $iter1061)
          {
            $xfer += $output->writeString($iter1060);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vmware !== null) {
      if (!is_object($this->vmware)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('vmware', TType::STRUCT, 25);
      $xfer += $this->vmware->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mode !== null) {
      $xfer += $output->writeFieldBegin('mode', TType::I32, 26);
      $xfer += $output->writeI32($this->mode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class register_service_info {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'mgmt_addr',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'username',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'password',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'service_types',
      'isRequired' => false,
      'type' => TType::SET,
      'etype' => TType::STRING,
      'elem' => array(
        'type' => TType::STRING,
        ),
      ),
    5 => array(
      'var' => 'version',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'path',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $mgmt_addr = "";
  /**
   * @var string
   */
  public $username = "";
  /**
   * @var string
   */
  public $password = "";
  /**
   * @var string[]
   */
  public $service_types = null;
  /**
   * @var string
   */
  public $version = "";
  /**
   * @var string
   */
  public $path = "";

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['mgmt_addr'])) {
        $this->mgmt_addr = $vals['mgmt_addr'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['service_types'])) {
        $this->service_types = $vals['service_types'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
    }
  }

  public function getName() {
    return 'register_service_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mgmt_addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::SET) {
            $this->service_types = array();
            $_size1062 = 0;
            $_etype1065 = 0;
            $xfer += $input->readSetBegin($_etype1065, $_size1062);
            for ($_i1066 = 0; $_i1066 < $_size1062; ++$_i1066)
            {
              $elem1067 = null;
              $xfer += $input->readString($elem1067);
              $this->service_types[$elem1067] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('register_service_info');
    if ($this->mgmt_addr !== null) {
      $xfer += $output->writeFieldBegin('mgmt_addr', TType::STRING, 1);
      $xfer += $output->writeString($this->mgmt_addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 2);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 3);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->service_types !== null) {
      if (!is_array($this->service_types)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('service_types', TType::SET, 4);
      {
        $output->writeSetBegin(TType::STRING, count($this->service_types));
        {
          foreach ($this->service_types as $iter1068 => $iter1069)
          {
            $xfer += $output->writeString($iter1068);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::STRING, 5);
      $xfer += $output->writeString($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 6);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class register_physical_packer_info {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'mgmt_addr',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'username',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'password',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'packer_addr',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'version',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'path',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $mgmt_addr = "";
  /**
   * @var string
   */
  public $username = "";
  /**
   * @var string
   */
  public $password = "";
  /**
   * @var string
   */
  public $packer_addr = "";
  /**
   * @var string
   */
  public $version = "";
  /**
   * @var string
   */
  public $path = "";

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['mgmt_addr'])) {
        $this->mgmt_addr = $vals['mgmt_addr'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['packer_addr'])) {
        $this->packer_addr = $vals['packer_addr'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
    }
  }

  public function getName() {
    return 'register_physical_packer_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mgmt_addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packer_addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('register_physical_packer_info');
    if ($this->mgmt_addr !== null) {
      $xfer += $output->writeFieldBegin('mgmt_addr', TType::STRING, 1);
      $xfer += $output->writeString($this->mgmt_addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 2);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 3);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packer_addr !== null) {
      $xfer += $output->writeFieldBegin('packer_addr', TType::STRING, 4);
      $xfer += $output->writeString($this->packer_addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::STRING, 5);
      $xfer += $output->writeString($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 6);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class command_empty extends TException {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'command_empty';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('command_empty');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class invalid_session extends TException {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'invalid_session';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('invalid_session');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class transport_message {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'message',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $id = 0;
  /**
   * @var string
   */
  public $message = "";

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'transport_message';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('transport_message');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 1);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class register_return {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'message',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'session',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $message = "";
  /**
   * @var string
   */
  public $session = "";

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['session'])) {
        $this->session = $vals['session'];
      }
    }
  }

  public function getName() {
    return 'register_return';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('register_return');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->session !== null) {
      $xfer += $output->writeFieldBegin('session', TType::STRING, 2);
      $xfer += $output->writeString($this->session);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class license_info {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'key',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'activated',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'count',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'expired_date',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'consumed',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'is_active',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    7 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'email',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'status',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $key = "";
  /**
   * @var string
   */
  public $activated = "";
  /**
   * @var int
   */
  public $count = 0;
  /**
   * @var string
   */
  public $expired_date = "";
  /**
   * @var int
   */
  public $consumed = 0;
  /**
   * @var bool
   */
  public $is_active = false;
  /**
   * @var string
   */
  public $name = "";
  /**
   * @var string
   */
  public $email = "";
  /**
   * @var string
   */
  public $status = "";

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['activated'])) {
        $this->activated = $vals['activated'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['expired_date'])) {
        $this->expired_date = $vals['expired_date'];
      }
      if (isset($vals['consumed'])) {
        $this->consumed = $vals['consumed'];
      }
      if (isset($vals['is_active'])) {
        $this->is_active = $vals['is_active'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'license_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->activated);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expired_date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->consumed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_active);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('license_info');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activated !== null) {
      $xfer += $output->writeFieldBegin('activated', TType::STRING, 2);
      $xfer += $output->writeString($this->activated);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 3);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expired_date !== null) {
      $xfer += $output->writeFieldBegin('expired_date', TType::STRING, 4);
      $xfer += $output->writeString($this->expired_date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->consumed !== null) {
      $xfer += $output->writeFieldBegin('consumed', TType::I32, 5);
      $xfer += $output->writeI32($this->consumed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_active !== null) {
      $xfer += $output->writeFieldBegin('is_active', TType::BOOL, 6);
      $xfer += $output->writeBool($this->is_active);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 7);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 8);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::STRING, 9);
      $xfer += $output->writeString($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class workload_history {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'machine_id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'histories',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::I32,
      'elem' => array(
        'type' => TType::I32,
        ),
      ),
    );

  /**
   * @var string
   */
  public $machine_id = "";
  /**
   * @var string
   */
  public $name = "";
  /**
   * @var string
   */
  public $type = "";
  /**
   * @var int[]
   */
  public $histories = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['machine_id'])) {
        $this->machine_id = $vals['machine_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['histories'])) {
        $this->histories = $vals['histories'];
      }
    }
  }

  public function getName() {
    return 'workload_history';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->machine_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->histories = array();
            $_size1070 = 0;
            $_etype1073 = 0;
            $xfer += $input->readListBegin($_etype1073, $_size1070);
            for ($_i1074 = 0; $_i1074 < $_size1070; ++$_i1074)
            {
              $elem1075 = null;
              $xfer += $input->readI32($elem1075);
              $this->histories []= $elem1075;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('workload_history');
    if ($this->machine_id !== null) {
      $xfer += $output->writeFieldBegin('machine_id', TType::STRING, 1);
      $xfer += $output->writeString($this->machine_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 3);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->histories !== null) {
      if (!is_array($this->histories)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('histories', TType::LST, 4);
      {
        $output->writeListBegin(TType::I32, count($this->histories));
        {
          foreach ($this->histories as $iter1076)
          {
            $xfer += $output->writeI32($iter1076);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class license_infos {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'licenses',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\license_info',
        ),
      ),
    2 => array(
      'var' => 'histories',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\workload_history',
        ),
      ),
    );

  /**
   * @var \saasame\transport\license_info[]
   */
  public $licenses = null;
  /**
   * @var \saasame\transport\workload_history[]
   */
  public $histories = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['licenses'])) {
        $this->licenses = $vals['licenses'];
      }
      if (isset($vals['histories'])) {
        $this->histories = $vals['histories'];
      }
    }
  }

  public function getName() {
    return 'license_infos';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->licenses = array();
            $_size1077 = 0;
            $_etype1080 = 0;
            $xfer += $input->readListBegin($_etype1080, $_size1077);
            for ($_i1081 = 0; $_i1081 < $_size1077; ++$_i1081)
            {
              $elem1082 = null;
              $elem1082 = new \saasame\transport\license_info();
              $xfer += $elem1082->read($input);
              $this->licenses []= $elem1082;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->histories = array();
            $_size1083 = 0;
            $_etype1086 = 0;
            $xfer += $input->readListBegin($_etype1086, $_size1083);
            for ($_i1087 = 0; $_i1087 < $_size1083; ++$_i1087)
            {
              $elem1088 = null;
              $elem1088 = new \saasame\transport\workload_history();
              $xfer += $elem1088->read($input);
              $this->histories []= $elem1088;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('license_infos');
    if ($this->licenses !== null) {
      if (!is_array($this->licenses)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('licenses', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->licenses));
        {
          foreach ($this->licenses as $iter1089)
          {
            $xfer += $iter1089->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->histories !== null) {
      if (!is_array($this->histories)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('histories', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->histories));
        {
          foreach ($this->histories as $iter1090)
          {
            $xfer += $iter1090->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class running_task {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'triggers',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\saasame\transport\job_trigger',
        ),
      ),
    3 => array(
      'var' => 'mgmt_addr',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'mgmt_port',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'is_ssl',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    6 => array(
      'var' => 'parameters',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var \saasame\transport\job_trigger[]
   */
  public $triggers = null;
  /**
   * @var string
   */
  public $mgmt_addr = null;
  /**
   * @var int
   */
  public $mgmt_port = 80;
  /**
   * @var bool
   */
  public $is_ssl = false;
  /**
   * @var string
   */
  public $parameters = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['triggers'])) {
        $this->triggers = $vals['triggers'];
      }
      if (isset($vals['mgmt_addr'])) {
        $this->mgmt_addr = $vals['mgmt_addr'];
      }
      if (isset($vals['mgmt_port'])) {
        $this->mgmt_port = $vals['mgmt_port'];
      }
      if (isset($vals['is_ssl'])) {
        $this->is_ssl = $vals['is_ssl'];
      }
      if (isset($vals['parameters'])) {
        $this->parameters = $vals['parameters'];
      }
    }
  }

  public function getName() {
    return 'running_task';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->triggers = array();
            $_size1091 = 0;
            $_etype1094 = 0;
            $xfer += $input->readListBegin($_etype1094, $_size1091);
            for ($_i1095 = 0; $_i1095 < $_size1091; ++$_i1095)
            {
              $elem1096 = null;
              $elem1096 = new \saasame\transport\job_trigger();
              $xfer += $elem1096->read($input);
              $this->triggers []= $elem1096;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mgmt_addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mgmt_port);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_ssl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parameters);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('running_task');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->triggers !== null) {
      if (!is_array($this->triggers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('triggers', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->triggers));
        {
          foreach ($this->triggers as $iter1097)
          {
            $xfer += $iter1097->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mgmt_addr !== null) {
      $xfer += $output->writeFieldBegin('mgmt_addr', TType::STRING, 3);
      $xfer += $output->writeString($this->mgmt_addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mgmt_port !== null) {
      $xfer += $output->writeFieldBegin('mgmt_port', TType::I32, 4);
      $xfer += $output->writeI32($this->mgmt_port);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_ssl !== null) {
      $xfer += $output->writeFieldBegin('is_ssl', TType::BOOL, 5);
      $xfer += $output->writeBool($this->is_ssl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parameters !== null) {
      $xfer += $output->writeFieldBegin('parameters', TType::STRING, 6);
      $xfer += $output->writeString($this->parameters);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

final class Constant extends \Thrift\Type\TConstant {
  static protected $CONFIG_PATH;
  static protected $SCHEDULER_SERVICE;
  static protected $PHYSICAL_PACKER_SERVICE;
  static protected $VIRTUAL_PACKER_SERVICE;
  static protected $CARRIER_SERVICE;
  static protected $LOADER_SERVICE;
  static protected $LAUNCHER_SERVICE;
  static protected $LINUX_LAUNCHER_SERVICE;
  static protected $TRANSPORTER_SERVICE;
  static protected $TRANSPORTER_SERVICE_DISPLAY_NAME;
  static protected $TRANSPORTER_SERVICE_DESCRIPTION;
  static protected $SCHEDULER_SERVICE_DISPLAY_NAME;
  static protected $SCHEDULER_SERVICE_DESCRIPTION;
  static protected $PHYSICAL_PACKER_SERVICE_DISPLAY_NAME;
  static protected $PHYSICAL_PACKER_SERVICE_DESCRIPTION;
  static protected $VIRTUAL_PACKER_SERVICE_DISPLAY_NAME;
  static protected $VIRTUAL_PACKER_SERVICE_DESCRIPTION;
  static protected $CARRIER_SERVICE_DISPLAY_NAME;
  static protected $CARRIER_SERVICE_DESCRIPTION;
  static protected $LOADER_SERVICE_DISPLAY_NAME;
  static protected $LOADER_SERVICE_DESCRIPTION;
  static protected $LAUNCHER_SERVICE_DISPLAY_NAME;
  static protected $LAUNCHER_SERVICE_DESCRIPTION;
  static protected $SCHEDULER_SERVICE_PORT;
  static protected $PHYSICAL_PACKER_SERVICE_PORT;
  static protected $VIRTUAL_PACKER_SERVICE_PORT;
  static protected $CARRIER_SERVICE_PORT;
  static protected $LOADER_SERVICE_PORT;
  static protected $LAUNCHER_SERVICE_PORT;
  static protected $LAUNCHER_EMULATOR_PORT;
  static protected $TRANSPORT_SERVICE_PORT;
  static protected $TRANSPORT_SERVICE_HTTP_PORT;
  static protected $CARRIER_SERVICE_HTTP_PORT;
  static protected $CARRIER_SERVICE_SSL_PORT;
  static protected $MANAGEMENT_SERVICE_PORT;
  static protected $MANAGEMENT_SERVICE_PATH;
  static protected $CARRIER_SERVICE_PATH;
  static protected $TRANSPORTER_SERVICE_PATH;

  static protected function init_CONFIG_PATH() {
    return "Software\\SaaSame\\Transport";
  }

  static protected function init_SCHEDULER_SERVICE() {
    return "{6FC9C4B0-B61E-4745-A6AA-1D5F0A2DA08B}";
  }

  static protected function init_PHYSICAL_PACKER_SERVICE() {
    return "{6FC9C4B1-B61E-4745-A6AA-1D5F0A2DA08B}";
  }

  static protected function init_VIRTUAL_PACKER_SERVICE() {
    return "{6FC9C4B2-B61E-4745-A6AA-1D5F0A2DA08B}";
  }

  static protected function init_CARRIER_SERVICE() {
    return "{6FC9C4B3-B61E-4745-A6AA-1D5F0A2DA08B}";
  }

  static protected function init_LOADER_SERVICE() {
    return "{6FC9C4B4-B61E-4745-A6AA-1D5F0A2DA08B}";
  }

  static protected function init_LAUNCHER_SERVICE() {
    return "{6FC9C4B5-B61E-4745-A6AA-1D5F0A2DA08B}";
  }

  static protected function init_LINUX_LAUNCHER_SERVICE() {
    return "{6FC9C4B6-B61E-4745-A6AA-1D5F0A2DA08B}";
  }

  static protected function init_TRANSPORTER_SERVICE() {
    return "{6FC9C4B7-B61E-4745-A6AA-1D5F0A2DA08B}";
  }

  static protected function init_TRANSPORTER_SERVICE_DISPLAY_NAME() {
    return "SaaSame Transporter Service";
  }

  static protected function init_TRANSPORTER_SERVICE_DESCRIPTION() {
    return "SaaSame Transporter Service";
  }

  static protected function init_SCHEDULER_SERVICE_DISPLAY_NAME() {
    return "SaaSame Scheduler Service";
  }

  static protected function init_SCHEDULER_SERVICE_DESCRIPTION() {
    return "SaaSame Scheduler Service";
  }

  static protected function init_PHYSICAL_PACKER_SERVICE_DISPLAY_NAME() {
    return "SaaSame Host Packer Service";
  }

  static protected function init_PHYSICAL_PACKER_SERVICE_DESCRIPTION() {
    return "SaaSame Host Packer Service";
  }

  static protected function init_VIRTUAL_PACKER_SERVICE_DISPLAY_NAME() {
    return "SaaSame Virtual Packer Service";
  }

  static protected function init_VIRTUAL_PACKER_SERVICE_DESCRIPTION() {
    return "SaaSame Virtual Packer Service";
  }

  static protected function init_CARRIER_SERVICE_DISPLAY_NAME() {
    return "SaaSame Carrier Service";
  }

  static protected function init_CARRIER_SERVICE_DESCRIPTION() {
    return "SaaSame Carrier Service";
  }

  static protected function init_LOADER_SERVICE_DISPLAY_NAME() {
    return "SaaSame Loader Service";
  }

  static protected function init_LOADER_SERVICE_DESCRIPTION() {
    return "SaaSame Loader Service";
  }

  static protected function init_LAUNCHER_SERVICE_DISPLAY_NAME() {
    return "SaaSame Launcher Service";
  }

  static protected function init_LAUNCHER_SERVICE_DESCRIPTION() {
    return "SaaSame Launcher Service";
  }

  static protected function init_SCHEDULER_SERVICE_PORT() {
    return 18888;
  }

  static protected function init_PHYSICAL_PACKER_SERVICE_PORT() {
    return 18889;
  }

  static protected function init_VIRTUAL_PACKER_SERVICE_PORT() {
    return 18890;
  }

  static protected function init_CARRIER_SERVICE_PORT() {
    return 18891;
  }

  static protected function init_LOADER_SERVICE_PORT() {
    return 18892;
  }

  static protected function init_LAUNCHER_SERVICE_PORT() {
    return 18893;
  }

  static protected function init_LAUNCHER_EMULATOR_PORT() {
    return 18894;
  }

  static protected function init_TRANSPORT_SERVICE_PORT() {
    return 18895;
  }

  static protected function init_TRANSPORT_SERVICE_HTTP_PORT() {
    return 18896;
  }

  static protected function init_CARRIER_SERVICE_HTTP_PORT() {
    return 18897;
  }

  static protected function init_CARRIER_SERVICE_SSL_PORT() {
    return 28891;
  }

  static protected function init_MANAGEMENT_SERVICE_PORT() {
    return 443;
  }

  static protected function init_MANAGEMENT_SERVICE_PATH() {
    return "/mgmt/default.php";
  }

  static protected function init_CARRIER_SERVICE_PATH() {
    return "/carrier";
  }

  static protected function init_TRANSPORTER_SERVICE_PATH() {
    return "/transporter";
  }
}


















