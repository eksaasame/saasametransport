/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
#if !SILVERLIGHT
using System.Xml.Serialization;
#endif
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace mwdc.ironman.remoting.thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class volume_info : TBase
  {
    private string _cluster_access_path;
    private string _drive_letter;
    private int _drive_type;
    private string _file_system;
    private string _file_system_catalogid;
    private string _file_system_label;
    private string _object_id;
    private string _path;
    private long _size;
    private long _size_remaining;

    [DataMember(Order = 0)]
    public THashSet<string> Access_paths { get; set; }

    [DataMember(Order = 0)]
    public string Cluster_access_path
    {
      get
      {
        return _cluster_access_path;
      }
      set
      {
        __isset.cluster_access_path = true;
        this._cluster_access_path = value;
      }
    }

    [DataMember(Order = 0)]
    public string Drive_letter
    {
      get
      {
        return _drive_letter;
      }
      set
      {
        __isset.drive_letter = true;
        this._drive_letter = value;
      }
    }

    [DataMember(Order = 0)]
    public int? Drive_type
    {
      get
      {
        return _drive_type;
      }
      set
      {
        __isset.drive_type = value.HasValue;
        if (value.HasValue) this._drive_type = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public string File_system
    {
      get
      {
        return _file_system;
      }
      set
      {
        __isset.file_system = true;
        this._file_system = value;
      }
    }

    [DataMember(Order = 0)]
    public string File_system_catalogid
    {
      get
      {
        return _file_system_catalogid;
      }
      set
      {
        __isset.file_system_catalogid = true;
        this._file_system_catalogid = value;
      }
    }

    [DataMember(Order = 0)]
    public string File_system_label
    {
      get
      {
        return _file_system_label;
      }
      set
      {
        __isset.file_system_label = true;
        this._file_system_label = value;
      }
    }

    [DataMember(Order = 0)]
    public string Object_id
    {
      get
      {
        return _object_id;
      }
      set
      {
        __isset.object_id = true;
        this._object_id = value;
      }
    }

    [DataMember(Order = 0)]
    public string Path
    {
      get
      {
        return _path;
      }
      set
      {
        __isset.path = true;
        this._path = value;
      }
    }

    [DataMember(Order = 0)]
    public long? Size
    {
      get
      {
        return _size;
      }
      set
      {
        __isset.size = value.HasValue;
        if (value.HasValue) this._size = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public long? Size_remaining
    {
      get
      {
        return _size_remaining;
      }
      set
      {
        __isset.size_remaining = value.HasValue;
        if (value.HasValue) this._size_remaining = value.Value;
      }
    }


    [XmlIgnore] // XmlSerializer
    [DataMember(Order = 1)]  // XmlObjectSerializer, DataContractJsonSerializer, etc.
    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      [DataMember]
      public bool cluster_access_path;
      [DataMember]
      public bool drive_letter;
      [DataMember]
      public bool drive_type;
      [DataMember]
      public bool file_system;
      [DataMember]
      public bool file_system_catalogid;
      [DataMember]
      public bool file_system_label;
      [DataMember]
      public bool object_id;
      [DataMember]
      public bool path;
      [DataMember]
      public bool size;
      [DataMember]
      public bool size_remaining;
    }

    #region XmlSerializer support

    public bool ShouldSerializeCluster_access_path()
    {
      return __isset.cluster_access_path;
    }

    public bool ShouldSerializeDrive_letter()
    {
      return __isset.drive_letter;
    }

    public bool ShouldSerializeDrive_type()
    {
      return __isset.drive_type;
    }

    public bool ShouldSerializeFile_system()
    {
      return __isset.file_system;
    }

    public bool ShouldSerializeFile_system_catalogid()
    {
      return __isset.file_system_catalogid;
    }

    public bool ShouldSerializeFile_system_label()
    {
      return __isset.file_system_label;
    }

    public bool ShouldSerializeObject_id()
    {
      return __isset.object_id;
    }

    public bool ShouldSerializePath()
    {
      return __isset.path;
    }

    public bool ShouldSerializeSize()
    {
      return __isset.size;
    }

    public bool ShouldSerializeSize_remaining()
    {
      return __isset.size_remaining;
    }

    #endregion XmlSerializer support

    public volume_info() {
      this._cluster_access_path = "";
      this.__isset.cluster_access_path = true;
      this._drive_letter = "";
      this.__isset.drive_letter = true;
      this._drive_type = -1;
      this.__isset.drive_type = true;
      this._file_system = "";
      this.__isset.file_system = true;
      this._file_system_catalogid = "";
      this.__isset.file_system_catalogid = true;
      this._file_system_label = "";
      this.__isset.file_system_label = true;
      this._object_id = "";
      this.__isset.object_id = true;
      this._path = "";
      this.__isset.path = true;
      this._size = 0;
      this.__isset.size = true;
      this._size_remaining = 0;
      this.__isset.size_remaining = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Set) {
              {
                Access_paths = new THashSet<string>();
                TSet _set4 = iprot.ReadSetBegin();
                for( int _i5 = 0; _i5 < _set4.Count; ++_i5)
                {
                  string _elem6;
                  _elem6 = iprot.ReadString();
                  Access_paths.Add(_elem6);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Cluster_access_path = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Drive_letter = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Drive_type = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              File_system = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              File_system_catalogid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              File_system_label = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Object_id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              Path = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              Size = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I64) {
              Size_remaining = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("volume_info");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Access_paths != null) {
        field.Name = "access_paths";
        field.Type = TType.Set;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, Access_paths.Count));
          foreach (string _iter7 in Access_paths)
          {
            oprot.WriteString(_iter7);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Cluster_access_path != null && __isset.cluster_access_path) {
        field.Name = "cluster_access_path";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Cluster_access_path);
        oprot.WriteFieldEnd();
      }
      if (Drive_letter != null && __isset.drive_letter) {
        field.Name = "drive_letter";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Drive_letter);
        oprot.WriteFieldEnd();
      }
      if (__isset.drive_type) {
        field.Name = "drive_type";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Drive_type.Value);
        oprot.WriteFieldEnd();
      }
      if (File_system != null && __isset.file_system) {
        field.Name = "file_system";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(File_system);
        oprot.WriteFieldEnd();
      }
      if (File_system_catalogid != null && __isset.file_system_catalogid) {
        field.Name = "file_system_catalogid";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(File_system_catalogid);
        oprot.WriteFieldEnd();
      }
      if (File_system_label != null && __isset.file_system_label) {
        field.Name = "file_system_label";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(File_system_label);
        oprot.WriteFieldEnd();
      }
      if (Object_id != null && __isset.object_id) {
        field.Name = "object_id";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Object_id);
        oprot.WriteFieldEnd();
      }
      if (Path != null && __isset.path) {
        field.Name = "path";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Path);
        oprot.WriteFieldEnd();
      }
      if (__isset.size) {
        field.Name = "size";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Size.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.size_remaining) {
        field.Name = "size_remaining";
        field.Type = TType.I64;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Size_remaining.Value);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("volume_info(");
      bool __first = true;
      if (Access_paths != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Access_paths: ");
        __sb.Append(Access_paths);
      }
      if (Cluster_access_path != null && __isset.cluster_access_path) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cluster_access_path: ");
        __sb.Append(Cluster_access_path);
      }
      if (Drive_letter != null && __isset.drive_letter) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Drive_letter: ");
        __sb.Append(Drive_letter);
      }
      if (__isset.drive_type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Drive_type: ");
        __sb.Append(Drive_type);
      }
      if (File_system != null && __isset.file_system) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("File_system: ");
        __sb.Append(File_system);
      }
      if (File_system_catalogid != null && __isset.file_system_catalogid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("File_system_catalogid: ");
        __sb.Append(File_system_catalogid);
      }
      if (File_system_label != null && __isset.file_system_label) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("File_system_label: ");
        __sb.Append(File_system_label);
      }
      if (Object_id != null && __isset.object_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Object_id: ");
        __sb.Append(Object_id);
      }
      if (Path != null && __isset.path) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Path: ");
        __sb.Append(Path);
      }
      if (__isset.size) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Size: ");
        __sb.Append(Size);
      }
      if (__isset.size_remaining) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Size_remaining: ");
        __sb.Append(Size_remaining);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
