/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
#if !SILVERLIGHT
using System.Xml.Serialization;
#endif
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace mwdc.ironman.remoting.thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class protection_relationship : TBase
  {
    private bool _cluster_protection;
    private string _mirror_serial;
    private string _mirror_server;
    private long _mirror_start_offset;
    private string _mirror_uri;
    private long _mirror_vid;
    private string _primary_serial;
    private long _primary_start_offset;
    private string _primary_uri;
    private string _site_id;
    private string _site_ids;

    [DataMember(Order = 0)]
    public string Guid { get; set; }

    [DataMember(Order = 0)]
    public bool? Cluster_protection
    {
      get
      {
        return _cluster_protection;
      }
      set
      {
        __isset.cluster_protection = value.HasValue;
        if (value.HasValue) this._cluster_protection = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public string Mirror_serial
    {
      get
      {
        return _mirror_serial;
      }
      set
      {
        __isset.mirror_serial = true;
        this._mirror_serial = value;
      }
    }

    [DataMember(Order = 0)]
    public string Mirror_server
    {
      get
      {
        return _mirror_server;
      }
      set
      {
        __isset.mirror_server = true;
        this._mirror_server = value;
      }
    }

    [DataMember(Order = 0)]
    public long? Mirror_start_offset
    {
      get
      {
        return _mirror_start_offset;
      }
      set
      {
        __isset.mirror_start_offset = value.HasValue;
        if (value.HasValue) this._mirror_start_offset = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public string Mirror_uri
    {
      get
      {
        return _mirror_uri;
      }
      set
      {
        __isset.mirror_uri = true;
        this._mirror_uri = value;
      }
    }

    [DataMember(Order = 0)]
    public long? Mirror_vid
    {
      get
      {
        return _mirror_vid;
      }
      set
      {
        __isset.mirror_vid = value.HasValue;
        if (value.HasValue) this._mirror_vid = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public string Primary_serial
    {
      get
      {
        return _primary_serial;
      }
      set
      {
        __isset.primary_serial = true;
        this._primary_serial = value;
      }
    }

    [DataMember(Order = 0)]
    public long? Primary_start_offset
    {
      get
      {
        return _primary_start_offset;
      }
      set
      {
        __isset.primary_start_offset = value.HasValue;
        if (value.HasValue) this._primary_start_offset = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public string Primary_uri
    {
      get
      {
        return _primary_uri;
      }
      set
      {
        __isset.primary_uri = true;
        this._primary_uri = value;
      }
    }

    [DataMember(Order = 0)]
    public string Site_id
    {
      get
      {
        return _site_id;
      }
      set
      {
        __isset.site_id = true;
        this._site_id = value;
      }
    }

    [DataMember(Order = 0)]
    public string Site_ids
    {
      get
      {
        return _site_ids;
      }
      set
      {
        __isset.site_ids = true;
        this._site_ids = value;
      }
    }


    [XmlIgnore] // XmlSerializer
    [DataMember(Order = 1)]  // XmlObjectSerializer, DataContractJsonSerializer, etc.
    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      [DataMember]
      public bool cluster_protection;
      [DataMember]
      public bool mirror_serial;
      [DataMember]
      public bool mirror_server;
      [DataMember]
      public bool mirror_start_offset;
      [DataMember]
      public bool mirror_uri;
      [DataMember]
      public bool mirror_vid;
      [DataMember]
      public bool primary_serial;
      [DataMember]
      public bool primary_start_offset;
      [DataMember]
      public bool primary_uri;
      [DataMember]
      public bool site_id;
      [DataMember]
      public bool site_ids;
    }

    #region XmlSerializer support

    public bool ShouldSerializeCluster_protection()
    {
      return __isset.cluster_protection;
    }

    public bool ShouldSerializeMirror_serial()
    {
      return __isset.mirror_serial;
    }

    public bool ShouldSerializeMirror_server()
    {
      return __isset.mirror_server;
    }

    public bool ShouldSerializeMirror_start_offset()
    {
      return __isset.mirror_start_offset;
    }

    public bool ShouldSerializeMirror_uri()
    {
      return __isset.mirror_uri;
    }

    public bool ShouldSerializeMirror_vid()
    {
      return __isset.mirror_vid;
    }

    public bool ShouldSerializePrimary_serial()
    {
      return __isset.primary_serial;
    }

    public bool ShouldSerializePrimary_start_offset()
    {
      return __isset.primary_start_offset;
    }

    public bool ShouldSerializePrimary_uri()
    {
      return __isset.primary_uri;
    }

    public bool ShouldSerializeSite_id()
    {
      return __isset.site_id;
    }

    public bool ShouldSerializeSite_ids()
    {
      return __isset.site_ids;
    }

    #endregion XmlSerializer support

    public protection_relationship() {
      this.Guid = "";
      this._cluster_protection = false;
      this.__isset.cluster_protection = true;
      this._mirror_serial = "";
      this.__isset.mirror_serial = true;
      this._mirror_server = "";
      this.__isset.mirror_server = true;
      this._mirror_start_offset = 0;
      this.__isset.mirror_start_offset = true;
      this._mirror_uri = "";
      this.__isset.mirror_uri = true;
      this._mirror_vid = 0;
      this.__isset.mirror_vid = true;
      this._primary_serial = "";
      this.__isset.primary_serial = true;
      this._primary_start_offset = 0;
      this.__isset.primary_start_offset = true;
      this._primary_uri = "";
      this.__isset.primary_uri = true;
      this._site_id = "";
      this.__isset.site_id = true;
      this._site_ids = "";
      this.__isset.site_ids = true;
    }

    public protection_relationship(string guid) : this() {
      this.Guid = guid;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_guid = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Guid = iprot.ReadString();
              isset_guid = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              Cluster_protection = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Mirror_serial = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Mirror_server = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              Mirror_start_offset = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Mirror_uri = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              Mirror_vid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Primary_serial = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              Primary_start_offset = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Primary_uri = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              Site_id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              Site_ids = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_guid)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("protection_relationship");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "guid";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Guid);
      oprot.WriteFieldEnd();
      if (__isset.cluster_protection) {
        field.Name = "cluster_protection";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Cluster_protection.Value);
        oprot.WriteFieldEnd();
      }
      if (Mirror_serial != null && __isset.mirror_serial) {
        field.Name = "mirror_serial";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Mirror_serial);
        oprot.WriteFieldEnd();
      }
      if (Mirror_server != null && __isset.mirror_server) {
        field.Name = "mirror_server";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Mirror_server);
        oprot.WriteFieldEnd();
      }
      if (__isset.mirror_start_offset) {
        field.Name = "mirror_start_offset";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Mirror_start_offset.Value);
        oprot.WriteFieldEnd();
      }
      if (Mirror_uri != null && __isset.mirror_uri) {
        field.Name = "mirror_uri";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Mirror_uri);
        oprot.WriteFieldEnd();
      }
      if (__isset.mirror_vid) {
        field.Name = "mirror_vid";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Mirror_vid.Value);
        oprot.WriteFieldEnd();
      }
      if (Primary_serial != null && __isset.primary_serial) {
        field.Name = "primary_serial";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Primary_serial);
        oprot.WriteFieldEnd();
      }
      if (__isset.primary_start_offset) {
        field.Name = "primary_start_offset";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Primary_start_offset.Value);
        oprot.WriteFieldEnd();
      }
      if (Primary_uri != null && __isset.primary_uri) {
        field.Name = "primary_uri";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Primary_uri);
        oprot.WriteFieldEnd();
      }
      if (Site_id != null && __isset.site_id) {
        field.Name = "site_id";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Site_id);
        oprot.WriteFieldEnd();
      }
      if (Site_ids != null && __isset.site_ids) {
        field.Name = "site_ids";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Site_ids);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("protection_relationship(");
      __sb.Append(", Guid: ");
      __sb.Append(Guid);
      if (__isset.cluster_protection) {
        __sb.Append(", Cluster_protection: ");
        __sb.Append(Cluster_protection);
      }
      if (Mirror_serial != null && __isset.mirror_serial) {
        __sb.Append(", Mirror_serial: ");
        __sb.Append(Mirror_serial);
      }
      if (Mirror_server != null && __isset.mirror_server) {
        __sb.Append(", Mirror_server: ");
        __sb.Append(Mirror_server);
      }
      if (__isset.mirror_start_offset) {
        __sb.Append(", Mirror_start_offset: ");
        __sb.Append(Mirror_start_offset);
      }
      if (Mirror_uri != null && __isset.mirror_uri) {
        __sb.Append(", Mirror_uri: ");
        __sb.Append(Mirror_uri);
      }
      if (__isset.mirror_vid) {
        __sb.Append(", Mirror_vid: ");
        __sb.Append(Mirror_vid);
      }
      if (Primary_serial != null && __isset.primary_serial) {
        __sb.Append(", Primary_serial: ");
        __sb.Append(Primary_serial);
      }
      if (__isset.primary_start_offset) {
        __sb.Append(", Primary_start_offset: ");
        __sb.Append(Primary_start_offset);
      }
      if (Primary_uri != null && __isset.primary_uri) {
        __sb.Append(", Primary_uri: ");
        __sb.Append(Primary_uri);
      }
      if (Site_id != null && __isset.site_id) {
        __sb.Append(", Site_id: ");
        __sb.Append(Site_id);
      }
      if (Site_ids != null && __isset.site_ids) {
        __sb.Append(", Site_ids: ");
        __sb.Append(Site_ids);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
