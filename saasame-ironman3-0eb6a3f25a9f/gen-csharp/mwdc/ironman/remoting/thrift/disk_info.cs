/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
#if !SILVERLIGHT
using System.Xml.Serialization;
#endif
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace mwdc.ironman.remoting.thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class disk_info : TBase
  {
    private bool _boot_from_disk;
    private short _bus_type;
    private string _cluster_owner;
    private long _cylinders;
    private string _friend_name;
    private string _guid;
    private int _tracks_per_cylinder;
    private bool _is_boot;
    private bool _is_clustered;
    private bool _is_offline;
    private bool _is_readonly;
    private bool _is_snapshot;
    private bool _is_system;
    private string _location;
    private long _logical_sector_size;
    private string _manufacturer;
    private string _model;
    private int _number;
    private int _number_of_partitions;
    private short _offline_reason;
    private short _partition_style;
    private string _path;
    private long _physical_sector_size;
    private int _sectors_per_track;
    private string _serial_number;
    private int _signature;
    private long _size;
    private string _storage_device_id;
    private string _storage_server;
    private string _uri;

    [DataMember(Order = 0)]
    public bool? Boot_from_disk
    {
      get
      {
        return _boot_from_disk;
      }
      set
      {
        __isset.boot_from_disk = value.HasValue;
        if (value.HasValue) this._boot_from_disk = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public short? Bus_type
    {
      get
      {
        return _bus_type;
      }
      set
      {
        __isset.bus_type = value.HasValue;
        if (value.HasValue) this._bus_type = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public string Cluster_owner
    {
      get
      {
        return _cluster_owner;
      }
      set
      {
        __isset.cluster_owner = true;
        this._cluster_owner = value;
      }
    }

    [DataMember(Order = 0)]
    public long? Cylinders
    {
      get
      {
        return _cylinders;
      }
      set
      {
        __isset.cylinders = value.HasValue;
        if (value.HasValue) this._cylinders = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public string Friend_name
    {
      get
      {
        return _friend_name;
      }
      set
      {
        __isset.friend_name = true;
        this._friend_name = value;
      }
    }

    [DataMember(Order = 0)]
    public string Guid
    {
      get
      {
        return _guid;
      }
      set
      {
        __isset.guid = true;
        this._guid = value;
      }
    }

    [DataMember(Order = 0)]
    public int? Tracks_per_cylinder
    {
      get
      {
        return _tracks_per_cylinder;
      }
      set
      {
        __isset.tracks_per_cylinder = value.HasValue;
        if (value.HasValue) this._tracks_per_cylinder = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public bool? Is_boot
    {
      get
      {
        return _is_boot;
      }
      set
      {
        __isset.is_boot = value.HasValue;
        if (value.HasValue) this._is_boot = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public bool? Is_clustered
    {
      get
      {
        return _is_clustered;
      }
      set
      {
        __isset.is_clustered = value.HasValue;
        if (value.HasValue) this._is_clustered = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public bool? Is_offline
    {
      get
      {
        return _is_offline;
      }
      set
      {
        __isset.is_offline = value.HasValue;
        if (value.HasValue) this._is_offline = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public bool? Is_readonly
    {
      get
      {
        return _is_readonly;
      }
      set
      {
        __isset.is_readonly = value.HasValue;
        if (value.HasValue) this._is_readonly = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public bool? Is_snapshot
    {
      get
      {
        return _is_snapshot;
      }
      set
      {
        __isset.is_snapshot = value.HasValue;
        if (value.HasValue) this._is_snapshot = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public bool? Is_system
    {
      get
      {
        return _is_system;
      }
      set
      {
        __isset.is_system = value.HasValue;
        if (value.HasValue) this._is_system = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public string Location
    {
      get
      {
        return _location;
      }
      set
      {
        __isset.location = true;
        this._location = value;
      }
    }

    [DataMember(Order = 0)]
    public long? Logical_sector_size
    {
      get
      {
        return _logical_sector_size;
      }
      set
      {
        __isset.logical_sector_size = value.HasValue;
        if (value.HasValue) this._logical_sector_size = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public string Manufacturer
    {
      get
      {
        return _manufacturer;
      }
      set
      {
        __isset.manufacturer = true;
        this._manufacturer = value;
      }
    }

    [DataMember(Order = 0)]
    public string Model
    {
      get
      {
        return _model;
      }
      set
      {
        __isset.model = true;
        this._model = value;
      }
    }

    [DataMember(Order = 0)]
    public int? Number
    {
      get
      {
        return _number;
      }
      set
      {
        __isset.number = value.HasValue;
        if (value.HasValue) this._number = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public int? Number_of_partitions
    {
      get
      {
        return _number_of_partitions;
      }
      set
      {
        __isset.number_of_partitions = value.HasValue;
        if (value.HasValue) this._number_of_partitions = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public short? Offline_reason
    {
      get
      {
        return _offline_reason;
      }
      set
      {
        __isset.offline_reason = value.HasValue;
        if (value.HasValue) this._offline_reason = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public short? Partition_style
    {
      get
      {
        return _partition_style;
      }
      set
      {
        __isset.partition_style = value.HasValue;
        if (value.HasValue) this._partition_style = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public string Path
    {
      get
      {
        return _path;
      }
      set
      {
        __isset.path = true;
        this._path = value;
      }
    }

    [DataMember(Order = 0)]
    public long? Physical_sector_size
    {
      get
      {
        return _physical_sector_size;
      }
      set
      {
        __isset.physical_sector_size = value.HasValue;
        if (value.HasValue) this._physical_sector_size = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public int? Sectors_per_track
    {
      get
      {
        return _sectors_per_track;
      }
      set
      {
        __isset.sectors_per_track = value.HasValue;
        if (value.HasValue) this._sectors_per_track = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public string Serial_number
    {
      get
      {
        return _serial_number;
      }
      set
      {
        __isset.serial_number = true;
        this._serial_number = value;
      }
    }

    [DataMember(Order = 0)]
    public int? Signature
    {
      get
      {
        return _signature;
      }
      set
      {
        __isset.signature = value.HasValue;
        if (value.HasValue) this._signature = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public long? Size
    {
      get
      {
        return _size;
      }
      set
      {
        __isset.size = value.HasValue;
        if (value.HasValue) this._size = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public string Storage_device_id
    {
      get
      {
        return _storage_device_id;
      }
      set
      {
        __isset.storage_device_id = true;
        this._storage_device_id = value;
      }
    }

    [DataMember(Order = 0)]
    public string Storage_server
    {
      get
      {
        return _storage_server;
      }
      set
      {
        __isset.storage_server = true;
        this._storage_server = value;
      }
    }

    [DataMember(Order = 0)]
    public string Uri
    {
      get
      {
        return _uri;
      }
      set
      {
        __isset.uri = true;
        this._uri = value;
      }
    }


    [XmlIgnore] // XmlSerializer
    [DataMember(Order = 1)]  // XmlObjectSerializer, DataContractJsonSerializer, etc.
    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      [DataMember]
      public bool boot_from_disk;
      [DataMember]
      public bool bus_type;
      [DataMember]
      public bool cluster_owner;
      [DataMember]
      public bool cylinders;
      [DataMember]
      public bool friend_name;
      [DataMember]
      public bool guid;
      [DataMember]
      public bool tracks_per_cylinder;
      [DataMember]
      public bool is_boot;
      [DataMember]
      public bool is_clustered;
      [DataMember]
      public bool is_offline;
      [DataMember]
      public bool is_readonly;
      [DataMember]
      public bool is_snapshot;
      [DataMember]
      public bool is_system;
      [DataMember]
      public bool location;
      [DataMember]
      public bool logical_sector_size;
      [DataMember]
      public bool manufacturer;
      [DataMember]
      public bool model;
      [DataMember]
      public bool number;
      [DataMember]
      public bool number_of_partitions;
      [DataMember]
      public bool offline_reason;
      [DataMember]
      public bool partition_style;
      [DataMember]
      public bool path;
      [DataMember]
      public bool physical_sector_size;
      [DataMember]
      public bool sectors_per_track;
      [DataMember]
      public bool serial_number;
      [DataMember]
      public bool signature;
      [DataMember]
      public bool size;
      [DataMember]
      public bool storage_device_id;
      [DataMember]
      public bool storage_server;
      [DataMember]
      public bool uri;
    }

    #region XmlSerializer support

    public bool ShouldSerializeBoot_from_disk()
    {
      return __isset.boot_from_disk;
    }

    public bool ShouldSerializeBus_type()
    {
      return __isset.bus_type;
    }

    public bool ShouldSerializeCluster_owner()
    {
      return __isset.cluster_owner;
    }

    public bool ShouldSerializeCylinders()
    {
      return __isset.cylinders;
    }

    public bool ShouldSerializeFriend_name()
    {
      return __isset.friend_name;
    }

    public bool ShouldSerializeGuid()
    {
      return __isset.guid;
    }

    public bool ShouldSerializeTracks_per_cylinder()
    {
      return __isset.tracks_per_cylinder;
    }

    public bool ShouldSerializeIs_boot()
    {
      return __isset.is_boot;
    }

    public bool ShouldSerializeIs_clustered()
    {
      return __isset.is_clustered;
    }

    public bool ShouldSerializeIs_offline()
    {
      return __isset.is_offline;
    }

    public bool ShouldSerializeIs_readonly()
    {
      return __isset.is_readonly;
    }

    public bool ShouldSerializeIs_snapshot()
    {
      return __isset.is_snapshot;
    }

    public bool ShouldSerializeIs_system()
    {
      return __isset.is_system;
    }

    public bool ShouldSerializeLocation()
    {
      return __isset.location;
    }

    public bool ShouldSerializeLogical_sector_size()
    {
      return __isset.logical_sector_size;
    }

    public bool ShouldSerializeManufacturer()
    {
      return __isset.manufacturer;
    }

    public bool ShouldSerializeModel()
    {
      return __isset.model;
    }

    public bool ShouldSerializeNumber()
    {
      return __isset.number;
    }

    public bool ShouldSerializeNumber_of_partitions()
    {
      return __isset.number_of_partitions;
    }

    public bool ShouldSerializeOffline_reason()
    {
      return __isset.offline_reason;
    }

    public bool ShouldSerializePartition_style()
    {
      return __isset.partition_style;
    }

    public bool ShouldSerializePath()
    {
      return __isset.path;
    }

    public bool ShouldSerializePhysical_sector_size()
    {
      return __isset.physical_sector_size;
    }

    public bool ShouldSerializeSectors_per_track()
    {
      return __isset.sectors_per_track;
    }

    public bool ShouldSerializeSerial_number()
    {
      return __isset.serial_number;
    }

    public bool ShouldSerializeSignature()
    {
      return __isset.signature;
    }

    public bool ShouldSerializeSize()
    {
      return __isset.size;
    }

    public bool ShouldSerializeStorage_device_id()
    {
      return __isset.storage_device_id;
    }

    public bool ShouldSerializeStorage_server()
    {
      return __isset.storage_server;
    }

    public bool ShouldSerializeUri()
    {
      return __isset.uri;
    }

    #endregion XmlSerializer support

    public disk_info() {
      this._boot_from_disk = false;
      this.__isset.boot_from_disk = true;
      this._bus_type = -1;
      this.__isset.bus_type = true;
      this._cluster_owner = "";
      this.__isset.cluster_owner = true;
      this._cylinders = 0;
      this.__isset.cylinders = true;
      this._friend_name = "";
      this.__isset.friend_name = true;
      this._guid = "";
      this.__isset.guid = true;
      this._tracks_per_cylinder = 0;
      this.__isset.tracks_per_cylinder = true;
      this._is_boot = false;
      this.__isset.is_boot = true;
      this._is_clustered = false;
      this.__isset.is_clustered = true;
      this._is_offline = false;
      this.__isset.is_offline = true;
      this._is_readonly = false;
      this.__isset.is_readonly = true;
      this._is_snapshot = false;
      this.__isset.is_snapshot = true;
      this._is_system = false;
      this.__isset.is_system = true;
      this._location = "";
      this.__isset.location = true;
      this._logical_sector_size = 0;
      this.__isset.logical_sector_size = true;
      this._manufacturer = "";
      this.__isset.manufacturer = true;
      this._model = "";
      this.__isset.model = true;
      this._number = -1;
      this.__isset.number = true;
      this._number_of_partitions = -1;
      this.__isset.number_of_partitions = true;
      this._offline_reason = 0;
      this.__isset.offline_reason = true;
      this._partition_style = 2;
      this.__isset.partition_style = true;
      this._path = "";
      this.__isset.path = true;
      this._physical_sector_size = 0;
      this.__isset.physical_sector_size = true;
      this._sectors_per_track = 0;
      this.__isset.sectors_per_track = true;
      this._serial_number = "";
      this.__isset.serial_number = true;
      this._signature = 0;
      this.__isset.signature = true;
      this._size = 0;
      this.__isset.size = true;
      this._storage_device_id = "";
      this.__isset.storage_device_id = true;
      this._storage_server = "";
      this.__isset.storage_server = true;
      this._uri = "";
      this.__isset.uri = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              Boot_from_disk = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I16) {
              Bus_type = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Cluster_owner = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              Cylinders = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Friend_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Guid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Tracks_per_cylinder = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Bool) {
              Is_boot = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Bool) {
              Is_clustered = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Bool) {
              Is_offline = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Bool) {
              Is_readonly = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Bool) {
              Is_snapshot = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Bool) {
              Is_system = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.String) {
              Location = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I64) {
              Logical_sector_size = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.String) {
              Manufacturer = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.String) {
              Model = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.I32) {
              Number = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.I32) {
              Number_of_partitions = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I16) {
              Offline_reason = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.I16) {
              Partition_style = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.String) {
              Path = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.I64) {
              Physical_sector_size = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.I32) {
              Sectors_per_track = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 25:
            if (field.Type == TType.String) {
              Serial_number = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 26:
            if (field.Type == TType.I32) {
              Signature = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 27:
            if (field.Type == TType.I64) {
              Size = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 28:
            if (field.Type == TType.String) {
              Storage_device_id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 29:
            if (field.Type == TType.String) {
              Storage_server = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.String) {
              Uri = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("disk_info");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.boot_from_disk) {
        field.Name = "boot_from_disk";
        field.Type = TType.Bool;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Boot_from_disk.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.bus_type) {
        field.Name = "bus_type";
        field.Type = TType.I16;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Bus_type.Value);
        oprot.WriteFieldEnd();
      }
      if (Cluster_owner != null && __isset.cluster_owner) {
        field.Name = "cluster_owner";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Cluster_owner);
        oprot.WriteFieldEnd();
      }
      if (__isset.cylinders) {
        field.Name = "cylinders";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Cylinders.Value);
        oprot.WriteFieldEnd();
      }
      if (Friend_name != null && __isset.friend_name) {
        field.Name = "friend_name";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Friend_name);
        oprot.WriteFieldEnd();
      }
      if (Guid != null && __isset.guid) {
        field.Name = "guid";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Guid);
        oprot.WriteFieldEnd();
      }
      if (__isset.tracks_per_cylinder) {
        field.Name = "tracks_per_cylinder";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Tracks_per_cylinder.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.is_boot) {
        field.Name = "is_boot";
        field.Type = TType.Bool;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Is_boot.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.is_clustered) {
        field.Name = "is_clustered";
        field.Type = TType.Bool;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Is_clustered.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.is_offline) {
        field.Name = "is_offline";
        field.Type = TType.Bool;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Is_offline.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.is_readonly) {
        field.Name = "is_readonly";
        field.Type = TType.Bool;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Is_readonly.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.is_snapshot) {
        field.Name = "is_snapshot";
        field.Type = TType.Bool;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Is_snapshot.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.is_system) {
        field.Name = "is_system";
        field.Type = TType.Bool;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Is_system.Value);
        oprot.WriteFieldEnd();
      }
      if (Location != null && __isset.location) {
        field.Name = "location";
        field.Type = TType.String;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Location);
        oprot.WriteFieldEnd();
      }
      if (__isset.logical_sector_size) {
        field.Name = "logical_sector_size";
        field.Type = TType.I64;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Logical_sector_size.Value);
        oprot.WriteFieldEnd();
      }
      if (Manufacturer != null && __isset.manufacturer) {
        field.Name = "manufacturer";
        field.Type = TType.String;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Manufacturer);
        oprot.WriteFieldEnd();
      }
      if (Model != null && __isset.model) {
        field.Name = "model";
        field.Type = TType.String;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Model);
        oprot.WriteFieldEnd();
      }
      if (__isset.number) {
        field.Name = "number";
        field.Type = TType.I32;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Number.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.number_of_partitions) {
        field.Name = "number_of_partitions";
        field.Type = TType.I32;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Number_of_partitions.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.offline_reason) {
        field.Name = "offline_reason";
        field.Type = TType.I16;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Offline_reason.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.partition_style) {
        field.Name = "partition_style";
        field.Type = TType.I16;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Partition_style.Value);
        oprot.WriteFieldEnd();
      }
      if (Path != null && __isset.path) {
        field.Name = "path";
        field.Type = TType.String;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Path);
        oprot.WriteFieldEnd();
      }
      if (__isset.physical_sector_size) {
        field.Name = "physical_sector_size";
        field.Type = TType.I64;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Physical_sector_size.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.sectors_per_track) {
        field.Name = "sectors_per_track";
        field.Type = TType.I32;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Sectors_per_track.Value);
        oprot.WriteFieldEnd();
      }
      if (Serial_number != null && __isset.serial_number) {
        field.Name = "serial_number";
        field.Type = TType.String;
        field.ID = 25;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Serial_number);
        oprot.WriteFieldEnd();
      }
      if (__isset.signature) {
        field.Name = "signature";
        field.Type = TType.I32;
        field.ID = 26;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Signature.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.size) {
        field.Name = "size";
        field.Type = TType.I64;
        field.ID = 27;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Size.Value);
        oprot.WriteFieldEnd();
      }
      if (Storage_device_id != null && __isset.storage_device_id) {
        field.Name = "storage_device_id";
        field.Type = TType.String;
        field.ID = 28;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Storage_device_id);
        oprot.WriteFieldEnd();
      }
      if (Storage_server != null && __isset.storage_server) {
        field.Name = "storage_server";
        field.Type = TType.String;
        field.ID = 29;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Storage_server);
        oprot.WriteFieldEnd();
      }
      if (Uri != null && __isset.uri) {
        field.Name = "uri";
        field.Type = TType.String;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Uri);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("disk_info(");
      bool __first = true;
      if (__isset.boot_from_disk) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Boot_from_disk: ");
        __sb.Append(Boot_from_disk);
      }
      if (__isset.bus_type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bus_type: ");
        __sb.Append(Bus_type);
      }
      if (Cluster_owner != null && __isset.cluster_owner) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cluster_owner: ");
        __sb.Append(Cluster_owner);
      }
      if (__isset.cylinders) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cylinders: ");
        __sb.Append(Cylinders);
      }
      if (Friend_name != null && __isset.friend_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Friend_name: ");
        __sb.Append(Friend_name);
      }
      if (Guid != null && __isset.guid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Guid: ");
        __sb.Append(Guid);
      }
      if (__isset.tracks_per_cylinder) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tracks_per_cylinder: ");
        __sb.Append(Tracks_per_cylinder);
      }
      if (__isset.is_boot) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Is_boot: ");
        __sb.Append(Is_boot);
      }
      if (__isset.is_clustered) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Is_clustered: ");
        __sb.Append(Is_clustered);
      }
      if (__isset.is_offline) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Is_offline: ");
        __sb.Append(Is_offline);
      }
      if (__isset.is_readonly) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Is_readonly: ");
        __sb.Append(Is_readonly);
      }
      if (__isset.is_snapshot) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Is_snapshot: ");
        __sb.Append(Is_snapshot);
      }
      if (__isset.is_system) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Is_system: ");
        __sb.Append(Is_system);
      }
      if (Location != null && __isset.location) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Location: ");
        __sb.Append(Location);
      }
      if (__isset.logical_sector_size) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Logical_sector_size: ");
        __sb.Append(Logical_sector_size);
      }
      if (Manufacturer != null && __isset.manufacturer) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Manufacturer: ");
        __sb.Append(Manufacturer);
      }
      if (Model != null && __isset.model) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Model: ");
        __sb.Append(Model);
      }
      if (__isset.number) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Number: ");
        __sb.Append(Number);
      }
      if (__isset.number_of_partitions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Number_of_partitions: ");
        __sb.Append(Number_of_partitions);
      }
      if (__isset.offline_reason) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Offline_reason: ");
        __sb.Append(Offline_reason);
      }
      if (__isset.partition_style) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Partition_style: ");
        __sb.Append(Partition_style);
      }
      if (Path != null && __isset.path) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Path: ");
        __sb.Append(Path);
      }
      if (__isset.physical_sector_size) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Physical_sector_size: ");
        __sb.Append(Physical_sector_size);
      }
      if (__isset.sectors_per_track) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sectors_per_track: ");
        __sb.Append(Sectors_per_track);
      }
      if (Serial_number != null && __isset.serial_number) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Serial_number: ");
        __sb.Append(Serial_number);
      }
      if (__isset.signature) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Signature: ");
        __sb.Append(Signature);
      }
      if (__isset.size) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Size: ");
        __sb.Append(Size);
      }
      if (Storage_device_id != null && __isset.storage_device_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Storage_device_id: ");
        __sb.Append(Storage_device_id);
      }
      if (Storage_server != null && __isset.storage_server) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Storage_server: ");
        __sb.Append(Storage_server);
      }
      if (Uri != null && __isset.uri) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uri: ");
        __sb.Append(Uri);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
