/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
#if !SILVERLIGHT
using System.Xml.Serialization;
#endif
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace mwdc.ironman.remoting.thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class command_request : TBase
  {
    private string _command;
    private string _event_id;
    private string _pre_command;
    private string _post_command;
    private THashSet<string> _set_ids;

    [DataMember(Order = 0)]
    public string Command
    {
      get
      {
        return _command;
      }
      set
      {
        __isset.command = true;
        this._command = value;
      }
    }

    [DataMember(Order = 0)]
    public string Event_id
    {
      get
      {
        return _event_id;
      }
      set
      {
        __isset.event_id = true;
        this._event_id = value;
      }
    }

    [DataMember(Order = 0)]
    public string Pre_command
    {
      get
      {
        return _pre_command;
      }
      set
      {
        __isset.pre_command = true;
        this._pre_command = value;
      }
    }

    [DataMember(Order = 0)]
    public string Post_command
    {
      get
      {
        return _post_command;
      }
      set
      {
        __isset.post_command = true;
        this._post_command = value;
      }
    }

    [DataMember(Order = 0)]
    public THashSet<string> Set_ids
    {
      get
      {
        return _set_ids;
      }
      set
      {
        __isset.set_ids = true;
        this._set_ids = value;
      }
    }

    [DataMember(Order = 0)]
    public Dictionary<string, protection_relationship> Protection_relationships { get; set; }

    [DataMember(Order = 0)]
    public THashSet<protection_set> Protection_sets { get; set; }


    [XmlIgnore] // XmlSerializer
    [DataMember(Order = 1)]  // XmlObjectSerializer, DataContractJsonSerializer, etc.
    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      [DataMember]
      public bool command;
      [DataMember]
      public bool event_id;
      [DataMember]
      public bool pre_command;
      [DataMember]
      public bool post_command;
      [DataMember]
      public bool set_ids;
    }

    #region XmlSerializer support

    public bool ShouldSerializeCommand()
    {
      return __isset.command;
    }

    public bool ShouldSerializeEvent_id()
    {
      return __isset.event_id;
    }

    public bool ShouldSerializePre_command()
    {
      return __isset.pre_command;
    }

    public bool ShouldSerializePost_command()
    {
      return __isset.post_command;
    }

    public bool ShouldSerializeSet_ids()
    {
      return __isset.set_ids;
    }

    #endregion XmlSerializer support

    public command_request() {
      this._command = "";
      this.__isset.command = true;
      this._event_id = "";
      this.__isset.event_id = true;
      this._pre_command = "";
      this.__isset.pre_command = true;
      this._post_command = "";
      this.__isset.post_command = true;
      this._set_ids = new THashSet<string>();
      this.__isset.set_ids = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Command = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Event_id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Pre_command = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Post_command = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Set) {
              {
                Set_ids = new THashSet<string>();
                TSet _set114 = iprot.ReadSetBegin();
                for( int _i115 = 0; _i115 < _set114.Count; ++_i115)
                {
                  string _elem116;
                  _elem116 = iprot.ReadString();
                  Set_ids.Add(_elem116);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Map) {
              {
                Protection_relationships = new Dictionary<string, protection_relationship>();
                TMap _map117 = iprot.ReadMapBegin();
                for( int _i118 = 0; _i118 < _map117.Count; ++_i118)
                {
                  string _key119;
                  protection_relationship _val120;
                  _key119 = iprot.ReadString();
                  _val120 = new protection_relationship();
                  _val120.Read(iprot);
                  Protection_relationships[_key119] = _val120;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Set) {
              {
                Protection_sets = new THashSet<protection_set>();
                TSet _set121 = iprot.ReadSetBegin();
                for( int _i122 = 0; _i122 < _set121.Count; ++_i122)
                {
                  protection_set _elem123;
                  _elem123 = new protection_set();
                  _elem123.Read(iprot);
                  Protection_sets.Add(_elem123);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("command_request");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Command != null && __isset.command) {
        field.Name = "command";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Command);
        oprot.WriteFieldEnd();
      }
      if (Event_id != null && __isset.event_id) {
        field.Name = "event_id";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Event_id);
        oprot.WriteFieldEnd();
      }
      if (Pre_command != null && __isset.pre_command) {
        field.Name = "pre_command";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Pre_command);
        oprot.WriteFieldEnd();
      }
      if (Post_command != null && __isset.post_command) {
        field.Name = "post_command";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Post_command);
        oprot.WriteFieldEnd();
      }
      if (Set_ids != null && __isset.set_ids) {
        field.Name = "set_ids";
        field.Type = TType.Set;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, Set_ids.Count));
          foreach (string _iter124 in Set_ids)
          {
            oprot.WriteString(_iter124);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Protection_relationships != null) {
        field.Name = "protection_relationships";
        field.Type = TType.Map;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Protection_relationships.Count));
          foreach (string _iter125 in Protection_relationships.Keys)
          {
            oprot.WriteString(_iter125);
            Protection_relationships[_iter125].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Protection_sets != null) {
        field.Name = "protection_sets";
        field.Type = TType.Set;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.Struct, Protection_sets.Count));
          foreach (protection_set _iter126 in Protection_sets)
          {
            _iter126.Write(oprot);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("command_request(");
      bool __first = true;
      if (Command != null && __isset.command) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Command: ");
        __sb.Append(Command);
      }
      if (Event_id != null && __isset.event_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Event_id: ");
        __sb.Append(Event_id);
      }
      if (Pre_command != null && __isset.pre_command) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pre_command: ");
        __sb.Append(Pre_command);
      }
      if (Post_command != null && __isset.post_command) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Post_command: ");
        __sb.Append(Post_command);
      }
      if (Set_ids != null && __isset.set_ids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Set_ids: ");
        __sb.Append(Set_ids);
      }
      if (Protection_relationships != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Protection_relationships: ");
        __sb.Append(Protection_relationships);
      }
      if (Protection_sets != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Protection_sets: ");
        __sb.Append(Protection_sets);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
