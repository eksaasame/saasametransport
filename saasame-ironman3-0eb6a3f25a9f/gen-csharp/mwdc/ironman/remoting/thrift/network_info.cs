/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
#if !SILVERLIGHT
using System.Xml.Serialization;
#endif
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace mwdc.ironman.remoting.thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class network_info : TBase
  {
    private string _adapter_name;
    private string _description;
    private bool _is_dhcp_v4;
    private bool _is_dhcp_v6;
    private string _mac_address;

    [DataMember(Order = 0)]
    public string Adapter_name
    {
      get
      {
        return _adapter_name;
      }
      set
      {
        __isset.adapter_name = true;
        this._adapter_name = value;
      }
    }

    [DataMember(Order = 0)]
    public string Description
    {
      get
      {
        return _description;
      }
      set
      {
        __isset.description = true;
        this._description = value;
      }
    }

    [DataMember(Order = 0)]
    public List<string> Dnss { get; set; }

    [DataMember(Order = 0)]
    public List<string> Gateways { get; set; }

    [DataMember(Order = 0)]
    public List<string> Ip_addresses { get; set; }

    [DataMember(Order = 0)]
    public bool? Is_dhcp_v4
    {
      get
      {
        return _is_dhcp_v4;
      }
      set
      {
        __isset.is_dhcp_v4 = value.HasValue;
        if (value.HasValue) this._is_dhcp_v4 = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public bool? Is_dhcp_v6
    {
      get
      {
        return _is_dhcp_v6;
      }
      set
      {
        __isset.is_dhcp_v6 = value.HasValue;
        if (value.HasValue) this._is_dhcp_v6 = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public string Mac_address
    {
      get
      {
        return _mac_address;
      }
      set
      {
        __isset.mac_address = true;
        this._mac_address = value;
      }
    }

    [DataMember(Order = 0)]
    public List<string> Subnet_masks { get; set; }


    [XmlIgnore] // XmlSerializer
    [DataMember(Order = 1)]  // XmlObjectSerializer, DataContractJsonSerializer, etc.
    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      [DataMember]
      public bool adapter_name;
      [DataMember]
      public bool description;
      [DataMember]
      public bool is_dhcp_v4;
      [DataMember]
      public bool is_dhcp_v6;
      [DataMember]
      public bool mac_address;
    }

    #region XmlSerializer support

    public bool ShouldSerializeAdapter_name()
    {
      return __isset.adapter_name;
    }

    public bool ShouldSerializeDescription()
    {
      return __isset.description;
    }

    public bool ShouldSerializeIs_dhcp_v4()
    {
      return __isset.is_dhcp_v4;
    }

    public bool ShouldSerializeIs_dhcp_v6()
    {
      return __isset.is_dhcp_v6;
    }

    public bool ShouldSerializeMac_address()
    {
      return __isset.mac_address;
    }

    #endregion XmlSerializer support

    public network_info() {
      this._adapter_name = "";
      this.__isset.adapter_name = true;
      this._description = "";
      this.__isset.description = true;
      this._is_dhcp_v4 = false;
      this.__isset.is_dhcp_v4 = true;
      this._is_dhcp_v6 = false;
      this.__isset.is_dhcp_v6 = true;
      this._mac_address = "";
      this.__isset.mac_address = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Adapter_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Description = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Dnss = new List<string>();
                TList _list13 = iprot.ReadListBegin();
                for( int _i14 = 0; _i14 < _list13.Count; ++_i14)
                {
                  string _elem15;
                  _elem15 = iprot.ReadString();
                  Dnss.Add(_elem15);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                Gateways = new List<string>();
                TList _list16 = iprot.ReadListBegin();
                for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                {
                  string _elem18;
                  _elem18 = iprot.ReadString();
                  Gateways.Add(_elem18);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                Ip_addresses = new List<string>();
                TList _list19 = iprot.ReadListBegin();
                for( int _i20 = 0; _i20 < _list19.Count; ++_i20)
                {
                  string _elem21;
                  _elem21 = iprot.ReadString();
                  Ip_addresses.Add(_elem21);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              Is_dhcp_v4 = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Bool) {
              Is_dhcp_v6 = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Mac_address = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.List) {
              {
                Subnet_masks = new List<string>();
                TList _list22 = iprot.ReadListBegin();
                for( int _i23 = 0; _i23 < _list22.Count; ++_i23)
                {
                  string _elem24;
                  _elem24 = iprot.ReadString();
                  Subnet_masks.Add(_elem24);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("network_info");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Adapter_name != null && __isset.adapter_name) {
        field.Name = "adapter_name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Adapter_name);
        oprot.WriteFieldEnd();
      }
      if (Description != null && __isset.description) {
        field.Name = "description";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Description);
        oprot.WriteFieldEnd();
      }
      if (Dnss != null) {
        field.Name = "dnss";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Dnss.Count));
          foreach (string _iter25 in Dnss)
          {
            oprot.WriteString(_iter25);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Gateways != null) {
        field.Name = "gateways";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Gateways.Count));
          foreach (string _iter26 in Gateways)
          {
            oprot.WriteString(_iter26);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Ip_addresses != null) {
        field.Name = "ip_addresses";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Ip_addresses.Count));
          foreach (string _iter27 in Ip_addresses)
          {
            oprot.WriteString(_iter27);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.is_dhcp_v4) {
        field.Name = "is_dhcp_v4";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Is_dhcp_v4.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.is_dhcp_v6) {
        field.Name = "is_dhcp_v6";
        field.Type = TType.Bool;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Is_dhcp_v6.Value);
        oprot.WriteFieldEnd();
      }
      if (Mac_address != null && __isset.mac_address) {
        field.Name = "mac_address";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Mac_address);
        oprot.WriteFieldEnd();
      }
      if (Subnet_masks != null) {
        field.Name = "subnet_masks";
        field.Type = TType.List;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Subnet_masks.Count));
          foreach (string _iter28 in Subnet_masks)
          {
            oprot.WriteString(_iter28);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("network_info(");
      bool __first = true;
      if (Adapter_name != null && __isset.adapter_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Adapter_name: ");
        __sb.Append(Adapter_name);
      }
      if (Description != null && __isset.description) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Description: ");
        __sb.Append(Description);
      }
      if (Dnss != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Dnss: ");
        __sb.Append(Dnss);
      }
      if (Gateways != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gateways: ");
        __sb.Append(Gateways);
      }
      if (Ip_addresses != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ip_addresses: ");
        __sb.Append(Ip_addresses);
      }
      if (__isset.is_dhcp_v4) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Is_dhcp_v4: ");
        __sb.Append(Is_dhcp_v4);
      }
      if (__isset.is_dhcp_v6) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Is_dhcp_v6: ");
        __sb.Append(Is_dhcp_v6);
      }
      if (Mac_address != null && __isset.mac_address) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mac_address: ");
        __sb.Append(Mac_address);
      }
      if (Subnet_masks != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Subnet_masks: ");
        __sb.Append(Subnet_masks);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
