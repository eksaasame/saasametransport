/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
#if !SILVERLIGHT
using System.Xml.Serialization;
#endif
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace mwdc.ironman.remoting.thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class os_version_info : TBase
  {
    private string _csd_version;
    private int _build_number;
    private int _major_version;
    private int _minor_version;
    private int _platform_id;
    private short _product_type;
    private int _servicepack_major;
    private int _servicepack_minor;
    private int _suite_mask;

    [DataMember(Order = 0)]
    public string Csd_version
    {
      get
      {
        return _csd_version;
      }
      set
      {
        __isset.csd_version = true;
        this._csd_version = value;
      }
    }

    [DataMember(Order = 0)]
    public int? Build_number
    {
      get
      {
        return _build_number;
      }
      set
      {
        __isset.build_number = value.HasValue;
        if (value.HasValue) this._build_number = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public int? Major_version
    {
      get
      {
        return _major_version;
      }
      set
      {
        __isset.major_version = value.HasValue;
        if (value.HasValue) this._major_version = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public int? Minor_version
    {
      get
      {
        return _minor_version;
      }
      set
      {
        __isset.minor_version = value.HasValue;
        if (value.HasValue) this._minor_version = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public int? Platform_id
    {
      get
      {
        return _platform_id;
      }
      set
      {
        __isset.platform_id = value.HasValue;
        if (value.HasValue) this._platform_id = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public short? Product_type
    {
      get
      {
        return _product_type;
      }
      set
      {
        __isset.product_type = value.HasValue;
        if (value.HasValue) this._product_type = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public int? Servicepack_major
    {
      get
      {
        return _servicepack_major;
      }
      set
      {
        __isset.servicepack_major = value.HasValue;
        if (value.HasValue) this._servicepack_major = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public int? Servicepack_minor
    {
      get
      {
        return _servicepack_minor;
      }
      set
      {
        __isset.servicepack_minor = value.HasValue;
        if (value.HasValue) this._servicepack_minor = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public int? Suite_mask
    {
      get
      {
        return _suite_mask;
      }
      set
      {
        __isset.suite_mask = value.HasValue;
        if (value.HasValue) this._suite_mask = value.Value;
      }
    }


    [XmlIgnore] // XmlSerializer
    [DataMember(Order = 1)]  // XmlObjectSerializer, DataContractJsonSerializer, etc.
    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      [DataMember]
      public bool csd_version;
      [DataMember]
      public bool build_number;
      [DataMember]
      public bool major_version;
      [DataMember]
      public bool minor_version;
      [DataMember]
      public bool platform_id;
      [DataMember]
      public bool product_type;
      [DataMember]
      public bool servicepack_major;
      [DataMember]
      public bool servicepack_minor;
      [DataMember]
      public bool suite_mask;
    }

    #region XmlSerializer support

    public bool ShouldSerializeCsd_version()
    {
      return __isset.csd_version;
    }

    public bool ShouldSerializeBuild_number()
    {
      return __isset.build_number;
    }

    public bool ShouldSerializeMajor_version()
    {
      return __isset.major_version;
    }

    public bool ShouldSerializeMinor_version()
    {
      return __isset.minor_version;
    }

    public bool ShouldSerializePlatform_id()
    {
      return __isset.platform_id;
    }

    public bool ShouldSerializeProduct_type()
    {
      return __isset.product_type;
    }

    public bool ShouldSerializeServicepack_major()
    {
      return __isset.servicepack_major;
    }

    public bool ShouldSerializeServicepack_minor()
    {
      return __isset.servicepack_minor;
    }

    public bool ShouldSerializeSuite_mask()
    {
      return __isset.suite_mask;
    }

    #endregion XmlSerializer support

    public os_version_info() {
      this._csd_version = "";
      this.__isset.csd_version = true;
      this._build_number = -1;
      this.__isset.build_number = true;
      this._major_version = -1;
      this.__isset.major_version = true;
      this._minor_version = -1;
      this.__isset.minor_version = true;
      this._platform_id = -1;
      this.__isset.platform_id = true;
      this._product_type = -1;
      this.__isset.product_type = true;
      this._servicepack_major = -1;
      this.__isset.servicepack_major = true;
      this._servicepack_minor = -1;
      this.__isset.servicepack_minor = true;
      this._suite_mask = -1;
      this.__isset.suite_mask = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Csd_version = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Build_number = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Major_version = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Minor_version = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Platform_id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I16) {
              Product_type = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Servicepack_major = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              Servicepack_minor = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              Suite_mask = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("os_version_info");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Csd_version != null && __isset.csd_version) {
        field.Name = "csd_version";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Csd_version);
        oprot.WriteFieldEnd();
      }
      if (__isset.build_number) {
        field.Name = "build_number";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Build_number.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.major_version) {
        field.Name = "major_version";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Major_version.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.minor_version) {
        field.Name = "minor_version";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Minor_version.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.platform_id) {
        field.Name = "platform_id";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Platform_id.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.product_type) {
        field.Name = "product_type";
        field.Type = TType.I16;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Product_type.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.servicepack_major) {
        field.Name = "servicepack_major";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Servicepack_major.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.servicepack_minor) {
        field.Name = "servicepack_minor";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Servicepack_minor.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.suite_mask) {
        field.Name = "suite_mask";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Suite_mask.Value);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("os_version_info(");
      bool __first = true;
      if (Csd_version != null && __isset.csd_version) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Csd_version: ");
        __sb.Append(Csd_version);
      }
      if (__isset.build_number) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Build_number: ");
        __sb.Append(Build_number);
      }
      if (__isset.major_version) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Major_version: ");
        __sb.Append(Major_version);
      }
      if (__isset.minor_version) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Minor_version: ");
        __sb.Append(Minor_version);
      }
      if (__isset.platform_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Platform_id: ");
        __sb.Append(Platform_id);
      }
      if (__isset.product_type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Product_type: ");
        __sb.Append(Product_type);
      }
      if (__isset.servicepack_major) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Servicepack_major: ");
        __sb.Append(Servicepack_major);
      }
      if (__isset.servicepack_minor) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Servicepack_minor: ");
        __sb.Append(Servicepack_minor);
      }
      if (__isset.suite_mask) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Suite_mask: ");
        __sb.Append(Suite_mask);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
