/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
#if !SILVERLIGHT
using System.Xml.Serialization;
#endif
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace mwdc.ironman.remoting.thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class client_info : TBase
  {
    private string _architecture;
    private string _client_id;
    private string _client_name;
    private string _domain;
    private string _hal;
    private string _initiator_name;
    private bool _is_oem;
    private short _logical_processors;
    private string _machine_id;
    private string _manufacturer;
    private string _os_name;
    private int _os_type;
    private long _physical_memory;
    private short _processors;
    private int _role;
    private string _system_model;
    private string _system_root;
    private string _workgroup;

    [DataMember(Order = 0)]
    public string Architecture
    {
      get
      {
        return _architecture;
      }
      set
      {
        __isset.architecture = true;
        this._architecture = value;
      }
    }

    [DataMember(Order = 0)]
    public string Client_id
    {
      get
      {
        return _client_id;
      }
      set
      {
        __isset.client_id = true;
        this._client_id = value;
      }
    }

    [DataMember(Order = 0)]
    public string Client_name
    {
      get
      {
        return _client_name;
      }
      set
      {
        __isset.client_name = true;
        this._client_name = value;
      }
    }

    [DataMember(Order = 0)]
    public string Domain
    {
      get
      {
        return _domain;
      }
      set
      {
        __isset.domain = true;
        this._domain = value;
      }
    }

    [DataMember(Order = 0)]
    public string Hal
    {
      get
      {
        return _hal;
      }
      set
      {
        __isset.hal = true;
        this._hal = value;
      }
    }

    [DataMember(Order = 0)]
    public string Initiator_name
    {
      get
      {
        return _initiator_name;
      }
      set
      {
        __isset.initiator_name = true;
        this._initiator_name = value;
      }
    }

    [DataMember(Order = 0)]
    public bool? Is_oem
    {
      get
      {
        return _is_oem;
      }
      set
      {
        __isset.is_oem = value.HasValue;
        if (value.HasValue) this._is_oem = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public short? Logical_processors
    {
      get
      {
        return _logical_processors;
      }
      set
      {
        __isset.logical_processors = value.HasValue;
        if (value.HasValue) this._logical_processors = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public string Machine_id
    {
      get
      {
        return _machine_id;
      }
      set
      {
        __isset.machine_id = true;
        this._machine_id = value;
      }
    }

    [DataMember(Order = 0)]
    public string Manufacturer
    {
      get
      {
        return _manufacturer;
      }
      set
      {
        __isset.manufacturer = true;
        this._manufacturer = value;
      }
    }

    [DataMember(Order = 0)]
    public string Os_name
    {
      get
      {
        return _os_name;
      }
      set
      {
        __isset.os_name = true;
        this._os_name = value;
      }
    }

    [DataMember(Order = 0)]
    public int? Os_type
    {
      get
      {
        return _os_type;
      }
      set
      {
        __isset.os_type = value.HasValue;
        if (value.HasValue) this._os_type = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public string Os_system_info { get; set; }

    [DataMember(Order = 0)]
    public long? Physical_memory
    {
      get
      {
        return _physical_memory;
      }
      set
      {
        __isset.physical_memory = value.HasValue;
        if (value.HasValue) this._physical_memory = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public short? Processors
    {
      get
      {
        return _processors;
      }
      set
      {
        __isset.processors = value.HasValue;
        if (value.HasValue) this._processors = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public int? Role
    {
      get
      {
        return _role;
      }
      set
      {
        __isset.role = value.HasValue;
        if (value.HasValue) this._role = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public string System_model
    {
      get
      {
        return _system_model;
      }
      set
      {
        __isset.system_model = true;
        this._system_model = value;
      }
    }

    [DataMember(Order = 0)]
    public string System_root
    {
      get
      {
        return _system_root;
      }
      set
      {
        __isset.system_root = true;
        this._system_root = value;
      }
    }

    [DataMember(Order = 0)]
    public string Workgroup
    {
      get
      {
        return _workgroup;
      }
      set
      {
        __isset.workgroup = true;
        this._workgroup = value;
      }
    }

    [DataMember(Order = 0)]
    public os_version_info Os_version { get; set; }

    [DataMember(Order = 0)]
    public THashSet<agent_info> Agent_infos { get; set; }

    [DataMember(Order = 0)]
    public THashSet<cluster_info> Cluster_infos { get; set; }

    [DataMember(Order = 0)]
    public THashSet<disk_info> Disk_infos { get; set; }

    [DataMember(Order = 0)]
    public THashSet<network_info> Network_infos { get; set; }

    [DataMember(Order = 0)]
    public THashSet<partition_info> Partition_infos { get; set; }

    [DataMember(Order = 0)]
    public Dictionary<string, protection_relationship> Protection_relationships { get; set; }

    [DataMember(Order = 0)]
    public THashSet<protection_set> Protection_sets { get; set; }

    [DataMember(Order = 0)]
    public THashSet<storage_info> Storage_infos { get; set; }

    [DataMember(Order = 0)]
    public THashSet<volume_info> Volume_infos { get; set; }


    [XmlIgnore] // XmlSerializer
    [DataMember(Order = 1)]  // XmlObjectSerializer, DataContractJsonSerializer, etc.
    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      [DataMember]
      public bool architecture;
      [DataMember]
      public bool client_id;
      [DataMember]
      public bool client_name;
      [DataMember]
      public bool domain;
      [DataMember]
      public bool hal;
      [DataMember]
      public bool initiator_name;
      [DataMember]
      public bool is_oem;
      [DataMember]
      public bool logical_processors;
      [DataMember]
      public bool machine_id;
      [DataMember]
      public bool manufacturer;
      [DataMember]
      public bool os_name;
      [DataMember]
      public bool os_type;
      [DataMember]
      public bool physical_memory;
      [DataMember]
      public bool processors;
      [DataMember]
      public bool role;
      [DataMember]
      public bool system_model;
      [DataMember]
      public bool system_root;
      [DataMember]
      public bool workgroup;
    }

    #region XmlSerializer support

    public bool ShouldSerializeArchitecture()
    {
      return __isset.architecture;
    }

    public bool ShouldSerializeClient_id()
    {
      return __isset.client_id;
    }

    public bool ShouldSerializeClient_name()
    {
      return __isset.client_name;
    }

    public bool ShouldSerializeDomain()
    {
      return __isset.domain;
    }

    public bool ShouldSerializeHal()
    {
      return __isset.hal;
    }

    public bool ShouldSerializeInitiator_name()
    {
      return __isset.initiator_name;
    }

    public bool ShouldSerializeIs_oem()
    {
      return __isset.is_oem;
    }

    public bool ShouldSerializeLogical_processors()
    {
      return __isset.logical_processors;
    }

    public bool ShouldSerializeMachine_id()
    {
      return __isset.machine_id;
    }

    public bool ShouldSerializeManufacturer()
    {
      return __isset.manufacturer;
    }

    public bool ShouldSerializeOs_name()
    {
      return __isset.os_name;
    }

    public bool ShouldSerializeOs_type()
    {
      return __isset.os_type;
    }

    public bool ShouldSerializePhysical_memory()
    {
      return __isset.physical_memory;
    }

    public bool ShouldSerializeProcessors()
    {
      return __isset.processors;
    }

    public bool ShouldSerializeRole()
    {
      return __isset.role;
    }

    public bool ShouldSerializeSystem_model()
    {
      return __isset.system_model;
    }

    public bool ShouldSerializeSystem_root()
    {
      return __isset.system_root;
    }

    public bool ShouldSerializeWorkgroup()
    {
      return __isset.workgroup;
    }

    #endregion XmlSerializer support

    public client_info() {
      this._architecture = "";
      this.__isset.architecture = true;
      this._client_id = "";
      this.__isset.client_id = true;
      this._client_name = "";
      this.__isset.client_name = true;
      this._domain = "";
      this.__isset.domain = true;
      this._hal = "";
      this.__isset.hal = true;
      this._initiator_name = "";
      this.__isset.initiator_name = true;
      this._is_oem = false;
      this.__isset.is_oem = true;
      this._logical_processors = 0;
      this.__isset.logical_processors = true;
      this._machine_id = "";
      this.__isset.machine_id = true;
      this._manufacturer = "";
      this.__isset.manufacturer = true;
      this._os_name = "";
      this.__isset.os_name = true;
      this._os_type = 0;
      this.__isset.os_type = true;
      this._physical_memory = 0;
      this.__isset.physical_memory = true;
      this._processors = 0;
      this.__isset.processors = true;
      this._role = 0;
      this.__isset.role = true;
      this._system_model = "";
      this.__isset.system_model = true;
      this._system_root = "";
      this.__isset.system_root = true;
      this._workgroup = "";
      this.__isset.workgroup = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Architecture = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Client_id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Client_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Domain = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Hal = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Initiator_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Bool) {
              Is_oem = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I16) {
              Logical_processors = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              Machine_id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Manufacturer = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              Os_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              Os_type = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              Os_system_info = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I64) {
              Physical_memory = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I16) {
              Processors = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.I32) {
              Role = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.String) {
              System_model = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.String) {
              System_root = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.String) {
              Workgroup = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.Struct) {
              Os_version = new os_version_info();
              Os_version.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.Set) {
              {
                Agent_infos = new THashSet<agent_info>();
                TSet _set77 = iprot.ReadSetBegin();
                for( int _i78 = 0; _i78 < _set77.Count; ++_i78)
                {
                  agent_info _elem79;
                  _elem79 = new agent_info();
                  _elem79.Read(iprot);
                  Agent_infos.Add(_elem79);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.Set) {
              {
                Cluster_infos = new THashSet<cluster_info>();
                TSet _set80 = iprot.ReadSetBegin();
                for( int _i81 = 0; _i81 < _set80.Count; ++_i81)
                {
                  cluster_info _elem82;
                  _elem82 = new cluster_info();
                  _elem82.Read(iprot);
                  Cluster_infos.Add(_elem82);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.Set) {
              {
                Disk_infos = new THashSet<disk_info>();
                TSet _set83 = iprot.ReadSetBegin();
                for( int _i84 = 0; _i84 < _set83.Count; ++_i84)
                {
                  disk_info _elem85;
                  _elem85 = new disk_info();
                  _elem85.Read(iprot);
                  Disk_infos.Add(_elem85);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.Set) {
              {
                Network_infos = new THashSet<network_info>();
                TSet _set86 = iprot.ReadSetBegin();
                for( int _i87 = 0; _i87 < _set86.Count; ++_i87)
                {
                  network_info _elem88;
                  _elem88 = new network_info();
                  _elem88.Read(iprot);
                  Network_infos.Add(_elem88);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 25:
            if (field.Type == TType.Set) {
              {
                Partition_infos = new THashSet<partition_info>();
                TSet _set89 = iprot.ReadSetBegin();
                for( int _i90 = 0; _i90 < _set89.Count; ++_i90)
                {
                  partition_info _elem91;
                  _elem91 = new partition_info();
                  _elem91.Read(iprot);
                  Partition_infos.Add(_elem91);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 26:
            if (field.Type == TType.Map) {
              {
                Protection_relationships = new Dictionary<string, protection_relationship>();
                TMap _map92 = iprot.ReadMapBegin();
                for( int _i93 = 0; _i93 < _map92.Count; ++_i93)
                {
                  string _key94;
                  protection_relationship _val95;
                  _key94 = iprot.ReadString();
                  _val95 = new protection_relationship();
                  _val95.Read(iprot);
                  Protection_relationships[_key94] = _val95;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 27:
            if (field.Type == TType.Set) {
              {
                Protection_sets = new THashSet<protection_set>();
                TSet _set96 = iprot.ReadSetBegin();
                for( int _i97 = 0; _i97 < _set96.Count; ++_i97)
                {
                  protection_set _elem98;
                  _elem98 = new protection_set();
                  _elem98.Read(iprot);
                  Protection_sets.Add(_elem98);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 28:
            if (field.Type == TType.Set) {
              {
                Storage_infos = new THashSet<storage_info>();
                TSet _set99 = iprot.ReadSetBegin();
                for( int _i100 = 0; _i100 < _set99.Count; ++_i100)
                {
                  storage_info _elem101;
                  _elem101 = new storage_info();
                  _elem101.Read(iprot);
                  Storage_infos.Add(_elem101);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 29:
            if (field.Type == TType.Set) {
              {
                Volume_infos = new THashSet<volume_info>();
                TSet _set102 = iprot.ReadSetBegin();
                for( int _i103 = 0; _i103 < _set102.Count; ++_i103)
                {
                  volume_info _elem104;
                  _elem104 = new volume_info();
                  _elem104.Read(iprot);
                  Volume_infos.Add(_elem104);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("client_info");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Architecture != null && __isset.architecture) {
        field.Name = "architecture";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Architecture);
        oprot.WriteFieldEnd();
      }
      if (Client_id != null && __isset.client_id) {
        field.Name = "client_id";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Client_id);
        oprot.WriteFieldEnd();
      }
      if (Client_name != null && __isset.client_name) {
        field.Name = "client_name";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Client_name);
        oprot.WriteFieldEnd();
      }
      if (Domain != null && __isset.domain) {
        field.Name = "domain";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Domain);
        oprot.WriteFieldEnd();
      }
      if (Hal != null && __isset.hal) {
        field.Name = "hal";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Hal);
        oprot.WriteFieldEnd();
      }
      if (Initiator_name != null && __isset.initiator_name) {
        field.Name = "initiator_name";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Initiator_name);
        oprot.WriteFieldEnd();
      }
      if (__isset.is_oem) {
        field.Name = "is_oem";
        field.Type = TType.Bool;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Is_oem.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.logical_processors) {
        field.Name = "logical_processors";
        field.Type = TType.I16;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Logical_processors.Value);
        oprot.WriteFieldEnd();
      }
      if (Machine_id != null && __isset.machine_id) {
        field.Name = "machine_id";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Machine_id);
        oprot.WriteFieldEnd();
      }
      if (Manufacturer != null && __isset.manufacturer) {
        field.Name = "manufacturer";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Manufacturer);
        oprot.WriteFieldEnd();
      }
      if (Os_name != null && __isset.os_name) {
        field.Name = "os_name";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Os_name);
        oprot.WriteFieldEnd();
      }
      if (__isset.os_type) {
        field.Name = "os_type";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Os_type.Value);
        oprot.WriteFieldEnd();
      }
      if (Os_system_info != null) {
        field.Name = "os_system_info";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Os_system_info);
        oprot.WriteFieldEnd();
      }
      if (__isset.physical_memory) {
        field.Name = "physical_memory";
        field.Type = TType.I64;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Physical_memory.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.processors) {
        field.Name = "processors";
        field.Type = TType.I16;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Processors.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.role) {
        field.Name = "role";
        field.Type = TType.I32;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Role.Value);
        oprot.WriteFieldEnd();
      }
      if (System_model != null && __isset.system_model) {
        field.Name = "system_model";
        field.Type = TType.String;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(System_model);
        oprot.WriteFieldEnd();
      }
      if (System_root != null && __isset.system_root) {
        field.Name = "system_root";
        field.Type = TType.String;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(System_root);
        oprot.WriteFieldEnd();
      }
      if (Workgroup != null && __isset.workgroup) {
        field.Name = "workgroup";
        field.Type = TType.String;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Workgroup);
        oprot.WriteFieldEnd();
      }
      if (Os_version != null) {
        field.Name = "os_version";
        field.Type = TType.Struct;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        Os_version.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Agent_infos != null) {
        field.Name = "agent_infos";
        field.Type = TType.Set;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.Struct, Agent_infos.Count));
          foreach (agent_info _iter105 in Agent_infos)
          {
            _iter105.Write(oprot);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Cluster_infos != null) {
        field.Name = "cluster_infos";
        field.Type = TType.Set;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.Struct, Cluster_infos.Count));
          foreach (cluster_info _iter106 in Cluster_infos)
          {
            _iter106.Write(oprot);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Disk_infos != null) {
        field.Name = "disk_infos";
        field.Type = TType.Set;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.Struct, Disk_infos.Count));
          foreach (disk_info _iter107 in Disk_infos)
          {
            _iter107.Write(oprot);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Network_infos != null) {
        field.Name = "network_infos";
        field.Type = TType.Set;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.Struct, Network_infos.Count));
          foreach (network_info _iter108 in Network_infos)
          {
            _iter108.Write(oprot);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Partition_infos != null) {
        field.Name = "partition_infos";
        field.Type = TType.Set;
        field.ID = 25;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.Struct, Partition_infos.Count));
          foreach (partition_info _iter109 in Partition_infos)
          {
            _iter109.Write(oprot);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Protection_relationships != null) {
        field.Name = "protection_relationships";
        field.Type = TType.Map;
        field.ID = 26;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Protection_relationships.Count));
          foreach (string _iter110 in Protection_relationships.Keys)
          {
            oprot.WriteString(_iter110);
            Protection_relationships[_iter110].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Protection_sets != null) {
        field.Name = "protection_sets";
        field.Type = TType.Set;
        field.ID = 27;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.Struct, Protection_sets.Count));
          foreach (protection_set _iter111 in Protection_sets)
          {
            _iter111.Write(oprot);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Storage_infos != null) {
        field.Name = "storage_infos";
        field.Type = TType.Set;
        field.ID = 28;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.Struct, Storage_infos.Count));
          foreach (storage_info _iter112 in Storage_infos)
          {
            _iter112.Write(oprot);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Volume_infos != null) {
        field.Name = "volume_infos";
        field.Type = TType.Set;
        field.ID = 29;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.Struct, Volume_infos.Count));
          foreach (volume_info _iter113 in Volume_infos)
          {
            _iter113.Write(oprot);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("client_info(");
      bool __first = true;
      if (Architecture != null && __isset.architecture) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Architecture: ");
        __sb.Append(Architecture);
      }
      if (Client_id != null && __isset.client_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Client_id: ");
        __sb.Append(Client_id);
      }
      if (Client_name != null && __isset.client_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Client_name: ");
        __sb.Append(Client_name);
      }
      if (Domain != null && __isset.domain) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Domain: ");
        __sb.Append(Domain);
      }
      if (Hal != null && __isset.hal) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Hal: ");
        __sb.Append(Hal);
      }
      if (Initiator_name != null && __isset.initiator_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Initiator_name: ");
        __sb.Append(Initiator_name);
      }
      if (__isset.is_oem) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Is_oem: ");
        __sb.Append(Is_oem);
      }
      if (__isset.logical_processors) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Logical_processors: ");
        __sb.Append(Logical_processors);
      }
      if (Machine_id != null && __isset.machine_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Machine_id: ");
        __sb.Append(Machine_id);
      }
      if (Manufacturer != null && __isset.manufacturer) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Manufacturer: ");
        __sb.Append(Manufacturer);
      }
      if (Os_name != null && __isset.os_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Os_name: ");
        __sb.Append(Os_name);
      }
      if (__isset.os_type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Os_type: ");
        __sb.Append(Os_type);
      }
      if (Os_system_info != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Os_system_info: ");
        __sb.Append(Os_system_info);
      }
      if (__isset.physical_memory) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Physical_memory: ");
        __sb.Append(Physical_memory);
      }
      if (__isset.processors) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Processors: ");
        __sb.Append(Processors);
      }
      if (__isset.role) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Role: ");
        __sb.Append(Role);
      }
      if (System_model != null && __isset.system_model) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("System_model: ");
        __sb.Append(System_model);
      }
      if (System_root != null && __isset.system_root) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("System_root: ");
        __sb.Append(System_root);
      }
      if (Workgroup != null && __isset.workgroup) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Workgroup: ");
        __sb.Append(Workgroup);
      }
      if (Os_version != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Os_version: ");
        __sb.Append(Os_version== null ? "<null>" : Os_version.ToString());
      }
      if (Agent_infos != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Agent_infos: ");
        __sb.Append(Agent_infos);
      }
      if (Cluster_infos != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cluster_infos: ");
        __sb.Append(Cluster_infos);
      }
      if (Disk_infos != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Disk_infos: ");
        __sb.Append(Disk_infos);
      }
      if (Network_infos != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Network_infos: ");
        __sb.Append(Network_infos);
      }
      if (Partition_infos != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Partition_infos: ");
        __sb.Append(Partition_infos);
      }
      if (Protection_relationships != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Protection_relationships: ");
        __sb.Append(Protection_relationships);
      }
      if (Protection_sets != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Protection_sets: ");
        __sb.Append(Protection_sets);
      }
      if (Storage_infos != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Storage_infos: ");
        __sb.Append(Storage_infos);
      }
      if (Volume_infos != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Volume_infos: ");
        __sb.Append(Volume_infos);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
