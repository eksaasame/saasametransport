/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
#if !SILVERLIGHT
using System.Xml.Serialization;
#endif
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace mwdc.ironman.remoting.thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class cluster_network : TBase
  {
    private string _cluster_network_name;
    private string _cluster_network_id;
    private string _cluster_network_address;
    private string _cluster_network_address_mask;

    [DataMember(Order = 0)]
    public string Cluster_network_name
    {
      get
      {
        return _cluster_network_name;
      }
      set
      {
        __isset.cluster_network_name = true;
        this._cluster_network_name = value;
      }
    }

    [DataMember(Order = 0)]
    public string Cluster_network_id
    {
      get
      {
        return _cluster_network_id;
      }
      set
      {
        __isset.cluster_network_id = true;
        this._cluster_network_id = value;
      }
    }

    [DataMember(Order = 0)]
    public string Cluster_network_address
    {
      get
      {
        return _cluster_network_address;
      }
      set
      {
        __isset.cluster_network_address = true;
        this._cluster_network_address = value;
      }
    }

    [DataMember(Order = 0)]
    public string Cluster_network_address_mask
    {
      get
      {
        return _cluster_network_address_mask;
      }
      set
      {
        __isset.cluster_network_address_mask = true;
        this._cluster_network_address_mask = value;
      }
    }

    [DataMember(Order = 0)]
    public THashSet<network_info> Network_infos { get; set; }


    [XmlIgnore] // XmlSerializer
    [DataMember(Order = 1)]  // XmlObjectSerializer, DataContractJsonSerializer, etc.
    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      [DataMember]
      public bool cluster_network_name;
      [DataMember]
      public bool cluster_network_id;
      [DataMember]
      public bool cluster_network_address;
      [DataMember]
      public bool cluster_network_address_mask;
    }

    #region XmlSerializer support

    public bool ShouldSerializeCluster_network_name()
    {
      return __isset.cluster_network_name;
    }

    public bool ShouldSerializeCluster_network_id()
    {
      return __isset.cluster_network_id;
    }

    public bool ShouldSerializeCluster_network_address()
    {
      return __isset.cluster_network_address;
    }

    public bool ShouldSerializeCluster_network_address_mask()
    {
      return __isset.cluster_network_address_mask;
    }

    #endregion XmlSerializer support

    public cluster_network() {
      this._cluster_network_name = "";
      this.__isset.cluster_network_name = true;
      this._cluster_network_id = "";
      this.__isset.cluster_network_id = true;
      this._cluster_network_address = "";
      this.__isset.cluster_network_address = true;
      this._cluster_network_address_mask = "";
      this.__isset.cluster_network_address_mask = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Cluster_network_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Cluster_network_id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Cluster_network_address = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Cluster_network_address_mask = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Set) {
              {
                Network_infos = new THashSet<network_info>();
                TSet _set41 = iprot.ReadSetBegin();
                for( int _i42 = 0; _i42 < _set41.Count; ++_i42)
                {
                  network_info _elem43;
                  _elem43 = new network_info();
                  _elem43.Read(iprot);
                  Network_infos.Add(_elem43);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("cluster_network");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Cluster_network_name != null && __isset.cluster_network_name) {
        field.Name = "cluster_network_name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Cluster_network_name);
        oprot.WriteFieldEnd();
      }
      if (Cluster_network_id != null && __isset.cluster_network_id) {
        field.Name = "cluster_network_id";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Cluster_network_id);
        oprot.WriteFieldEnd();
      }
      if (Cluster_network_address != null && __isset.cluster_network_address) {
        field.Name = "cluster_network_address";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Cluster_network_address);
        oprot.WriteFieldEnd();
      }
      if (Cluster_network_address_mask != null && __isset.cluster_network_address_mask) {
        field.Name = "cluster_network_address_mask";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Cluster_network_address_mask);
        oprot.WriteFieldEnd();
      }
      if (Network_infos != null) {
        field.Name = "network_infos";
        field.Type = TType.Set;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.Struct, Network_infos.Count));
          foreach (network_info _iter44 in Network_infos)
          {
            _iter44.Write(oprot);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("cluster_network(");
      bool __first = true;
      if (Cluster_network_name != null && __isset.cluster_network_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cluster_network_name: ");
        __sb.Append(Cluster_network_name);
      }
      if (Cluster_network_id != null && __isset.cluster_network_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cluster_network_id: ");
        __sb.Append(Cluster_network_id);
      }
      if (Cluster_network_address != null && __isset.cluster_network_address) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cluster_network_address: ");
        __sb.Append(Cluster_network_address);
      }
      if (Cluster_network_address_mask != null && __isset.cluster_network_address_mask) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cluster_network_address_mask: ");
        __sb.Append(Cluster_network_address_mask);
      }
      if (Network_infos != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Network_infos: ");
        __sb.Append(Network_infos);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
