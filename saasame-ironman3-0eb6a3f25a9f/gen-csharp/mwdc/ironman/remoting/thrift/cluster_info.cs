/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
#if !SILVERLIGHT
using System.Xml.Serialization;
#endif
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace mwdc.ironman.remoting.thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class cluster_info : TBase
  {
    private string _cluster_name;

    [DataMember(Order = 0)]
    public string Cluster_name
    {
      get
      {
        return _cluster_name;
      }
      set
      {
        __isset.cluster_name = true;
        this._cluster_name = value;
      }
    }

    [DataMember(Order = 0)]
    public disk_info Quorum_disk { get; set; }

    [DataMember(Order = 0)]
    public THashSet<string> Cluster_nodes { get; set; }

    [DataMember(Order = 0)]
    public THashSet<string> Client_ids { get; set; }

    [DataMember(Order = 0)]
    public THashSet<string> Machine_ids { get; set; }

    [DataMember(Order = 0)]
    public THashSet<cluster_network> Cluster_network_infos { get; set; }

    [DataMember(Order = 0)]
    public THashSet<cluster_group> Cluster_groups { get; set; }


    [XmlIgnore] // XmlSerializer
    [DataMember(Order = 1)]  // XmlObjectSerializer, DataContractJsonSerializer, etc.
    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      [DataMember]
      public bool cluster_name;
    }

    #region XmlSerializer support

    public bool ShouldSerializeCluster_name()
    {
      return __isset.cluster_name;
    }

    #endregion XmlSerializer support

    public cluster_info() {
      this._cluster_name = "";
      this.__isset.cluster_name = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Cluster_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Quorum_disk = new disk_info();
              Quorum_disk.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Set) {
              {
                Cluster_nodes = new THashSet<string>();
                TSet _set57 = iprot.ReadSetBegin();
                for( int _i58 = 0; _i58 < _set57.Count; ++_i58)
                {
                  string _elem59;
                  _elem59 = iprot.ReadString();
                  Cluster_nodes.Add(_elem59);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Set) {
              {
                Client_ids = new THashSet<string>();
                TSet _set60 = iprot.ReadSetBegin();
                for( int _i61 = 0; _i61 < _set60.Count; ++_i61)
                {
                  string _elem62;
                  _elem62 = iprot.ReadString();
                  Client_ids.Add(_elem62);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Set) {
              {
                Machine_ids = new THashSet<string>();
                TSet _set63 = iprot.ReadSetBegin();
                for( int _i64 = 0; _i64 < _set63.Count; ++_i64)
                {
                  string _elem65;
                  _elem65 = iprot.ReadString();
                  Machine_ids.Add(_elem65);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Set) {
              {
                Cluster_network_infos = new THashSet<cluster_network>();
                TSet _set66 = iprot.ReadSetBegin();
                for( int _i67 = 0; _i67 < _set66.Count; ++_i67)
                {
                  cluster_network _elem68;
                  _elem68 = new cluster_network();
                  _elem68.Read(iprot);
                  Cluster_network_infos.Add(_elem68);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Set) {
              {
                Cluster_groups = new THashSet<cluster_group>();
                TSet _set69 = iprot.ReadSetBegin();
                for( int _i70 = 0; _i70 < _set69.Count; ++_i70)
                {
                  cluster_group _elem71;
                  _elem71 = new cluster_group();
                  _elem71.Read(iprot);
                  Cluster_groups.Add(_elem71);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("cluster_info");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Cluster_name != null && __isset.cluster_name) {
        field.Name = "cluster_name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Cluster_name);
        oprot.WriteFieldEnd();
      }
      if (Quorum_disk != null) {
        field.Name = "quorum_disk";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Quorum_disk.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Cluster_nodes != null) {
        field.Name = "cluster_nodes";
        field.Type = TType.Set;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, Cluster_nodes.Count));
          foreach (string _iter72 in Cluster_nodes)
          {
            oprot.WriteString(_iter72);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Client_ids != null) {
        field.Name = "client_ids";
        field.Type = TType.Set;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, Client_ids.Count));
          foreach (string _iter73 in Client_ids)
          {
            oprot.WriteString(_iter73);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Machine_ids != null) {
        field.Name = "machine_ids";
        field.Type = TType.Set;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, Machine_ids.Count));
          foreach (string _iter74 in Machine_ids)
          {
            oprot.WriteString(_iter74);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Cluster_network_infos != null) {
        field.Name = "cluster_network_infos";
        field.Type = TType.Set;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.Struct, Cluster_network_infos.Count));
          foreach (cluster_network _iter75 in Cluster_network_infos)
          {
            _iter75.Write(oprot);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Cluster_groups != null) {
        field.Name = "cluster_groups";
        field.Type = TType.Set;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.Struct, Cluster_groups.Count));
          foreach (cluster_group _iter76 in Cluster_groups)
          {
            _iter76.Write(oprot);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("cluster_info(");
      bool __first = true;
      if (Cluster_name != null && __isset.cluster_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cluster_name: ");
        __sb.Append(Cluster_name);
      }
      if (Quorum_disk != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Quorum_disk: ");
        __sb.Append(Quorum_disk== null ? "<null>" : Quorum_disk.ToString());
      }
      if (Cluster_nodes != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cluster_nodes: ");
        __sb.Append(Cluster_nodes);
      }
      if (Client_ids != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Client_ids: ");
        __sb.Append(Client_ids);
      }
      if (Machine_ids != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Machine_ids: ");
        __sb.Append(Machine_ids);
      }
      if (Cluster_network_infos != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cluster_network_infos: ");
        __sb.Append(Cluster_network_infos);
      }
      if (Cluster_groups != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cluster_groups: ");
        __sb.Append(Cluster_groups);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
