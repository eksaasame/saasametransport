/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
#if !SILVERLIGHT
using System.Xml.Serialization;
#endif
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace mwdc.ironman.remoting.thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class storage_info : TBase
  {
    private int _connection_type;
    private int _protocol;
    private string _storage_id;
    private string _storage_name;

    [DataMember(Order = 0)]
    public int? Connection_type
    {
      get
      {
        return _connection_type;
      }
      set
      {
        __isset.connection_type = value.HasValue;
        if (value.HasValue) this._connection_type = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public int? Protocol
    {
      get
      {
        return _protocol;
      }
      set
      {
        __isset.protocol = value.HasValue;
        if (value.HasValue) this._protocol = value.Value;
      }
    }

    [DataMember(Order = 0)]
    public string Storage_id
    {
      get
      {
        return _storage_id;
      }
      set
      {
        __isset.storage_id = true;
        this._storage_id = value;
      }
    }

    [DataMember(Order = 0)]
    public string Storage_name
    {
      get
      {
        return _storage_name;
      }
      set
      {
        __isset.storage_name = true;
        this._storage_name = value;
      }
    }

    [DataMember(Order = 0)]
    public THashSet<network_info> Network_infos { get; set; }

    [DataMember(Order = 0)]
    public THashSet<string> Sanclient_names { get; set; }


    [XmlIgnore] // XmlSerializer
    [DataMember(Order = 1)]  // XmlObjectSerializer, DataContractJsonSerializer, etc.
    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      [DataMember]
      public bool connection_type;
      [DataMember]
      public bool protocol;
      [DataMember]
      public bool storage_id;
      [DataMember]
      public bool storage_name;
    }

    #region XmlSerializer support

    public bool ShouldSerializeConnection_type()
    {
      return __isset.connection_type;
    }

    public bool ShouldSerializeProtocol()
    {
      return __isset.protocol;
    }

    public bool ShouldSerializeStorage_id()
    {
      return __isset.storage_id;
    }

    public bool ShouldSerializeStorage_name()
    {
      return __isset.storage_name;
    }

    #endregion XmlSerializer support

    public storage_info() {
      this._connection_type = -1;
      this.__isset.connection_type = true;
      this._protocol = -1;
      this.__isset.protocol = true;
      this._storage_id = "";
      this.__isset.storage_id = true;
      this._storage_name = "";
      this.__isset.storage_name = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Connection_type = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Protocol = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Storage_id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Storage_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Set) {
              {
                Network_infos = new THashSet<network_info>();
                TSet _set29 = iprot.ReadSetBegin();
                for( int _i30 = 0; _i30 < _set29.Count; ++_i30)
                {
                  network_info _elem31;
                  _elem31 = new network_info();
                  _elem31.Read(iprot);
                  Network_infos.Add(_elem31);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Set) {
              {
                Sanclient_names = new THashSet<string>();
                TSet _set32 = iprot.ReadSetBegin();
                for( int _i33 = 0; _i33 < _set32.Count; ++_i33)
                {
                  string _elem34;
                  _elem34 = iprot.ReadString();
                  Sanclient_names.Add(_elem34);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("storage_info");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.connection_type) {
        field.Name = "connection_type";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Connection_type.Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.protocol) {
        field.Name = "protocol";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Protocol.Value);
        oprot.WriteFieldEnd();
      }
      if (Storage_id != null && __isset.storage_id) {
        field.Name = "storage_id";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Storage_id);
        oprot.WriteFieldEnd();
      }
      if (Storage_name != null && __isset.storage_name) {
        field.Name = "storage_name";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Storage_name);
        oprot.WriteFieldEnd();
      }
      if (Network_infos != null) {
        field.Name = "network_infos";
        field.Type = TType.Set;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.Struct, Network_infos.Count));
          foreach (network_info _iter35 in Network_infos)
          {
            _iter35.Write(oprot);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Sanclient_names != null) {
        field.Name = "sanclient_names";
        field.Type = TType.Set;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, Sanclient_names.Count));
          foreach (string _iter36 in Sanclient_names)
          {
            oprot.WriteString(_iter36);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("storage_info(");
      bool __first = true;
      if (__isset.connection_type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Connection_type: ");
        __sb.Append(Connection_type);
      }
      if (__isset.protocol) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Protocol: ");
        __sb.Append(Protocol);
      }
      if (Storage_id != null && __isset.storage_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Storage_id: ");
        __sb.Append(Storage_id);
      }
      if (Storage_name != null && __isset.storage_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Storage_name: ");
        __sb.Append(Storage_name);
      }
      if (Network_infos != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Network_infos: ");
        __sb.Append(Network_infos);
      }
      if (Sanclient_names != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sanclient_names: ");
        __sb.Append(Sanclient_names);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
