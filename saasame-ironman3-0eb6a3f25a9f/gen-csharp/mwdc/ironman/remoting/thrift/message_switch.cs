/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
#if !SILVERLIGHT
using System.Xml.Serialization;
#endif
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace mwdc.ironman.remoting.thrift
{
  public partial class message_switch {
    public interface Iface {
      string login(byte[] account, byte[] password);
      #if SILVERLIGHT
      IAsyncResult Begin_login(AsyncCallback callback, object state, byte[] account, byte[] password);
      string End_login(IAsyncResult asyncResult);
      #endif
      void logout(string session_id);
      #if SILVERLIGHT
      IAsyncResult Begin_logout(AsyncCallback callback, object state, string session_id);
      void End_logout(IAsyncResult asyncResult);
      #endif
      THashSet<command_request> ping(string session_id, string client_id, string machine_id, int status);
      #if SILVERLIGHT
      IAsyncResult Begin_ping(AsyncCallback callback, object state, string session_id, string client_id, string machine_id, int status);
      THashSet<command_request> End_ping(IAsyncResult asyncResult);
      #endif
      THashSet<command_request> upload_info(string session_id, string client_id, string machine_id, string event_id, client_info client);
      #if SILVERLIGHT
      IAsyncResult Begin_upload_info(AsyncCallback callback, object state, string session_id, string client_id, string machine_id, string event_id, client_info client);
      THashSet<command_request> End_upload_info(IAsyncResult asyncResult);
      #endif
      THashSet<server_info> get_serverinfo(string session_id);
      #if SILVERLIGHT
      IAsyncResult Begin_get_serverinfo(AsyncCallback callback, object state, string session_id);
      THashSet<server_info> End_get_serverinfo(IAsyncResult asyncResult);
      #endif
      void upload_result(string session_id, string client_id, string machine_id, THashSet<command_result> results);
      #if SILVERLIGHT
      IAsyncResult Begin_upload_result(AsyncCallback callback, object state, string session_id, string client_id, string machine_id, THashSet<command_result> results);
      void End_upload_result(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_login(AsyncCallback callback, object state, byte[] account, byte[] password)
      {
        return send_login(callback, state, account, password);
      }

      public string End_login(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_login();
      }

      #endif

      public string login(byte[] account, byte[] password)
      {
        #if !SILVERLIGHT
        send_login(account, password);
        return recv_login();

        #else
        var asyncResult = Begin_login(null, null, account, password);
        return End_login(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_login(AsyncCallback callback, object state, byte[] account, byte[] password)
      #else
      public void send_login(byte[] account, byte[] password)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("login", TMessageType.Call, seqid_));
        login_args args = new login_args();
        args.Account = account;
        args.Password = password;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_login()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        login_result result = new login_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.Success != null) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "login failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_logout(AsyncCallback callback, object state, string session_id)
      {
        return send_logout(callback, state, session_id);
      }

      public void End_logout(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_logout();
      }

      #endif

      public void logout(string session_id)
      {
        #if !SILVERLIGHT
        send_logout(session_id);
        recv_logout();

        #else
        var asyncResult = Begin_logout(null, null, session_id);
        End_logout(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_logout(AsyncCallback callback, object state, string session_id)
      #else
      public void send_logout(string session_id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("logout", TMessageType.Call, seqid_));
        logout_args args = new logout_args();
        args.Session_id = session_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_logout()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        logout_result result = new logout_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ping(AsyncCallback callback, object state, string session_id, string client_id, string machine_id, int status)
      {
        return send_ping(callback, state, session_id, client_id, machine_id, status);
      }

      public THashSet<command_request> End_ping(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ping();
      }

      #endif

      public THashSet<command_request> ping(string session_id, string client_id, string machine_id, int status)
      {
        #if !SILVERLIGHT
        send_ping(session_id, client_id, machine_id, status);
        return recv_ping();

        #else
        var asyncResult = Begin_ping(null, null, session_id, client_id, machine_id, status);
        return End_ping(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ping(AsyncCallback callback, object state, string session_id, string client_id, string machine_id, int status)
      #else
      public void send_ping(string session_id, string client_id, string machine_id, int status)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ping", TMessageType.Call, seqid_));
        ping_args args = new ping_args();
        args.Session_id = session_id;
        args.Client_id = client_id;
        args.Machine_id = machine_id;
        args.Status = status;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public THashSet<command_request> recv_ping()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ping_result result = new ping_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.Success != null) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ping failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_upload_info(AsyncCallback callback, object state, string session_id, string client_id, string machine_id, string event_id, client_info client)
      {
        return send_upload_info(callback, state, session_id, client_id, machine_id, event_id, client);
      }

      public THashSet<command_request> End_upload_info(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_upload_info();
      }

      #endif

      public THashSet<command_request> upload_info(string session_id, string client_id, string machine_id, string event_id, client_info client)
      {
        #if !SILVERLIGHT
        send_upload_info(session_id, client_id, machine_id, event_id, client);
        return recv_upload_info();

        #else
        var asyncResult = Begin_upload_info(null, null, session_id, client_id, machine_id, event_id, client);
        return End_upload_info(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_upload_info(AsyncCallback callback, object state, string session_id, string client_id, string machine_id, string event_id, client_info client)
      #else
      public void send_upload_info(string session_id, string client_id, string machine_id, string event_id, client_info client)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("upload_info", TMessageType.Call, seqid_));
        upload_info_args args = new upload_info_args();
        args.Session_id = session_id;
        args.Client_id = client_id;
        args.Machine_id = machine_id;
        args.Event_id = event_id;
        args.Client = client;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public THashSet<command_request> recv_upload_info()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        upload_info_result result = new upload_info_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.Success != null) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "upload_info failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_get_serverinfo(AsyncCallback callback, object state, string session_id)
      {
        return send_get_serverinfo(callback, state, session_id);
      }

      public THashSet<server_info> End_get_serverinfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_serverinfo();
      }

      #endif

      public THashSet<server_info> get_serverinfo(string session_id)
      {
        #if !SILVERLIGHT
        send_get_serverinfo(session_id);
        return recv_get_serverinfo();

        #else
        var asyncResult = Begin_get_serverinfo(null, null, session_id);
        return End_get_serverinfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_get_serverinfo(AsyncCallback callback, object state, string session_id)
      #else
      public void send_get_serverinfo(string session_id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("get_serverinfo", TMessageType.Call, seqid_));
        get_serverinfo_args args = new get_serverinfo_args();
        args.Session_id = session_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public THashSet<server_info> recv_get_serverinfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_serverinfo_result result = new get_serverinfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.Success != null) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_serverinfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_upload_result(AsyncCallback callback, object state, string session_id, string client_id, string machine_id, THashSet<command_result> results)
      {
        return send_upload_result(callback, state, session_id, client_id, machine_id, results);
      }

      public void End_upload_result(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_upload_result();
      }

      #endif

      public void upload_result(string session_id, string client_id, string machine_id, THashSet<command_result> results)
      {
        #if !SILVERLIGHT
        send_upload_result(session_id, client_id, machine_id, results);
        recv_upload_result();

        #else
        var asyncResult = Begin_upload_result(null, null, session_id, client_id, machine_id, results);
        End_upload_result(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_upload_result(AsyncCallback callback, object state, string session_id, string client_id, string machine_id, THashSet<command_result> results)
      #else
      public void send_upload_result(string session_id, string client_id, string machine_id, THashSet<command_result> results)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("upload_result", TMessageType.Call, seqid_));
        upload_result_args args = new upload_result_args();
        args.Session_id = session_id;
        args.Client_id = client_id;
        args.Machine_id = machine_id;
        args.Results = results;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_upload_result()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        upload_result_result result = new upload_result_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["login"] = login_Process;
        processMap_["logout"] = logout_Process;
        processMap_["ping"] = ping_Process;
        processMap_["upload_info"] = upload_info_Process;
        processMap_["get_serverinfo"] = get_serverinfo_Process;
        processMap_["upload_result"] = upload_result_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void login_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        login_args args = new login_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        login_result result = new login_result();
        result.Success = iface_.login(args.Account, args.Password);
        oprot.WriteMessageBegin(new TMessage("login", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void logout_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        logout_args args = new logout_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        logout_result result = new logout_result();
        iface_.logout(args.Session_id);
        oprot.WriteMessageBegin(new TMessage("logout", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ping_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ping_args args = new ping_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ping_result result = new ping_result();
        result.Success = iface_.ping(args.Session_id, args.Client_id, args.Machine_id, args.Status.Value);
        oprot.WriteMessageBegin(new TMessage("ping", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void upload_info_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        upload_info_args args = new upload_info_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        upload_info_result result = new upload_info_result();
        result.Success = iface_.upload_info(args.Session_id, args.Client_id, args.Machine_id, args.Event_id, args.Client);
        oprot.WriteMessageBegin(new TMessage("upload_info", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_serverinfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_serverinfo_args args = new get_serverinfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_serverinfo_result result = new get_serverinfo_result();
        result.Success = iface_.get_serverinfo(args.Session_id);
        oprot.WriteMessageBegin(new TMessage("get_serverinfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void upload_result_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        upload_result_args args = new upload_result_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        upload_result_result result = new upload_result_result();
        iface_.upload_result(args.Session_id, args.Client_id, args.Machine_id, args.Results);
        oprot.WriteMessageBegin(new TMessage("upload_result", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class login_args : TBase
    {

      [DataMember(Order = 0)]
      public byte[] Account { get; set; }

      [DataMember(Order = 0)]
      public byte[] Password { get; set; }

      public login_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Account = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Password = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("login_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Account != null) {
          field.Name = "account";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Account);
          oprot.WriteFieldEnd();
        }
        if (Password != null) {
          field.Name = "password";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Password);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("login_args(");
        bool __first = true;
        if (Account != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Account: ");
          __sb.Append(Account);
        }
        if (Password != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class login_result : TBase
    {

      [DataMember(Order = 0)]
      public string Success { get; set; }

      public login_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("login_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.String;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("login_result(");
        bool __first = true;
        if (Success != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class logout_args : TBase
    {

      [DataMember(Order = 0)]
      public string Session_id { get; set; }

      public logout_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Session_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("logout_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Session_id != null) {
          field.Name = "session_id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Session_id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("logout_args(");
        bool __first = true;
        if (Session_id != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session_id: ");
          __sb.Append(Session_id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class logout_result : TBase
    {

      public logout_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("logout_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("logout_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class ping_args : TBase
    {

      [DataMember(Order = 0)]
      public string Session_id { get; set; }

      [DataMember(Order = 0)]
      public string Client_id { get; set; }

      [DataMember(Order = 0)]
      public string Machine_id { get; set; }

      [DataMember(Order = 0)]
      public int? Status { get; set; }

      public ping_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Session_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Client_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Machine_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Status = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ping_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Session_id != null) {
          field.Name = "session_id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Session_id);
          oprot.WriteFieldEnd();
        }
        if (Client_id != null) {
          field.Name = "client_id";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Client_id);
          oprot.WriteFieldEnd();
        }
        if (Machine_id != null) {
          field.Name = "machine_id";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Machine_id);
          oprot.WriteFieldEnd();
        }
        if (Status != null) {
          field.Name = "status";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Status.Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ping_args(");
        bool __first = true;
        if (Session_id != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session_id: ");
          __sb.Append(Session_id);
        }
        if (Client_id != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Client_id: ");
          __sb.Append(Client_id);
        }
        if (Machine_id != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Machine_id: ");
          __sb.Append(Machine_id);
        }
        if (Status != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Status: ");
          __sb.Append(Status);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class ping_result : TBase
    {

      [DataMember(Order = 0)]
      public THashSet<command_request> Success { get; set; }

      public ping_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Set) {
                {
                  Success = new THashSet<command_request>();
                  TSet _set131 = iprot.ReadSetBegin();
                  for( int _i132 = 0; _i132 < _set131.Count; ++_i132)
                  {
                    command_request _elem133;
                    _elem133 = new command_request();
                    _elem133.Read(iprot);
                    Success.Add(_elem133);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ping_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Set;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.Struct, Success.Count));
            foreach (command_request _iter134 in Success)
            {
              _iter134.Write(oprot);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ping_result(");
        bool __first = true;
        if (Success != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class upload_info_args : TBase
    {

      [DataMember(Order = 0)]
      public string Session_id { get; set; }

      [DataMember(Order = 0)]
      public string Client_id { get; set; }

      [DataMember(Order = 0)]
      public string Machine_id { get; set; }

      [DataMember(Order = 0)]
      public string Event_id { get; set; }

      [DataMember(Order = 0)]
      public client_info Client { get; set; }

      public upload_info_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Session_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Client_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Machine_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Event_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                Client = new client_info();
                Client.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upload_info_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Session_id != null) {
          field.Name = "session_id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Session_id);
          oprot.WriteFieldEnd();
        }
        if (Client_id != null) {
          field.Name = "client_id";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Client_id);
          oprot.WriteFieldEnd();
        }
        if (Machine_id != null) {
          field.Name = "machine_id";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Machine_id);
          oprot.WriteFieldEnd();
        }
        if (Event_id != null) {
          field.Name = "event_id";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Event_id);
          oprot.WriteFieldEnd();
        }
        if (Client != null) {
          field.Name = "client";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          Client.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upload_info_args(");
        bool __first = true;
        if (Session_id != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session_id: ");
          __sb.Append(Session_id);
        }
        if (Client_id != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Client_id: ");
          __sb.Append(Client_id);
        }
        if (Machine_id != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Machine_id: ");
          __sb.Append(Machine_id);
        }
        if (Event_id != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Event_id: ");
          __sb.Append(Event_id);
        }
        if (Client != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Client: ");
          __sb.Append(Client== null ? "<null>" : Client.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class upload_info_result : TBase
    {

      [DataMember(Order = 0)]
      public THashSet<command_request> Success { get; set; }

      public upload_info_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Set) {
                {
                  Success = new THashSet<command_request>();
                  TSet _set135 = iprot.ReadSetBegin();
                  for( int _i136 = 0; _i136 < _set135.Count; ++_i136)
                  {
                    command_request _elem137;
                    _elem137 = new command_request();
                    _elem137.Read(iprot);
                    Success.Add(_elem137);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upload_info_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Set;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.Struct, Success.Count));
            foreach (command_request _iter138 in Success)
            {
              _iter138.Write(oprot);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upload_info_result(");
        bool __first = true;
        if (Success != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class get_serverinfo_args : TBase
    {

      [DataMember(Order = 0)]
      public string Session_id { get; set; }

      public get_serverinfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Session_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_serverinfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Session_id != null) {
          field.Name = "session_id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Session_id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_serverinfo_args(");
        bool __first = true;
        if (Session_id != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session_id: ");
          __sb.Append(Session_id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class get_serverinfo_result : TBase
    {

      [DataMember(Order = 0)]
      public THashSet<server_info> Success { get; set; }

      public get_serverinfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Set) {
                {
                  Success = new THashSet<server_info>();
                  TSet _set139 = iprot.ReadSetBegin();
                  for( int _i140 = 0; _i140 < _set139.Count; ++_i140)
                  {
                    server_info _elem141;
                    _elem141 = new server_info();
                    _elem141.Read(iprot);
                    Success.Add(_elem141);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_serverinfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Set;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.Struct, Success.Count));
            foreach (server_info _iter142 in Success)
            {
              _iter142.Write(oprot);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("get_serverinfo_result(");
        bool __first = true;
        if (Success != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class upload_result_args : TBase
    {

      [DataMember(Order = 0)]
      public string Session_id { get; set; }

      [DataMember(Order = 0)]
      public string Client_id { get; set; }

      [DataMember(Order = 0)]
      public string Machine_id { get; set; }

      [DataMember(Order = 0)]
      public THashSet<command_result> Results { get; set; }

      public upload_result_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Session_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Client_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Machine_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Set) {
                {
                  Results = new THashSet<command_result>();
                  TSet _set143 = iprot.ReadSetBegin();
                  for( int _i144 = 0; _i144 < _set143.Count; ++_i144)
                  {
                    command_result _elem145;
                    _elem145 = new command_result();
                    _elem145.Read(iprot);
                    Results.Add(_elem145);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upload_result_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Session_id != null) {
          field.Name = "session_id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Session_id);
          oprot.WriteFieldEnd();
        }
        if (Client_id != null) {
          field.Name = "client_id";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Client_id);
          oprot.WriteFieldEnd();
        }
        if (Machine_id != null) {
          field.Name = "machine_id";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Machine_id);
          oprot.WriteFieldEnd();
        }
        if (Results != null) {
          field.Name = "results";
          field.Type = TType.Set;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.Struct, Results.Count));
            foreach (command_result _iter146 in Results)
            {
              _iter146.Write(oprot);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upload_result_args(");
        bool __first = true;
        if (Session_id != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Session_id: ");
          __sb.Append(Session_id);
        }
        if (Client_id != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Client_id: ");
          __sb.Append(Client_id);
        }
        if (Machine_id != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Machine_id: ");
          __sb.Append(Machine_id);
        }
        if (Results != null) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Results: ");
          __sb.Append(Results);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class upload_result_result : TBase
    {

      public upload_result_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("upload_result_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("upload_result_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
