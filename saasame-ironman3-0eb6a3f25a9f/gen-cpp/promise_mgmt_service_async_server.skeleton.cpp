// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "promise_mgmt_service.h"
#include <thrift/protocol/TBinaryProtocol.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

using boost::shared_ptr;

using namespace  ::mwdc::ironman::mgmt;

class promise_mgmt_serviceAsyncHandler : public promise_mgmt_serviceCobSvIf {
 public:
  promise_mgmt_serviceAsyncHandler() {
    syncHandler_ = std::auto_ptr<promise_mgmt_serviceHandler>(new promise_mgmt_serviceHandler);
    // Your initialization goes here
  }
  virtual ~promise_mgmt_serviceAsyncHandler();

  void get_physical_client_info(tcxx::function<void(physical_client_info const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) {
    physical_client_info _return;
    syncHandler_->get_physical_client_info(_return, session_id, host, username, password);
    return cob(_return);
  }

  void get_virtual_host_info(tcxx::function<void(virtual_host const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) {
    virtual_host _return;
    syncHandler_->get_virtual_host_info(_return, session_id, host, username, password);
    return cob(_return);
  }

  void get_virtual_machine_detail(tcxx::function<void(virtual_machine const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) {
    virtual_machine _return;
    syncHandler_->get_virtual_machine_detail(_return, session_id, host, username, password, machine_id);
    return cob(_return);
  }

  void create_migration_job(tcxx::function<void(job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const create_job_detail& create_job) {
    job_detail _return;
    syncHandler_->create_migration_job(_return, session_id, create_job);
    return cob(_return);
  }

  void get_migration_job(tcxx::function<void(job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) {
    job_detail _return;
    syncHandler_->get_migration_job(_return, session_id, job_id);
    return cob(_return);
  }

  void interrupt_migration_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) {
    bool _return = false;
    _return = syncHandler_->interrupt_migration_job(session_id, job_id);
    return cob(_return);
  }

  void resume_migration_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) {
    bool _return = false;
    _return = syncHandler_->resume_migration_job(session_id, job_id);
    return cob(_return);
  }

  void remove_migration_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) {
    bool _return = false;
    _return = syncHandler_->remove_migration_job(session_id, job_id);
    return cob(_return);
  }

  void get_migration_jobs(tcxx::function<void(std::vector<job_detail>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id) {
    std::vector<job_detail>  _return;
    syncHandler_->get_migration_jobs(_return, session_id);
    return cob(_return);
  }

  void enumerate_disks(tcxx::function<void(std::set<disk_info>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const enumerate_disk_filter_style::type filter) {
    std::set<disk_info>  _return;
    syncHandler_->enumerate_disks(_return, filter);
    return cob(_return);
  }

  void prepare_disk(tcxx::function<void(std::string const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const int32_t disk_number) {
    std::string _return;
    syncHandler_->prepare_disk(_return, disk_number);
    return cob(_return);
  }

 protected:
  std::auto_ptr<promise_mgmt_serviceHandler> syncHandler_;
};

