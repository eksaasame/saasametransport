// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "message_switch.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::mwdc::ironman::remoting::thrift;

class message_switchHandler : virtual public message_switchIf {
 public:
  message_switchHandler() {
    // Your initialization goes here
  }

  void login(std::string& _return, const std::string& account, const std::string& password) {
    // Your implementation goes here
    printf("login\n");
  }

  void logout(const std::string& session_id) {
    // Your implementation goes here
    printf("logout\n");
  }

  void ping(std::set<command_request> & _return, const std::string& session_id, const std::string& client_id, const std::string& machine_id, const int32_t status) {
    // Your implementation goes here
    printf("ping\n");
  }

  void upload_info(std::set<command_request> & _return, const std::string& session_id, const std::string& client_id, const std::string& machine_id, const std::string& event_id, const client_info& client) {
    // Your implementation goes here
    printf("upload_info\n");
  }

  void get_serverinfo(std::set<server_info> & _return, const std::string& session_id) {
    // Your implementation goes here
    printf("get_serverinfo\n");
  }

  void upload_result(const std::string& session_id, const std::string& client_id, const std::string& machine_id, const std::set<command_result> & results) {
    // Your implementation goes here
    printf("upload_result\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<message_switchHandler> handler(new message_switchHandler());
  shared_ptr<TProcessor> processor(new message_switchProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

