// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#pragma once

#ifndef service_proxy_handler_H
#define service_proxy_handler_H

#include "service_proxy.h"
#include "common_service_handler.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::saasame::transport;

class physical_packer_service_proxy_handler : virtual public physical_packer_service_proxyIf {
public:
    physical_packer_service_proxy_handler() {
        // Your initialization goes here
    }
    void packer_ping_p(service_info& _return, const std::string& session_id, const std::string& addr);
    void take_snapshots_p(std::vector<snapshot> & _return, const std::string& session_id, const std::string& addr, const std::set<std::string> & disks);
    void take_snapshots_ex_p(std::vector<snapshot> & _return, const std::string& session_id, const std::string& addr, const std::set<std::string> & disks, const std::string& pre_script, const std::string& post_script);
    void take_snapshots2_p(std::vector<snapshot> & _return, const std::string& session_id, const std::string& addr, const take_snapshots_parameters& parameters);
    void delete_snapshot_p(delete_snapshot_result& _return, const std::string& session_id, const std::string& addr, const std::string& snapshot_id);
    void delete_snapshot_set_p(delete_snapshot_result& _return, const std::string& session_id, const std::string& addr, const std::string& snapshot_set_id);
    void get_all_snapshots_p(std::map<std::string, std::vector<snapshot> > & _return, const std::string& session_id, const std::string& addr);
    void create_packer_job_ex_p(packer_job_detail& _return, const std::string& session_id, const std::string& addr, const std::string& job_id, const create_packer_job_detail& create_job);
    void get_packer_job_p(packer_job_detail& _return, const std::string& session_id, const std::string& addr, const std::string& job_id, const std::string& previous_updated_time);
    bool interrupt_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id);
    bool resume_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id);
    bool remove_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id);
    bool running_packer_job_p(const std::string& session_id, const std::string& addr, const std::string& job_id);
    void enumerate_packer_disks_p(std::set<disk_info> & _return, const std::string& session_id, const std::string& addr, const enumerate_disk_filter_style::type filter);
    bool verify_packer_carrier_p(const std::string& session_id, const std::string& addr, const std::string& carrier, const bool is_ssl);
    void get_packer_host_detail_p(physical_machine_info& _return, const std::string& session_id, const std::string& addr, const machine_detail_filter::type filter);
};

class service_proxy_handler : virtual public physical_packer_service_proxy_handler, virtual public service_proxyIf {
public:
    service_proxy_handler() {
        // Your initialization goes here
    }

    void create_job_ex_p(job_detail& _return, const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
    void get_job_p(job_detail& _return, const std::string& session_id, const std::string& job_id, const std::string& service_type);
    bool interrupt_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
    bool resume_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
    bool remove_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
    bool running_job_p(const std::string& session_id, const std::string& job_id, const std::string& service_type);
    bool update_job_p(const std::string& session_id, const std::string& job_id, const create_job_detail& create_job, const std::string& service_type);
    bool remove_snapshot_image_p(const std::string& session_id, const std::map<std::string, image_map_info> & images, const std::string& service_type);
    bool test_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type);
    bool add_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type);
    bool remove_connection_p(const std::string& session_id, const std::string& connection_id, const std::string& service_type);
    bool modify_connection_p(const std::string& session_id, const connection& conn, const std::string& service_type);
    void enumerate_connections_p(std::vector<connection> & _return, const std::string& session_id, const std::string& service_type);
    void get_connection_p(connection& _return, const std::string& session_id, const std::string& connection_id, const std::string& service_type);
    void get_virtual_host_info_p(virtual_host& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
    void get_virtual_machine_detail_p(virtual_machine& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
    void get_virtual_hosts_p(std::vector<virtual_host> & _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
    bool power_off_virtual_machine_p(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
    bool remove_virtual_machine_p(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
    void get_virtual_machine_snapshots_p(std::vector<vmware_snapshot> & _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
    bool remove_virtual_machine_snapshot_p(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id, const std::string& snapshot_id);
    void get_datacenter_folder_list_p(std::vector<std::string> & _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& datacenter);
    void get_physical_machine_detail_p(physical_machine_info& _return, const std::string& session_id, const std::string& host, const machine_detail_filter::type filter);
    bool verify_packer_to_carrier_p(const std::string& packer, const std::string& carrier, const int32_t port, const bool is_ssl);
    void take_packer_xray_p(std::string& _return, const std::string& session_id, const std::string& host);
    void get_packer_service_info_p(service_info& _return, const std::string& session_id, const std::string& host);
    bool set_customized_id_p(const std::string& session_id, const std::string& disk_addr, const std::string& disk_id);
protected:
    bool is_ssl_enable();
};

#endif