/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef message_switch_H
#define message_switch_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/cxxfunctional.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include "IronMan_types.h"

namespace mwdc { namespace ironman { namespace remoting { namespace thrift {

class message_switchIf {
 public:
  virtual ~message_switchIf() {}
  virtual void login(std::string& _return, const std::string& account, const std::string& password) = 0;
  virtual void logout(const std::string& session_id) = 0;
  virtual void ping(std::set<command_request> & _return, const std::string& session_id, const std::string& client_id, const std::string& machine_id, const int32_t status) = 0;
  virtual void upload_info(std::set<command_request> & _return, const std::string& session_id, const std::string& client_id, const std::string& machine_id, const std::string& event_id, const client_info& client) = 0;
  virtual void get_serverinfo(std::set<server_info> & _return, const std::string& session_id) = 0;
  virtual void upload_result(const std::string& session_id, const std::string& client_id, const std::string& machine_id, const std::set<command_result> & results) = 0;
};

class message_switchIfFactory {
 public:
  typedef message_switchIf Handler;

  virtual ~message_switchIfFactory() {}

  virtual message_switchIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(message_switchIf* /* handler */) = 0;
};

class message_switchIfSingletonFactory : virtual public message_switchIfFactory {
 public:
  message_switchIfSingletonFactory(const boost::shared_ptr<message_switchIf>& iface) : iface_(iface) {}
  virtual ~message_switchIfSingletonFactory() {}

  virtual message_switchIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(message_switchIf* /* handler */) {}

 protected:
  boost::shared_ptr<message_switchIf> iface_;
};

class message_switchNull : virtual public message_switchIf {
 public:
  virtual ~message_switchNull() {}
  void login(std::string& /* _return */, const std::string& /* account */, const std::string& /* password */) {
    return;
  }
  void logout(const std::string& /* session_id */) {
    return;
  }
  void ping(std::set<command_request> & /* _return */, const std::string& /* session_id */, const std::string& /* client_id */, const std::string& /* machine_id */, const int32_t /* status */) {
    return;
  }
  void upload_info(std::set<command_request> & /* _return */, const std::string& /* session_id */, const std::string& /* client_id */, const std::string& /* machine_id */, const std::string& /* event_id */, const client_info& /* client */) {
    return;
  }
  void get_serverinfo(std::set<server_info> & /* _return */, const std::string& /* session_id */) {
    return;
  }
  void upload_result(const std::string& /* session_id */, const std::string& /* client_id */, const std::string& /* machine_id */, const std::set<command_result> & /* results */) {
    return;
  }
};

typedef struct _message_switch_login_args__isset {
  _message_switch_login_args__isset() : account(false), password(false) {}
  bool account :1;
  bool password :1;
} _message_switch_login_args__isset;

class message_switch_login_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  message_switch_login_args(const message_switch_login_args&);
  message_switch_login_args& operator=(const message_switch_login_args&);
  message_switch_login_args() : account(), password() {
  }

  virtual ~message_switch_login_args() throw();
  std::string account;
  std::string password;

  _message_switch_login_args__isset __isset;

  void __set_account(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const message_switch_login_args & rhs) const
  {
    if (!(account == rhs.account))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const message_switch_login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const message_switch_login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message_switch_login_args& obj);
};


class message_switch_login_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~message_switch_login_pargs() throw();
  const std::string* account;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message_switch_login_pargs& obj);
};

typedef struct _message_switch_login_result__isset {
  _message_switch_login_result__isset() : success(false) {}
  bool success :1;
} _message_switch_login_result__isset;

class message_switch_login_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  message_switch_login_result(const message_switch_login_result&);
  message_switch_login_result& operator=(const message_switch_login_result&);
  message_switch_login_result() : success() {
  }

  virtual ~message_switch_login_result() throw();
  std::string success;

  _message_switch_login_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const message_switch_login_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const message_switch_login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const message_switch_login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message_switch_login_result& obj);
};

typedef struct _message_switch_login_presult__isset {
  _message_switch_login_presult__isset() : success(false) {}
  bool success :1;
} _message_switch_login_presult__isset;

class message_switch_login_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~message_switch_login_presult() throw();
  std::string* success;

  _message_switch_login_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message_switch_login_presult& obj);
};

typedef struct _message_switch_logout_args__isset {
  _message_switch_logout_args__isset() : session_id(false) {}
  bool session_id :1;
} _message_switch_logout_args__isset;

class message_switch_logout_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  message_switch_logout_args(const message_switch_logout_args&);
  message_switch_logout_args& operator=(const message_switch_logout_args&);
  message_switch_logout_args() : session_id() {
  }

  virtual ~message_switch_logout_args() throw();
  std::string session_id;

  _message_switch_logout_args__isset __isset;

  void __set_session_id(const std::string& val);

  bool operator == (const message_switch_logout_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const message_switch_logout_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const message_switch_logout_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message_switch_logout_args& obj);
};


class message_switch_logout_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~message_switch_logout_pargs() throw();
  const std::string* session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message_switch_logout_pargs& obj);
};


class message_switch_logout_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  message_switch_logout_result(const message_switch_logout_result&);
  message_switch_logout_result& operator=(const message_switch_logout_result&);
  message_switch_logout_result() {
  }

  virtual ~message_switch_logout_result() throw();

  bool operator == (const message_switch_logout_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const message_switch_logout_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const message_switch_logout_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message_switch_logout_result& obj);
};


class message_switch_logout_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~message_switch_logout_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message_switch_logout_presult& obj);
};

typedef struct _message_switch_ping_args__isset {
  _message_switch_ping_args__isset() : session_id(false), client_id(false), machine_id(false), status(false) {}
  bool session_id :1;
  bool client_id :1;
  bool machine_id :1;
  bool status :1;
} _message_switch_ping_args__isset;

class message_switch_ping_args {
 public:

  static const char* ascii_fingerprint; // = "194A357BC9EE908DC4763D0A5147760A";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0x4A,0x35,0x7B,0xC9,0xEE,0x90,0x8D,0xC4,0x76,0x3D,0x0A,0x51,0x47,0x76,0x0A};

  message_switch_ping_args(const message_switch_ping_args&);
  message_switch_ping_args& operator=(const message_switch_ping_args&);
  message_switch_ping_args() : session_id(), client_id(), machine_id(), status(0) {
  }

  virtual ~message_switch_ping_args() throw();
  std::string session_id;
  std::string client_id;
  std::string machine_id;
  int32_t status;

  _message_switch_ping_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_client_id(const std::string& val);

  void __set_machine_id(const std::string& val);

  void __set_status(const int32_t val);

  bool operator == (const message_switch_ping_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(client_id == rhs.client_id))
      return false;
    if (!(machine_id == rhs.machine_id))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const message_switch_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const message_switch_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message_switch_ping_args& obj);
};


class message_switch_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "194A357BC9EE908DC4763D0A5147760A";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0x4A,0x35,0x7B,0xC9,0xEE,0x90,0x8D,0xC4,0x76,0x3D,0x0A,0x51,0x47,0x76,0x0A};


  virtual ~message_switch_ping_pargs() throw();
  const std::string* session_id;
  const std::string* client_id;
  const std::string* machine_id;
  const int32_t* status;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message_switch_ping_pargs& obj);
};

typedef struct _message_switch_ping_result__isset {
  _message_switch_ping_result__isset() : success(false) {}
  bool success :1;
} _message_switch_ping_result__isset;

class message_switch_ping_result {
 public:

  static const char* ascii_fingerprint; // = "AFE5DBAF52CBBC03125474378F693200";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xE5,0xDB,0xAF,0x52,0xCB,0xBC,0x03,0x12,0x54,0x74,0x37,0x8F,0x69,0x32,0x00};

  message_switch_ping_result(const message_switch_ping_result&);
  message_switch_ping_result& operator=(const message_switch_ping_result&);
  message_switch_ping_result() {
  }

  virtual ~message_switch_ping_result() throw();
  std::set<command_request>  success;

  _message_switch_ping_result__isset __isset;

  void __set_success(const std::set<command_request> & val);

  bool operator == (const message_switch_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const message_switch_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const message_switch_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message_switch_ping_result& obj);
};

typedef struct _message_switch_ping_presult__isset {
  _message_switch_ping_presult__isset() : success(false) {}
  bool success :1;
} _message_switch_ping_presult__isset;

class message_switch_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "AFE5DBAF52CBBC03125474378F693200";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xE5,0xDB,0xAF,0x52,0xCB,0xBC,0x03,0x12,0x54,0x74,0x37,0x8F,0x69,0x32,0x00};


  virtual ~message_switch_ping_presult() throw();
  std::set<command_request> * success;

  _message_switch_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message_switch_ping_presult& obj);
};

typedef struct _message_switch_upload_info_args__isset {
  _message_switch_upload_info_args__isset() : session_id(false), client_id(false), machine_id(false), event_id(false), client(false) {}
  bool session_id :1;
  bool client_id :1;
  bool machine_id :1;
  bool event_id :1;
  bool client :1;
} _message_switch_upload_info_args__isset;

class message_switch_upload_info_args {
 public:

  static const char* ascii_fingerprint; // = "2438811D4AFEFFC45FA80DC04E15623F";
  static const uint8_t binary_fingerprint[16]; // = {0x24,0x38,0x81,0x1D,0x4A,0xFE,0xFF,0xC4,0x5F,0xA8,0x0D,0xC0,0x4E,0x15,0x62,0x3F};

  message_switch_upload_info_args(const message_switch_upload_info_args&);
  message_switch_upload_info_args& operator=(const message_switch_upload_info_args&);
  message_switch_upload_info_args() : session_id(), client_id(), machine_id(), event_id() {
  }

  virtual ~message_switch_upload_info_args() throw();
  std::string session_id;
  std::string client_id;
  std::string machine_id;
  std::string event_id;
  client_info client;

  _message_switch_upload_info_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_client_id(const std::string& val);

  void __set_machine_id(const std::string& val);

  void __set_event_id(const std::string& val);

  void __set_client(const client_info& val);

  bool operator == (const message_switch_upload_info_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(client_id == rhs.client_id))
      return false;
    if (!(machine_id == rhs.machine_id))
      return false;
    if (!(event_id == rhs.event_id))
      return false;
    if (!(client == rhs.client))
      return false;
    return true;
  }
  bool operator != (const message_switch_upload_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const message_switch_upload_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message_switch_upload_info_args& obj);
};


class message_switch_upload_info_pargs {
 public:

  static const char* ascii_fingerprint; // = "2438811D4AFEFFC45FA80DC04E15623F";
  static const uint8_t binary_fingerprint[16]; // = {0x24,0x38,0x81,0x1D,0x4A,0xFE,0xFF,0xC4,0x5F,0xA8,0x0D,0xC0,0x4E,0x15,0x62,0x3F};


  virtual ~message_switch_upload_info_pargs() throw();
  const std::string* session_id;
  const std::string* client_id;
  const std::string* machine_id;
  const std::string* event_id;
  const client_info* client;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message_switch_upload_info_pargs& obj);
};

typedef struct _message_switch_upload_info_result__isset {
  _message_switch_upload_info_result__isset() : success(false) {}
  bool success :1;
} _message_switch_upload_info_result__isset;

class message_switch_upload_info_result {
 public:

  static const char* ascii_fingerprint; // = "AFE5DBAF52CBBC03125474378F693200";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xE5,0xDB,0xAF,0x52,0xCB,0xBC,0x03,0x12,0x54,0x74,0x37,0x8F,0x69,0x32,0x00};

  message_switch_upload_info_result(const message_switch_upload_info_result&);
  message_switch_upload_info_result& operator=(const message_switch_upload_info_result&);
  message_switch_upload_info_result() {
  }

  virtual ~message_switch_upload_info_result() throw();
  std::set<command_request>  success;

  _message_switch_upload_info_result__isset __isset;

  void __set_success(const std::set<command_request> & val);

  bool operator == (const message_switch_upload_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const message_switch_upload_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const message_switch_upload_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message_switch_upload_info_result& obj);
};

typedef struct _message_switch_upload_info_presult__isset {
  _message_switch_upload_info_presult__isset() : success(false) {}
  bool success :1;
} _message_switch_upload_info_presult__isset;

class message_switch_upload_info_presult {
 public:

  static const char* ascii_fingerprint; // = "AFE5DBAF52CBBC03125474378F693200";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xE5,0xDB,0xAF,0x52,0xCB,0xBC,0x03,0x12,0x54,0x74,0x37,0x8F,0x69,0x32,0x00};


  virtual ~message_switch_upload_info_presult() throw();
  std::set<command_request> * success;

  _message_switch_upload_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message_switch_upload_info_presult& obj);
};

typedef struct _message_switch_get_serverinfo_args__isset {
  _message_switch_get_serverinfo_args__isset() : session_id(false) {}
  bool session_id :1;
} _message_switch_get_serverinfo_args__isset;

class message_switch_get_serverinfo_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  message_switch_get_serverinfo_args(const message_switch_get_serverinfo_args&);
  message_switch_get_serverinfo_args& operator=(const message_switch_get_serverinfo_args&);
  message_switch_get_serverinfo_args() : session_id() {
  }

  virtual ~message_switch_get_serverinfo_args() throw();
  std::string session_id;

  _message_switch_get_serverinfo_args__isset __isset;

  void __set_session_id(const std::string& val);

  bool operator == (const message_switch_get_serverinfo_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const message_switch_get_serverinfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const message_switch_get_serverinfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message_switch_get_serverinfo_args& obj);
};


class message_switch_get_serverinfo_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~message_switch_get_serverinfo_pargs() throw();
  const std::string* session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message_switch_get_serverinfo_pargs& obj);
};

typedef struct _message_switch_get_serverinfo_result__isset {
  _message_switch_get_serverinfo_result__isset() : success(false) {}
  bool success :1;
} _message_switch_get_serverinfo_result__isset;

class message_switch_get_serverinfo_result {
 public:

  static const char* ascii_fingerprint; // = "4A819431C5DCC4F7D1018FB21E326D6B";
  static const uint8_t binary_fingerprint[16]; // = {0x4A,0x81,0x94,0x31,0xC5,0xDC,0xC4,0xF7,0xD1,0x01,0x8F,0xB2,0x1E,0x32,0x6D,0x6B};

  message_switch_get_serverinfo_result(const message_switch_get_serverinfo_result&);
  message_switch_get_serverinfo_result& operator=(const message_switch_get_serverinfo_result&);
  message_switch_get_serverinfo_result() {
  }

  virtual ~message_switch_get_serverinfo_result() throw();
  std::set<server_info>  success;

  _message_switch_get_serverinfo_result__isset __isset;

  void __set_success(const std::set<server_info> & val);

  bool operator == (const message_switch_get_serverinfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const message_switch_get_serverinfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const message_switch_get_serverinfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message_switch_get_serverinfo_result& obj);
};

typedef struct _message_switch_get_serverinfo_presult__isset {
  _message_switch_get_serverinfo_presult__isset() : success(false) {}
  bool success :1;
} _message_switch_get_serverinfo_presult__isset;

class message_switch_get_serverinfo_presult {
 public:

  static const char* ascii_fingerprint; // = "4A819431C5DCC4F7D1018FB21E326D6B";
  static const uint8_t binary_fingerprint[16]; // = {0x4A,0x81,0x94,0x31,0xC5,0xDC,0xC4,0xF7,0xD1,0x01,0x8F,0xB2,0x1E,0x32,0x6D,0x6B};


  virtual ~message_switch_get_serverinfo_presult() throw();
  std::set<server_info> * success;

  _message_switch_get_serverinfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message_switch_get_serverinfo_presult& obj);
};

typedef struct _message_switch_upload_result_args__isset {
  _message_switch_upload_result_args__isset() : session_id(false), client_id(false), machine_id(false), results(false) {}
  bool session_id :1;
  bool client_id :1;
  bool machine_id :1;
  bool results :1;
} _message_switch_upload_result_args__isset;

class message_switch_upload_result_args {
 public:

  static const char* ascii_fingerprint; // = "087FD4BAF342B7B3B4F224205D74470E";
  static const uint8_t binary_fingerprint[16]; // = {0x08,0x7F,0xD4,0xBA,0xF3,0x42,0xB7,0xB3,0xB4,0xF2,0x24,0x20,0x5D,0x74,0x47,0x0E};

  message_switch_upload_result_args(const message_switch_upload_result_args&);
  message_switch_upload_result_args& operator=(const message_switch_upload_result_args&);
  message_switch_upload_result_args() : session_id(), client_id(), machine_id() {
  }

  virtual ~message_switch_upload_result_args() throw();
  std::string session_id;
  std::string client_id;
  std::string machine_id;
  std::set<command_result>  results;

  _message_switch_upload_result_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_client_id(const std::string& val);

  void __set_machine_id(const std::string& val);

  void __set_results(const std::set<command_result> & val);

  bool operator == (const message_switch_upload_result_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(client_id == rhs.client_id))
      return false;
    if (!(machine_id == rhs.machine_id))
      return false;
    if (!(results == rhs.results))
      return false;
    return true;
  }
  bool operator != (const message_switch_upload_result_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const message_switch_upload_result_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message_switch_upload_result_args& obj);
};


class message_switch_upload_result_pargs {
 public:

  static const char* ascii_fingerprint; // = "087FD4BAF342B7B3B4F224205D74470E";
  static const uint8_t binary_fingerprint[16]; // = {0x08,0x7F,0xD4,0xBA,0xF3,0x42,0xB7,0xB3,0xB4,0xF2,0x24,0x20,0x5D,0x74,0x47,0x0E};


  virtual ~message_switch_upload_result_pargs() throw();
  const std::string* session_id;
  const std::string* client_id;
  const std::string* machine_id;
  const std::set<command_result> * results;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message_switch_upload_result_pargs& obj);
};


class message_switch_upload_result_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  message_switch_upload_result_result(const message_switch_upload_result_result&);
  message_switch_upload_result_result& operator=(const message_switch_upload_result_result&);
  message_switch_upload_result_result() {
  }

  virtual ~message_switch_upload_result_result() throw();

  bool operator == (const message_switch_upload_result_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const message_switch_upload_result_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const message_switch_upload_result_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message_switch_upload_result_result& obj);
};


class message_switch_upload_result_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~message_switch_upload_result_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message_switch_upload_result_presult& obj);
};

class message_switchClient : virtual public message_switchIf {
 public:
  message_switchClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  message_switchClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void login(std::string& _return, const std::string& account, const std::string& password);
  void send_login(const std::string& account, const std::string& password);
  void recv_login(std::string& _return);
  void logout(const std::string& session_id);
  void send_logout(const std::string& session_id);
  void recv_logout();
  void ping(std::set<command_request> & _return, const std::string& session_id, const std::string& client_id, const std::string& machine_id, const int32_t status);
  void send_ping(const std::string& session_id, const std::string& client_id, const std::string& machine_id, const int32_t status);
  void recv_ping(std::set<command_request> & _return);
  void upload_info(std::set<command_request> & _return, const std::string& session_id, const std::string& client_id, const std::string& machine_id, const std::string& event_id, const client_info& client);
  void send_upload_info(const std::string& session_id, const std::string& client_id, const std::string& machine_id, const std::string& event_id, const client_info& client);
  void recv_upload_info(std::set<command_request> & _return);
  void get_serverinfo(std::set<server_info> & _return, const std::string& session_id);
  void send_get_serverinfo(const std::string& session_id);
  void recv_get_serverinfo(std::set<server_info> & _return);
  void upload_result(const std::string& session_id, const std::string& client_id, const std::string& machine_id, const std::set<command_result> & results);
  void send_upload_result(const std::string& session_id, const std::string& client_id, const std::string& machine_id, const std::set<command_result> & results);
  void recv_upload_result();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class message_switchProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<message_switchIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (message_switchProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_login(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_logout(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_upload_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_serverinfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_upload_result(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  message_switchProcessor(boost::shared_ptr<message_switchIf> iface) :
    iface_(iface) {
    processMap_["login"] = &message_switchProcessor::process_login;
    processMap_["logout"] = &message_switchProcessor::process_logout;
    processMap_["ping"] = &message_switchProcessor::process_ping;
    processMap_["upload_info"] = &message_switchProcessor::process_upload_info;
    processMap_["get_serverinfo"] = &message_switchProcessor::process_get_serverinfo;
    processMap_["upload_result"] = &message_switchProcessor::process_upload_result;
  }

  virtual ~message_switchProcessor() {}
};

class message_switchProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  message_switchProcessorFactory(const ::boost::shared_ptr< message_switchIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< message_switchIfFactory > handlerFactory_;
};

class message_switchMultiface : virtual public message_switchIf {
 public:
  message_switchMultiface(std::vector<boost::shared_ptr<message_switchIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~message_switchMultiface() {}
 protected:
  std::vector<boost::shared_ptr<message_switchIf> > ifaces_;
  message_switchMultiface() {}
  void add(boost::shared_ptr<message_switchIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void login(std::string& _return, const std::string& account, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->login(_return, account, password);
    }
    ifaces_[i]->login(_return, account, password);
    return;
  }

  void logout(const std::string& session_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->logout(session_id);
    }
    ifaces_[i]->logout(session_id);
  }

  void ping(std::set<command_request> & _return, const std::string& session_id, const std::string& client_id, const std::string& machine_id, const int32_t status) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return, session_id, client_id, machine_id, status);
    }
    ifaces_[i]->ping(_return, session_id, client_id, machine_id, status);
    return;
  }

  void upload_info(std::set<command_request> & _return, const std::string& session_id, const std::string& client_id, const std::string& machine_id, const std::string& event_id, const client_info& client) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->upload_info(_return, session_id, client_id, machine_id, event_id, client);
    }
    ifaces_[i]->upload_info(_return, session_id, client_id, machine_id, event_id, client);
    return;
  }

  void get_serverinfo(std::set<server_info> & _return, const std::string& session_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_serverinfo(_return, session_id);
    }
    ifaces_[i]->get_serverinfo(_return, session_id);
    return;
  }

  void upload_result(const std::string& session_id, const std::string& client_id, const std::string& machine_id, const std::set<command_result> & results) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->upload_result(session_id, client_id, machine_id, results);
    }
    ifaces_[i]->upload_result(session_id, client_id, machine_id, results);
  }

};

class message_switchCobClient;

class message_switchCobClIf {
 public:
  virtual ~message_switchCobClIf() {}
  virtual void login(tcxx::function<void(message_switchCobClient* client)> cob, const std::string& account, const std::string& password) = 0;
  virtual void logout(tcxx::function<void(message_switchCobClient* client)> cob, const std::string& session_id) = 0;
  virtual void ping(tcxx::function<void(message_switchCobClient* client)> cob, const std::string& session_id, const std::string& client_id, const std::string& machine_id, const int32_t status) = 0;
  virtual void upload_info(tcxx::function<void(message_switchCobClient* client)> cob, const std::string& session_id, const std::string& client_id, const std::string& machine_id, const std::string& event_id, const client_info& client) = 0;
  virtual void get_serverinfo(tcxx::function<void(message_switchCobClient* client)> cob, const std::string& session_id) = 0;
  virtual void upload_result(tcxx::function<void(message_switchCobClient* client)> cob, const std::string& session_id, const std::string& client_id, const std::string& machine_id, const std::set<command_result> & results) = 0;
};

class message_switchCobSvIf {
 public:
  virtual ~message_switchCobSvIf() {}
  virtual void login(tcxx::function<void(std::string const& _return)> cob, const std::string& account, const std::string& password) = 0;
  virtual void logout(tcxx::function<void()> cob, const std::string& session_id) = 0;
  virtual void ping(tcxx::function<void(std::set<command_request>  const& _return)> cob, const std::string& session_id, const std::string& client_id, const std::string& machine_id, const int32_t status) = 0;
  virtual void upload_info(tcxx::function<void(std::set<command_request>  const& _return)> cob, const std::string& session_id, const std::string& client_id, const std::string& machine_id, const std::string& event_id, const client_info& client) = 0;
  virtual void get_serverinfo(tcxx::function<void(std::set<server_info>  const& _return)> cob, const std::string& session_id) = 0;
  virtual void upload_result(tcxx::function<void()> cob, const std::string& session_id, const std::string& client_id, const std::string& machine_id, const std::set<command_result> & results) = 0;
};

class message_switchCobSvIfFactory {
 public:
  typedef message_switchCobSvIf Handler;

  virtual ~message_switchCobSvIfFactory() {}

  virtual message_switchCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(message_switchCobSvIf* /* handler */) = 0;
};

class message_switchCobSvIfSingletonFactory : virtual public message_switchCobSvIfFactory {
 public:
  message_switchCobSvIfSingletonFactory(const boost::shared_ptr<message_switchCobSvIf>& iface) : iface_(iface) {}
  virtual ~message_switchCobSvIfSingletonFactory() {}

  virtual message_switchCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(message_switchCobSvIf* /* handler */) {}

 protected:
  boost::shared_ptr<message_switchCobSvIf> iface_;
};

class message_switchCobSvNull : virtual public message_switchCobSvIf {
 public:
  virtual ~message_switchCobSvNull() {}
  void login(tcxx::function<void(std::string const& _return)> cob, const std::string& /* account */, const std::string& /* password */) {
    std::string _return;
    return cob(_return);
  }
  void logout(tcxx::function<void()> cob, const std::string& /* session_id */) {
    return cob();
  }
  void ping(tcxx::function<void(std::set<command_request>  const& _return)> cob, const std::string& /* session_id */, const std::string& /* client_id */, const std::string& /* machine_id */, const int32_t /* status */) {
    std::set<command_request>  _return;
    return cob(_return);
  }
  void upload_info(tcxx::function<void(std::set<command_request>  const& _return)> cob, const std::string& /* session_id */, const std::string& /* client_id */, const std::string& /* machine_id */, const std::string& /* event_id */, const client_info& /* client */) {
    std::set<command_request>  _return;
    return cob(_return);
  }
  void get_serverinfo(tcxx::function<void(std::set<server_info>  const& _return)> cob, const std::string& /* session_id */) {
    std::set<server_info>  _return;
    return cob(_return);
  }
  void upload_result(tcxx::function<void()> cob, const std::string& /* session_id */, const std::string& /* client_id */, const std::string& /* machine_id */, const std::set<command_result> & /* results */) {
    return cob();
  }
};

class message_switchCobClient : virtual public message_switchCobClIf {
 public:
  message_switchCobClient(boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    channel_(channel),
    itrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    otrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    piprot_(protocolFactory->getProtocol(itrans_)),
    poprot_(protocolFactory->getProtocol(otrans_)) {
    iprot_ = piprot_.get();
    oprot_ = poprot_.get();
  }
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void login(tcxx::function<void(message_switchCobClient* client)> cob, const std::string& account, const std::string& password);
  void send_login(const std::string& account, const std::string& password);
  void recv_login(std::string& _return);
  void logout(tcxx::function<void(message_switchCobClient* client)> cob, const std::string& session_id);
  void send_logout(const std::string& session_id);
  void recv_logout();
  void ping(tcxx::function<void(message_switchCobClient* client)> cob, const std::string& session_id, const std::string& client_id, const std::string& machine_id, const int32_t status);
  void send_ping(const std::string& session_id, const std::string& client_id, const std::string& machine_id, const int32_t status);
  void recv_ping(std::set<command_request> & _return);
  void upload_info(tcxx::function<void(message_switchCobClient* client)> cob, const std::string& session_id, const std::string& client_id, const std::string& machine_id, const std::string& event_id, const client_info& client);
  void send_upload_info(const std::string& session_id, const std::string& client_id, const std::string& machine_id, const std::string& event_id, const client_info& client);
  void recv_upload_info(std::set<command_request> & _return);
  void get_serverinfo(tcxx::function<void(message_switchCobClient* client)> cob, const std::string& session_id);
  void send_get_serverinfo(const std::string& session_id);
  void recv_get_serverinfo(std::set<server_info> & _return);
  void upload_result(tcxx::function<void(message_switchCobClient* client)> cob, const std::string& session_id, const std::string& client_id, const std::string& machine_id, const std::set<command_result> & results);
  void send_upload_result(const std::string& session_id, const std::string& client_id, const std::string& machine_id, const std::set<command_result> & results);
  void recv_upload_result();
 protected:
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> itrans_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> otrans_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class message_switchAsyncProcessor : public ::apache::thrift::async::TAsyncDispatchProcessor {
 protected:
  boost::shared_ptr<message_switchCobSvIf> iface_;
  virtual void dispatchCall(tcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (message_switchAsyncProcessor::*ProcessFunction)(tcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_login(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_login(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::string& _return);
  void throw_login(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_logout(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_logout(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx);
  void throw_logout(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_ping(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_ping(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::set<command_request> & _return);
  void throw_ping(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_upload_info(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_upload_info(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::set<command_request> & _return);
  void throw_upload_info(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_serverinfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_serverinfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::set<server_info> & _return);
  void throw_get_serverinfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_upload_result(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_upload_result(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx);
  void throw_upload_result(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  message_switchAsyncProcessor(boost::shared_ptr<message_switchCobSvIf> iface) :
    iface_(iface) {
    processMap_["login"] = &message_switchAsyncProcessor::process_login;
    processMap_["logout"] = &message_switchAsyncProcessor::process_logout;
    processMap_["ping"] = &message_switchAsyncProcessor::process_ping;
    processMap_["upload_info"] = &message_switchAsyncProcessor::process_upload_info;
    processMap_["get_serverinfo"] = &message_switchAsyncProcessor::process_get_serverinfo;
    processMap_["upload_result"] = &message_switchAsyncProcessor::process_upload_result;
  }

  virtual ~message_switchAsyncProcessor() {}
};

class message_switchAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  message_switchAsyncProcessorFactory(const ::boost::shared_ptr< message_switchCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< message_switchCobSvIfFactory > handlerFactory_;
};

}}}} // namespace

#endif
