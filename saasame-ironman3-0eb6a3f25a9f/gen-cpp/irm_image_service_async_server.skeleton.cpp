// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "irm_image_service.h"
#include <thrift/protocol/TBinaryProtocol.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

using boost::shared_ptr;

using namespace  ::mwdc::ironman::image_op;

class irm_image_serviceAsyncHandler : public irm_image_serviceCobSvIf {
 public:
  irm_image_serviceAsyncHandler() {
    syncHandler_ = std::auto_ptr<irm_image_serviceHandler>(new irm_image_serviceHandler);
    // Your initialization goes here
  }
  virtual ~irm_image_serviceAsyncHandler();

  void copy_vmdk_to_vhdx(tcxx::function<void()> cob, const std::string& job_id, const std::string& host, const std::string& username, const std::string& password, const vmdk_to_other_image_req_args& req_args) {
    syncHandler_->copy_vmdk_to_vhdx(job_id, host, username, password, req_args);
    return cob();
  }

  void copy_vmdk_to_transport(tcxx::function<void()> cob, const std::string& job_id, const std::string& host, const std::string& username, const std::string& password, const vmdk_to_other_image_req_args& req_args) {
    syncHandler_->copy_vmdk_to_transport(job_id, host, username, password, req_args);
    return cob();
  }

  void get_status(tcxx::function<void(op_status const& _return)> cob, const std::string& job_id) {
    op_status _return;
    syncHandler_->get_status(_return, job_id);
    return cob(_return);
  }

  void interrupt(tcxx::function<void(bool const& _return)> cob) {
    bool _return = false;
    _return = syncHandler_->interrupt();
    return cob(_return);
  }

 protected:
  std::auto_ptr<irm_image_serviceHandler> syncHandler_;
};

