// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "management_service.h"
#include <thrift/protocol/TBinaryProtocol.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

using namespace  ::saasame::transport;

class management_serviceAsyncHandler : public management_serviceCobSvIf {
 public:
  management_serviceAsyncHandler() {
    syncHandler_ = std::auto_ptr<management_serviceHandler>(new management_serviceHandler);
    // Your initialization goes here
  }
  virtual ~management_serviceAsyncHandler();

  void get_replica_job_create_detail(::apache::thrift::stdcxx::function<void(replica_job_create_detail const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) {
    replica_job_create_detail _return;
    syncHandler_->get_replica_job_create_detail(_return, session_id, job_id);
    return cob(_return);
  }

  void update_replica_job_state(::apache::thrift::stdcxx::function<void()> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const replica_job_detail& state) {
    syncHandler_->update_replica_job_state(session_id, state);
    return cob();
  }

  void is_replica_job_alive(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) {
    bool _return = false;
    _return = syncHandler_->is_replica_job_alive(session_id, job_id);
    return cob(_return);
  }

  void get_loader_job_create_detail(::apache::thrift::stdcxx::function<void(loader_job_create_detail const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) {
    loader_job_create_detail _return;
    syncHandler_->get_loader_job_create_detail(_return, session_id, job_id);
    return cob(_return);
  }

  void update_loader_job_state(::apache::thrift::stdcxx::function<void()> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const loader_job_detail& state) {
    syncHandler_->update_loader_job_state(session_id, state);
    return cob();
  }

  void take_snapshots(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& snapshot_id) {
    bool _return = false;
    _return = syncHandler_->take_snapshots(session_id, snapshot_id);
    return cob(_return);
  }

  void check_snapshots(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& snapshots_id) {
    bool _return = false;
    _return = syncHandler_->check_snapshots(session_id, snapshots_id);
    return cob(_return);
  }

  void get_launcher_job_create_detail(::apache::thrift::stdcxx::function<void(launcher_job_create_detail const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) {
    launcher_job_create_detail _return;
    syncHandler_->get_launcher_job_create_detail(_return, session_id, job_id);
    return cob(_return);
  }

  void update_launcher_job_state(::apache::thrift::stdcxx::function<void()> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const launcher_job_detail& state) {
    syncHandler_->update_launcher_job_state(session_id, state);
    return cob();
  }

  void update_launcher_job_state_ex(::apache::thrift::stdcxx::function<void()> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const launcher_job_detail& state) {
    syncHandler_->update_launcher_job_state_ex(session_id, state);
    return cob();
  }

  void is_launcher_job_image_ready(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) {
    bool _return = false;
    _return = syncHandler_->is_launcher_job_image_ready(session_id, job_id);
    return cob(_return);
  }

  void is_loader_job_devices_ready(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) {
    bool _return = false;
    _return = syncHandler_->is_loader_job_devices_ready(session_id, job_id);
    return cob(_return);
  }

  void mount_loader_job_devices(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) {
    bool _return = false;
    _return = syncHandler_->mount_loader_job_devices(session_id, job_id);
    return cob(_return);
  }

  void dismount_loader_job_devices(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) {
    bool _return = false;
    _return = syncHandler_->dismount_loader_job_devices(session_id, job_id);
    return cob(_return);
  }

  void discard_snapshots(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& snapshots_id) {
    bool _return = false;
    _return = syncHandler_->discard_snapshots(session_id, snapshots_id);
    return cob(_return);
  }

  void register_service(::apache::thrift::stdcxx::function<void(register_return const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const register_service_info& register_info, const physical_machine_info& machine_info) {
    register_return _return;
    syncHandler_->register_service(_return, session_id, register_info, machine_info);
    return cob(_return);
  }

  void register_physical_packer(::apache::thrift::stdcxx::function<void(register_return const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const register_physical_packer_info& packer_info, const physical_machine_info& machine_info) {
    register_return _return;
    syncHandler_->register_physical_packer(_return, session_id, packer_info, machine_info);
    return cob(_return);
  }

  void check_running_task(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, ::apache::thrift::stdcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& task_id, const std::string& parameters) {
    bool _return = false;
    _return = syncHandler_->check_running_task(task_id, parameters);
    return cob(_return);
  }

  void ping(::apache::thrift::stdcxx::function<void(service_info const& _return)> cob) {
    service_info _return;
    syncHandler_->ping(_return);
    return cob(_return);
  }

 protected:
  std::auto_ptr<management_serviceHandler> syncHandler_;
};

