/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef promise_mgmt_service_H
#define promise_mgmt_service_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/cxxfunctional.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "promise_mgmt_types.h"

namespace mwdc { namespace ironman { namespace mgmt {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class promise_mgmt_serviceIf {
 public:
  virtual ~promise_mgmt_serviceIf() {}
  virtual void get_physical_client_info(physical_client_info& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) = 0;
  virtual void get_virtual_host_info(virtual_host& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) = 0;
  virtual void get_virtual_machine_detail(virtual_machine& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) = 0;
  virtual void create_migration_job(job_detail& _return, const std::string& session_id, const create_job_detail& create_job) = 0;
  virtual void get_migration_job(job_detail& _return, const std::string& session_id, const std::string& job_id) = 0;
  virtual bool interrupt_migration_job(const std::string& session_id, const std::string& job_id) = 0;
  virtual bool resume_migration_job(const std::string& session_id, const std::string& job_id) = 0;
  virtual bool remove_migration_job(const std::string& session_id, const std::string& job_id) = 0;
  virtual void get_migration_jobs(std::vector<job_detail> & _return, const std::string& session_id) = 0;
  virtual void enumerate_disks(std::set<disk_info> & _return, const enumerate_disk_filter_style::type filter) = 0;
  virtual void prepare_disk(std::string& _return, const int32_t disk_number) = 0;
};

class promise_mgmt_serviceIfFactory {
 public:
  typedef promise_mgmt_serviceIf Handler;

  virtual ~promise_mgmt_serviceIfFactory() {}

  virtual promise_mgmt_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(promise_mgmt_serviceIf* /* handler */) = 0;
};

class promise_mgmt_serviceIfSingletonFactory : virtual public promise_mgmt_serviceIfFactory {
 public:
  promise_mgmt_serviceIfSingletonFactory(const boost::shared_ptr<promise_mgmt_serviceIf>& iface) : iface_(iface) {}
  virtual ~promise_mgmt_serviceIfSingletonFactory() {}

  virtual promise_mgmt_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(promise_mgmt_serviceIf* /* handler */) {}

 protected:
  boost::shared_ptr<promise_mgmt_serviceIf> iface_;
};

class promise_mgmt_serviceNull : virtual public promise_mgmt_serviceIf {
 public:
  virtual ~promise_mgmt_serviceNull() {}
  void get_physical_client_info(physical_client_info& /* _return */, const std::string& /* session_id */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */) {
    return;
  }
  void get_virtual_host_info(virtual_host& /* _return */, const std::string& /* session_id */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */) {
    return;
  }
  void get_virtual_machine_detail(virtual_machine& /* _return */, const std::string& /* session_id */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */, const std::string& /* machine_id */) {
    return;
  }
  void create_migration_job(job_detail& /* _return */, const std::string& /* session_id */, const create_job_detail& /* create_job */) {
    return;
  }
  void get_migration_job(job_detail& /* _return */, const std::string& /* session_id */, const std::string& /* job_id */) {
    return;
  }
  bool interrupt_migration_job(const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
  bool resume_migration_job(const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
  bool remove_migration_job(const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return _return;
  }
  void get_migration_jobs(std::vector<job_detail> & /* _return */, const std::string& /* session_id */) {
    return;
  }
  void enumerate_disks(std::set<disk_info> & /* _return */, const enumerate_disk_filter_style::type /* filter */) {
    return;
  }
  void prepare_disk(std::string& /* _return */, const int32_t /* disk_number */) {
    return;
  }
};

typedef struct _promise_mgmt_service_get_physical_client_info_args__isset {
  _promise_mgmt_service_get_physical_client_info_args__isset() : session_id(false), host(false), username(false), password(false) {}
  bool session_id :1;
  bool host :1;
  bool username :1;
  bool password :1;
} _promise_mgmt_service_get_physical_client_info_args__isset;

class promise_mgmt_service_get_physical_client_info_args {
 public:

  promise_mgmt_service_get_physical_client_info_args(const promise_mgmt_service_get_physical_client_info_args&);
  promise_mgmt_service_get_physical_client_info_args& operator=(const promise_mgmt_service_get_physical_client_info_args&);
  promise_mgmt_service_get_physical_client_info_args() : session_id(), host(), username(), password() {
  }

  virtual ~promise_mgmt_service_get_physical_client_info_args() throw();
  std::string session_id;
  std::string host;
  std::string username;
  std::string password;

  _promise_mgmt_service_get_physical_client_info_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_host(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const promise_mgmt_service_get_physical_client_info_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const promise_mgmt_service_get_physical_client_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const promise_mgmt_service_get_physical_client_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class promise_mgmt_service_get_physical_client_info_pargs {
 public:


  virtual ~promise_mgmt_service_get_physical_client_info_pargs() throw();
  const std::string* session_id;
  const std::string* host;
  const std::string* username;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_get_physical_client_info_result__isset {
  _promise_mgmt_service_get_physical_client_info_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _promise_mgmt_service_get_physical_client_info_result__isset;

class promise_mgmt_service_get_physical_client_info_result {
 public:

  promise_mgmt_service_get_physical_client_info_result(const promise_mgmt_service_get_physical_client_info_result&);
  promise_mgmt_service_get_physical_client_info_result& operator=(const promise_mgmt_service_get_physical_client_info_result&);
  promise_mgmt_service_get_physical_client_info_result() {
  }

  virtual ~promise_mgmt_service_get_physical_client_info_result() throw();
  physical_client_info success;
  invalid_operation ouch;

  _promise_mgmt_service_get_physical_client_info_result__isset __isset;

  void __set_success(const physical_client_info& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const promise_mgmt_service_get_physical_client_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const promise_mgmt_service_get_physical_client_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const promise_mgmt_service_get_physical_client_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_get_physical_client_info_presult__isset {
  _promise_mgmt_service_get_physical_client_info_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _promise_mgmt_service_get_physical_client_info_presult__isset;

class promise_mgmt_service_get_physical_client_info_presult {
 public:


  virtual ~promise_mgmt_service_get_physical_client_info_presult() throw();
  physical_client_info* success;
  invalid_operation ouch;

  _promise_mgmt_service_get_physical_client_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_get_virtual_host_info_args__isset {
  _promise_mgmt_service_get_virtual_host_info_args__isset() : session_id(false), host(false), username(false), password(false) {}
  bool session_id :1;
  bool host :1;
  bool username :1;
  bool password :1;
} _promise_mgmt_service_get_virtual_host_info_args__isset;

class promise_mgmt_service_get_virtual_host_info_args {
 public:

  promise_mgmt_service_get_virtual_host_info_args(const promise_mgmt_service_get_virtual_host_info_args&);
  promise_mgmt_service_get_virtual_host_info_args& operator=(const promise_mgmt_service_get_virtual_host_info_args&);
  promise_mgmt_service_get_virtual_host_info_args() : session_id(), host(), username(), password() {
  }

  virtual ~promise_mgmt_service_get_virtual_host_info_args() throw();
  std::string session_id;
  std::string host;
  std::string username;
  std::string password;

  _promise_mgmt_service_get_virtual_host_info_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_host(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const promise_mgmt_service_get_virtual_host_info_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const promise_mgmt_service_get_virtual_host_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const promise_mgmt_service_get_virtual_host_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class promise_mgmt_service_get_virtual_host_info_pargs {
 public:


  virtual ~promise_mgmt_service_get_virtual_host_info_pargs() throw();
  const std::string* session_id;
  const std::string* host;
  const std::string* username;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_get_virtual_host_info_result__isset {
  _promise_mgmt_service_get_virtual_host_info_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _promise_mgmt_service_get_virtual_host_info_result__isset;

class promise_mgmt_service_get_virtual_host_info_result {
 public:

  promise_mgmt_service_get_virtual_host_info_result(const promise_mgmt_service_get_virtual_host_info_result&);
  promise_mgmt_service_get_virtual_host_info_result& operator=(const promise_mgmt_service_get_virtual_host_info_result&);
  promise_mgmt_service_get_virtual_host_info_result() {
  }

  virtual ~promise_mgmt_service_get_virtual_host_info_result() throw();
  virtual_host success;
  invalid_operation ouch;

  _promise_mgmt_service_get_virtual_host_info_result__isset __isset;

  void __set_success(const virtual_host& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const promise_mgmt_service_get_virtual_host_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const promise_mgmt_service_get_virtual_host_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const promise_mgmt_service_get_virtual_host_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_get_virtual_host_info_presult__isset {
  _promise_mgmt_service_get_virtual_host_info_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _promise_mgmt_service_get_virtual_host_info_presult__isset;

class promise_mgmt_service_get_virtual_host_info_presult {
 public:


  virtual ~promise_mgmt_service_get_virtual_host_info_presult() throw();
  virtual_host* success;
  invalid_operation ouch;

  _promise_mgmt_service_get_virtual_host_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_get_virtual_machine_detail_args__isset {
  _promise_mgmt_service_get_virtual_machine_detail_args__isset() : session_id(false), host(false), username(false), password(false), machine_id(false) {}
  bool session_id :1;
  bool host :1;
  bool username :1;
  bool password :1;
  bool machine_id :1;
} _promise_mgmt_service_get_virtual_machine_detail_args__isset;

class promise_mgmt_service_get_virtual_machine_detail_args {
 public:

  promise_mgmt_service_get_virtual_machine_detail_args(const promise_mgmt_service_get_virtual_machine_detail_args&);
  promise_mgmt_service_get_virtual_machine_detail_args& operator=(const promise_mgmt_service_get_virtual_machine_detail_args&);
  promise_mgmt_service_get_virtual_machine_detail_args() : session_id(), host(), username(), password(), machine_id() {
  }

  virtual ~promise_mgmt_service_get_virtual_machine_detail_args() throw();
  std::string session_id;
  std::string host;
  std::string username;
  std::string password;
  std::string machine_id;

  _promise_mgmt_service_get_virtual_machine_detail_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_host(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  void __set_machine_id(const std::string& val);

  bool operator == (const promise_mgmt_service_get_virtual_machine_detail_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(machine_id == rhs.machine_id))
      return false;
    return true;
  }
  bool operator != (const promise_mgmt_service_get_virtual_machine_detail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const promise_mgmt_service_get_virtual_machine_detail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class promise_mgmt_service_get_virtual_machine_detail_pargs {
 public:


  virtual ~promise_mgmt_service_get_virtual_machine_detail_pargs() throw();
  const std::string* session_id;
  const std::string* host;
  const std::string* username;
  const std::string* password;
  const std::string* machine_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_get_virtual_machine_detail_result__isset {
  _promise_mgmt_service_get_virtual_machine_detail_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _promise_mgmt_service_get_virtual_machine_detail_result__isset;

class promise_mgmt_service_get_virtual_machine_detail_result {
 public:

  promise_mgmt_service_get_virtual_machine_detail_result(const promise_mgmt_service_get_virtual_machine_detail_result&);
  promise_mgmt_service_get_virtual_machine_detail_result& operator=(const promise_mgmt_service_get_virtual_machine_detail_result&);
  promise_mgmt_service_get_virtual_machine_detail_result() {
  }

  virtual ~promise_mgmt_service_get_virtual_machine_detail_result() throw();
  virtual_machine success;
  invalid_operation ouch;

  _promise_mgmt_service_get_virtual_machine_detail_result__isset __isset;

  void __set_success(const virtual_machine& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const promise_mgmt_service_get_virtual_machine_detail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const promise_mgmt_service_get_virtual_machine_detail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const promise_mgmt_service_get_virtual_machine_detail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_get_virtual_machine_detail_presult__isset {
  _promise_mgmt_service_get_virtual_machine_detail_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _promise_mgmt_service_get_virtual_machine_detail_presult__isset;

class promise_mgmt_service_get_virtual_machine_detail_presult {
 public:


  virtual ~promise_mgmt_service_get_virtual_machine_detail_presult() throw();
  virtual_machine* success;
  invalid_operation ouch;

  _promise_mgmt_service_get_virtual_machine_detail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_create_migration_job_args__isset {
  _promise_mgmt_service_create_migration_job_args__isset() : session_id(false), create_job(false) {}
  bool session_id :1;
  bool create_job :1;
} _promise_mgmt_service_create_migration_job_args__isset;

class promise_mgmt_service_create_migration_job_args {
 public:

  promise_mgmt_service_create_migration_job_args(const promise_mgmt_service_create_migration_job_args&);
  promise_mgmt_service_create_migration_job_args& operator=(const promise_mgmt_service_create_migration_job_args&);
  promise_mgmt_service_create_migration_job_args() : session_id() {
  }

  virtual ~promise_mgmt_service_create_migration_job_args() throw();
  std::string session_id;
  create_job_detail create_job;

  _promise_mgmt_service_create_migration_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_create_job(const create_job_detail& val);

  bool operator == (const promise_mgmt_service_create_migration_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(create_job == rhs.create_job))
      return false;
    return true;
  }
  bool operator != (const promise_mgmt_service_create_migration_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const promise_mgmt_service_create_migration_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class promise_mgmt_service_create_migration_job_pargs {
 public:


  virtual ~promise_mgmt_service_create_migration_job_pargs() throw();
  const std::string* session_id;
  const create_job_detail* create_job;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_create_migration_job_result__isset {
  _promise_mgmt_service_create_migration_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _promise_mgmt_service_create_migration_job_result__isset;

class promise_mgmt_service_create_migration_job_result {
 public:

  promise_mgmt_service_create_migration_job_result(const promise_mgmt_service_create_migration_job_result&);
  promise_mgmt_service_create_migration_job_result& operator=(const promise_mgmt_service_create_migration_job_result&);
  promise_mgmt_service_create_migration_job_result() {
  }

  virtual ~promise_mgmt_service_create_migration_job_result() throw();
  job_detail success;
  invalid_operation ouch;

  _promise_mgmt_service_create_migration_job_result__isset __isset;

  void __set_success(const job_detail& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const promise_mgmt_service_create_migration_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const promise_mgmt_service_create_migration_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const promise_mgmt_service_create_migration_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_create_migration_job_presult__isset {
  _promise_mgmt_service_create_migration_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _promise_mgmt_service_create_migration_job_presult__isset;

class promise_mgmt_service_create_migration_job_presult {
 public:


  virtual ~promise_mgmt_service_create_migration_job_presult() throw();
  job_detail* success;
  invalid_operation ouch;

  _promise_mgmt_service_create_migration_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_get_migration_job_args__isset {
  _promise_mgmt_service_get_migration_job_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _promise_mgmt_service_get_migration_job_args__isset;

class promise_mgmt_service_get_migration_job_args {
 public:

  promise_mgmt_service_get_migration_job_args(const promise_mgmt_service_get_migration_job_args&);
  promise_mgmt_service_get_migration_job_args& operator=(const promise_mgmt_service_get_migration_job_args&);
  promise_mgmt_service_get_migration_job_args() : session_id(), job_id() {
  }

  virtual ~promise_mgmt_service_get_migration_job_args() throw();
  std::string session_id;
  std::string job_id;

  _promise_mgmt_service_get_migration_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const promise_mgmt_service_get_migration_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const promise_mgmt_service_get_migration_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const promise_mgmt_service_get_migration_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class promise_mgmt_service_get_migration_job_pargs {
 public:


  virtual ~promise_mgmt_service_get_migration_job_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_get_migration_job_result__isset {
  _promise_mgmt_service_get_migration_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _promise_mgmt_service_get_migration_job_result__isset;

class promise_mgmt_service_get_migration_job_result {
 public:

  promise_mgmt_service_get_migration_job_result(const promise_mgmt_service_get_migration_job_result&);
  promise_mgmt_service_get_migration_job_result& operator=(const promise_mgmt_service_get_migration_job_result&);
  promise_mgmt_service_get_migration_job_result() {
  }

  virtual ~promise_mgmt_service_get_migration_job_result() throw();
  job_detail success;
  invalid_operation ouch;

  _promise_mgmt_service_get_migration_job_result__isset __isset;

  void __set_success(const job_detail& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const promise_mgmt_service_get_migration_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const promise_mgmt_service_get_migration_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const promise_mgmt_service_get_migration_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_get_migration_job_presult__isset {
  _promise_mgmt_service_get_migration_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _promise_mgmt_service_get_migration_job_presult__isset;

class promise_mgmt_service_get_migration_job_presult {
 public:


  virtual ~promise_mgmt_service_get_migration_job_presult() throw();
  job_detail* success;
  invalid_operation ouch;

  _promise_mgmt_service_get_migration_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_interrupt_migration_job_args__isset {
  _promise_mgmt_service_interrupt_migration_job_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _promise_mgmt_service_interrupt_migration_job_args__isset;

class promise_mgmt_service_interrupt_migration_job_args {
 public:

  promise_mgmt_service_interrupt_migration_job_args(const promise_mgmt_service_interrupt_migration_job_args&);
  promise_mgmt_service_interrupt_migration_job_args& operator=(const promise_mgmt_service_interrupt_migration_job_args&);
  promise_mgmt_service_interrupt_migration_job_args() : session_id(), job_id() {
  }

  virtual ~promise_mgmt_service_interrupt_migration_job_args() throw();
  std::string session_id;
  std::string job_id;

  _promise_mgmt_service_interrupt_migration_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const promise_mgmt_service_interrupt_migration_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const promise_mgmt_service_interrupt_migration_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const promise_mgmt_service_interrupt_migration_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class promise_mgmt_service_interrupt_migration_job_pargs {
 public:


  virtual ~promise_mgmt_service_interrupt_migration_job_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_interrupt_migration_job_result__isset {
  _promise_mgmt_service_interrupt_migration_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _promise_mgmt_service_interrupt_migration_job_result__isset;

class promise_mgmt_service_interrupt_migration_job_result {
 public:

  promise_mgmt_service_interrupt_migration_job_result(const promise_mgmt_service_interrupt_migration_job_result&);
  promise_mgmt_service_interrupt_migration_job_result& operator=(const promise_mgmt_service_interrupt_migration_job_result&);
  promise_mgmt_service_interrupt_migration_job_result() : success(0) {
  }

  virtual ~promise_mgmt_service_interrupt_migration_job_result() throw();
  bool success;
  invalid_operation ouch;

  _promise_mgmt_service_interrupt_migration_job_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const promise_mgmt_service_interrupt_migration_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const promise_mgmt_service_interrupt_migration_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const promise_mgmt_service_interrupt_migration_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_interrupt_migration_job_presult__isset {
  _promise_mgmt_service_interrupt_migration_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _promise_mgmt_service_interrupt_migration_job_presult__isset;

class promise_mgmt_service_interrupt_migration_job_presult {
 public:


  virtual ~promise_mgmt_service_interrupt_migration_job_presult() throw();
  bool* success;
  invalid_operation ouch;

  _promise_mgmt_service_interrupt_migration_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_resume_migration_job_args__isset {
  _promise_mgmt_service_resume_migration_job_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _promise_mgmt_service_resume_migration_job_args__isset;

class promise_mgmt_service_resume_migration_job_args {
 public:

  promise_mgmt_service_resume_migration_job_args(const promise_mgmt_service_resume_migration_job_args&);
  promise_mgmt_service_resume_migration_job_args& operator=(const promise_mgmt_service_resume_migration_job_args&);
  promise_mgmt_service_resume_migration_job_args() : session_id(), job_id() {
  }

  virtual ~promise_mgmt_service_resume_migration_job_args() throw();
  std::string session_id;
  std::string job_id;

  _promise_mgmt_service_resume_migration_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const promise_mgmt_service_resume_migration_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const promise_mgmt_service_resume_migration_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const promise_mgmt_service_resume_migration_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class promise_mgmt_service_resume_migration_job_pargs {
 public:


  virtual ~promise_mgmt_service_resume_migration_job_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_resume_migration_job_result__isset {
  _promise_mgmt_service_resume_migration_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _promise_mgmt_service_resume_migration_job_result__isset;

class promise_mgmt_service_resume_migration_job_result {
 public:

  promise_mgmt_service_resume_migration_job_result(const promise_mgmt_service_resume_migration_job_result&);
  promise_mgmt_service_resume_migration_job_result& operator=(const promise_mgmt_service_resume_migration_job_result&);
  promise_mgmt_service_resume_migration_job_result() : success(0) {
  }

  virtual ~promise_mgmt_service_resume_migration_job_result() throw();
  bool success;
  invalid_operation ouch;

  _promise_mgmt_service_resume_migration_job_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const promise_mgmt_service_resume_migration_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const promise_mgmt_service_resume_migration_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const promise_mgmt_service_resume_migration_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_resume_migration_job_presult__isset {
  _promise_mgmt_service_resume_migration_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _promise_mgmt_service_resume_migration_job_presult__isset;

class promise_mgmt_service_resume_migration_job_presult {
 public:


  virtual ~promise_mgmt_service_resume_migration_job_presult() throw();
  bool* success;
  invalid_operation ouch;

  _promise_mgmt_service_resume_migration_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_remove_migration_job_args__isset {
  _promise_mgmt_service_remove_migration_job_args__isset() : session_id(false), job_id(false) {}
  bool session_id :1;
  bool job_id :1;
} _promise_mgmt_service_remove_migration_job_args__isset;

class promise_mgmt_service_remove_migration_job_args {
 public:

  promise_mgmt_service_remove_migration_job_args(const promise_mgmt_service_remove_migration_job_args&);
  promise_mgmt_service_remove_migration_job_args& operator=(const promise_mgmt_service_remove_migration_job_args&);
  promise_mgmt_service_remove_migration_job_args() : session_id(), job_id() {
  }

  virtual ~promise_mgmt_service_remove_migration_job_args() throw();
  std::string session_id;
  std::string job_id;

  _promise_mgmt_service_remove_migration_job_args__isset __isset;

  void __set_session_id(const std::string& val);

  void __set_job_id(const std::string& val);

  bool operator == (const promise_mgmt_service_remove_migration_job_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const promise_mgmt_service_remove_migration_job_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const promise_mgmt_service_remove_migration_job_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class promise_mgmt_service_remove_migration_job_pargs {
 public:


  virtual ~promise_mgmt_service_remove_migration_job_pargs() throw();
  const std::string* session_id;
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_remove_migration_job_result__isset {
  _promise_mgmt_service_remove_migration_job_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _promise_mgmt_service_remove_migration_job_result__isset;

class promise_mgmt_service_remove_migration_job_result {
 public:

  promise_mgmt_service_remove_migration_job_result(const promise_mgmt_service_remove_migration_job_result&);
  promise_mgmt_service_remove_migration_job_result& operator=(const promise_mgmt_service_remove_migration_job_result&);
  promise_mgmt_service_remove_migration_job_result() : success(0) {
  }

  virtual ~promise_mgmt_service_remove_migration_job_result() throw();
  bool success;
  invalid_operation ouch;

  _promise_mgmt_service_remove_migration_job_result__isset __isset;

  void __set_success(const bool val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const promise_mgmt_service_remove_migration_job_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const promise_mgmt_service_remove_migration_job_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const promise_mgmt_service_remove_migration_job_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_remove_migration_job_presult__isset {
  _promise_mgmt_service_remove_migration_job_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _promise_mgmt_service_remove_migration_job_presult__isset;

class promise_mgmt_service_remove_migration_job_presult {
 public:


  virtual ~promise_mgmt_service_remove_migration_job_presult() throw();
  bool* success;
  invalid_operation ouch;

  _promise_mgmt_service_remove_migration_job_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_get_migration_jobs_args__isset {
  _promise_mgmt_service_get_migration_jobs_args__isset() : session_id(false) {}
  bool session_id :1;
} _promise_mgmt_service_get_migration_jobs_args__isset;

class promise_mgmt_service_get_migration_jobs_args {
 public:

  promise_mgmt_service_get_migration_jobs_args(const promise_mgmt_service_get_migration_jobs_args&);
  promise_mgmt_service_get_migration_jobs_args& operator=(const promise_mgmt_service_get_migration_jobs_args&);
  promise_mgmt_service_get_migration_jobs_args() : session_id() {
  }

  virtual ~promise_mgmt_service_get_migration_jobs_args() throw();
  std::string session_id;

  _promise_mgmt_service_get_migration_jobs_args__isset __isset;

  void __set_session_id(const std::string& val);

  bool operator == (const promise_mgmt_service_get_migration_jobs_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const promise_mgmt_service_get_migration_jobs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const promise_mgmt_service_get_migration_jobs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class promise_mgmt_service_get_migration_jobs_pargs {
 public:


  virtual ~promise_mgmt_service_get_migration_jobs_pargs() throw();
  const std::string* session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_get_migration_jobs_result__isset {
  _promise_mgmt_service_get_migration_jobs_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _promise_mgmt_service_get_migration_jobs_result__isset;

class promise_mgmt_service_get_migration_jobs_result {
 public:

  promise_mgmt_service_get_migration_jobs_result(const promise_mgmt_service_get_migration_jobs_result&);
  promise_mgmt_service_get_migration_jobs_result& operator=(const promise_mgmt_service_get_migration_jobs_result&);
  promise_mgmt_service_get_migration_jobs_result() {
  }

  virtual ~promise_mgmt_service_get_migration_jobs_result() throw();
  std::vector<job_detail>  success;
  invalid_operation ouch;

  _promise_mgmt_service_get_migration_jobs_result__isset __isset;

  void __set_success(const std::vector<job_detail> & val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const promise_mgmt_service_get_migration_jobs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const promise_mgmt_service_get_migration_jobs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const promise_mgmt_service_get_migration_jobs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_get_migration_jobs_presult__isset {
  _promise_mgmt_service_get_migration_jobs_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _promise_mgmt_service_get_migration_jobs_presult__isset;

class promise_mgmt_service_get_migration_jobs_presult {
 public:


  virtual ~promise_mgmt_service_get_migration_jobs_presult() throw();
  std::vector<job_detail> * success;
  invalid_operation ouch;

  _promise_mgmt_service_get_migration_jobs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_enumerate_disks_args__isset {
  _promise_mgmt_service_enumerate_disks_args__isset() : filter(false) {}
  bool filter :1;
} _promise_mgmt_service_enumerate_disks_args__isset;

class promise_mgmt_service_enumerate_disks_args {
 public:

  promise_mgmt_service_enumerate_disks_args(const promise_mgmt_service_enumerate_disks_args&);
  promise_mgmt_service_enumerate_disks_args& operator=(const promise_mgmt_service_enumerate_disks_args&);
  promise_mgmt_service_enumerate_disks_args() : filter((enumerate_disk_filter_style::type)0) {
  }

  virtual ~promise_mgmt_service_enumerate_disks_args() throw();
  enumerate_disk_filter_style::type filter;

  _promise_mgmt_service_enumerate_disks_args__isset __isset;

  void __set_filter(const enumerate_disk_filter_style::type val);

  bool operator == (const promise_mgmt_service_enumerate_disks_args & rhs) const
  {
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const promise_mgmt_service_enumerate_disks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const promise_mgmt_service_enumerate_disks_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class promise_mgmt_service_enumerate_disks_pargs {
 public:


  virtual ~promise_mgmt_service_enumerate_disks_pargs() throw();
  const enumerate_disk_filter_style::type* filter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_enumerate_disks_result__isset {
  _promise_mgmt_service_enumerate_disks_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _promise_mgmt_service_enumerate_disks_result__isset;

class promise_mgmt_service_enumerate_disks_result {
 public:

  promise_mgmt_service_enumerate_disks_result(const promise_mgmt_service_enumerate_disks_result&);
  promise_mgmt_service_enumerate_disks_result& operator=(const promise_mgmt_service_enumerate_disks_result&);
  promise_mgmt_service_enumerate_disks_result() {
  }

  virtual ~promise_mgmt_service_enumerate_disks_result() throw();
  std::set<disk_info>  success;
  invalid_operation ouch;

  _promise_mgmt_service_enumerate_disks_result__isset __isset;

  void __set_success(const std::set<disk_info> & val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const promise_mgmt_service_enumerate_disks_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const promise_mgmt_service_enumerate_disks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const promise_mgmt_service_enumerate_disks_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_enumerate_disks_presult__isset {
  _promise_mgmt_service_enumerate_disks_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _promise_mgmt_service_enumerate_disks_presult__isset;

class promise_mgmt_service_enumerate_disks_presult {
 public:


  virtual ~promise_mgmt_service_enumerate_disks_presult() throw();
  std::set<disk_info> * success;
  invalid_operation ouch;

  _promise_mgmt_service_enumerate_disks_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_prepare_disk_args__isset {
  _promise_mgmt_service_prepare_disk_args__isset() : disk_number(false) {}
  bool disk_number :1;
} _promise_mgmt_service_prepare_disk_args__isset;

class promise_mgmt_service_prepare_disk_args {
 public:

  promise_mgmt_service_prepare_disk_args(const promise_mgmt_service_prepare_disk_args&);
  promise_mgmt_service_prepare_disk_args& operator=(const promise_mgmt_service_prepare_disk_args&);
  promise_mgmt_service_prepare_disk_args() : disk_number(0) {
  }

  virtual ~promise_mgmt_service_prepare_disk_args() throw();
  int32_t disk_number;

  _promise_mgmt_service_prepare_disk_args__isset __isset;

  void __set_disk_number(const int32_t val);

  bool operator == (const promise_mgmt_service_prepare_disk_args & rhs) const
  {
    if (!(disk_number == rhs.disk_number))
      return false;
    return true;
  }
  bool operator != (const promise_mgmt_service_prepare_disk_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const promise_mgmt_service_prepare_disk_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class promise_mgmt_service_prepare_disk_pargs {
 public:


  virtual ~promise_mgmt_service_prepare_disk_pargs() throw();
  const int32_t* disk_number;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_prepare_disk_result__isset {
  _promise_mgmt_service_prepare_disk_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _promise_mgmt_service_prepare_disk_result__isset;

class promise_mgmt_service_prepare_disk_result {
 public:

  promise_mgmt_service_prepare_disk_result(const promise_mgmt_service_prepare_disk_result&);
  promise_mgmt_service_prepare_disk_result& operator=(const promise_mgmt_service_prepare_disk_result&);
  promise_mgmt_service_prepare_disk_result() : success() {
  }

  virtual ~promise_mgmt_service_prepare_disk_result() throw();
  std::string success;
  invalid_operation ouch;

  _promise_mgmt_service_prepare_disk_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ouch(const invalid_operation& val);

  bool operator == (const promise_mgmt_service_prepare_disk_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const promise_mgmt_service_prepare_disk_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const promise_mgmt_service_prepare_disk_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _promise_mgmt_service_prepare_disk_presult__isset {
  _promise_mgmt_service_prepare_disk_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _promise_mgmt_service_prepare_disk_presult__isset;

class promise_mgmt_service_prepare_disk_presult {
 public:


  virtual ~promise_mgmt_service_prepare_disk_presult() throw();
  std::string* success;
  invalid_operation ouch;

  _promise_mgmt_service_prepare_disk_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class promise_mgmt_serviceClient : virtual public promise_mgmt_serviceIf {
 public:
  promise_mgmt_serviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  promise_mgmt_serviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_physical_client_info(physical_client_info& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void send_get_physical_client_info(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void recv_get_physical_client_info(physical_client_info& _return);
  void get_virtual_host_info(virtual_host& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void send_get_virtual_host_info(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void recv_get_virtual_host_info(virtual_host& _return);
  void get_virtual_machine_detail(virtual_machine& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void send_get_virtual_machine_detail(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void recv_get_virtual_machine_detail(virtual_machine& _return);
  void create_migration_job(job_detail& _return, const std::string& session_id, const create_job_detail& create_job);
  void send_create_migration_job(const std::string& session_id, const create_job_detail& create_job);
  void recv_create_migration_job(job_detail& _return);
  void get_migration_job(job_detail& _return, const std::string& session_id, const std::string& job_id);
  void send_get_migration_job(const std::string& session_id, const std::string& job_id);
  void recv_get_migration_job(job_detail& _return);
  bool interrupt_migration_job(const std::string& session_id, const std::string& job_id);
  void send_interrupt_migration_job(const std::string& session_id, const std::string& job_id);
  bool recv_interrupt_migration_job();
  bool resume_migration_job(const std::string& session_id, const std::string& job_id);
  void send_resume_migration_job(const std::string& session_id, const std::string& job_id);
  bool recv_resume_migration_job();
  bool remove_migration_job(const std::string& session_id, const std::string& job_id);
  void send_remove_migration_job(const std::string& session_id, const std::string& job_id);
  bool recv_remove_migration_job();
  void get_migration_jobs(std::vector<job_detail> & _return, const std::string& session_id);
  void send_get_migration_jobs(const std::string& session_id);
  void recv_get_migration_jobs(std::vector<job_detail> & _return);
  void enumerate_disks(std::set<disk_info> & _return, const enumerate_disk_filter_style::type filter);
  void send_enumerate_disks(const enumerate_disk_filter_style::type filter);
  void recv_enumerate_disks(std::set<disk_info> & _return);
  void prepare_disk(std::string& _return, const int32_t disk_number);
  void send_prepare_disk(const int32_t disk_number);
  void recv_prepare_disk(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class promise_mgmt_serviceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<promise_mgmt_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (promise_mgmt_serviceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_physical_client_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_virtual_host_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_virtual_machine_detail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_migration_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_migration_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_interrupt_migration_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resume_migration_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_migration_job(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_migration_jobs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_enumerate_disks(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_prepare_disk(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  promise_mgmt_serviceProcessor(boost::shared_ptr<promise_mgmt_serviceIf> iface) :
    iface_(iface) {
    processMap_["get_physical_client_info"] = &promise_mgmt_serviceProcessor::process_get_physical_client_info;
    processMap_["get_virtual_host_info"] = &promise_mgmt_serviceProcessor::process_get_virtual_host_info;
    processMap_["get_virtual_machine_detail"] = &promise_mgmt_serviceProcessor::process_get_virtual_machine_detail;
    processMap_["create_migration_job"] = &promise_mgmt_serviceProcessor::process_create_migration_job;
    processMap_["get_migration_job"] = &promise_mgmt_serviceProcessor::process_get_migration_job;
    processMap_["interrupt_migration_job"] = &promise_mgmt_serviceProcessor::process_interrupt_migration_job;
    processMap_["resume_migration_job"] = &promise_mgmt_serviceProcessor::process_resume_migration_job;
    processMap_["remove_migration_job"] = &promise_mgmt_serviceProcessor::process_remove_migration_job;
    processMap_["get_migration_jobs"] = &promise_mgmt_serviceProcessor::process_get_migration_jobs;
    processMap_["enumerate_disks"] = &promise_mgmt_serviceProcessor::process_enumerate_disks;
    processMap_["prepare_disk"] = &promise_mgmt_serviceProcessor::process_prepare_disk;
  }

  virtual ~promise_mgmt_serviceProcessor() {}
};

class promise_mgmt_serviceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  promise_mgmt_serviceProcessorFactory(const ::boost::shared_ptr< promise_mgmt_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< promise_mgmt_serviceIfFactory > handlerFactory_;
};

class promise_mgmt_serviceMultiface : virtual public promise_mgmt_serviceIf {
 public:
  promise_mgmt_serviceMultiface(std::vector<boost::shared_ptr<promise_mgmt_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~promise_mgmt_serviceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<promise_mgmt_serviceIf> > ifaces_;
  promise_mgmt_serviceMultiface() {}
  void add(boost::shared_ptr<promise_mgmt_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get_physical_client_info(physical_client_info& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_physical_client_info(_return, session_id, host, username, password);
    }
    ifaces_[i]->get_physical_client_info(_return, session_id, host, username, password);
    return;
  }

  void get_virtual_host_info(virtual_host& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_virtual_host_info(_return, session_id, host, username, password);
    }
    ifaces_[i]->get_virtual_host_info(_return, session_id, host, username, password);
    return;
  }

  void get_virtual_machine_detail(virtual_machine& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_virtual_machine_detail(_return, session_id, host, username, password, machine_id);
    }
    ifaces_[i]->get_virtual_machine_detail(_return, session_id, host, username, password, machine_id);
    return;
  }

  void create_migration_job(job_detail& _return, const std::string& session_id, const create_job_detail& create_job) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_migration_job(_return, session_id, create_job);
    }
    ifaces_[i]->create_migration_job(_return, session_id, create_job);
    return;
  }

  void get_migration_job(job_detail& _return, const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_migration_job(_return, session_id, job_id);
    }
    ifaces_[i]->get_migration_job(_return, session_id, job_id);
    return;
  }

  bool interrupt_migration_job(const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->interrupt_migration_job(session_id, job_id);
    }
    return ifaces_[i]->interrupt_migration_job(session_id, job_id);
  }

  bool resume_migration_job(const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resume_migration_job(session_id, job_id);
    }
    return ifaces_[i]->resume_migration_job(session_id, job_id);
  }

  bool remove_migration_job(const std::string& session_id, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_migration_job(session_id, job_id);
    }
    return ifaces_[i]->remove_migration_job(session_id, job_id);
  }

  void get_migration_jobs(std::vector<job_detail> & _return, const std::string& session_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_migration_jobs(_return, session_id);
    }
    ifaces_[i]->get_migration_jobs(_return, session_id);
    return;
  }

  void enumerate_disks(std::set<disk_info> & _return, const enumerate_disk_filter_style::type filter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->enumerate_disks(_return, filter);
    }
    ifaces_[i]->enumerate_disks(_return, filter);
    return;
  }

  void prepare_disk(std::string& _return, const int32_t disk_number) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->prepare_disk(_return, disk_number);
    }
    ifaces_[i]->prepare_disk(_return, disk_number);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class promise_mgmt_serviceConcurrentClient : virtual public promise_mgmt_serviceIf {
 public:
  promise_mgmt_serviceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  promise_mgmt_serviceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_physical_client_info(physical_client_info& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  int32_t send_get_physical_client_info(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void recv_get_physical_client_info(physical_client_info& _return, const int32_t seqid);
  void get_virtual_host_info(virtual_host& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  int32_t send_get_virtual_host_info(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void recv_get_virtual_host_info(virtual_host& _return, const int32_t seqid);
  void get_virtual_machine_detail(virtual_machine& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  int32_t send_get_virtual_machine_detail(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void recv_get_virtual_machine_detail(virtual_machine& _return, const int32_t seqid);
  void create_migration_job(job_detail& _return, const std::string& session_id, const create_job_detail& create_job);
  int32_t send_create_migration_job(const std::string& session_id, const create_job_detail& create_job);
  void recv_create_migration_job(job_detail& _return, const int32_t seqid);
  void get_migration_job(job_detail& _return, const std::string& session_id, const std::string& job_id);
  int32_t send_get_migration_job(const std::string& session_id, const std::string& job_id);
  void recv_get_migration_job(job_detail& _return, const int32_t seqid);
  bool interrupt_migration_job(const std::string& session_id, const std::string& job_id);
  int32_t send_interrupt_migration_job(const std::string& session_id, const std::string& job_id);
  bool recv_interrupt_migration_job(const int32_t seqid);
  bool resume_migration_job(const std::string& session_id, const std::string& job_id);
  int32_t send_resume_migration_job(const std::string& session_id, const std::string& job_id);
  bool recv_resume_migration_job(const int32_t seqid);
  bool remove_migration_job(const std::string& session_id, const std::string& job_id);
  int32_t send_remove_migration_job(const std::string& session_id, const std::string& job_id);
  bool recv_remove_migration_job(const int32_t seqid);
  void get_migration_jobs(std::vector<job_detail> & _return, const std::string& session_id);
  int32_t send_get_migration_jobs(const std::string& session_id);
  void recv_get_migration_jobs(std::vector<job_detail> & _return, const int32_t seqid);
  void enumerate_disks(std::set<disk_info> & _return, const enumerate_disk_filter_style::type filter);
  int32_t send_enumerate_disks(const enumerate_disk_filter_style::type filter);
  void recv_enumerate_disks(std::set<disk_info> & _return, const int32_t seqid);
  void prepare_disk(std::string& _return, const int32_t disk_number);
  int32_t send_prepare_disk(const int32_t disk_number);
  void recv_prepare_disk(std::string& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

class promise_mgmt_serviceCobClient;

class promise_mgmt_serviceCobClIf {
 public:
  virtual ~promise_mgmt_serviceCobClIf() {}
  virtual void get_physical_client_info(tcxx::function<void(promise_mgmt_serviceCobClient* client)> cob, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) = 0;
  virtual void get_virtual_host_info(tcxx::function<void(promise_mgmt_serviceCobClient* client)> cob, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) = 0;
  virtual void get_virtual_machine_detail(tcxx::function<void(promise_mgmt_serviceCobClient* client)> cob, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) = 0;
  virtual void create_migration_job(tcxx::function<void(promise_mgmt_serviceCobClient* client)> cob, const std::string& session_id, const create_job_detail& create_job) = 0;
  virtual void get_migration_job(tcxx::function<void(promise_mgmt_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void interrupt_migration_job(tcxx::function<void(promise_mgmt_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void resume_migration_job(tcxx::function<void(promise_mgmt_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void remove_migration_job(tcxx::function<void(promise_mgmt_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id) = 0;
  virtual void get_migration_jobs(tcxx::function<void(promise_mgmt_serviceCobClient* client)> cob, const std::string& session_id) = 0;
  virtual void enumerate_disks(tcxx::function<void(promise_mgmt_serviceCobClient* client)> cob, const enumerate_disk_filter_style::type filter) = 0;
  virtual void prepare_disk(tcxx::function<void(promise_mgmt_serviceCobClient* client)> cob, const int32_t disk_number) = 0;
};

class promise_mgmt_serviceCobSvIf {
 public:
  virtual ~promise_mgmt_serviceCobSvIf() {}
  virtual void get_physical_client_info(tcxx::function<void(physical_client_info const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) = 0;
  virtual void get_virtual_host_info(tcxx::function<void(virtual_host const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) = 0;
  virtual void get_virtual_machine_detail(tcxx::function<void(virtual_machine const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) = 0;
  virtual void create_migration_job(tcxx::function<void(job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const create_job_detail& create_job) = 0;
  virtual void get_migration_job(tcxx::function<void(job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void interrupt_migration_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void resume_migration_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void remove_migration_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id, const std::string& job_id) = 0;
  virtual void get_migration_jobs(tcxx::function<void(std::vector<job_detail>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& session_id) = 0;
  virtual void enumerate_disks(tcxx::function<void(std::set<disk_info>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const enumerate_disk_filter_style::type filter) = 0;
  virtual void prepare_disk(tcxx::function<void(std::string const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const int32_t disk_number) = 0;
};

class promise_mgmt_serviceCobSvIfFactory {
 public:
  typedef promise_mgmt_serviceCobSvIf Handler;

  virtual ~promise_mgmt_serviceCobSvIfFactory() {}

  virtual promise_mgmt_serviceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(promise_mgmt_serviceCobSvIf* /* handler */) = 0;
};

class promise_mgmt_serviceCobSvIfSingletonFactory : virtual public promise_mgmt_serviceCobSvIfFactory {
 public:
  promise_mgmt_serviceCobSvIfSingletonFactory(const boost::shared_ptr<promise_mgmt_serviceCobSvIf>& iface) : iface_(iface) {}
  virtual ~promise_mgmt_serviceCobSvIfSingletonFactory() {}

  virtual promise_mgmt_serviceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(promise_mgmt_serviceCobSvIf* /* handler */) {}

 protected:
  boost::shared_ptr<promise_mgmt_serviceCobSvIf> iface_;
};

class promise_mgmt_serviceCobSvNull : virtual public promise_mgmt_serviceCobSvIf {
 public:
  virtual ~promise_mgmt_serviceCobSvNull() {}
  void get_physical_client_info(tcxx::function<void(physical_client_info const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */) {
    physical_client_info _return;
    return cob(_return);
  }
  void get_virtual_host_info(tcxx::function<void(virtual_host const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */) {
    virtual_host _return;
    return cob(_return);
  }
  void get_virtual_machine_detail(tcxx::function<void(virtual_machine const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */, const std::string& /* machine_id */) {
    virtual_machine _return;
    return cob(_return);
  }
  void create_migration_job(tcxx::function<void(job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const create_job_detail& /* create_job */) {
    job_detail _return;
    return cob(_return);
  }
  void get_migration_job(tcxx::function<void(job_detail const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    job_detail _return;
    return cob(_return);
  }
  void interrupt_migration_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
  void resume_migration_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
  void remove_migration_job(tcxx::function<void(bool const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */, const std::string& /* job_id */) {
    bool _return = false;
    return cob(_return);
  }
  void get_migration_jobs(tcxx::function<void(std::vector<job_detail>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& /* session_id */) {
    std::vector<job_detail>  _return;
    return cob(_return);
  }
  void enumerate_disks(tcxx::function<void(std::set<disk_info>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const enumerate_disk_filter_style::type /* filter */) {
    std::set<disk_info>  _return;
    return cob(_return);
  }
  void prepare_disk(tcxx::function<void(std::string const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const int32_t /* disk_number */) {
    std::string _return;
    return cob(_return);
  }
};

class promise_mgmt_serviceCobClient : virtual public promise_mgmt_serviceCobClIf {
 public:
  promise_mgmt_serviceCobClient(boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    channel_(channel),
    itrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    otrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    piprot_(protocolFactory->getProtocol(itrans_)),
    poprot_(protocolFactory->getProtocol(otrans_)) {
    iprot_ = piprot_.get();
    oprot_ = poprot_.get();
  }
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void get_physical_client_info(tcxx::function<void(promise_mgmt_serviceCobClient* client)> cob, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void send_get_physical_client_info(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void recv_get_physical_client_info(physical_client_info& _return);
  void get_virtual_host_info(tcxx::function<void(promise_mgmt_serviceCobClient* client)> cob, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void send_get_virtual_host_info(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password);
  void recv_get_virtual_host_info(virtual_host& _return);
  void get_virtual_machine_detail(tcxx::function<void(promise_mgmt_serviceCobClient* client)> cob, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void send_get_virtual_machine_detail(const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id);
  void recv_get_virtual_machine_detail(virtual_machine& _return);
  void create_migration_job(tcxx::function<void(promise_mgmt_serviceCobClient* client)> cob, const std::string& session_id, const create_job_detail& create_job);
  void send_create_migration_job(const std::string& session_id, const create_job_detail& create_job);
  void recv_create_migration_job(job_detail& _return);
  void get_migration_job(tcxx::function<void(promise_mgmt_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_get_migration_job(const std::string& session_id, const std::string& job_id);
  void recv_get_migration_job(job_detail& _return);
  void interrupt_migration_job(tcxx::function<void(promise_mgmt_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_interrupt_migration_job(const std::string& session_id, const std::string& job_id);
  bool recv_interrupt_migration_job();
  void resume_migration_job(tcxx::function<void(promise_mgmt_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_resume_migration_job(const std::string& session_id, const std::string& job_id);
  bool recv_resume_migration_job();
  void remove_migration_job(tcxx::function<void(promise_mgmt_serviceCobClient* client)> cob, const std::string& session_id, const std::string& job_id);
  void send_remove_migration_job(const std::string& session_id, const std::string& job_id);
  bool recv_remove_migration_job();
  void get_migration_jobs(tcxx::function<void(promise_mgmt_serviceCobClient* client)> cob, const std::string& session_id);
  void send_get_migration_jobs(const std::string& session_id);
  void recv_get_migration_jobs(std::vector<job_detail> & _return);
  void enumerate_disks(tcxx::function<void(promise_mgmt_serviceCobClient* client)> cob, const enumerate_disk_filter_style::type filter);
  void send_enumerate_disks(const enumerate_disk_filter_style::type filter);
  void recv_enumerate_disks(std::set<disk_info> & _return);
  void prepare_disk(tcxx::function<void(promise_mgmt_serviceCobClient* client)> cob, const int32_t disk_number);
  void send_prepare_disk(const int32_t disk_number);
  void recv_prepare_disk(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> itrans_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> otrans_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class promise_mgmt_serviceAsyncProcessor : public ::apache::thrift::async::TAsyncDispatchProcessor {
 protected:
  boost::shared_ptr<promise_mgmt_serviceCobSvIf> iface_;
  virtual void dispatchCall(tcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (promise_mgmt_serviceAsyncProcessor::*ProcessFunction)(tcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_physical_client_info(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_physical_client_info(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const physical_client_info& _return);
  void throw_get_physical_client_info(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_virtual_host_info(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_virtual_host_info(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const virtual_host& _return);
  void throw_get_virtual_host_info(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_virtual_machine_detail(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_virtual_machine_detail(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const virtual_machine& _return);
  void throw_get_virtual_machine_detail(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_create_migration_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_create_migration_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const job_detail& _return);
  void throw_create_migration_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_migration_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_migration_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const job_detail& _return);
  void throw_get_migration_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_interrupt_migration_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_interrupt_migration_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_interrupt_migration_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_resume_migration_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_resume_migration_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_resume_migration_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_remove_migration_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_remove_migration_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_remove_migration_job(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_get_migration_jobs(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_get_migration_jobs(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector<job_detail> & _return);
  void throw_get_migration_jobs(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_enumerate_disks(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_enumerate_disks(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::set<disk_info> & _return);
  void throw_enumerate_disks(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_prepare_disk(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_prepare_disk(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::string& _return);
  void throw_prepare_disk(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  promise_mgmt_serviceAsyncProcessor(boost::shared_ptr<promise_mgmt_serviceCobSvIf> iface) :
    iface_(iface) {
    processMap_["get_physical_client_info"] = &promise_mgmt_serviceAsyncProcessor::process_get_physical_client_info;
    processMap_["get_virtual_host_info"] = &promise_mgmt_serviceAsyncProcessor::process_get_virtual_host_info;
    processMap_["get_virtual_machine_detail"] = &promise_mgmt_serviceAsyncProcessor::process_get_virtual_machine_detail;
    processMap_["create_migration_job"] = &promise_mgmt_serviceAsyncProcessor::process_create_migration_job;
    processMap_["get_migration_job"] = &promise_mgmt_serviceAsyncProcessor::process_get_migration_job;
    processMap_["interrupt_migration_job"] = &promise_mgmt_serviceAsyncProcessor::process_interrupt_migration_job;
    processMap_["resume_migration_job"] = &promise_mgmt_serviceAsyncProcessor::process_resume_migration_job;
    processMap_["remove_migration_job"] = &promise_mgmt_serviceAsyncProcessor::process_remove_migration_job;
    processMap_["get_migration_jobs"] = &promise_mgmt_serviceAsyncProcessor::process_get_migration_jobs;
    processMap_["enumerate_disks"] = &promise_mgmt_serviceAsyncProcessor::process_enumerate_disks;
    processMap_["prepare_disk"] = &promise_mgmt_serviceAsyncProcessor::process_prepare_disk;
  }

  virtual ~promise_mgmt_serviceAsyncProcessor() {}
};

class promise_mgmt_serviceAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  promise_mgmt_serviceAsyncProcessorFactory(const ::boost::shared_ptr< promise_mgmt_serviceCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< promise_mgmt_serviceCobSvIfFactory > handlerFactory_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}}} // namespace

#endif
