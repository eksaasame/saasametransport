// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "physical_packer_service.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::saasame::transport;

class physical_packer_serviceHandler : virtual public physical_packer_serviceIf {
 public:
  physical_packer_serviceHandler() {
    // Your initialization goes here
  }

  void take_snapshots(std::vector<snapshot> & _return, const std::string& session_id, const std::set<std::string> & disks) {
    // Your implementation goes here
    printf("take_snapshots\n");
  }

  void take_snapshots_ex(std::vector<snapshot> & _return, const std::string& session_id, const std::set<std::string> & disks, const std::string& pre_script, const std::string& post_script) {
    // Your implementation goes here
    printf("take_snapshots_ex\n");
  }

  void take_snapshots2(std::vector<snapshot> & _return, const std::string& session_id, const take_snapshots_parameters& parameters) {
    // Your implementation goes here
    printf("take_snapshots2\n");
  }

  void delete_snapshot(delete_snapshot_result& _return, const std::string& session_id, const std::string& snapshot_id) {
    // Your implementation goes here
    printf("delete_snapshot\n");
  }

  void delete_snapshot_set(delete_snapshot_result& _return, const std::string& session_id, const std::string& snapshot_set_id) {
    // Your implementation goes here
    printf("delete_snapshot_set\n");
  }

  void get_all_snapshots(std::map<std::string, std::vector<snapshot> > & _return, const std::string& session_id) {
    // Your implementation goes here
    printf("get_all_snapshots\n");
  }

  void create_job_ex(packer_job_detail& _return, const std::string& session_id, const std::string& job_id, const create_packer_job_detail& create_job) {
    // Your implementation goes here
    printf("create_job_ex\n");
  }

  void create_job(packer_job_detail& _return, const std::string& session_id, const create_packer_job_detail& create_job) {
    // Your implementation goes here
    printf("create_job\n");
  }

  void get_job(packer_job_detail& _return, const std::string& session_id, const std::string& job_id, const std::string& previous_updated_time) {
    // Your implementation goes here
    printf("get_job\n");
  }

  bool interrupt_job(const std::string& session_id, const std::string& job_id) {
    // Your implementation goes here
    printf("interrupt_job\n");
  }

  bool resume_job(const std::string& session_id, const std::string& job_id) {
    // Your implementation goes here
    printf("resume_job\n");
  }

  bool remove_job(const std::string& session_id, const std::string& job_id) {
    // Your implementation goes here
    printf("remove_job\n");
  }

  void list_jobs(std::vector<packer_job_detail> & _return, const std::string& session_id) {
    // Your implementation goes here
    printf("list_jobs\n");
  }

  void terminate(const std::string& session_id) {
    // Your implementation goes here
    printf("terminate\n");
  }

  bool running_job(const std::string& session_id, const std::string& job_id) {
    // Your implementation goes here
    printf("running_job\n");
  }

  bool unregister(const std::string& session) {
    // Your implementation goes here
    printf("unregister\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<physical_packer_serviceHandler> handler(new physical_packer_serviceHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new physical_packer_serviceProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

