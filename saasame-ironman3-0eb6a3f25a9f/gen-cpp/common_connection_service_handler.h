// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#pragma once

#ifndef common_connection_service_handler_H
#define common_connection_service_handler_H

#include "saasame_constants.h"
#include "common_service.h"
#include "common_connection_service.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/transport/TSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include "macho.h"
#include "json_spirit.h"
#pragma comment(lib, "json_spirit_lib.lib")

using boost::shared_ptr;

using namespace  ::saasame::transport;

class common_connection_service_handler : virtual public common_service_handler, virtual public common_connection_serviceIf {
public:
    common_connection_service_handler() {
        // Your initialization goes here
        initialize();
    }
    void initialize();
    virtual bool test_connection(const std::string& session_id, const connection& conn);
    virtual bool add_connection(const std::string& session_id, const connection& conn);
    virtual bool remove_connection(const std::string& session_id, const std::string& connection_id);
    virtual bool modify_connection(const std::string& session_id, const connection& conn);
    virtual void enumerate_connections(std::vector<connection> & _return, const std::string& session_id);
    virtual void get_connection(connection& _return, const std::string& session_id, const std::string& connection_id);
    virtual int64_t get_available_bytes(const std::string& session_id, const std::string& connection_id);
    connection load_connection(json_spirit::mValue& conn);
    json_spirit::mObject    save_connection(const connection &conn);
protected:
    typedef std::map<std::string, connection> connections_map_type;
    connections_map_type connections_map;
    macho::windows::critical_section cs;
private:
    void save(const connection& conn);
    connection load(std::string path);
    bool verify(const connection& conn);
    boost::filesystem::path connection_folder;
    std::string get_machine_id();
};

#endif