// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "promise_mgmt_service.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::mwdc::ironman::mgmt;

class promise_mgmt_serviceHandler : virtual public promise_mgmt_serviceIf {
 public:
  promise_mgmt_serviceHandler() {
    // Your initialization goes here
  }

  void get_physical_client_info(physical_client_info& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) {
    // Your implementation goes here
    printf("get_physical_client_info\n");
  }

  void get_virtual_host_info(virtual_host& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password) {
    // Your implementation goes here
    printf("get_virtual_host_info\n");
  }

  void get_virtual_machine_detail(virtual_machine& _return, const std::string& session_id, const std::string& host, const std::string& username, const std::string& password, const std::string& machine_id) {
    // Your implementation goes here
    printf("get_virtual_machine_detail\n");
  }

  void create_migration_job(job_detail& _return, const std::string& session_id, const create_job_detail& create_job) {
    // Your implementation goes here
    printf("create_migration_job\n");
  }

  void get_migration_job(job_detail& _return, const std::string& session_id, const std::string& job_id) {
    // Your implementation goes here
    printf("get_migration_job\n");
  }

  bool interrupt_migration_job(const std::string& session_id, const std::string& job_id) {
    // Your implementation goes here
    printf("interrupt_migration_job\n");
  }

  bool resume_migration_job(const std::string& session_id, const std::string& job_id) {
    // Your implementation goes here
    printf("resume_migration_job\n");
  }

  bool remove_migration_job(const std::string& session_id, const std::string& job_id) {
    // Your implementation goes here
    printf("remove_migration_job\n");
  }

  void get_migration_jobs(std::vector<job_detail> & _return, const std::string& session_id) {
    // Your implementation goes here
    printf("get_migration_jobs\n");
  }

  void enumerate_disks(std::set<disk_info> & _return, const enumerate_disk_filter_style::type filter) {
    // Your implementation goes here
    printf("enumerate_disks\n");
  }

  void prepare_disk(std::string& _return, const int32_t disk_number) {
    // Your implementation goes here
    printf("prepare_disk\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<promise_mgmt_serviceHandler> handler(new promise_mgmt_serviceHandler());
  shared_ptr<TProcessor> processor(new promise_mgmt_serviceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

