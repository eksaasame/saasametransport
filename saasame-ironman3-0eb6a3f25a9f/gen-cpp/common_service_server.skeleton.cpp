// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "common_service.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::saasame::transport;

class common_serviceHandler : virtual public common_serviceIf {
 public:
  common_serviceHandler() {
    // Your initialization goes here
  }

  void ping(service_info& _return) {
    // Your implementation goes here
    printf("ping\n");
  }

  void get_host_detail(physical_machine_info& _return, const std::string& session_id, const machine_detail_filter::type filter) {
    // Your implementation goes here
    printf("get_host_detail\n");
  }

  void get_service_list(std::set<service_info> & _return, const std::string& session_id) {
    // Your implementation goes here
    printf("get_service_list\n");
  }

  void enumerate_disks(std::set<disk_info> & _return, const enumerate_disk_filter_style::type filter) {
    // Your implementation goes here
    printf("enumerate_disks\n");
  }

  bool verify_carrier(const std::string& carrier, const bool is_ssl) {
    // Your implementation goes here
    printf("verify_carrier\n");
  }

  void take_xray(std::string& _return) {
    // Your implementation goes here
    printf("take_xray\n");
  }

  void take_xrays(std::string& _return) {
    // Your implementation goes here
    printf("take_xrays\n");
  }

  bool create_mutex(const std::string& session, const int16_t timeout) {
    // Your implementation goes here
    printf("create_mutex\n");
  }

  bool delete_mutex(const std::string& session) {
    // Your implementation goes here
    printf("delete_mutex\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<common_serviceHandler> handler(new common_serviceHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new common_serviceProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

