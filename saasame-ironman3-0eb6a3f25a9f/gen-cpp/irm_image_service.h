/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef irm_image_service_H
#define irm_image_service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "ironman_image_op_types.h"

namespace mwdc { namespace ironman { namespace image_op {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class irm_image_serviceIf {
 public:
  virtual ~irm_image_serviceIf() {}
  virtual void copy_vmdk_to_vhdx(const std::string& job_id, const std::string& host, const std::string& username, const std::string& password, const vmdk_to_other_image_req_args& req_args) = 0;
  virtual void copy_vmdk_to_transport(const std::string& job_id, const std::string& host, const std::string& username, const std::string& password, const vmdk_to_other_image_req_args& req_args) = 0;
  virtual void get_status(op_status& _return, const std::string& job_id) = 0;
  virtual bool interrupt() = 0;
};

class irm_image_serviceIfFactory {
 public:
  typedef irm_image_serviceIf Handler;

  virtual ~irm_image_serviceIfFactory() {}

  virtual irm_image_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(irm_image_serviceIf* /* handler */) = 0;
};

class irm_image_serviceIfSingletonFactory : virtual public irm_image_serviceIfFactory {
 public:
  irm_image_serviceIfSingletonFactory(const boost::shared_ptr<irm_image_serviceIf>& iface) : iface_(iface) {}
  virtual ~irm_image_serviceIfSingletonFactory() {}

  virtual irm_image_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(irm_image_serviceIf* /* handler */) {}

 protected:
  boost::shared_ptr<irm_image_serviceIf> iface_;
};

class irm_image_serviceNull : virtual public irm_image_serviceIf {
 public:
  virtual ~irm_image_serviceNull() {}
  void copy_vmdk_to_vhdx(const std::string& /* job_id */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */, const vmdk_to_other_image_req_args& /* req_args */) {
    return;
  }
  void copy_vmdk_to_transport(const std::string& /* job_id */, const std::string& /* host */, const std::string& /* username */, const std::string& /* password */, const vmdk_to_other_image_req_args& /* req_args */) {
    return;
  }
  void get_status(op_status& /* _return */, const std::string& /* job_id */) {
    return;
  }
  bool interrupt() {
    bool _return = false;
    return _return;
  }
};

typedef struct _irm_image_service_copy_vmdk_to_vhdx_args__isset {
  _irm_image_service_copy_vmdk_to_vhdx_args__isset() : job_id(false), host(false), username(false), password(false), req_args(false) {}
  bool job_id :1;
  bool host :1;
  bool username :1;
  bool password :1;
  bool req_args :1;
} _irm_image_service_copy_vmdk_to_vhdx_args__isset;

class irm_image_service_copy_vmdk_to_vhdx_args {
 public:

  irm_image_service_copy_vmdk_to_vhdx_args(const irm_image_service_copy_vmdk_to_vhdx_args&);
  irm_image_service_copy_vmdk_to_vhdx_args& operator=(const irm_image_service_copy_vmdk_to_vhdx_args&);
  irm_image_service_copy_vmdk_to_vhdx_args() : job_id(), host(), username(), password() {
  }

  virtual ~irm_image_service_copy_vmdk_to_vhdx_args() throw();
  std::string job_id;
  std::string host;
  std::string username;
  std::string password;
  vmdk_to_other_image_req_args req_args;

  _irm_image_service_copy_vmdk_to_vhdx_args__isset __isset;

  void __set_job_id(const std::string& val);

  void __set_host(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  void __set_req_args(const vmdk_to_other_image_req_args& val);

  bool operator == (const irm_image_service_copy_vmdk_to_vhdx_args & rhs) const
  {
    if (!(job_id == rhs.job_id))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(req_args == rhs.req_args))
      return false;
    return true;
  }
  bool operator != (const irm_image_service_copy_vmdk_to_vhdx_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const irm_image_service_copy_vmdk_to_vhdx_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class irm_image_service_copy_vmdk_to_vhdx_pargs {
 public:


  virtual ~irm_image_service_copy_vmdk_to_vhdx_pargs() throw();
  const std::string* job_id;
  const std::string* host;
  const std::string* username;
  const std::string* password;
  const vmdk_to_other_image_req_args* req_args;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _irm_image_service_copy_vmdk_to_transport_args__isset {
  _irm_image_service_copy_vmdk_to_transport_args__isset() : job_id(false), host(false), username(false), password(false), req_args(false) {}
  bool job_id :1;
  bool host :1;
  bool username :1;
  bool password :1;
  bool req_args :1;
} _irm_image_service_copy_vmdk_to_transport_args__isset;

class irm_image_service_copy_vmdk_to_transport_args {
 public:

  irm_image_service_copy_vmdk_to_transport_args(const irm_image_service_copy_vmdk_to_transport_args&);
  irm_image_service_copy_vmdk_to_transport_args& operator=(const irm_image_service_copy_vmdk_to_transport_args&);
  irm_image_service_copy_vmdk_to_transport_args() : job_id(), host(), username(), password() {
  }

  virtual ~irm_image_service_copy_vmdk_to_transport_args() throw();
  std::string job_id;
  std::string host;
  std::string username;
  std::string password;
  vmdk_to_other_image_req_args req_args;

  _irm_image_service_copy_vmdk_to_transport_args__isset __isset;

  void __set_job_id(const std::string& val);

  void __set_host(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  void __set_req_args(const vmdk_to_other_image_req_args& val);

  bool operator == (const irm_image_service_copy_vmdk_to_transport_args & rhs) const
  {
    if (!(job_id == rhs.job_id))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(req_args == rhs.req_args))
      return false;
    return true;
  }
  bool operator != (const irm_image_service_copy_vmdk_to_transport_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const irm_image_service_copy_vmdk_to_transport_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class irm_image_service_copy_vmdk_to_transport_pargs {
 public:


  virtual ~irm_image_service_copy_vmdk_to_transport_pargs() throw();
  const std::string* job_id;
  const std::string* host;
  const std::string* username;
  const std::string* password;
  const vmdk_to_other_image_req_args* req_args;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _irm_image_service_get_status_args__isset {
  _irm_image_service_get_status_args__isset() : job_id(false) {}
  bool job_id :1;
} _irm_image_service_get_status_args__isset;

class irm_image_service_get_status_args {
 public:

  irm_image_service_get_status_args(const irm_image_service_get_status_args&);
  irm_image_service_get_status_args& operator=(const irm_image_service_get_status_args&);
  irm_image_service_get_status_args() : job_id() {
  }

  virtual ~irm_image_service_get_status_args() throw();
  std::string job_id;

  _irm_image_service_get_status_args__isset __isset;

  void __set_job_id(const std::string& val);

  bool operator == (const irm_image_service_get_status_args & rhs) const
  {
    if (!(job_id == rhs.job_id))
      return false;
    return true;
  }
  bool operator != (const irm_image_service_get_status_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const irm_image_service_get_status_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class irm_image_service_get_status_pargs {
 public:


  virtual ~irm_image_service_get_status_pargs() throw();
  const std::string* job_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _irm_image_service_get_status_result__isset {
  _irm_image_service_get_status_result__isset() : success(false) {}
  bool success :1;
} _irm_image_service_get_status_result__isset;

class irm_image_service_get_status_result {
 public:

  irm_image_service_get_status_result(const irm_image_service_get_status_result&);
  irm_image_service_get_status_result& operator=(const irm_image_service_get_status_result&);
  irm_image_service_get_status_result() {
  }

  virtual ~irm_image_service_get_status_result() throw();
  op_status success;

  _irm_image_service_get_status_result__isset __isset;

  void __set_success(const op_status& val);

  bool operator == (const irm_image_service_get_status_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const irm_image_service_get_status_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const irm_image_service_get_status_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _irm_image_service_get_status_presult__isset {
  _irm_image_service_get_status_presult__isset() : success(false) {}
  bool success :1;
} _irm_image_service_get_status_presult__isset;

class irm_image_service_get_status_presult {
 public:


  virtual ~irm_image_service_get_status_presult() throw();
  op_status* success;

  _irm_image_service_get_status_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class irm_image_service_interrupt_args {
 public:

  irm_image_service_interrupt_args(const irm_image_service_interrupt_args&);
  irm_image_service_interrupt_args& operator=(const irm_image_service_interrupt_args&);
  irm_image_service_interrupt_args() {
  }

  virtual ~irm_image_service_interrupt_args() throw();

  bool operator == (const irm_image_service_interrupt_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const irm_image_service_interrupt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const irm_image_service_interrupt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class irm_image_service_interrupt_pargs {
 public:


  virtual ~irm_image_service_interrupt_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _irm_image_service_interrupt_result__isset {
  _irm_image_service_interrupt_result__isset() : success(false) {}
  bool success :1;
} _irm_image_service_interrupt_result__isset;

class irm_image_service_interrupt_result {
 public:

  irm_image_service_interrupt_result(const irm_image_service_interrupt_result&);
  irm_image_service_interrupt_result& operator=(const irm_image_service_interrupt_result&);
  irm_image_service_interrupt_result() : success(0) {
  }

  virtual ~irm_image_service_interrupt_result() throw();
  bool success;

  _irm_image_service_interrupt_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const irm_image_service_interrupt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const irm_image_service_interrupt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const irm_image_service_interrupt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _irm_image_service_interrupt_presult__isset {
  _irm_image_service_interrupt_presult__isset() : success(false) {}
  bool success :1;
} _irm_image_service_interrupt_presult__isset;

class irm_image_service_interrupt_presult {
 public:


  virtual ~irm_image_service_interrupt_presult() throw();
  bool* success;

  _irm_image_service_interrupt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class irm_image_serviceClient : virtual public irm_image_serviceIf {
 public:
  irm_image_serviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  irm_image_serviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void copy_vmdk_to_vhdx(const std::string& job_id, const std::string& host, const std::string& username, const std::string& password, const vmdk_to_other_image_req_args& req_args);
  void send_copy_vmdk_to_vhdx(const std::string& job_id, const std::string& host, const std::string& username, const std::string& password, const vmdk_to_other_image_req_args& req_args);
  void copy_vmdk_to_transport(const std::string& job_id, const std::string& host, const std::string& username, const std::string& password, const vmdk_to_other_image_req_args& req_args);
  void send_copy_vmdk_to_transport(const std::string& job_id, const std::string& host, const std::string& username, const std::string& password, const vmdk_to_other_image_req_args& req_args);
  void get_status(op_status& _return, const std::string& job_id);
  void send_get_status(const std::string& job_id);
  void recv_get_status(op_status& _return);
  bool interrupt();
  void send_interrupt();
  bool recv_interrupt();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class irm_image_serviceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<irm_image_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (irm_image_serviceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_copy_vmdk_to_vhdx(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_copy_vmdk_to_transport(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_status(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_interrupt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  irm_image_serviceProcessor(boost::shared_ptr<irm_image_serviceIf> iface) :
    iface_(iface) {
    processMap_["copy_vmdk_to_vhdx"] = &irm_image_serviceProcessor::process_copy_vmdk_to_vhdx;
    processMap_["copy_vmdk_to_transport"] = &irm_image_serviceProcessor::process_copy_vmdk_to_transport;
    processMap_["get_status"] = &irm_image_serviceProcessor::process_get_status;
    processMap_["interrupt"] = &irm_image_serviceProcessor::process_interrupt;
  }

  virtual ~irm_image_serviceProcessor() {}
};

class irm_image_serviceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  irm_image_serviceProcessorFactory(const ::boost::shared_ptr< irm_image_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< irm_image_serviceIfFactory > handlerFactory_;
};

class irm_image_serviceMultiface : virtual public irm_image_serviceIf {
 public:
  irm_image_serviceMultiface(std::vector<boost::shared_ptr<irm_image_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~irm_image_serviceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<irm_image_serviceIf> > ifaces_;
  irm_image_serviceMultiface() {}
  void add(boost::shared_ptr<irm_image_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void copy_vmdk_to_vhdx(const std::string& job_id, const std::string& host, const std::string& username, const std::string& password, const vmdk_to_other_image_req_args& req_args) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->copy_vmdk_to_vhdx(job_id, host, username, password, req_args);
    }
    ifaces_[i]->copy_vmdk_to_vhdx(job_id, host, username, password, req_args);
  }

  void copy_vmdk_to_transport(const std::string& job_id, const std::string& host, const std::string& username, const std::string& password, const vmdk_to_other_image_req_args& req_args) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->copy_vmdk_to_transport(job_id, host, username, password, req_args);
    }
    ifaces_[i]->copy_vmdk_to_transport(job_id, host, username, password, req_args);
  }

  void get_status(op_status& _return, const std::string& job_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_status(_return, job_id);
    }
    ifaces_[i]->get_status(_return, job_id);
    return;
  }

  bool interrupt() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->interrupt();
    }
    return ifaces_[i]->interrupt();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class irm_image_serviceConcurrentClient : virtual public irm_image_serviceIf {
 public:
  irm_image_serviceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  irm_image_serviceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void copy_vmdk_to_vhdx(const std::string& job_id, const std::string& host, const std::string& username, const std::string& password, const vmdk_to_other_image_req_args& req_args);
  void send_copy_vmdk_to_vhdx(const std::string& job_id, const std::string& host, const std::string& username, const std::string& password, const vmdk_to_other_image_req_args& req_args);
  void copy_vmdk_to_transport(const std::string& job_id, const std::string& host, const std::string& username, const std::string& password, const vmdk_to_other_image_req_args& req_args);
  void send_copy_vmdk_to_transport(const std::string& job_id, const std::string& host, const std::string& username, const std::string& password, const vmdk_to_other_image_req_args& req_args);
  void get_status(op_status& _return, const std::string& job_id);
  int32_t send_get_status(const std::string& job_id);
  void recv_get_status(op_status& _return, const int32_t seqid);
  bool interrupt();
  int32_t send_interrupt();
  bool recv_interrupt(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}}} // namespace

#endif
