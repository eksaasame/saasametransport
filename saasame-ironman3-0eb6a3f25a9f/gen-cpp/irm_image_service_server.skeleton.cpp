// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "irm_image_service.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::mwdc::ironman::image_op;

class irm_image_serviceHandler : virtual public irm_image_serviceIf {
 public:
  irm_image_serviceHandler() {
    // Your initialization goes here
  }

  void copy_vmdk_to_vhdx(const std::string& job_id, const std::string& host, const std::string& username, const std::string& password, const vmdk_to_other_image_req_args& req_args) {
    // Your implementation goes here
    printf("copy_vmdk_to_vhdx\n");
  }

  void copy_vmdk_to_transport(const std::string& job_id, const std::string& host, const std::string& username, const std::string& password, const vmdk_to_other_image_req_args& req_args) {
    // Your implementation goes here
    printf("copy_vmdk_to_transport\n");
  }

  void get_status(op_status& _return, const std::string& job_id) {
    // Your implementation goes here
    printf("get_status\n");
  }

  bool interrupt() {
    // Your implementation goes here
    printf("interrupt\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<irm_image_serviceHandler> handler(new irm_image_serviceHandler());
  shared_ptr<TProcessor> processor(new irm_image_serviceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

