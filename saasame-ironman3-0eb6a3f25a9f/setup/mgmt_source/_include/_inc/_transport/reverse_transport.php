<?php
namespace saasame\transport;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

interface reverse_transportIf
{
    /**
     * @return \saasame\transport\service_info
     */
    public function ping();
    /**
     * @param string $addr
     * @return string
     * @throws \saasame\transport\invalid_operation
     */
    public function generate_session($addr);
    /**
     * @param string $session
     * @param string $addr
     * @param string $name
     * @return \saasame\transport\transport_message
     * @throws \saasame\transport\invalid_operation
     * @throws \saasame\transport\command_empty
     * @throws \saasame\transport\invalid_session
     */
    public function receive($session, $addr, $name);
    /**
     * @param string $session
     * @param string $addr
     * @param \saasame\transport\transport_message $response
     * @return bool
     * @throws \saasame\transport\invalid_operation
     * @throws \saasame\transport\command_empty
     * @throws \saasame\transport\invalid_session
     */
    public function response($session, $addr, \saasame\transport\transport_message $response);
}
class reverse_transportClient implements \saasame\transport\reverse_transportIf
{
    protected $input_ = null;
    protected $output_ = null;

    protected $seqid_ = 0;

    public function __construct($input, $output = null)
    {
        $this->input_ = $input;
        $this->output_ = $output ? $output : $input;
    }


    public function ping()
    {
        $this->send_ping();
        return $this->recv_ping();
    }

    public function send_ping()
    {
        $args = new \saasame\transport\reverse_transport_ping_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ping',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ping', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ping()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\saasame\transport\reverse_transport_ping_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \saasame\transport\reverse_transport_ping_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("ping failed: unknown result");
    }

    public function generate_session($addr)
    {
        $this->send_generate_session($addr);
        return $this->recv_generate_session();
    }

    public function send_generate_session($addr)
    {
        $args = new \saasame\transport\reverse_transport_generate_session_args();
        $args->addr = $addr;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'generate_session',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('generate_session', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_generate_session()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\saasame\transport\reverse_transport_generate_session_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \saasame\transport\reverse_transport_generate_session_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ouch !== null) {
            throw $result->ouch;
        }
        throw new \Exception("generate_session failed: unknown result");
    }

    public function receive($session, $addr, $name)
    {
        $this->send_receive($session, $addr, $name);
        return $this->recv_receive();
    }

    public function send_receive($session, $addr, $name)
    {
        $args = new \saasame\transport\reverse_transport_receive_args();
        $args->session = $session;
        $args->addr = $addr;
        $args->name = $name;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'receive',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('receive', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_receive()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\saasame\transport\reverse_transport_receive_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \saasame\transport\reverse_transport_receive_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ouch !== null) {
            throw $result->ouch;
        }
        if ($result->empty !== null) {
            throw $result->empty;
        }
        if ($result->invalid !== null) {
            throw $result->invalid;
        }
        throw new \Exception("receive failed: unknown result");
    }

    public function response($session, $addr, \saasame\transport\transport_message $response)
    {
        $this->send_response($session, $addr, $response);
        return $this->recv_response();
    }

    public function send_response($session, $addr, \saasame\transport\transport_message $response)
    {
        $args = new \saasame\transport\reverse_transport_response_args();
        $args->session = $session;
        $args->addr = $addr;
        $args->response = $response;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'response',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('response', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_response()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\saasame\transport\reverse_transport_response_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \saasame\transport\reverse_transport_response_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ouch !== null) {
            throw $result->ouch;
        }
        if ($result->empty !== null) {
            throw $result->empty;
        }
        if ($result->invalid !== null) {
            throw $result->invalid;
        }
        throw new \Exception("response failed: unknown result");
    }
}
// HELPER FUNCTIONS AND STRUCTURES

class reverse_transport_ping_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
    );


    public function __construct()
    {
    }

    public function getName()
    {
        return 'reverse_transport_ping_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('reverse_transport_ping_args');
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class reverse_transport_ping_result
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        0 => array(
            'var' => 'success',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\service_info',
        ),
    );

    /**
     * @var \saasame\transport\service_info
     */
    public $success = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
        }
    }

    public function getName()
    {
        return 'reverse_transport_ping_result';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::STRUCT) {
                        $this->success = new \saasame\transport\service_info();
                        $xfer += $this->success->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('reverse_transport_ping_result');
        if ($this->success !== null) {
            if (!is_object($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
            $xfer += $this->success->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class reverse_transport_generate_session_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'addr',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $addr = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['addr'])) {
                $this->addr = $vals['addr'];
            }
        }
    }

    public function getName()
    {
        return 'reverse_transport_generate_session_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->addr);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('reverse_transport_generate_session_args');
        if ($this->addr !== null) {
            $xfer += $output->writeFieldBegin('addr', TType::STRING, 1);
            $xfer += $output->writeString($this->addr);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class reverse_transport_generate_session_result
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        0 => array(
            'var' => 'success',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        1 => array(
            'var' => 'ouch',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\invalid_operation',
        ),
    );

    /**
     * @var string
     */
    public $success = null;
    /**
     * @var \saasame\transport\invalid_operation
     */
    public $ouch = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['ouch'])) {
                $this->ouch = $vals['ouch'];
            }
        }
    }

    public function getName()
    {
        return 'reverse_transport_generate_session_result';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->ouch = new \saasame\transport\invalid_operation();
                        $xfer += $this->ouch->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('reverse_transport_generate_session_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
            $xfer += $output->writeString($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ouch !== null) {
            $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
            $xfer += $this->ouch->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class reverse_transport_receive_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'session',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'addr',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $session = null;
    /**
     * @var string
     */
    public $addr = null;
    /**
     * @var string
     */
    public $name = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['session'])) {
                $this->session = $vals['session'];
            }
            if (isset($vals['addr'])) {
                $this->addr = $vals['addr'];
            }
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
        }
    }

    public function getName()
    {
        return 'reverse_transport_receive_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->session);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->addr);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('reverse_transport_receive_args');
        if ($this->session !== null) {
            $xfer += $output->writeFieldBegin('session', TType::STRING, 1);
            $xfer += $output->writeString($this->session);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->addr !== null) {
            $xfer += $output->writeFieldBegin('addr', TType::STRING, 2);
            $xfer += $output->writeString($this->addr);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class reverse_transport_receive_result
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        0 => array(
            'var' => 'success',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\transport_message',
        ),
        1 => array(
            'var' => 'ouch',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\invalid_operation',
        ),
        2 => array(
            'var' => 'empty',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\command_empty',
        ),
        3 => array(
            'var' => 'invalid',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\invalid_session',
        ),
    );

    /**
     * @var \saasame\transport\transport_message
     */
    public $success = null;
    /**
     * @var \saasame\transport\invalid_operation
     */
    public $ouch = null;
    /**
     * @var \saasame\transport\command_empty
     */
    public $empty = null;
    /**
     * @var \saasame\transport\invalid_session
     */
    public $invalid = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['ouch'])) {
                $this->ouch = $vals['ouch'];
            }
            if (isset($vals['empty'])) {
                $this->empty = $vals['empty'];
            }
            if (isset($vals['invalid'])) {
                $this->invalid = $vals['invalid'];
            }
        }
    }

    public function getName()
    {
        return 'reverse_transport_receive_result';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::STRUCT) {
                        $this->success = new \saasame\transport\transport_message();
                        $xfer += $this->success->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->ouch = new \saasame\transport\invalid_operation();
                        $xfer += $this->ouch->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->empty = new \saasame\transport\command_empty();
                        $xfer += $this->empty->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->invalid = new \saasame\transport\invalid_session();
                        $xfer += $this->invalid->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('reverse_transport_receive_result');
        if ($this->success !== null) {
            if (!is_object($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
            $xfer += $this->success->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ouch !== null) {
            $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
            $xfer += $this->ouch->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->empty !== null) {
            $xfer += $output->writeFieldBegin('empty', TType::STRUCT, 2);
            $xfer += $this->empty->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->invalid !== null) {
            $xfer += $output->writeFieldBegin('invalid', TType::STRUCT, 3);
            $xfer += $this->invalid->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class reverse_transport_response_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'session',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'addr',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'response',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\transport_message',
        ),
    );

    /**
     * @var string
     */
    public $session = null;
    /**
     * @var string
     */
    public $addr = null;
    /**
     * @var \saasame\transport\transport_message
     */
    public $response = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['session'])) {
                $this->session = $vals['session'];
            }
            if (isset($vals['addr'])) {
                $this->addr = $vals['addr'];
            }
            if (isset($vals['response'])) {
                $this->response = $vals['response'];
            }
        }
    }

    public function getName()
    {
        return 'reverse_transport_response_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->session);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->addr);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->response = new \saasame\transport\transport_message();
                        $xfer += $this->response->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('reverse_transport_response_args');
        if ($this->session !== null) {
            $xfer += $output->writeFieldBegin('session', TType::STRING, 1);
            $xfer += $output->writeString($this->session);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->addr !== null) {
            $xfer += $output->writeFieldBegin('addr', TType::STRING, 2);
            $xfer += $output->writeString($this->addr);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->response !== null) {
            if (!is_object($this->response)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('response', TType::STRUCT, 3);
            $xfer += $this->response->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class reverse_transport_response_result
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        0 => array(
            'var' => 'success',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        1 => array(
            'var' => 'ouch',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\invalid_operation',
        ),
        2 => array(
            'var' => 'empty',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\command_empty',
        ),
        3 => array(
            'var' => 'invalid',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\invalid_session',
        ),
    );

    /**
     * @var bool
     */
    public $success = null;
    /**
     * @var \saasame\transport\invalid_operation
     */
    public $ouch = null;
    /**
     * @var \saasame\transport\command_empty
     */
    public $empty = null;
    /**
     * @var \saasame\transport\invalid_session
     */
    public $invalid = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['ouch'])) {
                $this->ouch = $vals['ouch'];
            }
            if (isset($vals['empty'])) {
                $this->empty = $vals['empty'];
            }
            if (isset($vals['invalid'])) {
                $this->invalid = $vals['invalid'];
            }
        }
    }

    public function getName()
    {
        return 'reverse_transport_response_result';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->ouch = new \saasame\transport\invalid_operation();
                        $xfer += $this->ouch->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->empty = new \saasame\transport\command_empty();
                        $xfer += $this->empty->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->invalid = new \saasame\transport\invalid_session();
                        $xfer += $this->invalid->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('reverse_transport_response_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ouch !== null) {
            $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
            $xfer += $this->ouch->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->empty !== null) {
            $xfer += $output->writeFieldBegin('empty', TType::STRUCT, 2);
            $xfer += $this->empty->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->invalid !== null) {
            $xfer += $output->writeFieldBegin('invalid', TType::STRUCT, 3);
            $xfer += $this->invalid->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class reverse_transportProcessor
{
    protected $handler_ = null;
    public function __construct($handler)
    {
        $this->handler_ = $handler;
    }

    public function process($input, $output)
    {
        $rseqid = 0;
        $fname = null;
        $mtype = 0;

        $input->readMessageBegin($fname, $mtype, $rseqid);
        $methodname = 'process_'.$fname;
        if (!method_exists($this, $methodname)) {
              $input->skip(TType::STRUCT);
              $input->readMessageEnd();
              $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
              $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
              $x->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              return;
        }
        $this->$methodname($rseqid, $input, $output);
        return true;
    }

    protected function process_ping($seqid, $input, $output)
    {
        $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
        if ($bin_accel) {
            $args = thrift_protocol_read_binary_after_message_begin(
                $input,
                '\saasame\transport\reverse_transport_ping_args',
                $input->isStrictRead()
            );
        } else {
            $args = new \saasame\transport\reverse_transport_ping_args();
            $args->read($input);
        }
        $input->readMessageEnd();
        $result = new \saasame\transport\reverse_transport_ping_result();
        $result->success = $this->handler_->ping();
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $output,
                'ping',
                TMessageType::REPLY,
                $result,
                $seqid,
                $output->isStrictWrite()
            );
        } else {
            $output->writeMessageBegin('ping', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_generate_session($seqid, $input, $output)
    {
        $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
        if ($bin_accel) {
            $args = thrift_protocol_read_binary_after_message_begin(
                $input,
                '\saasame\transport\reverse_transport_generate_session_args',
                $input->isStrictRead()
            );
        } else {
            $args = new \saasame\transport\reverse_transport_generate_session_args();
            $args->read($input);
        }
        $input->readMessageEnd();
        $result = new \saasame\transport\reverse_transport_generate_session_result();
        try {
            $result->success = $this->handler_->generate_session($args->addr);
        } catch (\saasame\transport\invalid_operation $ouch) {
            $result->ouch = $ouch;
        }
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $output,
                'generate_session',
                TMessageType::REPLY,
                $result,
                $seqid,
                $output->isStrictWrite()
            );
        } else {
            $output->writeMessageBegin('generate_session', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_receive($seqid, $input, $output)
    {
        $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
        if ($bin_accel) {
            $args = thrift_protocol_read_binary_after_message_begin(
                $input,
                '\saasame\transport\reverse_transport_receive_args',
                $input->isStrictRead()
            );
        } else {
            $args = new \saasame\transport\reverse_transport_receive_args();
            $args->read($input);
        }
        $input->readMessageEnd();
        $result = new \saasame\transport\reverse_transport_receive_result();
        try {
            $result->success = $this->handler_->receive($args->session, $args->addr, $args->name);
        } catch (\saasame\transport\invalid_operation $ouch) {
            $result->ouch = $ouch;
                } catch (\saasame\transport\command_empty $empty) {
            $result->empty = $empty;
                } catch (\saasame\transport\invalid_session $invalid) {
            $result->invalid = $invalid;
        }
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $output,
                'receive',
                TMessageType::REPLY,
                $result,
                $seqid,
                $output->isStrictWrite()
            );
        } else {
            $output->writeMessageBegin('receive', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_response($seqid, $input, $output)
    {
        $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
        if ($bin_accel) {
            $args = thrift_protocol_read_binary_after_message_begin(
                $input,
                '\saasame\transport\reverse_transport_response_args',
                $input->isStrictRead()
            );
        } else {
            $args = new \saasame\transport\reverse_transport_response_args();
            $args->read($input);
        }
        $input->readMessageEnd();
        $result = new \saasame\transport\reverse_transport_response_result();
        try {
            $result->success = $this->handler_->response($args->session, $args->addr, $args->response);
        } catch (\saasame\transport\invalid_operation $ouch) {
            $result->ouch = $ouch;
                } catch (\saasame\transport\command_empty $empty) {
            $result->empty = $empty;
                } catch (\saasame\transport\invalid_session $invalid) {
            $result->invalid = $invalid;
        }
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $output,
                'response',
                TMessageType::REPLY,
                $result,
                $seqid,
                $output->isStrictWrite()
            );
        } else {
            $output->writeMessageBegin('response', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
}


