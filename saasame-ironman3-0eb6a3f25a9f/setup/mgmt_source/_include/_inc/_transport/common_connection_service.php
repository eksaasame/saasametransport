<?php
namespace saasame\transport;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

interface common_connection_serviceIf extends \saasame\transport\common_serviceIf
{
    /**
     * @param string $session_id
     * @param \saasame\transport\connection $conn
     * @return bool
     * @throws \saasame\transport\invalid_operation
     */
    public function test_connection($session_id, \saasame\transport\connection $conn);
    /**
     * @param string $session_id
     * @param \saasame\transport\connection $conn
     * @return bool
     * @throws \saasame\transport\invalid_operation
     */
    public function add_connection($session_id, \saasame\transport\connection $conn);
    /**
     * @param string $session_id
     * @param string $connection_id
     * @return bool
     * @throws \saasame\transport\invalid_operation
     */
    public function remove_connection($session_id, $connection_id);
    /**
     * @param string $session_id
     * @param \saasame\transport\connection $conn
     * @return bool
     * @throws \saasame\transport\invalid_operation
     */
    public function modify_connection($session_id, \saasame\transport\connection $conn);
    /**
     * @param string $session_id
     * @return \saasame\transport\connection[]
     * @throws \saasame\transport\invalid_operation
     */
    public function enumerate_connections($session_id);
    /**
     * @param string $session_id
     * @param string $connection_id
     * @return \saasame\transport\connection
     * @throws \saasame\transport\invalid_operation
     */
    public function get_connection($session_id, $connection_id);
    /**
     * @param string $session_id
     * @param string $connection_id
     * @return int
     * @throws \saasame\transport\invalid_operation
     */
    public function get_available_bytes($session_id, $connection_id);
}
class common_connection_serviceClient extends \saasame\transport\common_serviceClient implements \saasame\transport\common_connection_serviceIf
{
    public function __construct($input, $output = null)
    {
        parent::__construct($input, $output);
    }


    public function test_connection($session_id, \saasame\transport\connection $conn)
    {
        $this->send_test_connection($session_id, $conn);
        return $this->recv_test_connection();
    }

    public function send_test_connection($session_id, \saasame\transport\connection $conn)
    {
        $args = new \saasame\transport\common_connection_service_test_connection_args();
        $args->session_id = $session_id;
        $args->conn = $conn;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'test_connection',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('test_connection', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_test_connection()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\saasame\transport\common_connection_service_test_connection_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \saasame\transport\common_connection_service_test_connection_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ouch !== null) {
            throw $result->ouch;
        }
        throw new \Exception("test_connection failed: unknown result");
    }

    public function add_connection($session_id, \saasame\transport\connection $conn)
    {
        $this->send_add_connection($session_id, $conn);
        return $this->recv_add_connection();
    }

    public function send_add_connection($session_id, \saasame\transport\connection $conn)
    {
        $args = new \saasame\transport\common_connection_service_add_connection_args();
        $args->session_id = $session_id;
        $args->conn = $conn;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'add_connection',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('add_connection', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_add_connection()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\saasame\transport\common_connection_service_add_connection_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \saasame\transport\common_connection_service_add_connection_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ouch !== null) {
            throw $result->ouch;
        }
        throw new \Exception("add_connection failed: unknown result");
    }

    public function remove_connection($session_id, $connection_id)
    {
        $this->send_remove_connection($session_id, $connection_id);
        return $this->recv_remove_connection();
    }

    public function send_remove_connection($session_id, $connection_id)
    {
        $args = new \saasame\transport\common_connection_service_remove_connection_args();
        $args->session_id = $session_id;
        $args->connection_id = $connection_id;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'remove_connection',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('remove_connection', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_remove_connection()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\saasame\transport\common_connection_service_remove_connection_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \saasame\transport\common_connection_service_remove_connection_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ouch !== null) {
            throw $result->ouch;
        }
        throw new \Exception("remove_connection failed: unknown result");
    }

    public function modify_connection($session_id, \saasame\transport\connection $conn)
    {
        $this->send_modify_connection($session_id, $conn);
        return $this->recv_modify_connection();
    }

    public function send_modify_connection($session_id, \saasame\transport\connection $conn)
    {
        $args = new \saasame\transport\common_connection_service_modify_connection_args();
        $args->session_id = $session_id;
        $args->conn = $conn;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'modify_connection',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('modify_connection', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_modify_connection()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\saasame\transport\common_connection_service_modify_connection_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \saasame\transport\common_connection_service_modify_connection_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ouch !== null) {
            throw $result->ouch;
        }
        throw new \Exception("modify_connection failed: unknown result");
    }

    public function enumerate_connections($session_id)
    {
        $this->send_enumerate_connections($session_id);
        return $this->recv_enumerate_connections();
    }

    public function send_enumerate_connections($session_id)
    {
        $args = new \saasame\transport\common_connection_service_enumerate_connections_args();
        $args->session_id = $session_id;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'enumerate_connections',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('enumerate_connections', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_enumerate_connections()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\saasame\transport\common_connection_service_enumerate_connections_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \saasame\transport\common_connection_service_enumerate_connections_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ouch !== null) {
            throw $result->ouch;
        }
        throw new \Exception("enumerate_connections failed: unknown result");
    }

    public function get_connection($session_id, $connection_id)
    {
        $this->send_get_connection($session_id, $connection_id);
        return $this->recv_get_connection();
    }

    public function send_get_connection($session_id, $connection_id)
    {
        $args = new \saasame\transport\common_connection_service_get_connection_args();
        $args->session_id = $session_id;
        $args->connection_id = $connection_id;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'get_connection',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('get_connection', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_get_connection()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\saasame\transport\common_connection_service_get_connection_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \saasame\transport\common_connection_service_get_connection_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ouch !== null) {
            throw $result->ouch;
        }
        throw new \Exception("get_connection failed: unknown result");
    }

    public function get_available_bytes($session_id, $connection_id)
    {
        $this->send_get_available_bytes($session_id, $connection_id);
        return $this->recv_get_available_bytes();
    }

    public function send_get_available_bytes($session_id, $connection_id)
    {
        $args = new \saasame\transport\common_connection_service_get_available_bytes_args();
        $args->session_id = $session_id;
        $args->connection_id = $connection_id;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'get_available_bytes',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('get_available_bytes', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_get_available_bytes()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\saasame\transport\common_connection_service_get_available_bytes_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \saasame\transport\common_connection_service_get_available_bytes_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ouch !== null) {
            throw $result->ouch;
        }
        throw new \Exception("get_available_bytes failed: unknown result");
    }
}
// HELPER FUNCTIONS AND STRUCTURES

class common_connection_service_test_connection_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'session_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'conn',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\connection',
        ),
    );

    /**
     * @var string
     */
    public $session_id = null;
    /**
     * @var \saasame\transport\connection
     */
    public $conn = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['session_id'])) {
                $this->session_id = $vals['session_id'];
            }
            if (isset($vals['conn'])) {
                $this->conn = $vals['conn'];
            }
        }
    }

    public function getName()
    {
        return 'common_connection_service_test_connection_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->session_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->conn = new \saasame\transport\connection();
                        $xfer += $this->conn->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_connection_service_test_connection_args');
        if ($this->session_id !== null) {
            $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
            $xfer += $output->writeString($this->session_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->conn !== null) {
            if (!is_object($this->conn)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('conn', TType::STRUCT, 2);
            $xfer += $this->conn->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_connection_service_test_connection_result
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        0 => array(
            'var' => 'success',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        1 => array(
            'var' => 'ouch',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\invalid_operation',
        ),
    );

    /**
     * @var bool
     */
    public $success = null;
    /**
     * @var \saasame\transport\invalid_operation
     */
    public $ouch = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['ouch'])) {
                $this->ouch = $vals['ouch'];
            }
        }
    }

    public function getName()
    {
        return 'common_connection_service_test_connection_result';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->ouch = new \saasame\transport\invalid_operation();
                        $xfer += $this->ouch->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_connection_service_test_connection_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ouch !== null) {
            $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
            $xfer += $this->ouch->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_connection_service_add_connection_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'session_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'conn',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\connection',
        ),
    );

    /**
     * @var string
     */
    public $session_id = null;
    /**
     * @var \saasame\transport\connection
     */
    public $conn = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['session_id'])) {
                $this->session_id = $vals['session_id'];
            }
            if (isset($vals['conn'])) {
                $this->conn = $vals['conn'];
            }
        }
    }

    public function getName()
    {
        return 'common_connection_service_add_connection_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->session_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->conn = new \saasame\transport\connection();
                        $xfer += $this->conn->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_connection_service_add_connection_args');
        if ($this->session_id !== null) {
            $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
            $xfer += $output->writeString($this->session_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->conn !== null) {
            if (!is_object($this->conn)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('conn', TType::STRUCT, 2);
            $xfer += $this->conn->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_connection_service_add_connection_result
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        0 => array(
            'var' => 'success',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        1 => array(
            'var' => 'ouch',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\invalid_operation',
        ),
    );

    /**
     * @var bool
     */
    public $success = null;
    /**
     * @var \saasame\transport\invalid_operation
     */
    public $ouch = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['ouch'])) {
                $this->ouch = $vals['ouch'];
            }
        }
    }

    public function getName()
    {
        return 'common_connection_service_add_connection_result';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->ouch = new \saasame\transport\invalid_operation();
                        $xfer += $this->ouch->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_connection_service_add_connection_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ouch !== null) {
            $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
            $xfer += $this->ouch->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_connection_service_remove_connection_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'session_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'connection_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $session_id = null;
    /**
     * @var string
     */
    public $connection_id = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['session_id'])) {
                $this->session_id = $vals['session_id'];
            }
            if (isset($vals['connection_id'])) {
                $this->connection_id = $vals['connection_id'];
            }
        }
    }

    public function getName()
    {
        return 'common_connection_service_remove_connection_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->session_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->connection_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_connection_service_remove_connection_args');
        if ($this->session_id !== null) {
            $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
            $xfer += $output->writeString($this->session_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->connection_id !== null) {
            $xfer += $output->writeFieldBegin('connection_id', TType::STRING, 2);
            $xfer += $output->writeString($this->connection_id);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_connection_service_remove_connection_result
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        0 => array(
            'var' => 'success',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        1 => array(
            'var' => 'ouch',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\invalid_operation',
        ),
    );

    /**
     * @var bool
     */
    public $success = null;
    /**
     * @var \saasame\transport\invalid_operation
     */
    public $ouch = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['ouch'])) {
                $this->ouch = $vals['ouch'];
            }
        }
    }

    public function getName()
    {
        return 'common_connection_service_remove_connection_result';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->ouch = new \saasame\transport\invalid_operation();
                        $xfer += $this->ouch->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_connection_service_remove_connection_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ouch !== null) {
            $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
            $xfer += $this->ouch->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_connection_service_modify_connection_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'session_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'conn',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\connection',
        ),
    );

    /**
     * @var string
     */
    public $session_id = null;
    /**
     * @var \saasame\transport\connection
     */
    public $conn = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['session_id'])) {
                $this->session_id = $vals['session_id'];
            }
            if (isset($vals['conn'])) {
                $this->conn = $vals['conn'];
            }
        }
    }

    public function getName()
    {
        return 'common_connection_service_modify_connection_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->session_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->conn = new \saasame\transport\connection();
                        $xfer += $this->conn->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_connection_service_modify_connection_args');
        if ($this->session_id !== null) {
            $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
            $xfer += $output->writeString($this->session_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->conn !== null) {
            if (!is_object($this->conn)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('conn', TType::STRUCT, 2);
            $xfer += $this->conn->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_connection_service_modify_connection_result
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        0 => array(
            'var' => 'success',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        1 => array(
            'var' => 'ouch',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\invalid_operation',
        ),
    );

    /**
     * @var bool
     */
    public $success = null;
    /**
     * @var \saasame\transport\invalid_operation
     */
    public $ouch = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['ouch'])) {
                $this->ouch = $vals['ouch'];
            }
        }
    }

    public function getName()
    {
        return 'common_connection_service_modify_connection_result';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->ouch = new \saasame\transport\invalid_operation();
                        $xfer += $this->ouch->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_connection_service_modify_connection_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ouch !== null) {
            $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
            $xfer += $this->ouch->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_connection_service_enumerate_connections_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'session_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $session_id = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['session_id'])) {
                $this->session_id = $vals['session_id'];
            }
        }
    }

    public function getName()
    {
        return 'common_connection_service_enumerate_connections_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->session_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_connection_service_enumerate_connections_args');
        if ($this->session_id !== null) {
            $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
            $xfer += $output->writeString($this->session_id);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_connection_service_enumerate_connections_result
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        0 => array(
            'var' => 'success',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\connection',
                ),
        ),
        1 => array(
            'var' => 'ouch',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\invalid_operation',
        ),
    );

    /**
     * @var \saasame\transport\connection[]
     */
    public $success = null;
    /**
     * @var \saasame\transport\invalid_operation
     */
    public $ouch = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['ouch'])) {
                $this->ouch = $vals['ouch'];
            }
        }
    }

    public function getName()
    {
        return 'common_connection_service_enumerate_connections_result';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::LST) {
                        $this->success = array();
                        $_size1279 = 0;
                        $_etype1282 = 0;
                        $xfer += $input->readListBegin($_etype1282, $_size1279);
                        for ($_i1283 = 0; $_i1283 < $_size1279; ++$_i1283) {
                            $elem1284 = null;
                            $elem1284 = new \saasame\transport\connection();
                            $xfer += $elem1284->read($input);
                            $this->success []= $elem1284;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->ouch = new \saasame\transport\invalid_operation();
                        $xfer += $this->ouch->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_connection_service_enumerate_connections_result');
        if ($this->success !== null) {
            if (!is_array($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::LST, 0);
            $output->writeListBegin(TType::STRUCT, count($this->success));
            foreach ($this->success as $iter1285) {
                $xfer += $iter1285->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ouch !== null) {
            $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
            $xfer += $this->ouch->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_connection_service_get_connection_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'session_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'connection_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $session_id = null;
    /**
     * @var string
     */
    public $connection_id = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['session_id'])) {
                $this->session_id = $vals['session_id'];
            }
            if (isset($vals['connection_id'])) {
                $this->connection_id = $vals['connection_id'];
            }
        }
    }

    public function getName()
    {
        return 'common_connection_service_get_connection_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->session_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->connection_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_connection_service_get_connection_args');
        if ($this->session_id !== null) {
            $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
            $xfer += $output->writeString($this->session_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->connection_id !== null) {
            $xfer += $output->writeFieldBegin('connection_id', TType::STRING, 2);
            $xfer += $output->writeString($this->connection_id);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_connection_service_get_connection_result
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        0 => array(
            'var' => 'success',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\connection',
        ),
        1 => array(
            'var' => 'ouch',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\invalid_operation',
        ),
    );

    /**
     * @var \saasame\transport\connection
     */
    public $success = null;
    /**
     * @var \saasame\transport\invalid_operation
     */
    public $ouch = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['ouch'])) {
                $this->ouch = $vals['ouch'];
            }
        }
    }

    public function getName()
    {
        return 'common_connection_service_get_connection_result';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::STRUCT) {
                        $this->success = new \saasame\transport\connection();
                        $xfer += $this->success->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->ouch = new \saasame\transport\invalid_operation();
                        $xfer += $this->ouch->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_connection_service_get_connection_result');
        if ($this->success !== null) {
            if (!is_object($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
            $xfer += $this->success->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ouch !== null) {
            $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
            $xfer += $this->ouch->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_connection_service_get_available_bytes_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'session_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'connection_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $session_id = null;
    /**
     * @var string
     */
    public $connection_id = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['session_id'])) {
                $this->session_id = $vals['session_id'];
            }
            if (isset($vals['connection_id'])) {
                $this->connection_id = $vals['connection_id'];
            }
        }
    }

    public function getName()
    {
        return 'common_connection_service_get_available_bytes_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->session_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->connection_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_connection_service_get_available_bytes_args');
        if ($this->session_id !== null) {
            $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
            $xfer += $output->writeString($this->session_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->connection_id !== null) {
            $xfer += $output->writeFieldBegin('connection_id', TType::STRING, 2);
            $xfer += $output->writeString($this->connection_id);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_connection_service_get_available_bytes_result
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        0 => array(
            'var' => 'success',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        1 => array(
            'var' => 'ouch',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\invalid_operation',
        ),
    );

    /**
     * @var int
     */
    public $success = null;
    /**
     * @var \saasame\transport\invalid_operation
     */
    public $ouch = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['ouch'])) {
                $this->ouch = $vals['ouch'];
            }
        }
    }

    public function getName()
    {
        return 'common_connection_service_get_available_bytes_result';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->ouch = new \saasame\transport\invalid_operation();
                        $xfer += $this->ouch->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_connection_service_get_available_bytes_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::I64, 0);
            $xfer += $output->writeI64($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ouch !== null) {
            $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
            $xfer += $this->ouch->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_connection_serviceProcessor extends \saasame\transport\common_serviceProcessor
{
    public function __construct($handler)
    {
        parent::__construct($handler);
    }

    public function process($input, $output)
    {
        $rseqid = 0;
        $fname = null;
        $mtype = 0;

        $input->readMessageBegin($fname, $mtype, $rseqid);
        $methodname = 'process_'.$fname;
        if (!method_exists($this, $methodname)) {
              $input->skip(TType::STRUCT);
              $input->readMessageEnd();
              $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
              $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
              $x->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              return;
        }
        $this->$methodname($rseqid, $input, $output);
        return true;
    }

    protected function process_test_connection($seqid, $input, $output)
    {
        $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
        if ($bin_accel) {
            $args = thrift_protocol_read_binary_after_message_begin(
                $input,
                '\saasame\transport\common_connection_service_test_connection_args',
                $input->isStrictRead()
            );
        } else {
            $args = new \saasame\transport\common_connection_service_test_connection_args();
            $args->read($input);
        }
        $input->readMessageEnd();
        $result = new \saasame\transport\common_connection_service_test_connection_result();
        try {
            $result->success = $this->handler_->test_connection($args->session_id, $args->conn);
        } catch (\saasame\transport\invalid_operation $ouch) {
            $result->ouch = $ouch;
        }
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $output,
                'test_connection',
                TMessageType::REPLY,
                $result,
                $seqid,
                $output->isStrictWrite()
            );
        } else {
            $output->writeMessageBegin('test_connection', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_add_connection($seqid, $input, $output)
    {
        $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
        if ($bin_accel) {
            $args = thrift_protocol_read_binary_after_message_begin(
                $input,
                '\saasame\transport\common_connection_service_add_connection_args',
                $input->isStrictRead()
            );
        } else {
            $args = new \saasame\transport\common_connection_service_add_connection_args();
            $args->read($input);
        }
        $input->readMessageEnd();
        $result = new \saasame\transport\common_connection_service_add_connection_result();
        try {
            $result->success = $this->handler_->add_connection($args->session_id, $args->conn);
        } catch (\saasame\transport\invalid_operation $ouch) {
            $result->ouch = $ouch;
        }
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $output,
                'add_connection',
                TMessageType::REPLY,
                $result,
                $seqid,
                $output->isStrictWrite()
            );
        } else {
            $output->writeMessageBegin('add_connection', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_remove_connection($seqid, $input, $output)
    {
        $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
        if ($bin_accel) {
            $args = thrift_protocol_read_binary_after_message_begin(
                $input,
                '\saasame\transport\common_connection_service_remove_connection_args',
                $input->isStrictRead()
            );
        } else {
            $args = new \saasame\transport\common_connection_service_remove_connection_args();
            $args->read($input);
        }
        $input->readMessageEnd();
        $result = new \saasame\transport\common_connection_service_remove_connection_result();
        try {
            $result->success = $this->handler_->remove_connection($args->session_id, $args->connection_id);
        } catch (\saasame\transport\invalid_operation $ouch) {
            $result->ouch = $ouch;
        }
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $output,
                'remove_connection',
                TMessageType::REPLY,
                $result,
                $seqid,
                $output->isStrictWrite()
            );
        } else {
            $output->writeMessageBegin('remove_connection', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_modify_connection($seqid, $input, $output)
    {
        $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
        if ($bin_accel) {
            $args = thrift_protocol_read_binary_after_message_begin(
                $input,
                '\saasame\transport\common_connection_service_modify_connection_args',
                $input->isStrictRead()
            );
        } else {
            $args = new \saasame\transport\common_connection_service_modify_connection_args();
            $args->read($input);
        }
        $input->readMessageEnd();
        $result = new \saasame\transport\common_connection_service_modify_connection_result();
        try {
            $result->success = $this->handler_->modify_connection($args->session_id, $args->conn);
        } catch (\saasame\transport\invalid_operation $ouch) {
            $result->ouch = $ouch;
        }
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $output,
                'modify_connection',
                TMessageType::REPLY,
                $result,
                $seqid,
                $output->isStrictWrite()
            );
        } else {
            $output->writeMessageBegin('modify_connection', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_enumerate_connections($seqid, $input, $output)
    {
        $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
        if ($bin_accel) {
            $args = thrift_protocol_read_binary_after_message_begin(
                $input,
                '\saasame\transport\common_connection_service_enumerate_connections_args',
                $input->isStrictRead()
            );
        } else {
            $args = new \saasame\transport\common_connection_service_enumerate_connections_args();
            $args->read($input);
        }
        $input->readMessageEnd();
        $result = new \saasame\transport\common_connection_service_enumerate_connections_result();
        try {
            $result->success = $this->handler_->enumerate_connections($args->session_id);
        } catch (\saasame\transport\invalid_operation $ouch) {
            $result->ouch = $ouch;
        }
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $output,
                'enumerate_connections',
                TMessageType::REPLY,
                $result,
                $seqid,
                $output->isStrictWrite()
            );
        } else {
            $output->writeMessageBegin('enumerate_connections', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_get_connection($seqid, $input, $output)
    {
        $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
        if ($bin_accel) {
            $args = thrift_protocol_read_binary_after_message_begin(
                $input,
                '\saasame\transport\common_connection_service_get_connection_args',
                $input->isStrictRead()
            );
        } else {
            $args = new \saasame\transport\common_connection_service_get_connection_args();
            $args->read($input);
        }
        $input->readMessageEnd();
        $result = new \saasame\transport\common_connection_service_get_connection_result();
        try {
            $result->success = $this->handler_->get_connection($args->session_id, $args->connection_id);
        } catch (\saasame\transport\invalid_operation $ouch) {
            $result->ouch = $ouch;
        }
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $output,
                'get_connection',
                TMessageType::REPLY,
                $result,
                $seqid,
                $output->isStrictWrite()
            );
        } else {
            $output->writeMessageBegin('get_connection', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_get_available_bytes($seqid, $input, $output)
    {
        $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
        if ($bin_accel) {
            $args = thrift_protocol_read_binary_after_message_begin(
                $input,
                '\saasame\transport\common_connection_service_get_available_bytes_args',
                $input->isStrictRead()
            );
        } else {
            $args = new \saasame\transport\common_connection_service_get_available_bytes_args();
            $args->read($input);
        }
        $input->readMessageEnd();
        $result = new \saasame\transport\common_connection_service_get_available_bytes_result();
        try {
            $result->success = $this->handler_->get_available_bytes($args->session_id, $args->connection_id);
        } catch (\saasame\transport\invalid_operation $ouch) {
            $result->ouch = $ouch;
        }
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $output,
                'get_available_bytes',
                TMessageType::REPLY,
                $result,
                $seqid,
                $output->isStrictWrite()
            );
        } else {
            $output->writeMessageBegin('get_available_bytes', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
}


