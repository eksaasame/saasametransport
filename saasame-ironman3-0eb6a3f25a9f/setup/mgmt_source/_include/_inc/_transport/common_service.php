<?php
namespace saasame\transport;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

interface common_serviceIf
{
    /**
     * @return \saasame\transport\service_info
     */
    public function ping();
    /**
     * @param string $session_id
     * @param int $filter
     * @return \saasame\transport\physical_machine_info
     * @throws \saasame\transport\invalid_operation
     */
    public function get_host_detail($session_id, $filter);
    /**
     * @param string $session_id
     * @return \saasame\transport\service_info[]
     * @throws \saasame\transport\invalid_operation
     */
    public function get_service_list($session_id);
    /**
     * @param int $filter
     * @return \saasame\transport\disk_info[]
     * @throws \saasame\transport\invalid_operation
     */
    public function enumerate_disks($filter);
    /**
     * @param string $carrier
     * @param bool $is_ssl
     * @return bool
     */
    public function verify_carrier($carrier, $is_ssl);
    /**
     * @return string
     * @throws \saasame\transport\invalid_operation
     */
    public function take_xray();
    /**
     * @return string
     * @throws \saasame\transport\invalid_operation
     */
    public function take_xrays();
    /**
     * @param string $session
     * @param int $timeout
     * @return bool
     * @throws \saasame\transport\invalid_operation
     */
    public function create_mutex($session, $timeout);
    /**
     * @param string $session
     * @return bool
     * @throws \saasame\transport\invalid_operation
     */
    public function delete_mutex($session);
}
class common_serviceClient implements \saasame\transport\common_serviceIf
{
    protected $input_ = null;
    protected $output_ = null;

    protected $seqid_ = 0;

    public function __construct($input, $output = null)
    {
        $this->input_ = $input;
        $this->output_ = $output ? $output : $input;
    }


    public function ping()
    {
        $this->send_ping();
        return $this->recv_ping();
    }

    public function send_ping()
    {
        $args = new \saasame\transport\common_service_ping_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ping',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ping', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ping()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\saasame\transport\common_service_ping_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \saasame\transport\common_service_ping_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("ping failed: unknown result");
    }

    public function get_host_detail($session_id, $filter)
    {
        $this->send_get_host_detail($session_id, $filter);
        return $this->recv_get_host_detail();
    }

    public function send_get_host_detail($session_id, $filter)
    {
        $args = new \saasame\transport\common_service_get_host_detail_args();
        $args->session_id = $session_id;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'get_host_detail',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('get_host_detail', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_get_host_detail()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\saasame\transport\common_service_get_host_detail_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \saasame\transport\common_service_get_host_detail_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ouch !== null) {
            throw $result->ouch;
        }
        throw new \Exception("get_host_detail failed: unknown result");
    }

    public function get_service_list($session_id)
    {
        $this->send_get_service_list($session_id);
        return $this->recv_get_service_list();
    }

    public function send_get_service_list($session_id)
    {
        $args = new \saasame\transport\common_service_get_service_list_args();
        $args->session_id = $session_id;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'get_service_list',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('get_service_list', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_get_service_list()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\saasame\transport\common_service_get_service_list_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \saasame\transport\common_service_get_service_list_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ouch !== null) {
            throw $result->ouch;
        }
        throw new \Exception("get_service_list failed: unknown result");
    }

    public function enumerate_disks($filter)
    {
        $this->send_enumerate_disks($filter);
        return $this->recv_enumerate_disks();
    }

    public function send_enumerate_disks($filter)
    {
        $args = new \saasame\transport\common_service_enumerate_disks_args();
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'enumerate_disks',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('enumerate_disks', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_enumerate_disks()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\saasame\transport\common_service_enumerate_disks_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \saasame\transport\common_service_enumerate_disks_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ouch !== null) {
            throw $result->ouch;
        }
        throw new \Exception("enumerate_disks failed: unknown result");
    }

    public function verify_carrier($carrier, $is_ssl)
    {
        $this->send_verify_carrier($carrier, $is_ssl);
        return $this->recv_verify_carrier();
    }

    public function send_verify_carrier($carrier, $is_ssl)
    {
        $args = new \saasame\transport\common_service_verify_carrier_args();
        $args->carrier = $carrier;
        $args->is_ssl = $is_ssl;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'verify_carrier',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('verify_carrier', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_verify_carrier()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\saasame\transport\common_service_verify_carrier_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \saasame\transport\common_service_verify_carrier_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("verify_carrier failed: unknown result");
    }

    public function take_xray()
    {
        $this->send_take_xray();
        return $this->recv_take_xray();
    }

    public function send_take_xray()
    {
        $args = new \saasame\transport\common_service_take_xray_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'take_xray',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('take_xray', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_take_xray()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\saasame\transport\common_service_take_xray_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \saasame\transport\common_service_take_xray_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ouch !== null) {
            throw $result->ouch;
        }
        throw new \Exception("take_xray failed: unknown result");
    }

    public function take_xrays()
    {
        $this->send_take_xrays();
        return $this->recv_take_xrays();
    }

    public function send_take_xrays()
    {
        $args = new \saasame\transport\common_service_take_xrays_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'take_xrays',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('take_xrays', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_take_xrays()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\saasame\transport\common_service_take_xrays_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \saasame\transport\common_service_take_xrays_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ouch !== null) {
            throw $result->ouch;
        }
        throw new \Exception("take_xrays failed: unknown result");
    }

    public function create_mutex($session, $timeout)
    {
        $this->send_create_mutex($session, $timeout);
        return $this->recv_create_mutex();
    }

    public function send_create_mutex($session, $timeout)
    {
        $args = new \saasame\transport\common_service_create_mutex_args();
        $args->session = $session;
        $args->timeout = $timeout;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'create_mutex',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('create_mutex', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_create_mutex()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\saasame\transport\common_service_create_mutex_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \saasame\transport\common_service_create_mutex_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ouch !== null) {
            throw $result->ouch;
        }
        throw new \Exception("create_mutex failed: unknown result");
    }

    public function delete_mutex($session)
    {
        $this->send_delete_mutex($session);
        return $this->recv_delete_mutex();
    }

    public function send_delete_mutex($session)
    {
        $args = new \saasame\transport\common_service_delete_mutex_args();
        $args->session = $session;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'delete_mutex',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('delete_mutex', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_delete_mutex()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\saasame\transport\common_service_delete_mutex_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \saasame\transport\common_service_delete_mutex_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ouch !== null) {
            throw $result->ouch;
        }
        throw new \Exception("delete_mutex failed: unknown result");
    }
}
// HELPER FUNCTIONS AND STRUCTURES

class common_service_ping_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
    );


    public function __construct()
    {
    }

    public function getName()
    {
        return 'common_service_ping_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_service_ping_args');
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_service_ping_result
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        0 => array(
            'var' => 'success',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\service_info',
        ),
    );

    /**
     * @var \saasame\transport\service_info
     */
    public $success = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
        }
    }

    public function getName()
    {
        return 'common_service_ping_result';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::STRUCT) {
                        $this->success = new \saasame\transport\service_info();
                        $xfer += $this->success->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_service_ping_result');
        if ($this->success !== null) {
            if (!is_object($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
            $xfer += $this->success->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_service_get_host_detail_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'session_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'filter',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var string
     */
    public $session_id = null;
    /**
     * @var int
     */
    public $filter = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['session_id'])) {
                $this->session_id = $vals['session_id'];
            }
            if (isset($vals['filter'])) {
                $this->filter = $vals['filter'];
            }
        }
    }

    public function getName()
    {
        return 'common_service_get_host_detail_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->session_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->filter);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_service_get_host_detail_args');
        if ($this->session_id !== null) {
            $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
            $xfer += $output->writeString($this->session_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->filter !== null) {
            $xfer += $output->writeFieldBegin('filter', TType::I32, 2);
            $xfer += $output->writeI32($this->filter);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_service_get_host_detail_result
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        0 => array(
            'var' => 'success',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\physical_machine_info',
        ),
        1 => array(
            'var' => 'ouch',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\invalid_operation',
        ),
    );

    /**
     * @var \saasame\transport\physical_machine_info
     */
    public $success = null;
    /**
     * @var \saasame\transport\invalid_operation
     */
    public $ouch = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['ouch'])) {
                $this->ouch = $vals['ouch'];
            }
        }
    }

    public function getName()
    {
        return 'common_service_get_host_detail_result';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::STRUCT) {
                        $this->success = new \saasame\transport\physical_machine_info();
                        $xfer += $this->success->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->ouch = new \saasame\transport\invalid_operation();
                        $xfer += $this->ouch->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_service_get_host_detail_result');
        if ($this->success !== null) {
            if (!is_object($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
            $xfer += $this->success->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ouch !== null) {
            $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
            $xfer += $this->ouch->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_service_get_service_list_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'session_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $session_id = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['session_id'])) {
                $this->session_id = $vals['session_id'];
            }
        }
    }

    public function getName()
    {
        return 'common_service_get_service_list_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->session_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_service_get_service_list_args');
        if ($this->session_id !== null) {
            $xfer += $output->writeFieldBegin('session_id', TType::STRING, 1);
            $xfer += $output->writeString($this->session_id);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_service_get_service_list_result
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        0 => array(
            'var' => 'success',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\service_info',
                ),
        ),
        1 => array(
            'var' => 'ouch',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\invalid_operation',
        ),
    );

    /**
     * @var \saasame\transport\service_info[]
     */
    public $success = null;
    /**
     * @var \saasame\transport\invalid_operation
     */
    public $ouch = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['ouch'])) {
                $this->ouch = $vals['ouch'];
            }
        }
    }

    public function getName()
    {
        return 'common_service_get_service_list_result';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::SET) {
                        $this->success = array();
                        $_size1168 = 0;
                        $_etype1171 = 0;
                        $xfer += $input->readSetBegin($_etype1171, $_size1168);
                        for ($_i1172 = 0; $_i1172 < $_size1168; ++$_i1172) {
                            $elem1173 = null;
                            $elem1173 = new \saasame\transport\service_info();
                            $xfer += $elem1173->read($input);
                            $this->success[] = $elem1173;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->ouch = new \saasame\transport\invalid_operation();
                        $xfer += $this->ouch->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_service_get_service_list_result');
        if ($this->success !== null) {
            if (!is_array($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::SET, 0);
            $output->writeSetBegin(TType::STRUCT, count($this->success));
            foreach ($this->success as $iter1174 => $iter1175) {
                $xfer += $iter1175->write($output);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ouch !== null) {
            $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
            $xfer += $this->ouch->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_service_enumerate_disks_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'filter',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var int
     */
    public $filter = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['filter'])) {
                $this->filter = $vals['filter'];
            }
        }
    }

    public function getName()
    {
        return 'common_service_enumerate_disks_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->filter);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_service_enumerate_disks_args');
        if ($this->filter !== null) {
            $xfer += $output->writeFieldBegin('filter', TType::I32, 1);
            $xfer += $output->writeI32($this->filter);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_service_enumerate_disks_result
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        0 => array(
            'var' => 'success',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\disk_info',
                ),
        ),
        1 => array(
            'var' => 'ouch',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\invalid_operation',
        ),
    );

    /**
     * @var \saasame\transport\disk_info[]
     */
    public $success = null;
    /**
     * @var \saasame\transport\invalid_operation
     */
    public $ouch = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['ouch'])) {
                $this->ouch = $vals['ouch'];
            }
        }
    }

    public function getName()
    {
        return 'common_service_enumerate_disks_result';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::SET) {
                        $this->success = array();
                        $_size1176 = 0;
                        $_etype1179 = 0;
                        $xfer += $input->readSetBegin($_etype1179, $_size1176);
                        for ($_i1180 = 0; $_i1180 < $_size1176; ++$_i1180) {
                            $elem1181 = null;
                            $elem1181 = new \saasame\transport\disk_info();
                            $xfer += $elem1181->read($input);
                            $this->success[] = $elem1181;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->ouch = new \saasame\transport\invalid_operation();
                        $xfer += $this->ouch->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_service_enumerate_disks_result');
        if ($this->success !== null) {
            if (!is_array($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::SET, 0);
            $output->writeSetBegin(TType::STRUCT, count($this->success));
            foreach ($this->success as $iter1182 => $iter1183) {
                $xfer += $iter1183->write($output);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ouch !== null) {
            $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
            $xfer += $this->ouch->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_service_verify_carrier_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'carrier',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'is_ssl',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var string
     */
    public $carrier = null;
    /**
     * @var bool
     */
    public $is_ssl = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['carrier'])) {
                $this->carrier = $vals['carrier'];
            }
            if (isset($vals['is_ssl'])) {
                $this->is_ssl = $vals['is_ssl'];
            }
        }
    }

    public function getName()
    {
        return 'common_service_verify_carrier_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->carrier);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_ssl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_service_verify_carrier_args');
        if ($this->carrier !== null) {
            $xfer += $output->writeFieldBegin('carrier', TType::STRING, 1);
            $xfer += $output->writeString($this->carrier);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_ssl !== null) {
            $xfer += $output->writeFieldBegin('is_ssl', TType::BOOL, 2);
            $xfer += $output->writeBool($this->is_ssl);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_service_verify_carrier_result
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        0 => array(
            'var' => 'success',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var bool
     */
    public $success = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
        }
    }

    public function getName()
    {
        return 'common_service_verify_carrier_result';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_service_verify_carrier_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_service_take_xray_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
    );


    public function __construct()
    {
    }

    public function getName()
    {
        return 'common_service_take_xray_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_service_take_xray_args');
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_service_take_xray_result
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        0 => array(
            'var' => 'success',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        1 => array(
            'var' => 'ouch',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\invalid_operation',
        ),
    );

    /**
     * @var string
     */
    public $success = null;
    /**
     * @var \saasame\transport\invalid_operation
     */
    public $ouch = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['ouch'])) {
                $this->ouch = $vals['ouch'];
            }
        }
    }

    public function getName()
    {
        return 'common_service_take_xray_result';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->ouch = new \saasame\transport\invalid_operation();
                        $xfer += $this->ouch->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_service_take_xray_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
            $xfer += $output->writeString($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ouch !== null) {
            $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
            $xfer += $this->ouch->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_service_take_xrays_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
    );


    public function __construct()
    {
    }

    public function getName()
    {
        return 'common_service_take_xrays_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_service_take_xrays_args');
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_service_take_xrays_result
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        0 => array(
            'var' => 'success',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        1 => array(
            'var' => 'ouch',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\invalid_operation',
        ),
    );

    /**
     * @var string
     */
    public $success = null;
    /**
     * @var \saasame\transport\invalid_operation
     */
    public $ouch = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['ouch'])) {
                $this->ouch = $vals['ouch'];
            }
        }
    }

    public function getName()
    {
        return 'common_service_take_xrays_result';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->ouch = new \saasame\transport\invalid_operation();
                        $xfer += $this->ouch->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_service_take_xrays_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
            $xfer += $output->writeString($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ouch !== null) {
            $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
            $xfer += $this->ouch->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_service_create_mutex_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'session',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'timeout',
            'isRequired' => false,
            'type' => TType::I16,
        ),
    );

    /**
     * @var string
     */
    public $session = null;
    /**
     * @var int
     */
    public $timeout = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['session'])) {
                $this->session = $vals['session'];
            }
            if (isset($vals['timeout'])) {
                $this->timeout = $vals['timeout'];
            }
        }
    }

    public function getName()
    {
        return 'common_service_create_mutex_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->session);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->timeout);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_service_create_mutex_args');
        if ($this->session !== null) {
            $xfer += $output->writeFieldBegin('session', TType::STRING, 1);
            $xfer += $output->writeString($this->session);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->timeout !== null) {
            $xfer += $output->writeFieldBegin('timeout', TType::I16, 2);
            $xfer += $output->writeI16($this->timeout);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_service_create_mutex_result
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        0 => array(
            'var' => 'success',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        1 => array(
            'var' => 'ouch',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\invalid_operation',
        ),
    );

    /**
     * @var bool
     */
    public $success = null;
    /**
     * @var \saasame\transport\invalid_operation
     */
    public $ouch = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['ouch'])) {
                $this->ouch = $vals['ouch'];
            }
        }
    }

    public function getName()
    {
        return 'common_service_create_mutex_result';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->ouch = new \saasame\transport\invalid_operation();
                        $xfer += $this->ouch->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_service_create_mutex_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ouch !== null) {
            $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
            $xfer += $this->ouch->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_service_delete_mutex_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'session',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $session = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['session'])) {
                $this->session = $vals['session'];
            }
        }
    }

    public function getName()
    {
        return 'common_service_delete_mutex_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->session);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_service_delete_mutex_args');
        if ($this->session !== null) {
            $xfer += $output->writeFieldBegin('session', TType::STRING, 1);
            $xfer += $output->writeString($this->session);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_service_delete_mutex_result
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        0 => array(
            'var' => 'success',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        1 => array(
            'var' => 'ouch',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\invalid_operation',
        ),
    );

    /**
     * @var bool
     */
    public $success = null;
    /**
     * @var \saasame\transport\invalid_operation
     */
    public $ouch = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['ouch'])) {
                $this->ouch = $vals['ouch'];
            }
        }
    }

    public function getName()
    {
        return 'common_service_delete_mutex_result';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->ouch = new \saasame\transport\invalid_operation();
                        $xfer += $this->ouch->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('common_service_delete_mutex_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ouch !== null) {
            $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
            $xfer += $this->ouch->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class common_serviceProcessor
{
    protected $handler_ = null;
    public function __construct($handler)
    {
        $this->handler_ = $handler;
    }

    public function process($input, $output)
    {
        $rseqid = 0;
        $fname = null;
        $mtype = 0;

        $input->readMessageBegin($fname, $mtype, $rseqid);
        $methodname = 'process_'.$fname;
        if (!method_exists($this, $methodname)) {
              $input->skip(TType::STRUCT);
              $input->readMessageEnd();
              $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
              $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
              $x->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              return;
        }
        $this->$methodname($rseqid, $input, $output);
        return true;
    }

    protected function process_ping($seqid, $input, $output)
    {
        $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
        if ($bin_accel) {
            $args = thrift_protocol_read_binary_after_message_begin(
                $input,
                '\saasame\transport\common_service_ping_args',
                $input->isStrictRead()
            );
        } else {
            $args = new \saasame\transport\common_service_ping_args();
            $args->read($input);
        }
        $input->readMessageEnd();
        $result = new \saasame\transport\common_service_ping_result();
        $result->success = $this->handler_->ping();
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $output,
                'ping',
                TMessageType::REPLY,
                $result,
                $seqid,
                $output->isStrictWrite()
            );
        } else {
            $output->writeMessageBegin('ping', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_get_host_detail($seqid, $input, $output)
    {
        $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
        if ($bin_accel) {
            $args = thrift_protocol_read_binary_after_message_begin(
                $input,
                '\saasame\transport\common_service_get_host_detail_args',
                $input->isStrictRead()
            );
        } else {
            $args = new \saasame\transport\common_service_get_host_detail_args();
            $args->read($input);
        }
        $input->readMessageEnd();
        $result = new \saasame\transport\common_service_get_host_detail_result();
        try {
            $result->success = $this->handler_->get_host_detail($args->session_id, $args->filter);
        } catch (\saasame\transport\invalid_operation $ouch) {
            $result->ouch = $ouch;
        }
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $output,
                'get_host_detail',
                TMessageType::REPLY,
                $result,
                $seqid,
                $output->isStrictWrite()
            );
        } else {
            $output->writeMessageBegin('get_host_detail', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_get_service_list($seqid, $input, $output)
    {
        $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
        if ($bin_accel) {
            $args = thrift_protocol_read_binary_after_message_begin(
                $input,
                '\saasame\transport\common_service_get_service_list_args',
                $input->isStrictRead()
            );
        } else {
            $args = new \saasame\transport\common_service_get_service_list_args();
            $args->read($input);
        }
        $input->readMessageEnd();
        $result = new \saasame\transport\common_service_get_service_list_result();
        try {
            $result->success = $this->handler_->get_service_list($args->session_id);
        } catch (\saasame\transport\invalid_operation $ouch) {
            $result->ouch = $ouch;
        }
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $output,
                'get_service_list',
                TMessageType::REPLY,
                $result,
                $seqid,
                $output->isStrictWrite()
            );
        } else {
            $output->writeMessageBegin('get_service_list', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_enumerate_disks($seqid, $input, $output)
    {
        $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
        if ($bin_accel) {
            $args = thrift_protocol_read_binary_after_message_begin(
                $input,
                '\saasame\transport\common_service_enumerate_disks_args',
                $input->isStrictRead()
            );
        } else {
            $args = new \saasame\transport\common_service_enumerate_disks_args();
            $args->read($input);
        }
        $input->readMessageEnd();
        $result = new \saasame\transport\common_service_enumerate_disks_result();
        try {
            $result->success = $this->handler_->enumerate_disks($args->filter);
        } catch (\saasame\transport\invalid_operation $ouch) {
            $result->ouch = $ouch;
        }
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $output,
                'enumerate_disks',
                TMessageType::REPLY,
                $result,
                $seqid,
                $output->isStrictWrite()
            );
        } else {
            $output->writeMessageBegin('enumerate_disks', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_verify_carrier($seqid, $input, $output)
    {
        $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
        if ($bin_accel) {
            $args = thrift_protocol_read_binary_after_message_begin(
                $input,
                '\saasame\transport\common_service_verify_carrier_args',
                $input->isStrictRead()
            );
        } else {
            $args = new \saasame\transport\common_service_verify_carrier_args();
            $args->read($input);
        }
        $input->readMessageEnd();
        $result = new \saasame\transport\common_service_verify_carrier_result();
        $result->success = $this->handler_->verify_carrier($args->carrier, $args->is_ssl);
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $output,
                'verify_carrier',
                TMessageType::REPLY,
                $result,
                $seqid,
                $output->isStrictWrite()
            );
        } else {
            $output->writeMessageBegin('verify_carrier', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_take_xray($seqid, $input, $output)
    {
        $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
        if ($bin_accel) {
            $args = thrift_protocol_read_binary_after_message_begin(
                $input,
                '\saasame\transport\common_service_take_xray_args',
                $input->isStrictRead()
            );
        } else {
            $args = new \saasame\transport\common_service_take_xray_args();
            $args->read($input);
        }
        $input->readMessageEnd();
        $result = new \saasame\transport\common_service_take_xray_result();
        try {
            $result->success = $this->handler_->take_xray();
        } catch (\saasame\transport\invalid_operation $ouch) {
            $result->ouch = $ouch;
        }
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $output,
                'take_xray',
                TMessageType::REPLY,
                $result,
                $seqid,
                $output->isStrictWrite()
            );
        } else {
            $output->writeMessageBegin('take_xray', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_take_xrays($seqid, $input, $output)
    {
        $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
        if ($bin_accel) {
            $args = thrift_protocol_read_binary_after_message_begin(
                $input,
                '\saasame\transport\common_service_take_xrays_args',
                $input->isStrictRead()
            );
        } else {
            $args = new \saasame\transport\common_service_take_xrays_args();
            $args->read($input);
        }
        $input->readMessageEnd();
        $result = new \saasame\transport\common_service_take_xrays_result();
        try {
            $result->success = $this->handler_->take_xrays();
        } catch (\saasame\transport\invalid_operation $ouch) {
            $result->ouch = $ouch;
        }
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $output,
                'take_xrays',
                TMessageType::REPLY,
                $result,
                $seqid,
                $output->isStrictWrite()
            );
        } else {
            $output->writeMessageBegin('take_xrays', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_create_mutex($seqid, $input, $output)
    {
        $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
        if ($bin_accel) {
            $args = thrift_protocol_read_binary_after_message_begin(
                $input,
                '\saasame\transport\common_service_create_mutex_args',
                $input->isStrictRead()
            );
        } else {
            $args = new \saasame\transport\common_service_create_mutex_args();
            $args->read($input);
        }
        $input->readMessageEnd();
        $result = new \saasame\transport\common_service_create_mutex_result();
        try {
            $result->success = $this->handler_->create_mutex($args->session, $args->timeout);
        } catch (\saasame\transport\invalid_operation $ouch) {
            $result->ouch = $ouch;
        }
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $output,
                'create_mutex',
                TMessageType::REPLY,
                $result,
                $seqid,
                $output->isStrictWrite()
            );
        } else {
            $output->writeMessageBegin('create_mutex', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
    protected function process_delete_mutex($seqid, $input, $output)
    {
        $bin_accel = ($input instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary_after_message_begin');
        if ($bin_accel) {
            $args = thrift_protocol_read_binary_after_message_begin(
                $input,
                '\saasame\transport\common_service_delete_mutex_args',
                $input->isStrictRead()
            );
        } else {
            $args = new \saasame\transport\common_service_delete_mutex_args();
            $args->read($input);
        }
        $input->readMessageEnd();
        $result = new \saasame\transport\common_service_delete_mutex_result();
        try {
            $result->success = $this->handler_->delete_mutex($args->session);
        } catch (\saasame\transport\invalid_operation $ouch) {
            $result->ouch = $ouch;
        }
        $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $output,
                'delete_mutex',
                TMessageType::REPLY,
                $result,
                $seqid,
                $output->isStrictWrite()
            );
        } else {
            $output->writeMessageBegin('delete_mutex', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
        }
    }
}


