<?php
namespace saasame\transport;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

final class enumerate_disk_filter_style
{
    const ALL_DISK = 0;

    const UNINITIALIZED_DISK = 1;

    static public $__names = array(
        0 => 'ALL_DISK',
        1 => 'UNINITIALIZED_DISK',
    );
}

final class machine_detail_filter
{
    const FULL = 0;

    const SIMPLE = 1;

    static public $__names = array(
        0 => 'FULL',
        1 => 'SIMPLE',
    );
}

final class partition_style
{
    const PARTITION_UNKNOWN = 0;

    const PARTITION_MBR = 1;

    const PARTITION_GPT = 2;

    static public $__names = array(
        0 => 'PARTITION_UNKNOWN',
        1 => 'PARTITION_MBR',
        2 => 'PARTITION_GPT',
    );
}

final class drive_type
{
    const DT_UNKNOWN = 0;

    const DT_NO_ROOT_PATH = 1;

    const DT_REMOVABLE = 2;

    const DT_FIXED = 3;

    const DT_REMOTE = 4;

    const DT_CDROM = 5;

    const DT_RAMDISK = 6;

    static public $__names = array(
        0 => 'DT_UNKNOWN',
        1 => 'DT_NO_ROOT_PATH',
        2 => 'DT_REMOVABLE',
        3 => 'DT_FIXED',
        4 => 'DT_REMOTE',
        5 => 'DT_CDROM',
        6 => 'DT_RAMDISK',
    );
}

final class bus_type
{
    const Unknown = 0;

    const SCSI = 1;

    const ATAPI = 2;

    const ATA = 3;

    const IEEE_1394 = 4;

    const SSA = 5;

    const Fibre_Channel = 6;

    const USB = 7;

    const RAID = 8;

    const iSCSI = 9;

    const SAS = 10;

    const SATA = 11;

    const SD = 12;

    const MMC = 13;

    const Virtual = 14;

    const File_Backed_Virtual = 15;

    const Storage_Spaces = 16;

    const NVMe = 17;

    static public $__names = array(
        0 => 'Unknown',
        1 => 'SCSI',
        2 => 'ATAPI',
        3 => 'ATA',
        4 => 'IEEE_1394',
        5 => 'SSA',
        6 => 'Fibre_Channel',
        7 => 'USB',
        8 => 'RAID',
        9 => 'iSCSI',
        10 => 'SAS',
        11 => 'SATA',
        12 => 'SD',
        13 => 'MMC',
        14 => 'Virtual',
        15 => 'File_Backed_Virtual',
        16 => 'Storage_Spaces',
        17 => 'NVMe',
    );
}

final class hv_vm_tools_status
{
    const HV_VMTOOLS_UNKNOWN = 0;

    const HV_VMTOOLS_OK = 1;

    const HV_VMTOOLS_NOTINSTALLED = 2;

    const HV_VMTOOLS_OLD = 3;

    const HV_VMTOOLS_NOTRUNNING = 4;

    const HV_VMTOOLS_NEEDUPGRADE = 5;

    const HV_VMTOOLS_UNMANAGED = 6;

    const HV_VMTOOLS_NEW = 7;

    const HV_VMTOOLS_BLACKLISTED = 8;

    static public $__names = array(
        0 => 'HV_VMTOOLS_UNKNOWN',
        1 => 'HV_VMTOOLS_OK',
        2 => 'HV_VMTOOLS_NOTINSTALLED',
        3 => 'HV_VMTOOLS_OLD',
        4 => 'HV_VMTOOLS_NOTRUNNING',
        5 => 'HV_VMTOOLS_NEEDUPGRADE',
        6 => 'HV_VMTOOLS_UNMANAGED',
        7 => 'HV_VMTOOLS_NEW',
        8 => 'HV_VMTOOLS_BLACKLISTED',
    );
}

final class hv_vm_power_state
{
    const HV_VMPOWER_UNKNOWN = 0;

    const HV_VMPOWER_ON = 1;

    const HV_VMPOWER_OFF = 2;

    const HV_VMPOWER_SUSPENDED = 3;

    static public $__names = array(
        0 => 'HV_VMPOWER_UNKNOWN',
        1 => 'HV_VMPOWER_ON',
        2 => 'HV_VMPOWER_OFF',
        3 => 'HV_VMPOWER_SUSPENDED',
    );
}

final class hv_vm_connection_state
{
    const HV_VMCONNECT_UNKNOWN = 0;

    const HV_VMCONNECT_CONNECTED = 1;

    const HV_VMCONNECT_DISCONNECTED = 2;

    const HV_VMCONNECT_INACCESSIBLE = 3;

    const HV_VMCONNECT_INVALID = 4;

    const HV_VMCONNECT_ORPHANED = 5;

    static public $__names = array(
        0 => 'HV_VMCONNECT_UNKNOWN',
        1 => 'HV_VMCONNECT_CONNECTED',
        2 => 'HV_VMCONNECT_DISCONNECTED',
        3 => 'HV_VMCONNECT_INACCESSIBLE',
        4 => 'HV_VMCONNECT_INVALID',
        5 => 'HV_VMCONNECT_ORPHANED',
    );
}

final class hv_host_power_state
{
    const HV_HOSTPOWER_UNKNOWN = 0;

    const HV_HOSTPOWER_ON = 1;

    const HV_HOSTPOWER_OFF = 2;

    const HV_HOSTPOWER_STANDBY = 3;

    static public $__names = array(
        0 => 'HV_HOSTPOWER_UNKNOWN',
        1 => 'HV_HOSTPOWER_ON',
        2 => 'HV_HOSTPOWER_OFF',
        3 => 'HV_HOSTPOWER_STANDBY',
    );
}

final class hv_connection_type
{
    const HV_CONNECTION_TYPE_UNKNOWN = 0;

    const HV_CONNECTION_TYPE_VCENTER = 1;

    const HV_CONNECTION_TYPE_HOST = 2;

    static public $__names = array(
        0 => 'HV_CONNECTION_TYPE_UNKNOWN',
        1 => 'HV_CONNECTION_TYPE_VCENTER',
        2 => 'HV_CONNECTION_TYPE_HOST',
    );
}

final class hv_guest_os_type
{
    const HV_OS_UNKNOWN = 0;

    const HV_OS_WINDOWS = 1;

    const HV_OS_LINUX = 2;

    static public $__names = array(
        0 => 'HV_OS_UNKNOWN',
        1 => 'HV_OS_WINDOWS',
        2 => 'HV_OS_LINUX',
    );
}

final class hv_controller_type
{
    const HV_CTRL_ANY = -1;

    const HV_CTRL_IDE = 0;

    const HV_CTRL_PARA_VIRT_SCSI = 1;

    const HV_CTRL_BUS_LOGIC = 2;

    const HV_CTRL_LSI_LOGIC = 3;

    const HV_CTRL_LSI_LOGIC_SAS = 4;

    static public $__names = array(
        -1 => 'HV_CTRL_ANY',
        0 => 'HV_CTRL_IDE',
        1 => 'HV_CTRL_PARA_VIRT_SCSI',
        2 => 'HV_CTRL_BUS_LOGIC',
        3 => 'HV_CTRL_LSI_LOGIC',
        4 => 'HV_CTRL_LSI_LOGIC_SAS',
    );
}

final class hv_vm_firmware
{
    const HV_VM_FIRMWARE_BIOS = 0;

    const HV_VM_FIRMWARE_EFI = 1;

    static public $__names = array(
        0 => 'HV_VM_FIRMWARE_BIOS',
        1 => 'HV_VM_FIRMWARE_EFI',
    );
}

final class job_type
{
    const physical_packer_job_type = 1;

    const virtual_packer_job_type = 2;

    const physical_transport_type = 3;

    const virtual_transport_type = 4;

    const loader_job_type = 5;

    const launcher_job_type = 6;

    const winpe_packer_job_type = 7;

    const winpe_transport_job_type = 8;

    static public $__names = array(
        1 => 'physical_packer_job_type',
        2 => 'virtual_packer_job_type',
        3 => 'physical_transport_type',
        4 => 'virtual_transport_type',
        5 => 'loader_job_type',
        6 => 'launcher_job_type',
        7 => 'winpe_packer_job_type',
        8 => 'winpe_transport_job_type',
    );
}

final class job_trigger_type
{
    const runonce_trigger = 0;

    const interval_trigger = 1;

    static public $__names = array(
        0 => 'runonce_trigger',
        1 => 'interval_trigger',
    );
}

final class job_state
{
    const job_state_none = 1;

    const job_state_initialed = 2;

    const job_state_replicating = 4;

    const job_state_replicated = 8;

    const job_state_converting = 16;

    const job_state_finished = 32;

    const job_state_sche_completed = 64;

    const job_state_recover = 128;

    const job_state_resizing = 256;

    const job_state_uploading = 512;

    const job_state_upload_completed = 1024;

    const job_state_discard = 1073741824;

    static public $__names = array(
        1 => 'job_state_none',
        2 => 'job_state_initialed',
        4 => 'job_state_replicating',
        8 => 'job_state_replicated',
        16 => 'job_state_converting',
        32 => 'job_state_finished',
        64 => 'job_state_sche_completed',
        128 => 'job_state_recover',
        256 => 'job_state_resizing',
        512 => 'job_state_uploading',
        1024 => 'job_state_upload_completed',
        1073741824 => 'job_state_discard',
    );
}

final class error_codes
{
    const SAASAME_S_OK = 0;

    const SAASAME_NOERROR = 0;

    const SAASAME_E_FAIL = 4096;

    const SAASAME_E_INITIAL_FAIL = 4097;

    const SAASAME_E_DISK_FULL = 4098;

    const SAASAME_E_INVALID_ARG = 4099;

    const SAASAME_E_INVALID_AUTHENTICATION = 4100;

    const SAASAME_E_INTERNAL_FAIL = 4101;

    const SAASAME_E_CANNOT_CONNECT_TO_HOST = 4102;

    const SAASAME_E_QUEUE_FULL = 4103;

    const SAASAME_E_INVALID_LICENSE_KEY = 4104;

    const SAASAME_E_INVALID_LICENSE = 4105;

    const SAASAME_E_JOB_CREATE_FAIL = 12288;

    const SAASAME_E_JOB_REMOVE_FAIL = 12289;

    const SAASAME_E_JOB_NOTFOUND = 12290;

    const SAASAME_E_JOB_CONFIG_NOTFOUND = 12291;

    const SAASAME_E_JOB_STATUS_NOTFOUND = 12292;

    const SAASAME_E_JOB_CANCELLED = 12293;

    const SAASAME_E_JOB_CONVERT_FAIL = 12294;

    const SAASAME_E_JOB_REPLICATE_FAIL = 12295;

    const SAASAME_E_JOB_ID_DUPLICATED = 12296;

    const SAASAME_E_JOB_INTERRUPTED = 12297;

    const SAASAME_E_JOB_RUNNING = 12298;

    const SAASAME_E_JOB_RESPONSE = 12299;

    const SAASAME_E_PHYSICAL_CONFIG_FAILED = 16384;

    const SAASAME_E_VIRTUAL_VM_NOTFOUND = 20480;

    const SAASAME_E_IMAGE_NOTFOUND = 24576;

    const SAASAME_E_IMAGE_CREATE_FAIL = 24577;

    const SAASAME_E_IMAGE_OPEN_FAIL = 24578;

    const SAASAME_E_IMAGE_READ = 24579;

    const SAASAME_E_IMAGE_WRITE = 24580;

    const SAASAME_E_IMAGE_OUTOFRANGE = 24581;

    const SAASAME_E_IMAGE_ATTACH_FAIL = 24582;

    const SAASAME_E_IMAGE_DETACH_FAIL = 24583;

    const SAASAME_E_IMAGE_PROPERTY_FAIL = 24584;

    const SAASAME_E_SNAPSHOT_CREATE_FAIL = 28672;

    const SAASAME_E_SNAPSHOT_REMOVE_FAIL = 28673;

    const SAASAME_E_SNAPSHOT_NOTFOUND = 28674;

    const SAASAME_E_SNAPSHOT_INVALID = 28675;

    static public $__names = array(
        0 => 'SAASAME_S_OK',
        0 => 'SAASAME_NOERROR',
        4096 => 'SAASAME_E_FAIL',
        4097 => 'SAASAME_E_INITIAL_FAIL',
        4098 => 'SAASAME_E_DISK_FULL',
        4099 => 'SAASAME_E_INVALID_ARG',
        4100 => 'SAASAME_E_INVALID_AUTHENTICATION',
        4101 => 'SAASAME_E_INTERNAL_FAIL',
        4102 => 'SAASAME_E_CANNOT_CONNECT_TO_HOST',
        4103 => 'SAASAME_E_QUEUE_FULL',
        4104 => 'SAASAME_E_INVALID_LICENSE_KEY',
        4105 => 'SAASAME_E_INVALID_LICENSE',
        12288 => 'SAASAME_E_JOB_CREATE_FAIL',
        12289 => 'SAASAME_E_JOB_REMOVE_FAIL',
        12290 => 'SAASAME_E_JOB_NOTFOUND',
        12291 => 'SAASAME_E_JOB_CONFIG_NOTFOUND',
        12292 => 'SAASAME_E_JOB_STATUS_NOTFOUND',
        12293 => 'SAASAME_E_JOB_CANCELLED',
        12294 => 'SAASAME_E_JOB_CONVERT_FAIL',
        12295 => 'SAASAME_E_JOB_REPLICATE_FAIL',
        12296 => 'SAASAME_E_JOB_ID_DUPLICATED',
        12297 => 'SAASAME_E_JOB_INTERRUPTED',
        12298 => 'SAASAME_E_JOB_RUNNING',
        12299 => 'SAASAME_E_JOB_RESPONSE',
        16384 => 'SAASAME_E_PHYSICAL_CONFIG_FAILED',
        20480 => 'SAASAME_E_VIRTUAL_VM_NOTFOUND',
        24576 => 'SAASAME_E_IMAGE_NOTFOUND',
        24577 => 'SAASAME_E_IMAGE_CREATE_FAIL',
        24578 => 'SAASAME_E_IMAGE_OPEN_FAIL',
        24579 => 'SAASAME_E_IMAGE_READ',
        24580 => 'SAASAME_E_IMAGE_WRITE',
        24581 => 'SAASAME_E_IMAGE_OUTOFRANGE',
        24582 => 'SAASAME_E_IMAGE_ATTACH_FAIL',
        24583 => 'SAASAME_E_IMAGE_DETACH_FAIL',
        24584 => 'SAASAME_E_IMAGE_PROPERTY_FAIL',
        28672 => 'SAASAME_E_SNAPSHOT_CREATE_FAIL',
        28673 => 'SAASAME_E_SNAPSHOT_REMOVE_FAIL',
        28674 => 'SAASAME_E_SNAPSHOT_NOTFOUND',
        28675 => 'SAASAME_E_SNAPSHOT_INVALID',
    );
}

final class connection_type
{
    const LOCAL_FOLDER = 0;

    const NFS_FOLDER = 1;

    const CIFS_FOLDER = 1;

    const WEBDAV = 1;

    const S3_BUCKET = 2;

    const WEBDAV_WITH_SSL = 3;

    const WEBDAV_EX = 4;

    const S3_BUCKET_EX = 5;

    const LOCAL_FOLDER_EX = 6;

    static public $__names = array(
        0 => 'LOCAL_FOLDER',
        1 => 'NFS_FOLDER',
        1 => 'CIFS_FOLDER',
        1 => 'WEBDAV',
        2 => 'S3_BUCKET',
        3 => 'WEBDAV_WITH_SSL',
        4 => 'WEBDAV_EX',
        5 => 'S3_BUCKET_EX',
        6 => 'LOCAL_FOLDER_EX',
    );
}

final class aws_region
{
    const US_EAST_1 = 0;

    const US_WEST_1 = 1;

    const US_WEST_2 = 2;

    const EU_WEST_1 = 3;

    const EU_CENTRAL_1 = 4;

    const AP_SOUTHEAST_1 = 5;

    const AP_SOUTHEAST_2 = 6;

    const AP_NORTHEAST_1 = 7;

    const AP_NORTHEAST_2 = 8;

    const SA_EAST_1 = 9;

    static public $__names = array(
        0 => 'US_EAST_1',
        1 => 'US_WEST_1',
        2 => 'US_WEST_2',
        3 => 'EU_WEST_1',
        4 => 'EU_CENTRAL_1',
        5 => 'AP_SOUTHEAST_1',
        6 => 'AP_SOUTHEAST_2',
        7 => 'AP_NORTHEAST_1',
        8 => 'AP_NORTHEAST_2',
        9 => 'SA_EAST_1',
    );
}

final class create_image_option
{
    const VERSION_1 = 0;

    const VERSION_2 = 1;

    static public $__names = array(
        0 => 'VERSION_1',
        1 => 'VERSION_2',
    );
}

final class disk_detect_type
{
    const SCSI_ADDRESS = 0;

    const LINUX_DEVICE_PATH = 0;

    const SERIAL_NUMBER = 1;

    const EXPORT_IMAGE = 2;

    const UNIQUE_ID = 3;

    const CUSTOMIZED_ID = 4;

    const AZURE_BLOB = 5;

    const VMWARE_VADP = 6;

    static public $__names = array(
        0 => 'SCSI_ADDRESS',
        0 => 'LINUX_DEVICE_PATH',
        1 => 'SERIAL_NUMBER',
        2 => 'EXPORT_IMAGE',
        3 => 'UNIQUE_ID',
        4 => 'CUSTOMIZED_ID',
        5 => 'AZURE_BLOB',
        6 => 'VMWARE_VADP',
    );
}

final class virtual_disk_type
{
    const VHD = 0;

    const VHDX = 1;

    static public $__names = array(
        0 => 'VHD',
        1 => 'VHDX',
    );
}

final class conversion_type
{
    const ANY_TO_ANY = 0;

    const OPENSTACK = 1;

    const XEN = 2;

    const VMWARE = 3;

    const HYPERV = 4;

    const AUTO = -1;

    static public $__names = array(
        0 => 'ANY_TO_ANY',
        1 => 'OPENSTACK',
        2 => 'XEN',
        3 => 'VMWARE',
        4 => 'HYPERV',
        -1 => 'AUTO',
    );
}

final class recovery_type
{
    const TEST_RECOVERY = 0;

    const DISASTER_RECOVERY = 1;

    const MIGRATION_RECOVERY = 2;

    static public $__names = array(
        0 => 'TEST_RECOVERY',
        1 => 'DISASTER_RECOVERY',
        2 => 'MIGRATION_RECOVERY',
    );
}

final class extra_options_type
{
    const UNKNOWN = 0;

    const ALIYUN = 1;

    const TENCENT = 2;

    static public $__names = array(
        0 => 'UNKNOWN',
        1 => 'ALIYUN',
        2 => 'TENCENT',
    );
}

class disk_info
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'boot_from_disk',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        2 => array(
            'var' => 'bus_type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'cluster_owner',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'cylinders',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        5 => array(
            'var' => 'friendly_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'guid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'tracks_per_cylinder',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        8 => array(
            'var' => 'is_boot',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        9 => array(
            'var' => 'is_clustered',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        10 => array(
            'var' => 'is_offline',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        11 => array(
            'var' => 'is_readonly',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        12 => array(
            'var' => 'is_snapshot',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        13 => array(
            'var' => 'is_system',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        14 => array(
            'var' => 'location',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        15 => array(
            'var' => 'logical_sector_size',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        16 => array(
            'var' => 'manufacturer',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        17 => array(
            'var' => 'model',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        18 => array(
            'var' => 'number',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        19 => array(
            'var' => 'number_of_partitions',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        20 => array(
            'var' => 'offline_reason',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        21 => array(
            'var' => 'partition_style',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        22 => array(
            'var' => 'path',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        23 => array(
            'var' => 'physical_sector_size',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        24 => array(
            'var' => 'sectors_per_track',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        25 => array(
            'var' => 'serial_number',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        26 => array(
            'var' => 'signature',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        27 => array(
            'var' => 'size',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        28 => array(
            'var' => 'uri',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        29 => array(
            'var' => 'scsi_bus',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        30 => array(
            'var' => 'scsi_logical_unit',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        31 => array(
            'var' => 'scsi_port',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        32 => array(
            'var' => 'scsi_target_id',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        33 => array(
            'var' => 'unique_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        34 => array(
            'var' => 'unique_id_format',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        35 => array(
            'var' => 'customized_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var bool
     */
    public $boot_from_disk = false;
    /**
     * @var int
     */
    public $bus_type =     0;
    /**
     * @var string
     */
    public $cluster_owner = "";
    /**
     * @var int
     */
    public $cylinders = 0;
    /**
     * @var string
     */
    public $friendly_name = "";
    /**
     * @var string
     */
    public $guid = "";
    /**
     * @var int
     */
    public $tracks_per_cylinder = 0;
    /**
     * @var bool
     */
    public $is_boot = false;
    /**
     * @var bool
     */
    public $is_clustered = false;
    /**
     * @var bool
     */
    public $is_offline = false;
    /**
     * @var bool
     */
    public $is_readonly = false;
    /**
     * @var bool
     */
    public $is_snapshot = false;
    /**
     * @var bool
     */
    public $is_system = false;
    /**
     * @var string
     */
    public $location = "";
    /**
     * @var int
     */
    public $logical_sector_size = 0;
    /**
     * @var string
     */
    public $manufacturer = "";
    /**
     * @var string
     */
    public $model = "";
    /**
     * @var int
     */
    public $number = -1;
    /**
     * @var int
     */
    public $number_of_partitions = -1;
    /**
     * @var int
     */
    public $offline_reason = 0;
    /**
     * @var int
     */
    public $partition_style =     0;
    /**
     * @var string
     */
    public $path = "";
    /**
     * @var int
     */
    public $physical_sector_size = 0;
    /**
     * @var int
     */
    public $sectors_per_track = 0;
    /**
     * @var string
     */
    public $serial_number = "";
    /**
     * @var int
     */
    public $signature = 0;
    /**
     * @var int
     */
    public $size = 0;
    /**
     * @var string
     */
    public $uri = "";
    /**
     * @var int
     */
    public $scsi_bus = 0;
    /**
     * @var int
     */
    public $scsi_logical_unit = 0;
    /**
     * @var int
     */
    public $scsi_port = 0;
    /**
     * @var int
     */
    public $scsi_target_id = 0;
    /**
     * @var string
     */
    public $unique_id = "";
    /**
     * @var int
     */
    public $unique_id_format = 0;
    /**
     * @var string
     */
    public $customized_id = "";

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['boot_from_disk'])) {
                $this->boot_from_disk = $vals['boot_from_disk'];
            }
            if (isset($vals['bus_type'])) {
                $this->bus_type = $vals['bus_type'];
            }
            if (isset($vals['cluster_owner'])) {
                $this->cluster_owner = $vals['cluster_owner'];
            }
            if (isset($vals['cylinders'])) {
                $this->cylinders = $vals['cylinders'];
            }
            if (isset($vals['friendly_name'])) {
                $this->friendly_name = $vals['friendly_name'];
            }
            if (isset($vals['guid'])) {
                $this->guid = $vals['guid'];
            }
            if (isset($vals['tracks_per_cylinder'])) {
                $this->tracks_per_cylinder = $vals['tracks_per_cylinder'];
            }
            if (isset($vals['is_boot'])) {
                $this->is_boot = $vals['is_boot'];
            }
            if (isset($vals['is_clustered'])) {
                $this->is_clustered = $vals['is_clustered'];
            }
            if (isset($vals['is_offline'])) {
                $this->is_offline = $vals['is_offline'];
            }
            if (isset($vals['is_readonly'])) {
                $this->is_readonly = $vals['is_readonly'];
            }
            if (isset($vals['is_snapshot'])) {
                $this->is_snapshot = $vals['is_snapshot'];
            }
            if (isset($vals['is_system'])) {
                $this->is_system = $vals['is_system'];
            }
            if (isset($vals['location'])) {
                $this->location = $vals['location'];
            }
            if (isset($vals['logical_sector_size'])) {
                $this->logical_sector_size = $vals['logical_sector_size'];
            }
            if (isset($vals['manufacturer'])) {
                $this->manufacturer = $vals['manufacturer'];
            }
            if (isset($vals['model'])) {
                $this->model = $vals['model'];
            }
            if (isset($vals['number'])) {
                $this->number = $vals['number'];
            }
            if (isset($vals['number_of_partitions'])) {
                $this->number_of_partitions = $vals['number_of_partitions'];
            }
            if (isset($vals['offline_reason'])) {
                $this->offline_reason = $vals['offline_reason'];
            }
            if (isset($vals['partition_style'])) {
                $this->partition_style = $vals['partition_style'];
            }
            if (isset($vals['path'])) {
                $this->path = $vals['path'];
            }
            if (isset($vals['physical_sector_size'])) {
                $this->physical_sector_size = $vals['physical_sector_size'];
            }
            if (isset($vals['sectors_per_track'])) {
                $this->sectors_per_track = $vals['sectors_per_track'];
            }
            if (isset($vals['serial_number'])) {
                $this->serial_number = $vals['serial_number'];
            }
            if (isset($vals['signature'])) {
                $this->signature = $vals['signature'];
            }
            if (isset($vals['size'])) {
                $this->size = $vals['size'];
            }
            if (isset($vals['uri'])) {
                $this->uri = $vals['uri'];
            }
            if (isset($vals['scsi_bus'])) {
                $this->scsi_bus = $vals['scsi_bus'];
            }
            if (isset($vals['scsi_logical_unit'])) {
                $this->scsi_logical_unit = $vals['scsi_logical_unit'];
            }
            if (isset($vals['scsi_port'])) {
                $this->scsi_port = $vals['scsi_port'];
            }
            if (isset($vals['scsi_target_id'])) {
                $this->scsi_target_id = $vals['scsi_target_id'];
            }
            if (isset($vals['unique_id'])) {
                $this->unique_id = $vals['unique_id'];
            }
            if (isset($vals['unique_id_format'])) {
                $this->unique_id_format = $vals['unique_id_format'];
            }
            if (isset($vals['customized_id'])) {
                $this->customized_id = $vals['customized_id'];
            }
        }
    }

    public function getName()
    {
        return 'disk_info';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->boot_from_disk);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->bus_type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cluster_owner);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->cylinders);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->friendly_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->guid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->tracks_per_cylinder);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_boot);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_clustered);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_offline);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_readonly);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_snapshot);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_system);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->location);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->logical_sector_size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->manufacturer);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->model);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->number);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->number_of_partitions);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->offline_reason);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->partition_style);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 22:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->path);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 23:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->physical_sector_size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 24:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->sectors_per_track);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 25:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->serial_number);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 26:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->signature);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 27:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 28:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->uri);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 29:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->scsi_bus);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 30:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->scsi_logical_unit);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 31:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->scsi_port);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 32:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->scsi_target_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 33:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->unique_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 34:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->unique_id_format);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 35:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->customized_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('disk_info');
        if ($this->boot_from_disk !== null) {
            $xfer += $output->writeFieldBegin('boot_from_disk', TType::BOOL, 1);
            $xfer += $output->writeBool($this->boot_from_disk);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->bus_type !== null) {
            $xfer += $output->writeFieldBegin('bus_type', TType::I32, 2);
            $xfer += $output->writeI32($this->bus_type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cluster_owner !== null) {
            $xfer += $output->writeFieldBegin('cluster_owner', TType::STRING, 3);
            $xfer += $output->writeString($this->cluster_owner);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cylinders !== null) {
            $xfer += $output->writeFieldBegin('cylinders', TType::I64, 4);
            $xfer += $output->writeI64($this->cylinders);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->friendly_name !== null) {
            $xfer += $output->writeFieldBegin('friendly_name', TType::STRING, 5);
            $xfer += $output->writeString($this->friendly_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->guid !== null) {
            $xfer += $output->writeFieldBegin('guid', TType::STRING, 6);
            $xfer += $output->writeString($this->guid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->tracks_per_cylinder !== null) {
            $xfer += $output->writeFieldBegin('tracks_per_cylinder', TType::I32, 7);
            $xfer += $output->writeI32($this->tracks_per_cylinder);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_boot !== null) {
            $xfer += $output->writeFieldBegin('is_boot', TType::BOOL, 8);
            $xfer += $output->writeBool($this->is_boot);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_clustered !== null) {
            $xfer += $output->writeFieldBegin('is_clustered', TType::BOOL, 9);
            $xfer += $output->writeBool($this->is_clustered);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_offline !== null) {
            $xfer += $output->writeFieldBegin('is_offline', TType::BOOL, 10);
            $xfer += $output->writeBool($this->is_offline);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_readonly !== null) {
            $xfer += $output->writeFieldBegin('is_readonly', TType::BOOL, 11);
            $xfer += $output->writeBool($this->is_readonly);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_snapshot !== null) {
            $xfer += $output->writeFieldBegin('is_snapshot', TType::BOOL, 12);
            $xfer += $output->writeBool($this->is_snapshot);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_system !== null) {
            $xfer += $output->writeFieldBegin('is_system', TType::BOOL, 13);
            $xfer += $output->writeBool($this->is_system);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->location !== null) {
            $xfer += $output->writeFieldBegin('location', TType::STRING, 14);
            $xfer += $output->writeString($this->location);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->logical_sector_size !== null) {
            $xfer += $output->writeFieldBegin('logical_sector_size', TType::I32, 15);
            $xfer += $output->writeI32($this->logical_sector_size);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->manufacturer !== null) {
            $xfer += $output->writeFieldBegin('manufacturer', TType::STRING, 16);
            $xfer += $output->writeString($this->manufacturer);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->model !== null) {
            $xfer += $output->writeFieldBegin('model', TType::STRING, 17);
            $xfer += $output->writeString($this->model);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->number !== null) {
            $xfer += $output->writeFieldBegin('number', TType::I32, 18);
            $xfer += $output->writeI32($this->number);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->number_of_partitions !== null) {
            $xfer += $output->writeFieldBegin('number_of_partitions', TType::I32, 19);
            $xfer += $output->writeI32($this->number_of_partitions);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->offline_reason !== null) {
            $xfer += $output->writeFieldBegin('offline_reason', TType::I16, 20);
            $xfer += $output->writeI16($this->offline_reason);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->partition_style !== null) {
            $xfer += $output->writeFieldBegin('partition_style', TType::I32, 21);
            $xfer += $output->writeI32($this->partition_style);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->path !== null) {
            $xfer += $output->writeFieldBegin('path', TType::STRING, 22);
            $xfer += $output->writeString($this->path);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->physical_sector_size !== null) {
            $xfer += $output->writeFieldBegin('physical_sector_size', TType::I32, 23);
            $xfer += $output->writeI32($this->physical_sector_size);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->sectors_per_track !== null) {
            $xfer += $output->writeFieldBegin('sectors_per_track', TType::I32, 24);
            $xfer += $output->writeI32($this->sectors_per_track);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->serial_number !== null) {
            $xfer += $output->writeFieldBegin('serial_number', TType::STRING, 25);
            $xfer += $output->writeString($this->serial_number);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->signature !== null) {
            $xfer += $output->writeFieldBegin('signature', TType::I32, 26);
            $xfer += $output->writeI32($this->signature);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->size !== null) {
            $xfer += $output->writeFieldBegin('size', TType::I64, 27);
            $xfer += $output->writeI64($this->size);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->uri !== null) {
            $xfer += $output->writeFieldBegin('uri', TType::STRING, 28);
            $xfer += $output->writeString($this->uri);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->scsi_bus !== null) {
            $xfer += $output->writeFieldBegin('scsi_bus', TType::I32, 29);
            $xfer += $output->writeI32($this->scsi_bus);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->scsi_logical_unit !== null) {
            $xfer += $output->writeFieldBegin('scsi_logical_unit', TType::I16, 30);
            $xfer += $output->writeI16($this->scsi_logical_unit);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->scsi_port !== null) {
            $xfer += $output->writeFieldBegin('scsi_port', TType::I16, 31);
            $xfer += $output->writeI16($this->scsi_port);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->scsi_target_id !== null) {
            $xfer += $output->writeFieldBegin('scsi_target_id', TType::I16, 32);
            $xfer += $output->writeI16($this->scsi_target_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->unique_id !== null) {
            $xfer += $output->writeFieldBegin('unique_id', TType::STRING, 33);
            $xfer += $output->writeString($this->unique_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->unique_id_format !== null) {
            $xfer += $output->writeFieldBegin('unique_id_format', TType::I16, 34);
            $xfer += $output->writeI16($this->unique_id_format);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->customized_id !== null) {
            $xfer += $output->writeFieldBegin('customized_id', TType::STRING, 35);
            $xfer += $output->writeString($this->customized_id);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class partition_info
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'access_paths',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        2 => array(
            'var' => 'disk_number',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'drive_letter',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'gpt_type',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'guid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'is_active',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        7 => array(
            'var' => 'is_boot',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        8 => array(
            'var' => 'is_hidden',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        9 => array(
            'var' => 'is_offline',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        10 => array(
            'var' => 'is_readonly',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        11 => array(
            'var' => 'is_shadowcopy',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        12 => array(
            'var' => 'is_system',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        13 => array(
            'var' => 'mbr_type',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        14 => array(
            'var' => 'offset',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        15 => array(
            'var' => 'partition_number',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        16 => array(
            'var' => 'size',
            'isRequired' => false,
            'type' => TType::I64,
        ),
    );

    /**
     * @var string[]
     */
    public $access_paths = null;
    /**
     * @var int
     */
    public $disk_number = -1;
    /**
     * @var string
     */
    public $drive_letter = "";
    /**
     * @var string
     */
    public $gpt_type = "";
    /**
     * @var string
     */
    public $guid = "";
    /**
     * @var bool
     */
    public $is_active = false;
    /**
     * @var bool
     */
    public $is_boot = false;
    /**
     * @var bool
     */
    public $is_hidden = false;
    /**
     * @var bool
     */
    public $is_offline = false;
    /**
     * @var bool
     */
    public $is_readonly = false;
    /**
     * @var bool
     */
    public $is_shadowcopy = false;
    /**
     * @var bool
     */
    public $is_system = false;
    /**
     * @var int
     */
    public $mbr_type = 0;
    /**
     * @var int
     */
    public $offset = 0;
    /**
     * @var int
     */
    public $partition_number = -1;
    /**
     * @var int
     */
    public $size = 0;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['access_paths'])) {
                $this->access_paths = $vals['access_paths'];
            }
            if (isset($vals['disk_number'])) {
                $this->disk_number = $vals['disk_number'];
            }
            if (isset($vals['drive_letter'])) {
                $this->drive_letter = $vals['drive_letter'];
            }
            if (isset($vals['gpt_type'])) {
                $this->gpt_type = $vals['gpt_type'];
            }
            if (isset($vals['guid'])) {
                $this->guid = $vals['guid'];
            }
            if (isset($vals['is_active'])) {
                $this->is_active = $vals['is_active'];
            }
            if (isset($vals['is_boot'])) {
                $this->is_boot = $vals['is_boot'];
            }
            if (isset($vals['is_hidden'])) {
                $this->is_hidden = $vals['is_hidden'];
            }
            if (isset($vals['is_offline'])) {
                $this->is_offline = $vals['is_offline'];
            }
            if (isset($vals['is_readonly'])) {
                $this->is_readonly = $vals['is_readonly'];
            }
            if (isset($vals['is_shadowcopy'])) {
                $this->is_shadowcopy = $vals['is_shadowcopy'];
            }
            if (isset($vals['is_system'])) {
                $this->is_system = $vals['is_system'];
            }
            if (isset($vals['mbr_type'])) {
                $this->mbr_type = $vals['mbr_type'];
            }
            if (isset($vals['offset'])) {
                $this->offset = $vals['offset'];
            }
            if (isset($vals['partition_number'])) {
                $this->partition_number = $vals['partition_number'];
            }
            if (isset($vals['size'])) {
                $this->size = $vals['size'];
            }
        }
    }

    public function getName()
    {
        return 'partition_info';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::SET) {
                        $this->access_paths = array();
                        $_size0 = 0;
                        $_etype3 = 0;
                        $xfer += $input->readSetBegin($_etype3, $_size0);
                        for ($_i4 = 0; $_i4 < $_size0; ++$_i4) {
                            $elem5 = null;
                            $xfer += $input->readString($elem5);
                            $this->access_paths[$elem5] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->disk_number);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->drive_letter);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->gpt_type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->guid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_active);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_boot);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_hidden);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_offline);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_readonly);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_shadowcopy);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_system);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->mbr_type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->offset);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->partition_number);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('partition_info');
        if ($this->access_paths !== null) {
            if (!is_array($this->access_paths)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('access_paths', TType::SET, 1);
            $output->writeSetBegin(TType::STRING, count($this->access_paths));
            foreach ($this->access_paths as $iter6 => $iter7) {
                $xfer += $output->writeString($iter6);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->disk_number !== null) {
            $xfer += $output->writeFieldBegin('disk_number', TType::I32, 2);
            $xfer += $output->writeI32($this->disk_number);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->drive_letter !== null) {
            $xfer += $output->writeFieldBegin('drive_letter', TType::STRING, 3);
            $xfer += $output->writeString($this->drive_letter);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->gpt_type !== null) {
            $xfer += $output->writeFieldBegin('gpt_type', TType::STRING, 4);
            $xfer += $output->writeString($this->gpt_type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->guid !== null) {
            $xfer += $output->writeFieldBegin('guid', TType::STRING, 5);
            $xfer += $output->writeString($this->guid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_active !== null) {
            $xfer += $output->writeFieldBegin('is_active', TType::BOOL, 6);
            $xfer += $output->writeBool($this->is_active);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_boot !== null) {
            $xfer += $output->writeFieldBegin('is_boot', TType::BOOL, 7);
            $xfer += $output->writeBool($this->is_boot);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_hidden !== null) {
            $xfer += $output->writeFieldBegin('is_hidden', TType::BOOL, 8);
            $xfer += $output->writeBool($this->is_hidden);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_offline !== null) {
            $xfer += $output->writeFieldBegin('is_offline', TType::BOOL, 9);
            $xfer += $output->writeBool($this->is_offline);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_readonly !== null) {
            $xfer += $output->writeFieldBegin('is_readonly', TType::BOOL, 10);
            $xfer += $output->writeBool($this->is_readonly);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_shadowcopy !== null) {
            $xfer += $output->writeFieldBegin('is_shadowcopy', TType::BOOL, 11);
            $xfer += $output->writeBool($this->is_shadowcopy);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_system !== null) {
            $xfer += $output->writeFieldBegin('is_system', TType::BOOL, 12);
            $xfer += $output->writeBool($this->is_system);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->mbr_type !== null) {
            $xfer += $output->writeFieldBegin('mbr_type', TType::I16, 13);
            $xfer += $output->writeI16($this->mbr_type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->offset !== null) {
            $xfer += $output->writeFieldBegin('offset', TType::I64, 14);
            $xfer += $output->writeI64($this->offset);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->partition_number !== null) {
            $xfer += $output->writeFieldBegin('partition_number', TType::I32, 15);
            $xfer += $output->writeI32($this->partition_number);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->size !== null) {
            $xfer += $output->writeFieldBegin('size', TType::I64, 16);
            $xfer += $output->writeI64($this->size);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class volume_info
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'access_paths',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        2 => array(
            'var' => 'cluster_access_path',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'drive_letter',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'drive_type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'file_system',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'file_system_catalogid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'file_system_label',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'object_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'path',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        10 => array(
            'var' => 'size',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        11 => array(
            'var' => 'size_remaining',
            'isRequired' => false,
            'type' => TType::I64,
        ),
    );

    /**
     * @var string[]
     */
    public $access_paths = null;
    /**
     * @var string
     */
    public $cluster_access_path = "";
    /**
     * @var string
     */
    public $drive_letter = "";
    /**
     * @var int
     */
    public $drive_type =     0;
    /**
     * @var string
     */
    public $file_system = "";
    /**
     * @var string
     */
    public $file_system_catalogid = "";
    /**
     * @var string
     */
    public $file_system_label = "";
    /**
     * @var string
     */
    public $object_id = "";
    /**
     * @var string
     */
    public $path = "";
    /**
     * @var int
     */
    public $size = 0;
    /**
     * @var int
     */
    public $size_remaining = 0;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['access_paths'])) {
                $this->access_paths = $vals['access_paths'];
            }
            if (isset($vals['cluster_access_path'])) {
                $this->cluster_access_path = $vals['cluster_access_path'];
            }
            if (isset($vals['drive_letter'])) {
                $this->drive_letter = $vals['drive_letter'];
            }
            if (isset($vals['drive_type'])) {
                $this->drive_type = $vals['drive_type'];
            }
            if (isset($vals['file_system'])) {
                $this->file_system = $vals['file_system'];
            }
            if (isset($vals['file_system_catalogid'])) {
                $this->file_system_catalogid = $vals['file_system_catalogid'];
            }
            if (isset($vals['file_system_label'])) {
                $this->file_system_label = $vals['file_system_label'];
            }
            if (isset($vals['object_id'])) {
                $this->object_id = $vals['object_id'];
            }
            if (isset($vals['path'])) {
                $this->path = $vals['path'];
            }
            if (isset($vals['size'])) {
                $this->size = $vals['size'];
            }
            if (isset($vals['size_remaining'])) {
                $this->size_remaining = $vals['size_remaining'];
            }
        }
    }

    public function getName()
    {
        return 'volume_info';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::SET) {
                        $this->access_paths = array();
                        $_size8 = 0;
                        $_etype11 = 0;
                        $xfer += $input->readSetBegin($_etype11, $_size8);
                        for ($_i12 = 0; $_i12 < $_size8; ++$_i12) {
                            $elem13 = null;
                            $xfer += $input->readString($elem13);
                            $this->access_paths[$elem13] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cluster_access_path);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->drive_letter);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->drive_type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->file_system);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->file_system_catalogid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->file_system_label);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->object_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->path);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->size_remaining);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('volume_info');
        if ($this->access_paths !== null) {
            if (!is_array($this->access_paths)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('access_paths', TType::SET, 1);
            $output->writeSetBegin(TType::STRING, count($this->access_paths));
            foreach ($this->access_paths as $iter14 => $iter15) {
                $xfer += $output->writeString($iter14);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cluster_access_path !== null) {
            $xfer += $output->writeFieldBegin('cluster_access_path', TType::STRING, 2);
            $xfer += $output->writeString($this->cluster_access_path);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->drive_letter !== null) {
            $xfer += $output->writeFieldBegin('drive_letter', TType::STRING, 3);
            $xfer += $output->writeString($this->drive_letter);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->drive_type !== null) {
            $xfer += $output->writeFieldBegin('drive_type', TType::I32, 4);
            $xfer += $output->writeI32($this->drive_type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->file_system !== null) {
            $xfer += $output->writeFieldBegin('file_system', TType::STRING, 5);
            $xfer += $output->writeString($this->file_system);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->file_system_catalogid !== null) {
            $xfer += $output->writeFieldBegin('file_system_catalogid', TType::STRING, 6);
            $xfer += $output->writeString($this->file_system_catalogid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->file_system_label !== null) {
            $xfer += $output->writeFieldBegin('file_system_label', TType::STRING, 7);
            $xfer += $output->writeString($this->file_system_label);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->object_id !== null) {
            $xfer += $output->writeFieldBegin('object_id', TType::STRING, 8);
            $xfer += $output->writeString($this->object_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->path !== null) {
            $xfer += $output->writeFieldBegin('path', TType::STRING, 9);
            $xfer += $output->writeString($this->path);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->size !== null) {
            $xfer += $output->writeFieldBegin('size', TType::I64, 10);
            $xfer += $output->writeI64($this->size);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->size_remaining !== null) {
            $xfer += $output->writeFieldBegin('size_remaining', TType::I64, 11);
            $xfer += $output->writeI64($this->size_remaining);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class network_info
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'adapter_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'description',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'dnss',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        4 => array(
            'var' => 'gateways',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        5 => array(
            'var' => 'ip_addresses',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        6 => array(
            'var' => 'is_dhcp_v4',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        7 => array(
            'var' => 'is_dhcp_v6',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        8 => array(
            'var' => 'mac_address',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'subnet_masks',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var string
     */
    public $adapter_name = "";
    /**
     * @var string
     */
    public $description = "";
    /**
     * @var string[]
     */
    public $dnss = null;
    /**
     * @var string[]
     */
    public $gateways = null;
    /**
     * @var string[]
     */
    public $ip_addresses = null;
    /**
     * @var bool
     */
    public $is_dhcp_v4 = false;
    /**
     * @var bool
     */
    public $is_dhcp_v6 = false;
    /**
     * @var string
     */
    public $mac_address = "";
    /**
     * @var string[]
     */
    public $subnet_masks = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['adapter_name'])) {
                $this->adapter_name = $vals['adapter_name'];
            }
            if (isset($vals['description'])) {
                $this->description = $vals['description'];
            }
            if (isset($vals['dnss'])) {
                $this->dnss = $vals['dnss'];
            }
            if (isset($vals['gateways'])) {
                $this->gateways = $vals['gateways'];
            }
            if (isset($vals['ip_addresses'])) {
                $this->ip_addresses = $vals['ip_addresses'];
            }
            if (isset($vals['is_dhcp_v4'])) {
                $this->is_dhcp_v4 = $vals['is_dhcp_v4'];
            }
            if (isset($vals['is_dhcp_v6'])) {
                $this->is_dhcp_v6 = $vals['is_dhcp_v6'];
            }
            if (isset($vals['mac_address'])) {
                $this->mac_address = $vals['mac_address'];
            }
            if (isset($vals['subnet_masks'])) {
                $this->subnet_masks = $vals['subnet_masks'];
            }
        }
    }

    public function getName()
    {
        return 'network_info';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->adapter_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->description);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->dnss = array();
                        $_size16 = 0;
                        $_etype19 = 0;
                        $xfer += $input->readListBegin($_etype19, $_size16);
                        for ($_i20 = 0; $_i20 < $_size16; ++$_i20) {
                            $elem21 = null;
                            $xfer += $input->readString($elem21);
                            $this->dnss []= $elem21;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->gateways = array();
                        $_size22 = 0;
                        $_etype25 = 0;
                        $xfer += $input->readListBegin($_etype25, $_size22);
                        for ($_i26 = 0; $_i26 < $_size22; ++$_i26) {
                            $elem27 = null;
                            $xfer += $input->readString($elem27);
                            $this->gateways []= $elem27;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::LST) {
                        $this->ip_addresses = array();
                        $_size28 = 0;
                        $_etype31 = 0;
                        $xfer += $input->readListBegin($_etype31, $_size28);
                        for ($_i32 = 0; $_i32 < $_size28; ++$_i32) {
                            $elem33 = null;
                            $xfer += $input->readString($elem33);
                            $this->ip_addresses []= $elem33;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_dhcp_v4);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_dhcp_v6);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->mac_address);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::LST) {
                        $this->subnet_masks = array();
                        $_size34 = 0;
                        $_etype37 = 0;
                        $xfer += $input->readListBegin($_etype37, $_size34);
                        for ($_i38 = 0; $_i38 < $_size34; ++$_i38) {
                            $elem39 = null;
                            $xfer += $input->readString($elem39);
                            $this->subnet_masks []= $elem39;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('network_info');
        if ($this->adapter_name !== null) {
            $xfer += $output->writeFieldBegin('adapter_name', TType::STRING, 1);
            $xfer += $output->writeString($this->adapter_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->description !== null) {
            $xfer += $output->writeFieldBegin('description', TType::STRING, 2);
            $xfer += $output->writeString($this->description);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dnss !== null) {
            if (!is_array($this->dnss)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('dnss', TType::LST, 3);
            $output->writeListBegin(TType::STRING, count($this->dnss));
            foreach ($this->dnss as $iter40) {
                $xfer += $output->writeString($iter40);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->gateways !== null) {
            if (!is_array($this->gateways)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('gateways', TType::LST, 4);
            $output->writeListBegin(TType::STRING, count($this->gateways));
            foreach ($this->gateways as $iter41) {
                $xfer += $output->writeString($iter41);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ip_addresses !== null) {
            if (!is_array($this->ip_addresses)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('ip_addresses', TType::LST, 5);
            $output->writeListBegin(TType::STRING, count($this->ip_addresses));
            foreach ($this->ip_addresses as $iter42) {
                $xfer += $output->writeString($iter42);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_dhcp_v4 !== null) {
            $xfer += $output->writeFieldBegin('is_dhcp_v4', TType::BOOL, 6);
            $xfer += $output->writeBool($this->is_dhcp_v4);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_dhcp_v6 !== null) {
            $xfer += $output->writeFieldBegin('is_dhcp_v6', TType::BOOL, 7);
            $xfer += $output->writeBool($this->is_dhcp_v6);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->mac_address !== null) {
            $xfer += $output->writeFieldBegin('mac_address', TType::STRING, 8);
            $xfer += $output->writeString($this->mac_address);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->subnet_masks !== null) {
            if (!is_array($this->subnet_masks)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('subnet_masks', TType::LST, 9);
            $output->writeListBegin(TType::STRING, count($this->subnet_masks));
            foreach ($this->subnet_masks as $iter43) {
                $xfer += $output->writeString($iter43);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class cluster_network
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'cluster_network_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'cluster_network_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'cluster_network_address',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'cluster_network_address_mask',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'network_infos',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\network_info',
                ),
        ),
    );

    /**
     * @var string
     */
    public $cluster_network_name = "";
    /**
     * @var string
     */
    public $cluster_network_id = "";
    /**
     * @var string
     */
    public $cluster_network_address = "";
    /**
     * @var string
     */
    public $cluster_network_address_mask = "";
    /**
     * @var \saasame\transport\network_info[]
     */
    public $network_infos = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['cluster_network_name'])) {
                $this->cluster_network_name = $vals['cluster_network_name'];
            }
            if (isset($vals['cluster_network_id'])) {
                $this->cluster_network_id = $vals['cluster_network_id'];
            }
            if (isset($vals['cluster_network_address'])) {
                $this->cluster_network_address = $vals['cluster_network_address'];
            }
            if (isset($vals['cluster_network_address_mask'])) {
                $this->cluster_network_address_mask = $vals['cluster_network_address_mask'];
            }
            if (isset($vals['network_infos'])) {
                $this->network_infos = $vals['network_infos'];
            }
        }
    }

    public function getName()
    {
        return 'cluster_network';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cluster_network_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cluster_network_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cluster_network_address);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cluster_network_address_mask);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::SET) {
                        $this->network_infos = array();
                        $_size44 = 0;
                        $_etype47 = 0;
                        $xfer += $input->readSetBegin($_etype47, $_size44);
                        for ($_i48 = 0; $_i48 < $_size44; ++$_i48) {
                            $elem49 = null;
                            $elem49 = new \saasame\transport\network_info();
                            $xfer += $elem49->read($input);
                            $this->network_infos[] = $elem49;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('cluster_network');
        if ($this->cluster_network_name !== null) {
            $xfer += $output->writeFieldBegin('cluster_network_name', TType::STRING, 1);
            $xfer += $output->writeString($this->cluster_network_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cluster_network_id !== null) {
            $xfer += $output->writeFieldBegin('cluster_network_id', TType::STRING, 2);
            $xfer += $output->writeString($this->cluster_network_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cluster_network_address !== null) {
            $xfer += $output->writeFieldBegin('cluster_network_address', TType::STRING, 3);
            $xfer += $output->writeString($this->cluster_network_address);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cluster_network_address_mask !== null) {
            $xfer += $output->writeFieldBegin('cluster_network_address_mask', TType::STRING, 4);
            $xfer += $output->writeString($this->cluster_network_address_mask);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->network_infos !== null) {
            if (!is_array($this->network_infos)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('network_infos', TType::SET, 5);
            $output->writeSetBegin(TType::STRUCT, count($this->network_infos));
            foreach ($this->network_infos as $iter50 => $iter51) {
                $xfer += $iter51->write($output);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class cluster_group
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'group_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'group_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'group_owner',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'cluster_disks',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\disk_info',
                ),
        ),
        5 => array(
            'var' => 'cluster_partitions',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\volume_info',
                ),
        ),
        6 => array(
            'var' => 'cluster_network_infos',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\cluster_network',
                ),
        ),
    );

    /**
     * @var string
     */
    public $group_id = "";
    /**
     * @var string
     */
    public $group_name = "";
    /**
     * @var string
     */
    public $group_owner = "";
    /**
     * @var \saasame\transport\disk_info[]
     */
    public $cluster_disks = null;
    /**
     * @var \saasame\transport\volume_info[]
     */
    public $cluster_partitions = null;
    /**
     * @var \saasame\transport\cluster_network[]
     */
    public $cluster_network_infos = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['group_id'])) {
                $this->group_id = $vals['group_id'];
            }
            if (isset($vals['group_name'])) {
                $this->group_name = $vals['group_name'];
            }
            if (isset($vals['group_owner'])) {
                $this->group_owner = $vals['group_owner'];
            }
            if (isset($vals['cluster_disks'])) {
                $this->cluster_disks = $vals['cluster_disks'];
            }
            if (isset($vals['cluster_partitions'])) {
                $this->cluster_partitions = $vals['cluster_partitions'];
            }
            if (isset($vals['cluster_network_infos'])) {
                $this->cluster_network_infos = $vals['cluster_network_infos'];
            }
        }
    }

    public function getName()
    {
        return 'cluster_group';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->group_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->group_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->group_owner);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::SET) {
                        $this->cluster_disks = array();
                        $_size52 = 0;
                        $_etype55 = 0;
                        $xfer += $input->readSetBegin($_etype55, $_size52);
                        for ($_i56 = 0; $_i56 < $_size52; ++$_i56) {
                            $elem57 = null;
                            $elem57 = new \saasame\transport\disk_info();
                            $xfer += $elem57->read($input);
                            $this->cluster_disks[] = $elem57;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::SET) {
                        $this->cluster_partitions = array();
                        $_size58 = 0;
                        $_etype61 = 0;
                        $xfer += $input->readSetBegin($_etype61, $_size58);
                        for ($_i62 = 0; $_i62 < $_size58; ++$_i62) {
                            $elem63 = null;
                            $elem63 = new \saasame\transport\volume_info();
                            $xfer += $elem63->read($input);
                            $this->cluster_partitions[] = $elem63;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::SET) {
                        $this->cluster_network_infos = array();
                        $_size64 = 0;
                        $_etype67 = 0;
                        $xfer += $input->readSetBegin($_etype67, $_size64);
                        for ($_i68 = 0; $_i68 < $_size64; ++$_i68) {
                            $elem69 = null;
                            $elem69 = new \saasame\transport\cluster_network();
                            $xfer += $elem69->read($input);
                            $this->cluster_network_infos[] = $elem69;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('cluster_group');
        if ($this->group_id !== null) {
            $xfer += $output->writeFieldBegin('group_id', TType::STRING, 1);
            $xfer += $output->writeString($this->group_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->group_name !== null) {
            $xfer += $output->writeFieldBegin('group_name', TType::STRING, 2);
            $xfer += $output->writeString($this->group_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->group_owner !== null) {
            $xfer += $output->writeFieldBegin('group_owner', TType::STRING, 3);
            $xfer += $output->writeString($this->group_owner);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cluster_disks !== null) {
            if (!is_array($this->cluster_disks)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('cluster_disks', TType::SET, 4);
            $output->writeSetBegin(TType::STRUCT, count($this->cluster_disks));
            foreach ($this->cluster_disks as $iter70 => $iter71) {
                $xfer += $iter71->write($output);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cluster_partitions !== null) {
            if (!is_array($this->cluster_partitions)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('cluster_partitions', TType::SET, 5);
            $output->writeSetBegin(TType::STRUCT, count($this->cluster_partitions));
            foreach ($this->cluster_partitions as $iter72 => $iter73) {
                $xfer += $iter73->write($output);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cluster_network_infos !== null) {
            if (!is_array($this->cluster_network_infos)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('cluster_network_infos', TType::SET, 6);
            $output->writeSetBegin(TType::STRUCT, count($this->cluster_network_infos));
            foreach ($this->cluster_network_infos as $iter74 => $iter75) {
                $xfer += $iter75->write($output);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class cluster_info
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'cluster_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'quorum_disk',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\disk_info',
        ),
        3 => array(
            'var' => 'cluster_nodes',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        4 => array(
            'var' => 'client_ids',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        5 => array(
            'var' => 'machine_ids',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        6 => array(
            'var' => 'cluster_network_infos',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\cluster_network',
                ),
        ),
        7 => array(
            'var' => 'cluster_groups',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\cluster_group',
                ),
        ),
    );

    /**
     * @var string
     */
    public $cluster_name = "";
    /**
     * @var \saasame\transport\disk_info
     */
    public $quorum_disk = null;
    /**
     * @var string[]
     */
    public $cluster_nodes = null;
    /**
     * @var string[]
     */
    public $client_ids = null;
    /**
     * @var string[]
     */
    public $machine_ids = null;
    /**
     * @var \saasame\transport\cluster_network[]
     */
    public $cluster_network_infos = null;
    /**
     * @var \saasame\transport\cluster_group[]
     */
    public $cluster_groups = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['cluster_name'])) {
                $this->cluster_name = $vals['cluster_name'];
            }
            if (isset($vals['quorum_disk'])) {
                $this->quorum_disk = $vals['quorum_disk'];
            }
            if (isset($vals['cluster_nodes'])) {
                $this->cluster_nodes = $vals['cluster_nodes'];
            }
            if (isset($vals['client_ids'])) {
                $this->client_ids = $vals['client_ids'];
            }
            if (isset($vals['machine_ids'])) {
                $this->machine_ids = $vals['machine_ids'];
            }
            if (isset($vals['cluster_network_infos'])) {
                $this->cluster_network_infos = $vals['cluster_network_infos'];
            }
            if (isset($vals['cluster_groups'])) {
                $this->cluster_groups = $vals['cluster_groups'];
            }
        }
    }

    public function getName()
    {
        return 'cluster_info';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cluster_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->quorum_disk = new \saasame\transport\disk_info();
                        $xfer += $this->quorum_disk->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::SET) {
                        $this->cluster_nodes = array();
                        $_size76 = 0;
                        $_etype79 = 0;
                        $xfer += $input->readSetBegin($_etype79, $_size76);
                        for ($_i80 = 0; $_i80 < $_size76; ++$_i80) {
                            $elem81 = null;
                            $xfer += $input->readString($elem81);
                            $this->cluster_nodes[$elem81] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::SET) {
                        $this->client_ids = array();
                        $_size82 = 0;
                        $_etype85 = 0;
                        $xfer += $input->readSetBegin($_etype85, $_size82);
                        for ($_i86 = 0; $_i86 < $_size82; ++$_i86) {
                            $elem87 = null;
                            $xfer += $input->readString($elem87);
                            $this->client_ids[$elem87] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::SET) {
                        $this->machine_ids = array();
                        $_size88 = 0;
                        $_etype91 = 0;
                        $xfer += $input->readSetBegin($_etype91, $_size88);
                        for ($_i92 = 0; $_i92 < $_size88; ++$_i92) {
                            $elem93 = null;
                            $xfer += $input->readString($elem93);
                            $this->machine_ids[$elem93] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::SET) {
                        $this->cluster_network_infos = array();
                        $_size94 = 0;
                        $_etype97 = 0;
                        $xfer += $input->readSetBegin($_etype97, $_size94);
                        for ($_i98 = 0; $_i98 < $_size94; ++$_i98) {
                            $elem99 = null;
                            $elem99 = new \saasame\transport\cluster_network();
                            $xfer += $elem99->read($input);
                            $this->cluster_network_infos[] = $elem99;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::SET) {
                        $this->cluster_groups = array();
                        $_size100 = 0;
                        $_etype103 = 0;
                        $xfer += $input->readSetBegin($_etype103, $_size100);
                        for ($_i104 = 0; $_i104 < $_size100; ++$_i104) {
                            $elem105 = null;
                            $elem105 = new \saasame\transport\cluster_group();
                            $xfer += $elem105->read($input);
                            $this->cluster_groups[] = $elem105;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('cluster_info');
        if ($this->cluster_name !== null) {
            $xfer += $output->writeFieldBegin('cluster_name', TType::STRING, 1);
            $xfer += $output->writeString($this->cluster_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->quorum_disk !== null) {
            if (!is_object($this->quorum_disk)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('quorum_disk', TType::STRUCT, 2);
            $xfer += $this->quorum_disk->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cluster_nodes !== null) {
            if (!is_array($this->cluster_nodes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('cluster_nodes', TType::SET, 3);
            $output->writeSetBegin(TType::STRING, count($this->cluster_nodes));
            foreach ($this->cluster_nodes as $iter106 => $iter107) {
                $xfer += $output->writeString($iter106);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->client_ids !== null) {
            if (!is_array($this->client_ids)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('client_ids', TType::SET, 4);
            $output->writeSetBegin(TType::STRING, count($this->client_ids));
            foreach ($this->client_ids as $iter108 => $iter109) {
                $xfer += $output->writeString($iter108);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->machine_ids !== null) {
            if (!is_array($this->machine_ids)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('machine_ids', TType::SET, 5);
            $output->writeSetBegin(TType::STRING, count($this->machine_ids));
            foreach ($this->machine_ids as $iter110 => $iter111) {
                $xfer += $output->writeString($iter110);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cluster_network_infos !== null) {
            if (!is_array($this->cluster_network_infos)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('cluster_network_infos', TType::SET, 6);
            $output->writeSetBegin(TType::STRUCT, count($this->cluster_network_infos));
            foreach ($this->cluster_network_infos as $iter112 => $iter113) {
                $xfer += $iter113->write($output);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cluster_groups !== null) {
            if (!is_array($this->cluster_groups)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('cluster_groups', TType::SET, 7);
            $output->writeSetBegin(TType::STRUCT, count($this->cluster_groups));
            foreach ($this->cluster_groups as $iter114 => $iter115) {
                $xfer += $iter115->write($output);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class os_version_info
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'csd_version',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'build_number',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'major_version',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'minor_version',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'platform_id',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'product_type',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        7 => array(
            'var' => 'servicepack_major',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        8 => array(
            'var' => 'servicepack_minor',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        9 => array(
            'var' => 'suite_mask',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var string
     */
    public $csd_version = "";
    /**
     * @var int
     */
    public $build_number = -1;
    /**
     * @var int
     */
    public $major_version = -1;
    /**
     * @var int
     */
    public $minor_version = -1;
    /**
     * @var int
     */
    public $platform_id = -1;
    /**
     * @var int
     */
    public $product_type = -1;
    /**
     * @var int
     */
    public $servicepack_major = -1;
    /**
     * @var int
     */
    public $servicepack_minor = -1;
    /**
     * @var int
     */
    public $suite_mask = -1;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['csd_version'])) {
                $this->csd_version = $vals['csd_version'];
            }
            if (isset($vals['build_number'])) {
                $this->build_number = $vals['build_number'];
            }
            if (isset($vals['major_version'])) {
                $this->major_version = $vals['major_version'];
            }
            if (isset($vals['minor_version'])) {
                $this->minor_version = $vals['minor_version'];
            }
            if (isset($vals['platform_id'])) {
                $this->platform_id = $vals['platform_id'];
            }
            if (isset($vals['product_type'])) {
                $this->product_type = $vals['product_type'];
            }
            if (isset($vals['servicepack_major'])) {
                $this->servicepack_major = $vals['servicepack_major'];
            }
            if (isset($vals['servicepack_minor'])) {
                $this->servicepack_minor = $vals['servicepack_minor'];
            }
            if (isset($vals['suite_mask'])) {
                $this->suite_mask = $vals['suite_mask'];
            }
        }
    }

    public function getName()
    {
        return 'os_version_info';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->csd_version);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->build_number);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->major_version);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->minor_version);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->platform_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->product_type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->servicepack_major);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->servicepack_minor);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->suite_mask);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('os_version_info');
        if ($this->csd_version !== null) {
            $xfer += $output->writeFieldBegin('csd_version', TType::STRING, 1);
            $xfer += $output->writeString($this->csd_version);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->build_number !== null) {
            $xfer += $output->writeFieldBegin('build_number', TType::I32, 2);
            $xfer += $output->writeI32($this->build_number);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->major_version !== null) {
            $xfer += $output->writeFieldBegin('major_version', TType::I32, 3);
            $xfer += $output->writeI32($this->major_version);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->minor_version !== null) {
            $xfer += $output->writeFieldBegin('minor_version', TType::I32, 4);
            $xfer += $output->writeI32($this->minor_version);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->platform_id !== null) {
            $xfer += $output->writeFieldBegin('platform_id', TType::I32, 5);
            $xfer += $output->writeI32($this->platform_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->product_type !== null) {
            $xfer += $output->writeFieldBegin('product_type', TType::I16, 6);
            $xfer += $output->writeI16($this->product_type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->servicepack_major !== null) {
            $xfer += $output->writeFieldBegin('servicepack_major', TType::I32, 7);
            $xfer += $output->writeI32($this->servicepack_major);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->servicepack_minor !== null) {
            $xfer += $output->writeFieldBegin('servicepack_minor', TType::I32, 8);
            $xfer += $output->writeI32($this->servicepack_minor);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->suite_mask !== null) {
            $xfer += $output->writeFieldBegin('suite_mask', TType::I32, 9);
            $xfer += $output->writeI32($this->suite_mask);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class snapshot
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'snapshot_set_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'snapshot_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'original_volume_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'snapshot_device_object',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'creation_time_stamp',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'snapshots_count',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var string
     */
    public $snapshot_set_id = "";
    /**
     * @var string
     */
    public $snapshot_id = "";
    /**
     * @var string
     */
    public $original_volume_name = "";
    /**
     * @var string
     */
    public $snapshot_device_object = "";
    /**
     * @var string
     */
    public $creation_time_stamp = "";
    /**
     * @var int
     */
    public $snapshots_count = 0;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['snapshot_set_id'])) {
                $this->snapshot_set_id = $vals['snapshot_set_id'];
            }
            if (isset($vals['snapshot_id'])) {
                $this->snapshot_id = $vals['snapshot_id'];
            }
            if (isset($vals['original_volume_name'])) {
                $this->original_volume_name = $vals['original_volume_name'];
            }
            if (isset($vals['snapshot_device_object'])) {
                $this->snapshot_device_object = $vals['snapshot_device_object'];
            }
            if (isset($vals['creation_time_stamp'])) {
                $this->creation_time_stamp = $vals['creation_time_stamp'];
            }
            if (isset($vals['snapshots_count'])) {
                $this->snapshots_count = $vals['snapshots_count'];
            }
        }
    }

    public function getName()
    {
        return 'snapshot';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->snapshot_set_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->snapshot_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->original_volume_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->snapshot_device_object);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->creation_time_stamp);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->snapshots_count);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('snapshot');
        if ($this->snapshot_set_id !== null) {
            $xfer += $output->writeFieldBegin('snapshot_set_id', TType::STRING, 1);
            $xfer += $output->writeString($this->snapshot_set_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->snapshot_id !== null) {
            $xfer += $output->writeFieldBegin('snapshot_id', TType::STRING, 2);
            $xfer += $output->writeString($this->snapshot_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->original_volume_name !== null) {
            $xfer += $output->writeFieldBegin('original_volume_name', TType::STRING, 3);
            $xfer += $output->writeString($this->original_volume_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->snapshot_device_object !== null) {
            $xfer += $output->writeFieldBegin('snapshot_device_object', TType::STRING, 4);
            $xfer += $output->writeString($this->snapshot_device_object);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->creation_time_stamp !== null) {
            $xfer += $output->writeFieldBegin('creation_time_stamp', TType::STRING, 5);
            $xfer += $output->writeString($this->creation_time_stamp);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->snapshots_count !== null) {
            $xfer += $output->writeFieldBegin('snapshots_count', TType::I32, 6);
            $xfer += $output->writeI32($this->snapshots_count);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class snapshot_result
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'snapshots',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\snapshot',
                ),
        ),
    );

    /**
     * @var \saasame\transport\snapshot[]
     */
    public $snapshots = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['snapshots'])) {
                $this->snapshots = $vals['snapshots'];
            }
        }
    }

    public function getName()
    {
        return 'snapshot_result';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::LST) {
                        $this->snapshots = array();
                        $_size116 = 0;
                        $_etype119 = 0;
                        $xfer += $input->readListBegin($_etype119, $_size116);
                        for ($_i120 = 0; $_i120 < $_size116; ++$_i120) {
                            $elem121 = null;
                            $elem121 = new \saasame\transport\snapshot();
                            $xfer += $elem121->read($input);
                            $this->snapshots []= $elem121;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('snapshot_result');
        if ($this->snapshots !== null) {
            if (!is_array($this->snapshots)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('snapshots', TType::LST, 1);
            $output->writeListBegin(TType::STRUCT, count($this->snapshots));
            foreach ($this->snapshots as $iter122) {
                $xfer += $iter122->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class volume_bit_map
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'cluster_size',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'starting_lcn',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        3 => array(
            'var' => 'total_number_of_clusters',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        4 => array(
            'var' => 'bit_map',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'compressed',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var int
     */
    public $cluster_size = 0;
    /**
     * @var int
     */
    public $starting_lcn = 0;
    /**
     * @var int
     */
    public $total_number_of_clusters = 0;
    /**
     * @var string
     */
    public $bit_map = "";
    /**
     * @var bool
     */
    public $compressed = false;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['cluster_size'])) {
                $this->cluster_size = $vals['cluster_size'];
            }
            if (isset($vals['starting_lcn'])) {
                $this->starting_lcn = $vals['starting_lcn'];
            }
            if (isset($vals['total_number_of_clusters'])) {
                $this->total_number_of_clusters = $vals['total_number_of_clusters'];
            }
            if (isset($vals['bit_map'])) {
                $this->bit_map = $vals['bit_map'];
            }
            if (isset($vals['compressed'])) {
                $this->compressed = $vals['compressed'];
            }
        }
    }

    public function getName()
    {
        return 'volume_bit_map';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->cluster_size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->starting_lcn);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->total_number_of_clusters);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->bit_map);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->compressed);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('volume_bit_map');
        if ($this->cluster_size !== null) {
            $xfer += $output->writeFieldBegin('cluster_size', TType::I32, 1);
            $xfer += $output->writeI32($this->cluster_size);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->starting_lcn !== null) {
            $xfer += $output->writeFieldBegin('starting_lcn', TType::I64, 2);
            $xfer += $output->writeI64($this->starting_lcn);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->total_number_of_clusters !== null) {
            $xfer += $output->writeFieldBegin('total_number_of_clusters', TType::I64, 3);
            $xfer += $output->writeI64($this->total_number_of_clusters);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->bit_map !== null) {
            $xfer += $output->writeFieldBegin('bit_map', TType::STRING, 4);
            $xfer += $output->writeString($this->bit_map);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->compressed !== null) {
            $xfer += $output->writeFieldBegin('compressed', TType::BOOL, 5);
            $xfer += $output->writeBool($this->compressed);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class replication_result
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'result',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'compressed',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var string
     */
    public $result = "";
    /**
     * @var bool
     */
    public $compressed = false;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['result'])) {
                $this->result = $vals['result'];
            }
            if (isset($vals['compressed'])) {
                $this->compressed = $vals['compressed'];
            }
        }
    }

    public function getName()
    {
        return 'replication_result';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->result);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->compressed);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('replication_result');
        if ($this->result !== null) {
            $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
            $xfer += $output->writeString($this->result);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->compressed !== null) {
            $xfer += $output->writeFieldBegin('compressed', TType::BOOL, 2);
            $xfer += $output->writeBool($this->compressed);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class delete_snapshot_result
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'code',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'deleted_snapshots',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'non_deleted_snapshot_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var int
     */
    public $code = 0;
    /**
     * @var int
     */
    public $deleted_snapshots = 0;
    /**
     * @var string
     */
    public $non_deleted_snapshot_id = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['code'])) {
                $this->code = $vals['code'];
            }
            if (isset($vals['deleted_snapshots'])) {
                $this->deleted_snapshots = $vals['deleted_snapshots'];
            }
            if (isset($vals['non_deleted_snapshot_id'])) {
                $this->non_deleted_snapshot_id = $vals['non_deleted_snapshot_id'];
            }
        }
    }

    public function getName()
    {
        return 'delete_snapshot_result';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->code);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->deleted_snapshots);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->non_deleted_snapshot_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('delete_snapshot_result');
        if ($this->code !== null) {
            $xfer += $output->writeFieldBegin('code', TType::I32, 1);
            $xfer += $output->writeI32($this->code);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->deleted_snapshots !== null) {
            $xfer += $output->writeFieldBegin('deleted_snapshots', TType::I32, 2);
            $xfer += $output->writeI32($this->deleted_snapshots);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->non_deleted_snapshot_id !== null) {
            $xfer += $output->writeFieldBegin('non_deleted_snapshot_id', TType::STRING, 3);
            $xfer += $output->writeString($this->non_deleted_snapshot_id);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class physical_machine_info
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'architecture',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'client_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'client_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'domain',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'hal',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'initiator_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'is_oem',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        8 => array(
            'var' => 'logical_processors',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        9 => array(
            'var' => 'machine_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        10 => array(
            'var' => 'manufacturer',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'os_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'os_type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        13 => array(
            'var' => 'os_system_info',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        14 => array(
            'var' => 'physical_memory',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        15 => array(
            'var' => 'processors',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        16 => array(
            'var' => 'role',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        17 => array(
            'var' => 'system_model',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        18 => array(
            'var' => 'system_root',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        19 => array(
            'var' => 'workgroup',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        20 => array(
            'var' => 'os_version',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\os_version_info',
        ),
        21 => array(
            'var' => 'cluster_infos',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\cluster_info',
                ),
        ),
        22 => array(
            'var' => 'disk_infos',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\disk_info',
                ),
        ),
        23 => array(
            'var' => 'network_infos',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\network_info',
                ),
        ),
        24 => array(
            'var' => 'partition_infos',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\partition_info',
                ),
        ),
        25 => array(
            'var' => 'volume_infos',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\volume_info',
                ),
        ),
        26 => array(
            'var' => 'is_vcbt_driver_installed',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        27 => array(
            'var' => 'is_vcbt_enabled',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        28 => array(
            'var' => 'current_vcbt_version',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        29 => array(
            'var' => 'installed_vcbt_version',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        30 => array(
            'var' => 'is_winpe',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        31 => array(
            'var' => 'system_default_ui_language',
            'isRequired' => false,
            'type' => TType::I16,
        ),
    );

    /**
     * @var string
     */
    public $architecture = "";
    /**
     * @var string
     */
    public $client_id = "";
    /**
     * @var string
     */
    public $client_name = "";
    /**
     * @var string
     */
    public $domain = "";
    /**
     * @var string
     */
    public $hal = "";
    /**
     * @var string
     */
    public $initiator_name = "";
    /**
     * @var bool
     */
    public $is_oem = false;
    /**
     * @var int
     */
    public $logical_processors = 0;
    /**
     * @var string
     */
    public $machine_id = "";
    /**
     * @var string
     */
    public $manufacturer = "";
    /**
     * @var string
     */
    public $os_name = "";
    /**
     * @var int
     */
    public $os_type = 0;
    /**
     * @var string
     */
    public $os_system_info = null;
    /**
     * @var int
     */
    public $physical_memory = 0;
    /**
     * @var int
     */
    public $processors = 0;
    /**
     * @var int
     */
    public $role = 0;
    /**
     * @var string
     */
    public $system_model = "";
    /**
     * @var string
     */
    public $system_root = "";
    /**
     * @var string
     */
    public $workgroup = "";
    /**
     * @var \saasame\transport\os_version_info
     */
    public $os_version = null;
    /**
     * @var \saasame\transport\cluster_info[]
     */
    public $cluster_infos = null;
    /**
     * @var \saasame\transport\disk_info[]
     */
    public $disk_infos = null;
    /**
     * @var \saasame\transport\network_info[]
     */
    public $network_infos = null;
    /**
     * @var \saasame\transport\partition_info[]
     */
    public $partition_infos = null;
    /**
     * @var \saasame\transport\volume_info[]
     */
    public $volume_infos = null;
    /**
     * @var bool
     */
    public $is_vcbt_driver_installed = false;
    /**
     * @var bool
     */
    public $is_vcbt_enabled = false;
    /**
     * @var string
     */
    public $current_vcbt_version = null;
    /**
     * @var string
     */
    public $installed_vcbt_version = null;
    /**
     * @var bool
     */
    public $is_winpe = false;
    /**
     * @var int
     */
    public $system_default_ui_language = 1033;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['architecture'])) {
                $this->architecture = $vals['architecture'];
            }
            if (isset($vals['client_id'])) {
                $this->client_id = $vals['client_id'];
            }
            if (isset($vals['client_name'])) {
                $this->client_name = $vals['client_name'];
            }
            if (isset($vals['domain'])) {
                $this->domain = $vals['domain'];
            }
            if (isset($vals['hal'])) {
                $this->hal = $vals['hal'];
            }
            if (isset($vals['initiator_name'])) {
                $this->initiator_name = $vals['initiator_name'];
            }
            if (isset($vals['is_oem'])) {
                $this->is_oem = $vals['is_oem'];
            }
            if (isset($vals['logical_processors'])) {
                $this->logical_processors = $vals['logical_processors'];
            }
            if (isset($vals['machine_id'])) {
                $this->machine_id = $vals['machine_id'];
            }
            if (isset($vals['manufacturer'])) {
                $this->manufacturer = $vals['manufacturer'];
            }
            if (isset($vals['os_name'])) {
                $this->os_name = $vals['os_name'];
            }
            if (isset($vals['os_type'])) {
                $this->os_type = $vals['os_type'];
            }
            if (isset($vals['os_system_info'])) {
                $this->os_system_info = $vals['os_system_info'];
            }
            if (isset($vals['physical_memory'])) {
                $this->physical_memory = $vals['physical_memory'];
            }
            if (isset($vals['processors'])) {
                $this->processors = $vals['processors'];
            }
            if (isset($vals['role'])) {
                $this->role = $vals['role'];
            }
            if (isset($vals['system_model'])) {
                $this->system_model = $vals['system_model'];
            }
            if (isset($vals['system_root'])) {
                $this->system_root = $vals['system_root'];
            }
            if (isset($vals['workgroup'])) {
                $this->workgroup = $vals['workgroup'];
            }
            if (isset($vals['os_version'])) {
                $this->os_version = $vals['os_version'];
            }
            if (isset($vals['cluster_infos'])) {
                $this->cluster_infos = $vals['cluster_infos'];
            }
            if (isset($vals['disk_infos'])) {
                $this->disk_infos = $vals['disk_infos'];
            }
            if (isset($vals['network_infos'])) {
                $this->network_infos = $vals['network_infos'];
            }
            if (isset($vals['partition_infos'])) {
                $this->partition_infos = $vals['partition_infos'];
            }
            if (isset($vals['volume_infos'])) {
                $this->volume_infos = $vals['volume_infos'];
            }
            if (isset($vals['is_vcbt_driver_installed'])) {
                $this->is_vcbt_driver_installed = $vals['is_vcbt_driver_installed'];
            }
            if (isset($vals['is_vcbt_enabled'])) {
                $this->is_vcbt_enabled = $vals['is_vcbt_enabled'];
            }
            if (isset($vals['current_vcbt_version'])) {
                $this->current_vcbt_version = $vals['current_vcbt_version'];
            }
            if (isset($vals['installed_vcbt_version'])) {
                $this->installed_vcbt_version = $vals['installed_vcbt_version'];
            }
            if (isset($vals['is_winpe'])) {
                $this->is_winpe = $vals['is_winpe'];
            }
            if (isset($vals['system_default_ui_language'])) {
                $this->system_default_ui_language = $vals['system_default_ui_language'];
            }
        }
    }

    public function getName()
    {
        return 'physical_machine_info';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->architecture);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->client_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->client_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->domain);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->hal);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->initiator_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_oem);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->logical_processors);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->machine_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->manufacturer);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->os_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->os_type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->os_system_info);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->physical_memory);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->processors);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->role);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->system_model);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->system_root);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->workgroup);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::STRUCT) {
                        $this->os_version = new \saasame\transport\os_version_info();
                        $xfer += $this->os_version->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::SET) {
                        $this->cluster_infos = array();
                        $_size123 = 0;
                        $_etype126 = 0;
                        $xfer += $input->readSetBegin($_etype126, $_size123);
                        for ($_i127 = 0; $_i127 < $_size123; ++$_i127) {
                            $elem128 = null;
                            $elem128 = new \saasame\transport\cluster_info();
                            $xfer += $elem128->read($input);
                            $this->cluster_infos[] = $elem128;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 22:
                    if ($ftype == TType::SET) {
                        $this->disk_infos = array();
                        $_size129 = 0;
                        $_etype132 = 0;
                        $xfer += $input->readSetBegin($_etype132, $_size129);
                        for ($_i133 = 0; $_i133 < $_size129; ++$_i133) {
                            $elem134 = null;
                            $elem134 = new \saasame\transport\disk_info();
                            $xfer += $elem134->read($input);
                            $this->disk_infos[] = $elem134;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 23:
                    if ($ftype == TType::SET) {
                        $this->network_infos = array();
                        $_size135 = 0;
                        $_etype138 = 0;
                        $xfer += $input->readSetBegin($_etype138, $_size135);
                        for ($_i139 = 0; $_i139 < $_size135; ++$_i139) {
                            $elem140 = null;
                            $elem140 = new \saasame\transport\network_info();
                            $xfer += $elem140->read($input);
                            $this->network_infos[] = $elem140;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 24:
                    if ($ftype == TType::SET) {
                        $this->partition_infos = array();
                        $_size141 = 0;
                        $_etype144 = 0;
                        $xfer += $input->readSetBegin($_etype144, $_size141);
                        for ($_i145 = 0; $_i145 < $_size141; ++$_i145) {
                            $elem146 = null;
                            $elem146 = new \saasame\transport\partition_info();
                            $xfer += $elem146->read($input);
                            $this->partition_infos[] = $elem146;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 25:
                    if ($ftype == TType::SET) {
                        $this->volume_infos = array();
                        $_size147 = 0;
                        $_etype150 = 0;
                        $xfer += $input->readSetBegin($_etype150, $_size147);
                        for ($_i151 = 0; $_i151 < $_size147; ++$_i151) {
                            $elem152 = null;
                            $elem152 = new \saasame\transport\volume_info();
                            $xfer += $elem152->read($input);
                            $this->volume_infos[] = $elem152;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 26:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_vcbt_driver_installed);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 27:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_vcbt_enabled);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 28:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->current_vcbt_version);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 29:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->installed_vcbt_version);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 30:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_winpe);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 31:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->system_default_ui_language);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('physical_machine_info');
        if ($this->architecture !== null) {
            $xfer += $output->writeFieldBegin('architecture', TType::STRING, 1);
            $xfer += $output->writeString($this->architecture);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->client_id !== null) {
            $xfer += $output->writeFieldBegin('client_id', TType::STRING, 2);
            $xfer += $output->writeString($this->client_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->client_name !== null) {
            $xfer += $output->writeFieldBegin('client_name', TType::STRING, 3);
            $xfer += $output->writeString($this->client_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->domain !== null) {
            $xfer += $output->writeFieldBegin('domain', TType::STRING, 4);
            $xfer += $output->writeString($this->domain);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->hal !== null) {
            $xfer += $output->writeFieldBegin('hal', TType::STRING, 5);
            $xfer += $output->writeString($this->hal);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->initiator_name !== null) {
            $xfer += $output->writeFieldBegin('initiator_name', TType::STRING, 6);
            $xfer += $output->writeString($this->initiator_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_oem !== null) {
            $xfer += $output->writeFieldBegin('is_oem', TType::BOOL, 7);
            $xfer += $output->writeBool($this->is_oem);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->logical_processors !== null) {
            $xfer += $output->writeFieldBegin('logical_processors', TType::I16, 8);
            $xfer += $output->writeI16($this->logical_processors);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->machine_id !== null) {
            $xfer += $output->writeFieldBegin('machine_id', TType::STRING, 9);
            $xfer += $output->writeString($this->machine_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->manufacturer !== null) {
            $xfer += $output->writeFieldBegin('manufacturer', TType::STRING, 10);
            $xfer += $output->writeString($this->manufacturer);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->os_name !== null) {
            $xfer += $output->writeFieldBegin('os_name', TType::STRING, 11);
            $xfer += $output->writeString($this->os_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->os_type !== null) {
            $xfer += $output->writeFieldBegin('os_type', TType::I32, 12);
            $xfer += $output->writeI32($this->os_type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->os_system_info !== null) {
            $xfer += $output->writeFieldBegin('os_system_info', TType::STRING, 13);
            $xfer += $output->writeString($this->os_system_info);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->physical_memory !== null) {
            $xfer += $output->writeFieldBegin('physical_memory', TType::I64, 14);
            $xfer += $output->writeI64($this->physical_memory);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->processors !== null) {
            $xfer += $output->writeFieldBegin('processors', TType::I16, 15);
            $xfer += $output->writeI16($this->processors);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->role !== null) {
            $xfer += $output->writeFieldBegin('role', TType::I32, 16);
            $xfer += $output->writeI32($this->role);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->system_model !== null) {
            $xfer += $output->writeFieldBegin('system_model', TType::STRING, 17);
            $xfer += $output->writeString($this->system_model);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->system_root !== null) {
            $xfer += $output->writeFieldBegin('system_root', TType::STRING, 18);
            $xfer += $output->writeString($this->system_root);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->workgroup !== null) {
            $xfer += $output->writeFieldBegin('workgroup', TType::STRING, 19);
            $xfer += $output->writeString($this->workgroup);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->os_version !== null) {
            if (!is_object($this->os_version)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('os_version', TType::STRUCT, 20);
            $xfer += $this->os_version->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cluster_infos !== null) {
            if (!is_array($this->cluster_infos)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('cluster_infos', TType::SET, 21);
            $output->writeSetBegin(TType::STRUCT, count($this->cluster_infos));
            foreach ($this->cluster_infos as $iter153 => $iter154) {
                $xfer += $iter154->write($output);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->disk_infos !== null) {
            if (!is_array($this->disk_infos)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('disk_infos', TType::SET, 22);
            $output->writeSetBegin(TType::STRUCT, count($this->disk_infos));
            foreach ($this->disk_infos as $iter155 => $iter156) {
                $xfer += $iter156->write($output);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->network_infos !== null) {
            if (!is_array($this->network_infos)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('network_infos', TType::SET, 23);
            $output->writeSetBegin(TType::STRUCT, count($this->network_infos));
            foreach ($this->network_infos as $iter157 => $iter158) {
                $xfer += $iter158->write($output);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->partition_infos !== null) {
            if (!is_array($this->partition_infos)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('partition_infos', TType::SET, 24);
            $output->writeSetBegin(TType::STRUCT, count($this->partition_infos));
            foreach ($this->partition_infos as $iter159 => $iter160) {
                $xfer += $iter160->write($output);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->volume_infos !== null) {
            if (!is_array($this->volume_infos)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('volume_infos', TType::SET, 25);
            $output->writeSetBegin(TType::STRUCT, count($this->volume_infos));
            foreach ($this->volume_infos as $iter161 => $iter162) {
                $xfer += $iter162->write($output);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_vcbt_driver_installed !== null) {
            $xfer += $output->writeFieldBegin('is_vcbt_driver_installed', TType::BOOL, 26);
            $xfer += $output->writeBool($this->is_vcbt_driver_installed);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_vcbt_enabled !== null) {
            $xfer += $output->writeFieldBegin('is_vcbt_enabled', TType::BOOL, 27);
            $xfer += $output->writeBool($this->is_vcbt_enabled);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->current_vcbt_version !== null) {
            $xfer += $output->writeFieldBegin('current_vcbt_version', TType::STRING, 28);
            $xfer += $output->writeString($this->current_vcbt_version);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->installed_vcbt_version !== null) {
            $xfer += $output->writeFieldBegin('installed_vcbt_version', TType::STRING, 29);
            $xfer += $output->writeString($this->installed_vcbt_version);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_winpe !== null) {
            $xfer += $output->writeFieldBegin('is_winpe', TType::BOOL, 30);
            $xfer += $output->writeBool($this->is_winpe);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->system_default_ui_language !== null) {
            $xfer += $output->writeFieldBegin('system_default_ui_language', TType::I16, 31);
            $xfer += $output->writeI16($this->system_default_ui_language);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class virtual_host
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'name_ref',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'ip_addresses',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        4 => array(
            'var' => 'ip_address',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'product_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'version',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'power_state',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        8 => array(
            'var' => 'state',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'in_maintenance_mode',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        10 => array(
            'var' => 'vms',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        11 => array(
            'var' => 'datastores',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        12 => array(
            'var' => 'networks',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        13 => array(
            'var' => 'datacenter_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        14 => array(
            'var' => 'domain_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        15 => array(
            'var' => 'cluster_key',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        16 => array(
            'var' => 'full_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        17 => array(
            'var' => 'lic_features',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::LST,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::LST,
                'etype' => TType::STRING,
                'elem' => array(
                    'type' => TType::STRING,
                    ),
                ),
        ),
        18 => array(
            'var' => 'name_list',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        19 => array(
            'var' => 'domain_name_list',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        20 => array(
            'var' => 'connection_type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        21 => array(
            'var' => 'virtual_center_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        22 => array(
            'var' => 'virtual_center_version',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        23 => array(
            'var' => 'uuid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        24 => array(
            'var' => 'number_of_cpu_cores',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        25 => array(
            'var' => 'number_of_cpu_packages',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        26 => array(
            'var' => 'size_of_memory',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        27 => array(
            'var' => 'number_of_cpu_threads',
            'isRequired' => false,
            'type' => TType::I16,
        ),
    );

    /**
     * @var string
     */
    public $name_ref = "";
    /**
     * @var string
     */
    public $name = "";
    /**
     * @var string[]
     */
    public $ip_addresses = null;
    /**
     * @var string
     */
    public $ip_address = "";
    /**
     * @var string
     */
    public $product_name = "";
    /**
     * @var string
     */
    public $version = "";
    /**
     * @var int
     */
    public $power_state =     0;
    /**
     * @var string
     */
    public $state = "";
    /**
     * @var bool
     */
    public $in_maintenance_mode = false;
    /**
     * @var array
     */
    public $vms = null;
    /**
     * @var array
     */
    public $datastores = null;
    /**
     * @var array
     */
    public $networks = null;
    /**
     * @var string
     */
    public $datacenter_name = "";
    /**
     * @var string
     */
    public $domain_name = "";
    /**
     * @var string
     */
    public $cluster_key = "";
    /**
     * @var string
     */
    public $full_name = "";
    /**
     * @var array
     */
    public $lic_features = null;
    /**
     * @var string[]
     */
    public $name_list = null;
    /**
     * @var string[]
     */
    public $domain_name_list = null;
    /**
     * @var int
     */
    public $connection_type =     0;
    /**
     * @var string
     */
    public $virtual_center_name = null;
    /**
     * @var string
     */
    public $virtual_center_version = null;
    /**
     * @var string
     */
    public $uuid = null;
    /**
     * @var int
     */
    public $number_of_cpu_cores = 0;
    /**
     * @var int
     */
    public $number_of_cpu_packages = 0;
    /**
     * @var int
     */
    public $size_of_memory = 0;
    /**
     * @var int
     */
    public $number_of_cpu_threads = 0;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['name_ref'])) {
                $this->name_ref = $vals['name_ref'];
            }
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['ip_addresses'])) {
                $this->ip_addresses = $vals['ip_addresses'];
            }
            if (isset($vals['ip_address'])) {
                $this->ip_address = $vals['ip_address'];
            }
            if (isset($vals['product_name'])) {
                $this->product_name = $vals['product_name'];
            }
            if (isset($vals['version'])) {
                $this->version = $vals['version'];
            }
            if (isset($vals['power_state'])) {
                $this->power_state = $vals['power_state'];
            }
            if (isset($vals['state'])) {
                $this->state = $vals['state'];
            }
            if (isset($vals['in_maintenance_mode'])) {
                $this->in_maintenance_mode = $vals['in_maintenance_mode'];
            }
            if (isset($vals['vms'])) {
                $this->vms = $vals['vms'];
            }
            if (isset($vals['datastores'])) {
                $this->datastores = $vals['datastores'];
            }
            if (isset($vals['networks'])) {
                $this->networks = $vals['networks'];
            }
            if (isset($vals['datacenter_name'])) {
                $this->datacenter_name = $vals['datacenter_name'];
            }
            if (isset($vals['domain_name'])) {
                $this->domain_name = $vals['domain_name'];
            }
            if (isset($vals['cluster_key'])) {
                $this->cluster_key = $vals['cluster_key'];
            }
            if (isset($vals['full_name'])) {
                $this->full_name = $vals['full_name'];
            }
            if (isset($vals['lic_features'])) {
                $this->lic_features = $vals['lic_features'];
            }
            if (isset($vals['name_list'])) {
                $this->name_list = $vals['name_list'];
            }
            if (isset($vals['domain_name_list'])) {
                $this->domain_name_list = $vals['domain_name_list'];
            }
            if (isset($vals['connection_type'])) {
                $this->connection_type = $vals['connection_type'];
            }
            if (isset($vals['virtual_center_name'])) {
                $this->virtual_center_name = $vals['virtual_center_name'];
            }
            if (isset($vals['virtual_center_version'])) {
                $this->virtual_center_version = $vals['virtual_center_version'];
            }
            if (isset($vals['uuid'])) {
                $this->uuid = $vals['uuid'];
            }
            if (isset($vals['number_of_cpu_cores'])) {
                $this->number_of_cpu_cores = $vals['number_of_cpu_cores'];
            }
            if (isset($vals['number_of_cpu_packages'])) {
                $this->number_of_cpu_packages = $vals['number_of_cpu_packages'];
            }
            if (isset($vals['size_of_memory'])) {
                $this->size_of_memory = $vals['size_of_memory'];
            }
            if (isset($vals['number_of_cpu_threads'])) {
                $this->number_of_cpu_threads = $vals['number_of_cpu_threads'];
            }
        }
    }

    public function getName()
    {
        return 'virtual_host';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name_ref);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->ip_addresses = array();
                        $_size163 = 0;
                        $_etype166 = 0;
                        $xfer += $input->readListBegin($_etype166, $_size163);
                        for ($_i167 = 0; $_i167 < $_size163; ++$_i167) {
                            $elem168 = null;
                            $xfer += $input->readString($elem168);
                            $this->ip_addresses []= $elem168;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ip_address);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->product_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->version);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->power_state);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->state);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->in_maintenance_mode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::MAP) {
                        $this->vms = array();
                        $_size169 = 0;
                        $_ktype170 = 0;
                        $_vtype171 = 0;
                        $xfer += $input->readMapBegin($_ktype170, $_vtype171, $_size169);
                        for ($_i173 = 0; $_i173 < $_size169; ++$_i173) {
                            $key174 = '';
                            $val175 = '';
                            $xfer += $input->readString($key174);
                            $xfer += $input->readString($val175);
                            $this->vms[$key174] = $val175;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::MAP) {
                        $this->datastores = array();
                        $_size176 = 0;
                        $_ktype177 = 0;
                        $_vtype178 = 0;
                        $xfer += $input->readMapBegin($_ktype177, $_vtype178, $_size176);
                        for ($_i180 = 0; $_i180 < $_size176; ++$_i180) {
                            $key181 = '';
                            $val182 = '';
                            $xfer += $input->readString($key181);
                            $xfer += $input->readString($val182);
                            $this->datastores[$key181] = $val182;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::MAP) {
                        $this->networks = array();
                        $_size183 = 0;
                        $_ktype184 = 0;
                        $_vtype185 = 0;
                        $xfer += $input->readMapBegin($_ktype184, $_vtype185, $_size183);
                        for ($_i187 = 0; $_i187 < $_size183; ++$_i187) {
                            $key188 = '';
                            $val189 = '';
                            $xfer += $input->readString($key188);
                            $xfer += $input->readString($val189);
                            $this->networks[$key188] = $val189;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->datacenter_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->domain_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cluster_key);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->full_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::MAP) {
                        $this->lic_features = array();
                        $_size190 = 0;
                        $_ktype191 = 0;
                        $_vtype192 = 0;
                        $xfer += $input->readMapBegin($_ktype191, $_vtype192, $_size190);
                        for ($_i194 = 0; $_i194 < $_size190; ++$_i194) {
                            $key195 = '';
                            $val196 = array();
                            $xfer += $input->readString($key195);
                            $val196 = array();
                            $_size197 = 0;
                            $_etype200 = 0;
                            $xfer += $input->readListBegin($_etype200, $_size197);
                            for ($_i201 = 0; $_i201 < $_size197; ++$_i201) {
                                $elem202 = null;
                                $xfer += $input->readString($elem202);
                                $val196 []= $elem202;
                            }
                            $xfer += $input->readListEnd();
                            $this->lic_features[$key195] = $val196;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::LST) {
                        $this->name_list = array();
                        $_size203 = 0;
                        $_etype206 = 0;
                        $xfer += $input->readListBegin($_etype206, $_size203);
                        for ($_i207 = 0; $_i207 < $_size203; ++$_i207) {
                            $elem208 = null;
                            $xfer += $input->readString($elem208);
                            $this->name_list []= $elem208;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == TType::LST) {
                        $this->domain_name_list = array();
                        $_size209 = 0;
                        $_etype212 = 0;
                        $xfer += $input->readListBegin($_etype212, $_size209);
                        for ($_i213 = 0; $_i213 < $_size209; ++$_i213) {
                            $elem214 = null;
                            $xfer += $input->readString($elem214);
                            $this->domain_name_list []= $elem214;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->connection_type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->virtual_center_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 22:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->virtual_center_version);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 23:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->uuid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 24:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->number_of_cpu_cores);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 25:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->number_of_cpu_packages);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 26:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->size_of_memory);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 27:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->number_of_cpu_threads);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('virtual_host');
        if ($this->name_ref !== null) {
            $xfer += $output->writeFieldBegin('name_ref', TType::STRING, 1);
            $xfer += $output->writeString($this->name_ref);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ip_addresses !== null) {
            if (!is_array($this->ip_addresses)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('ip_addresses', TType::LST, 3);
            $output->writeListBegin(TType::STRING, count($this->ip_addresses));
            foreach ($this->ip_addresses as $iter215) {
                $xfer += $output->writeString($iter215);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ip_address !== null) {
            $xfer += $output->writeFieldBegin('ip_address', TType::STRING, 4);
            $xfer += $output->writeString($this->ip_address);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->product_name !== null) {
            $xfer += $output->writeFieldBegin('product_name', TType::STRING, 5);
            $xfer += $output->writeString($this->product_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->version !== null) {
            $xfer += $output->writeFieldBegin('version', TType::STRING, 6);
            $xfer += $output->writeString($this->version);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->power_state !== null) {
            $xfer += $output->writeFieldBegin('power_state', TType::I32, 7);
            $xfer += $output->writeI32($this->power_state);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->state !== null) {
            $xfer += $output->writeFieldBegin('state', TType::STRING, 8);
            $xfer += $output->writeString($this->state);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->in_maintenance_mode !== null) {
            $xfer += $output->writeFieldBegin('in_maintenance_mode', TType::BOOL, 9);
            $xfer += $output->writeBool($this->in_maintenance_mode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->vms !== null) {
            if (!is_array($this->vms)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('vms', TType::MAP, 10);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->vms));
            foreach ($this->vms as $kiter216 => $viter217) {
                $xfer += $output->writeString($kiter216);
                $xfer += $output->writeString($viter217);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->datastores !== null) {
            if (!is_array($this->datastores)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('datastores', TType::MAP, 11);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->datastores));
            foreach ($this->datastores as $kiter218 => $viter219) {
                $xfer += $output->writeString($kiter218);
                $xfer += $output->writeString($viter219);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->networks !== null) {
            if (!is_array($this->networks)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('networks', TType::MAP, 12);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->networks));
            foreach ($this->networks as $kiter220 => $viter221) {
                $xfer += $output->writeString($kiter220);
                $xfer += $output->writeString($viter221);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->datacenter_name !== null) {
            $xfer += $output->writeFieldBegin('datacenter_name', TType::STRING, 13);
            $xfer += $output->writeString($this->datacenter_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->domain_name !== null) {
            $xfer += $output->writeFieldBegin('domain_name', TType::STRING, 14);
            $xfer += $output->writeString($this->domain_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cluster_key !== null) {
            $xfer += $output->writeFieldBegin('cluster_key', TType::STRING, 15);
            $xfer += $output->writeString($this->cluster_key);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->full_name !== null) {
            $xfer += $output->writeFieldBegin('full_name', TType::STRING, 16);
            $xfer += $output->writeString($this->full_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->lic_features !== null) {
            if (!is_array($this->lic_features)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('lic_features', TType::MAP, 17);
            $output->writeMapBegin(TType::STRING, TType::LST, count($this->lic_features));
            foreach ($this->lic_features as $kiter222 => $viter223) {
                $xfer += $output->writeString($kiter222);
                $output->writeListBegin(TType::STRING, count($viter223));
                foreach ($viter223 as $iter224) {
                    $xfer += $output->writeString($iter224);
                }
                $output->writeListEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name_list !== null) {
            if (!is_array($this->name_list)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('name_list', TType::LST, 18);
            $output->writeListBegin(TType::STRING, count($this->name_list));
            foreach ($this->name_list as $iter225) {
                $xfer += $output->writeString($iter225);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->domain_name_list !== null) {
            if (!is_array($this->domain_name_list)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('domain_name_list', TType::LST, 19);
            $output->writeListBegin(TType::STRING, count($this->domain_name_list));
            foreach ($this->domain_name_list as $iter226) {
                $xfer += $output->writeString($iter226);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->connection_type !== null) {
            $xfer += $output->writeFieldBegin('connection_type', TType::I32, 20);
            $xfer += $output->writeI32($this->connection_type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->virtual_center_name !== null) {
            $xfer += $output->writeFieldBegin('virtual_center_name', TType::STRING, 21);
            $xfer += $output->writeString($this->virtual_center_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->virtual_center_version !== null) {
            $xfer += $output->writeFieldBegin('virtual_center_version', TType::STRING, 22);
            $xfer += $output->writeString($this->virtual_center_version);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->uuid !== null) {
            $xfer += $output->writeFieldBegin('uuid', TType::STRING, 23);
            $xfer += $output->writeString($this->uuid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->number_of_cpu_cores !== null) {
            $xfer += $output->writeFieldBegin('number_of_cpu_cores', TType::I16, 24);
            $xfer += $output->writeI16($this->number_of_cpu_cores);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->number_of_cpu_packages !== null) {
            $xfer += $output->writeFieldBegin('number_of_cpu_packages', TType::I16, 25);
            $xfer += $output->writeI16($this->number_of_cpu_packages);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->size_of_memory !== null) {
            $xfer += $output->writeFieldBegin('size_of_memory', TType::I64, 26);
            $xfer += $output->writeI64($this->size_of_memory);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->number_of_cpu_threads !== null) {
            $xfer += $output->writeFieldBegin('number_of_cpu_threads', TType::I16, 27);
            $xfer += $output->writeI16($this->number_of_cpu_threads);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class virtual_network_adapter
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'key',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'mac_address',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'network',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'port_group',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'type',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'is_connected',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        8 => array(
            'var' => 'is_start_connected',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        9 => array(
            'var' => 'is_allow_guest_control',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        10 => array(
            'var' => 'address_type',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'ip_addresses',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var int
     */
    public $key = 0;
    /**
     * @var string
     */
    public $name = "";
    /**
     * @var string
     */
    public $mac_address = "";
    /**
     * @var string
     */
    public $network = "";
    /**
     * @var string
     */
    public $port_group = "";
    /**
     * @var string
     */
    public $type = "";
    /**
     * @var bool
     */
    public $is_connected = false;
    /**
     * @var bool
     */
    public $is_start_connected = false;
    /**
     * @var bool
     */
    public $is_allow_guest_control = false;
    /**
     * @var string
     */
    public $address_type = "";
    /**
     * @var string[]
     */
    public $ip_addresses = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['key'])) {
                $this->key = $vals['key'];
            }
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['mac_address'])) {
                $this->mac_address = $vals['mac_address'];
            }
            if (isset($vals['network'])) {
                $this->network = $vals['network'];
            }
            if (isset($vals['port_group'])) {
                $this->port_group = $vals['port_group'];
            }
            if (isset($vals['type'])) {
                $this->type = $vals['type'];
            }
            if (isset($vals['is_connected'])) {
                $this->is_connected = $vals['is_connected'];
            }
            if (isset($vals['is_start_connected'])) {
                $this->is_start_connected = $vals['is_start_connected'];
            }
            if (isset($vals['is_allow_guest_control'])) {
                $this->is_allow_guest_control = $vals['is_allow_guest_control'];
            }
            if (isset($vals['address_type'])) {
                $this->address_type = $vals['address_type'];
            }
            if (isset($vals['ip_addresses'])) {
                $this->ip_addresses = $vals['ip_addresses'];
            }
        }
    }

    public function getName()
    {
        return 'virtual_network_adapter';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->key);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->mac_address);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->network);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->port_group);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_connected);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_start_connected);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_allow_guest_control);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->address_type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::LST) {
                        $this->ip_addresses = array();
                        $_size227 = 0;
                        $_etype230 = 0;
                        $xfer += $input->readListBegin($_etype230, $_size227);
                        for ($_i231 = 0; $_i231 < $_size227; ++$_i231) {
                            $elem232 = null;
                            $xfer += $input->readString($elem232);
                            $this->ip_addresses []= $elem232;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('virtual_network_adapter');
        if ($this->key !== null) {
            $xfer += $output->writeFieldBegin('key', TType::I32, 1);
            $xfer += $output->writeI32($this->key);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->mac_address !== null) {
            $xfer += $output->writeFieldBegin('mac_address', TType::STRING, 3);
            $xfer += $output->writeString($this->mac_address);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->network !== null) {
            $xfer += $output->writeFieldBegin('network', TType::STRING, 4);
            $xfer += $output->writeString($this->network);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->port_group !== null) {
            $xfer += $output->writeFieldBegin('port_group', TType::STRING, 5);
            $xfer += $output->writeString($this->port_group);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->type !== null) {
            $xfer += $output->writeFieldBegin('type', TType::STRING, 6);
            $xfer += $output->writeString($this->type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_connected !== null) {
            $xfer += $output->writeFieldBegin('is_connected', TType::BOOL, 7);
            $xfer += $output->writeBool($this->is_connected);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_start_connected !== null) {
            $xfer += $output->writeFieldBegin('is_start_connected', TType::BOOL, 8);
            $xfer += $output->writeBool($this->is_start_connected);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_allow_guest_control !== null) {
            $xfer += $output->writeFieldBegin('is_allow_guest_control', TType::BOOL, 9);
            $xfer += $output->writeBool($this->is_allow_guest_control);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->address_type !== null) {
            $xfer += $output->writeFieldBegin('address_type', TType::STRING, 10);
            $xfer += $output->writeString($this->address_type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ip_addresses !== null) {
            if (!is_array($this->ip_addresses)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('ip_addresses', TType::LST, 11);
            $output->writeListBegin(TType::STRING, count($this->ip_addresses));
            foreach ($this->ip_addresses as $iter233) {
                $xfer += $output->writeString($iter233);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class virtual_machine_snapshots
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'description',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'create_time',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'quiesced',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        5 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'backup_manifest',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'replay_supported',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        8 => array(
            'var' => 'child_snapshot_list',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\virtual_machine_snapshots',
                ),
        ),
    );

    /**
     * @var string
     */
    public $name = "";
    /**
     * @var string
     */
    public $description = "";
    /**
     * @var string
     */
    public $create_time = "";
    /**
     * @var bool
     */
    public $quiesced = false;
    /**
     * @var int
     */
    public $id = -1;
    /**
     * @var string
     */
    public $backup_manifest = "";
    /**
     * @var bool
     */
    public $replay_supported = false;
    /**
     * @var \saasame\transport\virtual_machine_snapshots[]
     */
    public $child_snapshot_list = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['description'])) {
                $this->description = $vals['description'];
            }
            if (isset($vals['create_time'])) {
                $this->create_time = $vals['create_time'];
            }
            if (isset($vals['quiesced'])) {
                $this->quiesced = $vals['quiesced'];
            }
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['backup_manifest'])) {
                $this->backup_manifest = $vals['backup_manifest'];
            }
            if (isset($vals['replay_supported'])) {
                $this->replay_supported = $vals['replay_supported'];
            }
            if (isset($vals['child_snapshot_list'])) {
                $this->child_snapshot_list = $vals['child_snapshot_list'];
            }
        }
    }

    public function getName()
    {
        return 'virtual_machine_snapshots';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->description);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->create_time);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->quiesced);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->backup_manifest);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->replay_supported);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::LST) {
                        $this->child_snapshot_list = array();
                        $_size234 = 0;
                        $_etype237 = 0;
                        $xfer += $input->readListBegin($_etype237, $_size234);
                        for ($_i238 = 0; $_i238 < $_size234; ++$_i238) {
                            $elem239 = null;
                            $elem239 = new \saasame\transport\virtual_machine_snapshots();
                            $xfer += $elem239->read($input);
                            $this->child_snapshot_list []= $elem239;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('virtual_machine_snapshots');
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->description !== null) {
            $xfer += $output->writeFieldBegin('description', TType::STRING, 2);
            $xfer += $output->writeString($this->description);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->create_time !== null) {
            $xfer += $output->writeFieldBegin('create_time', TType::STRING, 3);
            $xfer += $output->writeString($this->create_time);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->quiesced !== null) {
            $xfer += $output->writeFieldBegin('quiesced', TType::BOOL, 4);
            $xfer += $output->writeBool($this->quiesced);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::I32, 5);
            $xfer += $output->writeI32($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->backup_manifest !== null) {
            $xfer += $output->writeFieldBegin('backup_manifest', TType::STRING, 6);
            $xfer += $output->writeString($this->backup_manifest);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->replay_supported !== null) {
            $xfer += $output->writeFieldBegin('replay_supported', TType::BOOL, 7);
            $xfer += $output->writeBool($this->replay_supported);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->child_snapshot_list !== null) {
            if (!is_array($this->child_snapshot_list)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('child_snapshot_list', TType::LST, 8);
            $output->writeListBegin(TType::STRUCT, count($this->child_snapshot_list));
            foreach ($this->child_snapshot_list as $iter240) {
                $xfer += $iter240->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class virtual_disk_info
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'key',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'size_kb',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        5 => array(
            'var' => 'size',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        6 => array(
            'var' => 'controller_type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        7 => array(
            'var' => 'thin_provisioned',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var string
     */
    public $key = "";
    /**
     * @var string
     */
    public $name = "";
    /**
     * @var string
     */
    public $id = "";
    /**
     * @var int
     */
    public $size_kb = 0;
    /**
     * @var int
     */
    public $size = 0;
    /**
     * @var int
     */
    public $controller_type =     -1;
    /**
     * @var bool
     */
    public $thin_provisioned = false;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['key'])) {
                $this->key = $vals['key'];
            }
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['size_kb'])) {
                $this->size_kb = $vals['size_kb'];
            }
            if (isset($vals['size'])) {
                $this->size = $vals['size'];
            }
            if (isset($vals['controller_type'])) {
                $this->controller_type = $vals['controller_type'];
            }
            if (isset($vals['thin_provisioned'])) {
                $this->thin_provisioned = $vals['thin_provisioned'];
            }
        }
    }

    public function getName()
    {
        return 'virtual_disk_info';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->key);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->size_kb);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->controller_type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->thin_provisioned);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('virtual_disk_info');
        if ($this->key !== null) {
            $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
            $xfer += $output->writeString($this->key);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::STRING, 3);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->size_kb !== null) {
            $xfer += $output->writeFieldBegin('size_kb', TType::I64, 4);
            $xfer += $output->writeI64($this->size_kb);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->size !== null) {
            $xfer += $output->writeFieldBegin('size', TType::I64, 5);
            $xfer += $output->writeI64($this->size);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->controller_type !== null) {
            $xfer += $output->writeFieldBegin('controller_type', TType::I32, 6);
            $xfer += $output->writeI32($this->controller_type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->thin_provisioned !== null) {
            $xfer += $output->writeFieldBegin('thin_provisioned', TType::BOOL, 7);
            $xfer += $output->writeBool($this->thin_provisioned);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class virtual_machine
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'uuid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'host_key',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'host_ip',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'host_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'cluster_key',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'cluster_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'annotation',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'is_cpu_hot_add',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        10 => array(
            'var' => 'is_cpu_hot_remove',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        11 => array(
            'var' => 'memory_mb',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        12 => array(
            'var' => 'number_of_cpu',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        13 => array(
            'var' => 'is_template',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        14 => array(
            'var' => 'config_path',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        15 => array(
            'var' => 'config_path_file',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        16 => array(
            'var' => 'version',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        17 => array(
            'var' => 'power_state',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        18 => array(
            'var' => 'connection_state',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        19 => array(
            'var' => 'tools_status',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        20 => array(
            'var' => 'firmware',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        21 => array(
            'var' => 'guest_os_type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        22 => array(
            'var' => 'guest_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        23 => array(
            'var' => 'guest_os_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        24 => array(
            'var' => 'is_disk_uuid_enabled',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        25 => array(
            'var' => 'folder_path',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        26 => array(
            'var' => 'resource_pool_path',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        27 => array(
            'var' => 'disks',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\virtual_disk_info',
                ),
        ),
        28 => array(
            'var' => 'networks',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        29 => array(
            'var' => 'datacenter_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        30 => array(
            'var' => 'network_adapters',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\virtual_network_adapter',
                ),
        ),
        31 => array(
            'var' => 'root_snapshot_list',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\virtual_machine_snapshots',
                ),
        ),
        32 => array(
            'var' => 'guest_host_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        33 => array(
            'var' => 'guest_ip',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        34 => array(
            'var' => 'has_cdrom',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var string
     */
    public $uuid = "";
    /**
     * @var string
     */
    public $name = "";
    /**
     * @var string
     */
    public $host_key = "";
    /**
     * @var string
     */
    public $host_ip = "";
    /**
     * @var string
     */
    public $host_name = "";
    /**
     * @var string
     */
    public $cluster_key = "";
    /**
     * @var string
     */
    public $cluster_name = "";
    /**
     * @var string
     */
    public $annotation = "";
    /**
     * @var bool
     */
    public $is_cpu_hot_add = false;
    /**
     * @var bool
     */
    public $is_cpu_hot_remove = false;
    /**
     * @var int
     */
    public $memory_mb = 0;
    /**
     * @var int
     */
    public $number_of_cpu = 0;
    /**
     * @var bool
     */
    public $is_template = false;
    /**
     * @var string
     */
    public $config_path = "";
    /**
     * @var string
     */
    public $config_path_file = "";
    /**
     * @var int
     */
    public $version = 0;
    /**
     * @var int
     */
    public $power_state =     0;
    /**
     * @var int
     */
    public $connection_state =     0;
    /**
     * @var int
     */
    public $tools_status =     0;
    /**
     * @var int
     */
    public $firmware =     0;
    /**
     * @var int
     */
    public $guest_os_type =     0;
    /**
     * @var string
     */
    public $guest_id = "";
    /**
     * @var string
     */
    public $guest_os_name = "";
    /**
     * @var bool
     */
    public $is_disk_uuid_enabled = false;
    /**
     * @var string
     */
    public $folder_path = "";
    /**
     * @var string
     */
    public $resource_pool_path = "";
    /**
     * @var \saasame\transport\virtual_disk_info[]
     */
    public $disks = null;
    /**
     * @var array
     */
    public $networks = null;
    /**
     * @var string
     */
    public $datacenter_name = "";
    /**
     * @var \saasame\transport\virtual_network_adapter[]
     */
    public $network_adapters = null;
    /**
     * @var \saasame\transport\virtual_machine_snapshots[]
     */
    public $root_snapshot_list = null;
    /**
     * @var string
     */
    public $guest_host_name = "";
    /**
     * @var string
     */
    public $guest_ip = "";
    /**
     * @var bool
     */
    public $has_cdrom = false;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['uuid'])) {
                $this->uuid = $vals['uuid'];
            }
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['host_key'])) {
                $this->host_key = $vals['host_key'];
            }
            if (isset($vals['host_ip'])) {
                $this->host_ip = $vals['host_ip'];
            }
            if (isset($vals['host_name'])) {
                $this->host_name = $vals['host_name'];
            }
            if (isset($vals['cluster_key'])) {
                $this->cluster_key = $vals['cluster_key'];
            }
            if (isset($vals['cluster_name'])) {
                $this->cluster_name = $vals['cluster_name'];
            }
            if (isset($vals['annotation'])) {
                $this->annotation = $vals['annotation'];
            }
            if (isset($vals['is_cpu_hot_add'])) {
                $this->is_cpu_hot_add = $vals['is_cpu_hot_add'];
            }
            if (isset($vals['is_cpu_hot_remove'])) {
                $this->is_cpu_hot_remove = $vals['is_cpu_hot_remove'];
            }
            if (isset($vals['memory_mb'])) {
                $this->memory_mb = $vals['memory_mb'];
            }
            if (isset($vals['number_of_cpu'])) {
                $this->number_of_cpu = $vals['number_of_cpu'];
            }
            if (isset($vals['is_template'])) {
                $this->is_template = $vals['is_template'];
            }
            if (isset($vals['config_path'])) {
                $this->config_path = $vals['config_path'];
            }
            if (isset($vals['config_path_file'])) {
                $this->config_path_file = $vals['config_path_file'];
            }
            if (isset($vals['version'])) {
                $this->version = $vals['version'];
            }
            if (isset($vals['power_state'])) {
                $this->power_state = $vals['power_state'];
            }
            if (isset($vals['connection_state'])) {
                $this->connection_state = $vals['connection_state'];
            }
            if (isset($vals['tools_status'])) {
                $this->tools_status = $vals['tools_status'];
            }
            if (isset($vals['firmware'])) {
                $this->firmware = $vals['firmware'];
            }
            if (isset($vals['guest_os_type'])) {
                $this->guest_os_type = $vals['guest_os_type'];
            }
            if (isset($vals['guest_id'])) {
                $this->guest_id = $vals['guest_id'];
            }
            if (isset($vals['guest_os_name'])) {
                $this->guest_os_name = $vals['guest_os_name'];
            }
            if (isset($vals['is_disk_uuid_enabled'])) {
                $this->is_disk_uuid_enabled = $vals['is_disk_uuid_enabled'];
            }
            if (isset($vals['folder_path'])) {
                $this->folder_path = $vals['folder_path'];
            }
            if (isset($vals['resource_pool_path'])) {
                $this->resource_pool_path = $vals['resource_pool_path'];
            }
            if (isset($vals['disks'])) {
                $this->disks = $vals['disks'];
            }
            if (isset($vals['networks'])) {
                $this->networks = $vals['networks'];
            }
            if (isset($vals['datacenter_name'])) {
                $this->datacenter_name = $vals['datacenter_name'];
            }
            if (isset($vals['network_adapters'])) {
                $this->network_adapters = $vals['network_adapters'];
            }
            if (isset($vals['root_snapshot_list'])) {
                $this->root_snapshot_list = $vals['root_snapshot_list'];
            }
            if (isset($vals['guest_host_name'])) {
                $this->guest_host_name = $vals['guest_host_name'];
            }
            if (isset($vals['guest_ip'])) {
                $this->guest_ip = $vals['guest_ip'];
            }
            if (isset($vals['has_cdrom'])) {
                $this->has_cdrom = $vals['has_cdrom'];
            }
        }
    }

    public function getName()
    {
        return 'virtual_machine';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->uuid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->host_key);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->host_ip);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->host_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cluster_key);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cluster_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->annotation);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_cpu_hot_add);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_cpu_hot_remove);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->memory_mb);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->number_of_cpu);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_template);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->config_path);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->config_path_file);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->version);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->power_state);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->connection_state);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->tools_status);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->firmware);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->guest_os_type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 22:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->guest_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 23:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->guest_os_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 24:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_disk_uuid_enabled);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 25:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->folder_path);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 26:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->resource_pool_path);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 27:
                    if ($ftype == TType::LST) {
                        $this->disks = array();
                        $_size241 = 0;
                        $_etype244 = 0;
                        $xfer += $input->readListBegin($_etype244, $_size241);
                        for ($_i245 = 0; $_i245 < $_size241; ++$_i245) {
                            $elem246 = null;
                            $elem246 = new \saasame\transport\virtual_disk_info();
                            $xfer += $elem246->read($input);
                            $this->disks []= $elem246;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 28:
                    if ($ftype == TType::MAP) {
                        $this->networks = array();
                        $_size247 = 0;
                        $_ktype248 = 0;
                        $_vtype249 = 0;
                        $xfer += $input->readMapBegin($_ktype248, $_vtype249, $_size247);
                        for ($_i251 = 0; $_i251 < $_size247; ++$_i251) {
                            $key252 = '';
                            $val253 = '';
                            $xfer += $input->readString($key252);
                            $xfer += $input->readString($val253);
                            $this->networks[$key252] = $val253;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 29:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->datacenter_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 30:
                    if ($ftype == TType::LST) {
                        $this->network_adapters = array();
                        $_size254 = 0;
                        $_etype257 = 0;
                        $xfer += $input->readListBegin($_etype257, $_size254);
                        for ($_i258 = 0; $_i258 < $_size254; ++$_i258) {
                            $elem259 = null;
                            $elem259 = new \saasame\transport\virtual_network_adapter();
                            $xfer += $elem259->read($input);
                            $this->network_adapters []= $elem259;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 31:
                    if ($ftype == TType::LST) {
                        $this->root_snapshot_list = array();
                        $_size260 = 0;
                        $_etype263 = 0;
                        $xfer += $input->readListBegin($_etype263, $_size260);
                        for ($_i264 = 0; $_i264 < $_size260; ++$_i264) {
                            $elem265 = null;
                            $elem265 = new \saasame\transport\virtual_machine_snapshots();
                            $xfer += $elem265->read($input);
                            $this->root_snapshot_list []= $elem265;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 32:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->guest_host_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 33:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->guest_ip);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 34:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->has_cdrom);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('virtual_machine');
        if ($this->uuid !== null) {
            $xfer += $output->writeFieldBegin('uuid', TType::STRING, 1);
            $xfer += $output->writeString($this->uuid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->host_key !== null) {
            $xfer += $output->writeFieldBegin('host_key', TType::STRING, 3);
            $xfer += $output->writeString($this->host_key);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->host_ip !== null) {
            $xfer += $output->writeFieldBegin('host_ip', TType::STRING, 4);
            $xfer += $output->writeString($this->host_ip);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->host_name !== null) {
            $xfer += $output->writeFieldBegin('host_name', TType::STRING, 5);
            $xfer += $output->writeString($this->host_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cluster_key !== null) {
            $xfer += $output->writeFieldBegin('cluster_key', TType::STRING, 6);
            $xfer += $output->writeString($this->cluster_key);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cluster_name !== null) {
            $xfer += $output->writeFieldBegin('cluster_name', TType::STRING, 7);
            $xfer += $output->writeString($this->cluster_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->annotation !== null) {
            $xfer += $output->writeFieldBegin('annotation', TType::STRING, 8);
            $xfer += $output->writeString($this->annotation);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_cpu_hot_add !== null) {
            $xfer += $output->writeFieldBegin('is_cpu_hot_add', TType::BOOL, 9);
            $xfer += $output->writeBool($this->is_cpu_hot_add);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_cpu_hot_remove !== null) {
            $xfer += $output->writeFieldBegin('is_cpu_hot_remove', TType::BOOL, 10);
            $xfer += $output->writeBool($this->is_cpu_hot_remove);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->memory_mb !== null) {
            $xfer += $output->writeFieldBegin('memory_mb', TType::I32, 11);
            $xfer += $output->writeI32($this->memory_mb);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->number_of_cpu !== null) {
            $xfer += $output->writeFieldBegin('number_of_cpu', TType::I32, 12);
            $xfer += $output->writeI32($this->number_of_cpu);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_template !== null) {
            $xfer += $output->writeFieldBegin('is_template', TType::BOOL, 13);
            $xfer += $output->writeBool($this->is_template);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->config_path !== null) {
            $xfer += $output->writeFieldBegin('config_path', TType::STRING, 14);
            $xfer += $output->writeString($this->config_path);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->config_path_file !== null) {
            $xfer += $output->writeFieldBegin('config_path_file', TType::STRING, 15);
            $xfer += $output->writeString($this->config_path_file);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->version !== null) {
            $xfer += $output->writeFieldBegin('version', TType::I32, 16);
            $xfer += $output->writeI32($this->version);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->power_state !== null) {
            $xfer += $output->writeFieldBegin('power_state', TType::I32, 17);
            $xfer += $output->writeI32($this->power_state);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->connection_state !== null) {
            $xfer += $output->writeFieldBegin('connection_state', TType::I32, 18);
            $xfer += $output->writeI32($this->connection_state);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->tools_status !== null) {
            $xfer += $output->writeFieldBegin('tools_status', TType::I32, 19);
            $xfer += $output->writeI32($this->tools_status);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->firmware !== null) {
            $xfer += $output->writeFieldBegin('firmware', TType::I32, 20);
            $xfer += $output->writeI32($this->firmware);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->guest_os_type !== null) {
            $xfer += $output->writeFieldBegin('guest_os_type', TType::I32, 21);
            $xfer += $output->writeI32($this->guest_os_type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->guest_id !== null) {
            $xfer += $output->writeFieldBegin('guest_id', TType::STRING, 22);
            $xfer += $output->writeString($this->guest_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->guest_os_name !== null) {
            $xfer += $output->writeFieldBegin('guest_os_name', TType::STRING, 23);
            $xfer += $output->writeString($this->guest_os_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_disk_uuid_enabled !== null) {
            $xfer += $output->writeFieldBegin('is_disk_uuid_enabled', TType::BOOL, 24);
            $xfer += $output->writeBool($this->is_disk_uuid_enabled);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->folder_path !== null) {
            $xfer += $output->writeFieldBegin('folder_path', TType::STRING, 25);
            $xfer += $output->writeString($this->folder_path);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->resource_pool_path !== null) {
            $xfer += $output->writeFieldBegin('resource_pool_path', TType::STRING, 26);
            $xfer += $output->writeString($this->resource_pool_path);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->disks !== null) {
            if (!is_array($this->disks)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('disks', TType::LST, 27);
            $output->writeListBegin(TType::STRUCT, count($this->disks));
            foreach ($this->disks as $iter266) {
                $xfer += $iter266->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->networks !== null) {
            if (!is_array($this->networks)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('networks', TType::MAP, 28);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->networks));
            foreach ($this->networks as $kiter267 => $viter268) {
                $xfer += $output->writeString($kiter267);
                $xfer += $output->writeString($viter268);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->datacenter_name !== null) {
            $xfer += $output->writeFieldBegin('datacenter_name', TType::STRING, 29);
            $xfer += $output->writeString($this->datacenter_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->network_adapters !== null) {
            if (!is_array($this->network_adapters)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('network_adapters', TType::LST, 30);
            $output->writeListBegin(TType::STRUCT, count($this->network_adapters));
            foreach ($this->network_adapters as $iter269) {
                $xfer += $iter269->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->root_snapshot_list !== null) {
            if (!is_array($this->root_snapshot_list)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('root_snapshot_list', TType::LST, 31);
            $output->writeListBegin(TType::STRUCT, count($this->root_snapshot_list));
            foreach ($this->root_snapshot_list as $iter270) {
                $xfer += $iter270->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->guest_host_name !== null) {
            $xfer += $output->writeFieldBegin('guest_host_name', TType::STRING, 32);
            $xfer += $output->writeString($this->guest_host_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->guest_ip !== null) {
            $xfer += $output->writeFieldBegin('guest_ip', TType::STRING, 33);
            $xfer += $output->writeString($this->guest_ip);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->has_cdrom !== null) {
            $xfer += $output->writeFieldBegin('has_cdrom', TType::BOOL, 34);
            $xfer += $output->writeBool($this->has_cdrom);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class invalid_operation extends TException
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'what_op',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'why',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'format',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'arguments',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var int
     */
    public $what_op = null;
    /**
     * @var string
     */
    public $why = null;
    /**
     * @var string
     */
    public $format = "";
    /**
     * @var string[]
     */
    public $arguments = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['what_op'])) {
                $this->what_op = $vals['what_op'];
            }
            if (isset($vals['why'])) {
                $this->why = $vals['why'];
            }
            if (isset($vals['format'])) {
                $this->format = $vals['format'];
            }
            if (isset($vals['arguments'])) {
                $this->arguments = $vals['arguments'];
            }
        }
    }

    public function getName()
    {
        return 'invalid_operation';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->what_op);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->why);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->format);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::LST) {
                        $this->arguments = array();
                        $_size271 = 0;
                        $_etype274 = 0;
                        $xfer += $input->readListBegin($_etype274, $_size271);
                        for ($_i275 = 0; $_i275 < $_size271; ++$_i275) {
                            $elem276 = null;
                            $xfer += $input->readString($elem276);
                            $this->arguments []= $elem276;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('invalid_operation');
        if ($this->what_op !== null) {
            $xfer += $output->writeFieldBegin('what_op', TType::I32, 1);
            $xfer += $output->writeI32($this->what_op);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->why !== null) {
            $xfer += $output->writeFieldBegin('why', TType::STRING, 2);
            $xfer += $output->writeString($this->why);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->format !== null) {
            $xfer += $output->writeFieldBegin('format', TType::STRING, 5);
            $xfer += $output->writeString($this->format);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->arguments !== null) {
            if (!is_array($this->arguments)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('arguments', TType::LST, 6);
            $output->writeListBegin(TType::STRING, count($this->arguments));
            foreach ($this->arguments as $iter277) {
                $xfer += $output->writeString($iter277);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class job_trigger
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'start',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'finish',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'interval',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'duration',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var int
     */
    public $type =     1;
    /**
     * @var string
     */
    public $start = "";
    /**
     * @var string
     */
    public $finish = "";
    /**
     * @var int
     */
    public $interval = 15;
    /**
     * @var string
     */
    public $id = "";
    /**
     * @var int
     */
    public $duration = 0;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['type'])) {
                $this->type = $vals['type'];
            }
            if (isset($vals['start'])) {
                $this->start = $vals['start'];
            }
            if (isset($vals['finish'])) {
                $this->finish = $vals['finish'];
            }
            if (isset($vals['interval'])) {
                $this->interval = $vals['interval'];
            }
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['duration'])) {
                $this->duration = $vals['duration'];
            }
        }
    }

    public function getName()
    {
        return 'job_trigger';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->start);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->finish);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->interval);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->duration);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('job_trigger');
        if ($this->type !== null) {
            $xfer += $output->writeFieldBegin('type', TType::I32, 1);
            $xfer += $output->writeI32($this->type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->start !== null) {
            $xfer += $output->writeFieldBegin('start', TType::STRING, 2);
            $xfer += $output->writeString($this->start);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->finish !== null) {
            $xfer += $output->writeFieldBegin('finish', TType::STRING, 3);
            $xfer += $output->writeString($this->finish);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->interval !== null) {
            $xfer += $output->writeFieldBegin('interval', TType::I32, 4);
            $xfer += $output->writeI32($this->interval);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::STRING, 5);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->duration !== null) {
            $xfer += $output->writeFieldBegin('duration', TType::I32, 6);
            $xfer += $output->writeI32($this->duration);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class job_history
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'time',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'state',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'error',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'description',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'format',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'arguments',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        9 => array(
            'var' => 'is_display',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var string
     */
    public $time = "";
    /**
     * @var int
     */
    public $state =     1;
    /**
     * @var int
     */
    public $error = 0;
    /**
     * @var string
     */
    public $description = "";
    /**
     * @var string
     */
    public $format = "";
    /**
     * @var string[]
     */
    public $arguments = null;
    /**
     * @var bool
     */
    public $is_display = true;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['time'])) {
                $this->time = $vals['time'];
            }
            if (isset($vals['state'])) {
                $this->state = $vals['state'];
            }
            if (isset($vals['error'])) {
                $this->error = $vals['error'];
            }
            if (isset($vals['description'])) {
                $this->description = $vals['description'];
            }
            if (isset($vals['format'])) {
                $this->format = $vals['format'];
            }
            if (isset($vals['arguments'])) {
                $this->arguments = $vals['arguments'];
            }
            if (isset($vals['is_display'])) {
                $this->is_display = $vals['is_display'];
            }
        }
    }

    public function getName()
    {
        return 'job_history';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->time);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->state);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->error);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->description);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->format);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::LST) {
                        $this->arguments = array();
                        $_size278 = 0;
                        $_etype281 = 0;
                        $xfer += $input->readListBegin($_etype281, $_size278);
                        for ($_i282 = 0; $_i282 < $_size278; ++$_i282) {
                            $elem283 = null;
                            $xfer += $input->readString($elem283);
                            $this->arguments []= $elem283;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_display);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('job_history');
        if ($this->time !== null) {
            $xfer += $output->writeFieldBegin('time', TType::STRING, 1);
            $xfer += $output->writeString($this->time);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->state !== null) {
            $xfer += $output->writeFieldBegin('state', TType::I32, 2);
            $xfer += $output->writeI32($this->state);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->error !== null) {
            $xfer += $output->writeFieldBegin('error', TType::I32, 3);
            $xfer += $output->writeI32($this->error);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->description !== null) {
            $xfer += $output->writeFieldBegin('description', TType::STRING, 4);
            $xfer += $output->writeString($this->description);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->format !== null) {
            $xfer += $output->writeFieldBegin('format', TType::STRING, 7);
            $xfer += $output->writeString($this->format);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->arguments !== null) {
            if (!is_array($this->arguments)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('arguments', TType::LST, 8);
            $output->writeListBegin(TType::STRING, count($this->arguments));
            foreach ($this->arguments as $iter284) {
                $xfer += $output->writeString($iter284);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_display !== null) {
            $xfer += $output->writeFieldBegin('is_display', TType::BOOL, 9);
            $xfer += $output->writeBool($this->is_display);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class create_job_detail
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'triggers',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\job_trigger',
                ),
        ),
        3 => array(
            'var' => 'management_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'mgmt_addr',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        5 => array(
            'var' => 'mgmt_port',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'is_ssl',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var int
     */
    public $type =     1;
    /**
     * @var \saasame\transport\job_trigger[]
     */
    public $triggers = null;
    /**
     * @var string
     */
    public $management_id = "";
    /**
     * @var string[]
     */
    public $mgmt_addr = null;
    /**
     * @var int
     */
    public $mgmt_port = 80;
    /**
     * @var bool
     */
    public $is_ssl = false;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['type'])) {
                $this->type = $vals['type'];
            }
            if (isset($vals['triggers'])) {
                $this->triggers = $vals['triggers'];
            }
            if (isset($vals['management_id'])) {
                $this->management_id = $vals['management_id'];
            }
            if (isset($vals['mgmt_addr'])) {
                $this->mgmt_addr = $vals['mgmt_addr'];
            }
            if (isset($vals['mgmt_port'])) {
                $this->mgmt_port = $vals['mgmt_port'];
            }
            if (isset($vals['is_ssl'])) {
                $this->is_ssl = $vals['is_ssl'];
            }
        }
    }

    public function getName()
    {
        return 'create_job_detail';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::LST) {
                        $this->triggers = array();
                        $_size285 = 0;
                        $_etype288 = 0;
                        $xfer += $input->readListBegin($_etype288, $_size285);
                        for ($_i289 = 0; $_i289 < $_size285; ++$_i289) {
                            $elem290 = null;
                            $elem290 = new \saasame\transport\job_trigger();
                            $xfer += $elem290->read($input);
                            $this->triggers []= $elem290;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->management_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::SET) {
                        $this->mgmt_addr = array();
                        $_size291 = 0;
                        $_etype294 = 0;
                        $xfer += $input->readSetBegin($_etype294, $_size291);
                        for ($_i295 = 0; $_i295 < $_size291; ++$_i295) {
                            $elem296 = null;
                            $xfer += $input->readString($elem296);
                            $this->mgmt_addr[$elem296] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->mgmt_port);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_ssl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('create_job_detail');
        if ($this->type !== null) {
            $xfer += $output->writeFieldBegin('type', TType::I32, 1);
            $xfer += $output->writeI32($this->type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->triggers !== null) {
            if (!is_array($this->triggers)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('triggers', TType::LST, 2);
            $output->writeListBegin(TType::STRUCT, count($this->triggers));
            foreach ($this->triggers as $iter297) {
                $xfer += $iter297->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->management_id !== null) {
            $xfer += $output->writeFieldBegin('management_id', TType::STRING, 3);
            $xfer += $output->writeString($this->management_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->mgmt_addr !== null) {
            if (!is_array($this->mgmt_addr)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('mgmt_addr', TType::SET, 4);
            $output->writeSetBegin(TType::STRING, count($this->mgmt_addr));
            foreach ($this->mgmt_addr as $iter298 => $iter299) {
                $xfer += $output->writeString($iter298);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->mgmt_port !== null) {
            $xfer += $output->writeFieldBegin('mgmt_port', TType::I32, 5);
            $xfer += $output->writeI32($this->mgmt_port);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_ssl !== null) {
            $xfer += $output->writeFieldBegin('is_ssl', TType::BOOL, 6);
            $xfer += $output->writeBool($this->is_ssl);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class packer_disk_image
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'parent',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'base',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $name = "";
    /**
     * @var string
     */
    public $parent = "";
    /**
     * @var string
     */
    public $base = "";

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['parent'])) {
                $this->parent = $vals['parent'];
            }
            if (isset($vals['base'])) {
                $this->base = $vals['base'];
            }
        }
    }

    public function getName()
    {
        return 'packer_disk_image';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->parent);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->base);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('packer_disk_image');
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->parent !== null) {
            $xfer += $output->writeFieldBegin('parent', TType::STRING, 2);
            $xfer += $output->writeString($this->parent);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->base !== null) {
            $xfer += $output->writeFieldBegin('base', TType::STRING, 3);
            $xfer += $output->writeString($this->base);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class virtual_partition_info
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'partition_number',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'offset',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        3 => array(
            'var' => 'size',
            'isRequired' => false,
            'type' => TType::I64,
        ),
    );

    /**
     * @var int
     */
    public $partition_number = 0;
    /**
     * @var int
     */
    public $offset = 0;
    /**
     * @var int
     */
    public $size = 0;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['partition_number'])) {
                $this->partition_number = $vals['partition_number'];
            }
            if (isset($vals['offset'])) {
                $this->offset = $vals['offset'];
            }
            if (isset($vals['size'])) {
                $this->size = $vals['size'];
            }
        }
    }

    public function getName()
    {
        return 'virtual_partition_info';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->partition_number);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->offset);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('virtual_partition_info');
        if ($this->partition_number !== null) {
            $xfer += $output->writeFieldBegin('partition_number', TType::I32, 1);
            $xfer += $output->writeI32($this->partition_number);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->offset !== null) {
            $xfer += $output->writeFieldBegin('offset', TType::I64, 2);
            $xfer += $output->writeI64($this->offset);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->size !== null) {
            $xfer += $output->writeFieldBegin('size', TType::I64, 3);
            $xfer += $output->writeI64($this->size);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class virtual_disk_info_ex
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'size',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        3 => array(
            'var' => 'partition_style',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'guid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'signature',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'is_system',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        7 => array(
            'var' => 'partitions',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\virtual_partition_info',
                ),
        ),
    );

    /**
     * @var string
     */
    public $id = "";
    /**
     * @var int
     */
    public $size = 0;
    /**
     * @var int
     */
    public $partition_style =     0;
    /**
     * @var string
     */
    public $guid = "";
    /**
     * @var int
     */
    public $signature = 0;
    /**
     * @var bool
     */
    public $is_system = false;
    /**
     * @var \saasame\transport\virtual_partition_info[]
     */
    public $partitions = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['size'])) {
                $this->size = $vals['size'];
            }
            if (isset($vals['partition_style'])) {
                $this->partition_style = $vals['partition_style'];
            }
            if (isset($vals['guid'])) {
                $this->guid = $vals['guid'];
            }
            if (isset($vals['signature'])) {
                $this->signature = $vals['signature'];
            }
            if (isset($vals['is_system'])) {
                $this->is_system = $vals['is_system'];
            }
            if (isset($vals['partitions'])) {
                $this->partitions = $vals['partitions'];
            }
        }
    }

    public function getName()
    {
        return 'virtual_disk_info_ex';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->partition_style);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->guid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->signature);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_system);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::SET) {
                        $this->partitions = array();
                        $_size300 = 0;
                        $_etype303 = 0;
                        $xfer += $input->readSetBegin($_etype303, $_size300);
                        for ($_i304 = 0; $_i304 < $_size300; ++$_i304) {
                            $elem305 = null;
                            $elem305 = new \saasame\transport\virtual_partition_info();
                            $xfer += $elem305->read($input);
                            $this->partitions[] = $elem305;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('virtual_disk_info_ex');
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->size !== null) {
            $xfer += $output->writeFieldBegin('size', TType::I64, 2);
            $xfer += $output->writeI64($this->size);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->partition_style !== null) {
            $xfer += $output->writeFieldBegin('partition_style', TType::I32, 3);
            $xfer += $output->writeI32($this->partition_style);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->guid !== null) {
            $xfer += $output->writeFieldBegin('guid', TType::STRING, 4);
            $xfer += $output->writeString($this->guid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->signature !== null) {
            $xfer += $output->writeFieldBegin('signature', TType::I32, 5);
            $xfer += $output->writeI32($this->signature);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_system !== null) {
            $xfer += $output->writeFieldBegin('is_system', TType::BOOL, 6);
            $xfer += $output->writeBool($this->is_system);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->partitions !== null) {
            if (!is_array($this->partitions)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('partitions', TType::SET, 7);
            $output->writeSetBegin(TType::STRUCT, count($this->partitions));
            foreach ($this->partitions as $iter306 => $iter307) {
                $xfer += $iter307->write($output);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class virtual_create_packer_job_detail
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'disks',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        2 => array(
            'var' => 'host',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'addr',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        4 => array(
            'var' => 'username',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'password',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'virtual_machine_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'snapshot',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        10 => array(
            'var' => 'images',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\packer_disk_image',
                ),
        ),
        14 => array(
            'var' => 'backup_size',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I64,
                ),
        ),
        15 => array(
            'var' => 'backup_progress',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I64,
                ),
        ),
        16 => array(
            'var' => 'backup_image_offset',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I64,
                ),
        ),
        17 => array(
            'var' => 'previous_change_ids',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        18 => array(
            'var' => 'completed_blocks',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::LST,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::LST,
                'etype' => TType::STRUCT,
                'elem' => array(
                    'type' => TType::STRUCT,
                    'class' => '\saasame\transport\io_changed_range',
                    ),
                ),
        ),
    );

    /**
     * @var string[]
     */
    public $disks = null;
    /**
     * @var string
     */
    public $host = "";
    /**
     * @var string[]
     */
    public $addr = null;
    /**
     * @var string
     */
    public $username = "";
    /**
     * @var string
     */
    public $password = "";
    /**
     * @var string
     */
    public $virtual_machine_id = "";
    /**
     * @var string
     */
    public $snapshot = "";
    /**
     * @var array
     */
    public $images = null;
    /**
     * @var array
     */
    public $backup_size = null;
    /**
     * @var array
     */
    public $backup_progress = null;
    /**
     * @var array
     */
    public $backup_image_offset = null;
    /**
     * @var array
     */
    public $previous_change_ids = null;
    /**
     * @var array
     */
    public $completed_blocks = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['disks'])) {
                $this->disks = $vals['disks'];
            }
            if (isset($vals['host'])) {
                $this->host = $vals['host'];
            }
            if (isset($vals['addr'])) {
                $this->addr = $vals['addr'];
            }
            if (isset($vals['username'])) {
                $this->username = $vals['username'];
            }
            if (isset($vals['password'])) {
                $this->password = $vals['password'];
            }
            if (isset($vals['virtual_machine_id'])) {
                $this->virtual_machine_id = $vals['virtual_machine_id'];
            }
            if (isset($vals['snapshot'])) {
                $this->snapshot = $vals['snapshot'];
            }
            if (isset($vals['images'])) {
                $this->images = $vals['images'];
            }
            if (isset($vals['backup_size'])) {
                $this->backup_size = $vals['backup_size'];
            }
            if (isset($vals['backup_progress'])) {
                $this->backup_progress = $vals['backup_progress'];
            }
            if (isset($vals['backup_image_offset'])) {
                $this->backup_image_offset = $vals['backup_image_offset'];
            }
            if (isset($vals['previous_change_ids'])) {
                $this->previous_change_ids = $vals['previous_change_ids'];
            }
            if (isset($vals['completed_blocks'])) {
                $this->completed_blocks = $vals['completed_blocks'];
            }
        }
    }

    public function getName()
    {
        return 'virtual_create_packer_job_detail';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::SET) {
                        $this->disks = array();
                        $_size308 = 0;
                        $_etype311 = 0;
                        $xfer += $input->readSetBegin($_etype311, $_size308);
                        for ($_i312 = 0; $_i312 < $_size308; ++$_i312) {
                            $elem313 = null;
                            $xfer += $input->readString($elem313);
                            $this->disks[$elem313] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->host);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::SET) {
                        $this->addr = array();
                        $_size314 = 0;
                        $_etype317 = 0;
                        $xfer += $input->readSetBegin($_etype317, $_size314);
                        for ($_i318 = 0; $_i318 < $_size314; ++$_i318) {
                            $elem319 = null;
                            $xfer += $input->readString($elem319);
                            $this->addr[$elem319] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->username);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->password);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->virtual_machine_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->snapshot);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::MAP) {
                        $this->images = array();
                        $_size320 = 0;
                        $_ktype321 = 0;
                        $_vtype322 = 0;
                        $xfer += $input->readMapBegin($_ktype321, $_vtype322, $_size320);
                        for ($_i324 = 0; $_i324 < $_size320; ++$_i324) {
                            $key325 = '';
                            $val326 = new \saasame\transport\packer_disk_image();
                            $xfer += $input->readString($key325);
                            $val326 = new \saasame\transport\packer_disk_image();
                            $xfer += $val326->read($input);
                            $this->images[$key325] = $val326;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::MAP) {
                        $this->backup_size = array();
                        $_size327 = 0;
                        $_ktype328 = 0;
                        $_vtype329 = 0;
                        $xfer += $input->readMapBegin($_ktype328, $_vtype329, $_size327);
                        for ($_i331 = 0; $_i331 < $_size327; ++$_i331) {
                            $key332 = '';
                            $val333 = 0;
                            $xfer += $input->readString($key332);
                            $xfer += $input->readI64($val333);
                            $this->backup_size[$key332] = $val333;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::MAP) {
                        $this->backup_progress = array();
                        $_size334 = 0;
                        $_ktype335 = 0;
                        $_vtype336 = 0;
                        $xfer += $input->readMapBegin($_ktype335, $_vtype336, $_size334);
                        for ($_i338 = 0; $_i338 < $_size334; ++$_i338) {
                            $key339 = '';
                            $val340 = 0;
                            $xfer += $input->readString($key339);
                            $xfer += $input->readI64($val340);
                            $this->backup_progress[$key339] = $val340;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::MAP) {
                        $this->backup_image_offset = array();
                        $_size341 = 0;
                        $_ktype342 = 0;
                        $_vtype343 = 0;
                        $xfer += $input->readMapBegin($_ktype342, $_vtype343, $_size341);
                        for ($_i345 = 0; $_i345 < $_size341; ++$_i345) {
                            $key346 = '';
                            $val347 = 0;
                            $xfer += $input->readString($key346);
                            $xfer += $input->readI64($val347);
                            $this->backup_image_offset[$key346] = $val347;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::MAP) {
                        $this->previous_change_ids = array();
                        $_size348 = 0;
                        $_ktype349 = 0;
                        $_vtype350 = 0;
                        $xfer += $input->readMapBegin($_ktype349, $_vtype350, $_size348);
                        for ($_i352 = 0; $_i352 < $_size348; ++$_i352) {
                            $key353 = '';
                            $val354 = '';
                            $xfer += $input->readString($key353);
                            $xfer += $input->readString($val354);
                            $this->previous_change_ids[$key353] = $val354;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::MAP) {
                        $this->completed_blocks = array();
                        $_size355 = 0;
                        $_ktype356 = 0;
                        $_vtype357 = 0;
                        $xfer += $input->readMapBegin($_ktype356, $_vtype357, $_size355);
                        for ($_i359 = 0; $_i359 < $_size355; ++$_i359) {
                            $key360 = '';
                            $val361 = array();
                            $xfer += $input->readString($key360);
                            $val361 = array();
                            $_size362 = 0;
                            $_etype365 = 0;
                            $xfer += $input->readListBegin($_etype365, $_size362);
                            for ($_i366 = 0; $_i366 < $_size362; ++$_i366) {
                                $elem367 = null;
                                $elem367 = new \saasame\transport\io_changed_range();
                                $xfer += $elem367->read($input);
                                $val361 []= $elem367;
                            }
                            $xfer += $input->readListEnd();
                            $this->completed_blocks[$key360] = $val361;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('virtual_create_packer_job_detail');
        if ($this->disks !== null) {
            if (!is_array($this->disks)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('disks', TType::SET, 1);
            $output->writeSetBegin(TType::STRING, count($this->disks));
            foreach ($this->disks as $iter368 => $iter369) {
                $xfer += $output->writeString($iter368);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->host !== null) {
            $xfer += $output->writeFieldBegin('host', TType::STRING, 2);
            $xfer += $output->writeString($this->host);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->addr !== null) {
            if (!is_array($this->addr)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('addr', TType::SET, 3);
            $output->writeSetBegin(TType::STRING, count($this->addr));
            foreach ($this->addr as $iter370 => $iter371) {
                $xfer += $output->writeString($iter370);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->username !== null) {
            $xfer += $output->writeFieldBegin('username', TType::STRING, 4);
            $xfer += $output->writeString($this->username);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->password !== null) {
            $xfer += $output->writeFieldBegin('password', TType::STRING, 5);
            $xfer += $output->writeString($this->password);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->virtual_machine_id !== null) {
            $xfer += $output->writeFieldBegin('virtual_machine_id', TType::STRING, 6);
            $xfer += $output->writeString($this->virtual_machine_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->snapshot !== null) {
            $xfer += $output->writeFieldBegin('snapshot', TType::STRING, 9);
            $xfer += $output->writeString($this->snapshot);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->images !== null) {
            if (!is_array($this->images)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('images', TType::MAP, 10);
            $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->images));
            foreach ($this->images as $kiter372 => $viter373) {
                $xfer += $output->writeString($kiter372);
                $xfer += $viter373->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->backup_size !== null) {
            if (!is_array($this->backup_size)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('backup_size', TType::MAP, 14);
            $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_size));
            foreach ($this->backup_size as $kiter374 => $viter375) {
                $xfer += $output->writeString($kiter374);
                $xfer += $output->writeI64($viter375);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->backup_progress !== null) {
            if (!is_array($this->backup_progress)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('backup_progress', TType::MAP, 15);
            $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_progress));
            foreach ($this->backup_progress as $kiter376 => $viter377) {
                $xfer += $output->writeString($kiter376);
                $xfer += $output->writeI64($viter377);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->backup_image_offset !== null) {
            if (!is_array($this->backup_image_offset)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('backup_image_offset', TType::MAP, 16);
            $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_image_offset));
            foreach ($this->backup_image_offset as $kiter378 => $viter379) {
                $xfer += $output->writeString($kiter378);
                $xfer += $output->writeI64($viter379);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->previous_change_ids !== null) {
            if (!is_array($this->previous_change_ids)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('previous_change_ids', TType::MAP, 17);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->previous_change_ids));
            foreach ($this->previous_change_ids as $kiter380 => $viter381) {
                $xfer += $output->writeString($kiter380);
                $xfer += $output->writeString($viter381);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->completed_blocks !== null) {
            if (!is_array($this->completed_blocks)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('completed_blocks', TType::MAP, 18);
            $output->writeMapBegin(TType::STRING, TType::LST, count($this->completed_blocks));
            foreach ($this->completed_blocks as $kiter382 => $viter383) {
                $xfer += $output->writeString($kiter382);
                $output->writeListBegin(TType::STRUCT, count($viter383));
                foreach ($viter383 as $iter384) {
                    $xfer += $iter384->write($output);
                }
                $output->writeListEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class physical_vcbt_journal
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        2 => array(
            'var' => 'first_key',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        3 => array(
            'var' => 'latest_key',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        4 => array(
            'var' => 'lowest_valid_key',
            'isRequired' => false,
            'type' => TType::I64,
        ),
    );

    /**
     * @var int
     */
    public $id = 0;
    /**
     * @var int
     */
    public $first_key = 0;
    /**
     * @var int
     */
    public $latest_key = 0;
    /**
     * @var int
     */
    public $lowest_valid_key = 0;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['first_key'])) {
                $this->first_key = $vals['first_key'];
            }
            if (isset($vals['latest_key'])) {
                $this->latest_key = $vals['latest_key'];
            }
            if (isset($vals['lowest_valid_key'])) {
                $this->lowest_valid_key = $vals['lowest_valid_key'];
            }
        }
    }

    public function getName()
    {
        return 'physical_vcbt_journal';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->first_key);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->latest_key);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->lowest_valid_key);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('physical_vcbt_journal');
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::I64, 1);
            $xfer += $output->writeI64($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->first_key !== null) {
            $xfer += $output->writeFieldBegin('first_key', TType::I64, 2);
            $xfer += $output->writeI64($this->first_key);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->latest_key !== null) {
            $xfer += $output->writeFieldBegin('latest_key', TType::I64, 3);
            $xfer += $output->writeI64($this->latest_key);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->lowest_valid_key !== null) {
            $xfer += $output->writeFieldBegin('lowest_valid_key', TType::I64, 4);
            $xfer += $output->writeI64($this->lowest_valid_key);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class io_changed_range
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'offset',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        2 => array(
            'var' => 'start',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        3 => array(
            'var' => 'length',
            'isRequired' => false,
            'type' => TType::I64,
        ),
    );

    /**
     * @var int
     */
    public $offset = 0;
    /**
     * @var int
     */
    public $start = 0;
    /**
     * @var int
     */
    public $length = 0;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['offset'])) {
                $this->offset = $vals['offset'];
            }
            if (isset($vals['start'])) {
                $this->start = $vals['start'];
            }
            if (isset($vals['length'])) {
                $this->length = $vals['length'];
            }
        }
    }

    public function getName()
    {
        return 'io_changed_range';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->offset);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->start);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->length);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('io_changed_range');
        if ($this->offset !== null) {
            $xfer += $output->writeFieldBegin('offset', TType::I64, 1);
            $xfer += $output->writeI64($this->offset);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->start !== null) {
            $xfer += $output->writeFieldBegin('start', TType::I64, 2);
            $xfer += $output->writeI64($this->start);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->length !== null) {
            $xfer += $output->writeFieldBegin('length', TType::I64, 3);
            $xfer += $output->writeI64($this->length);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class physical_create_packer_job_detail
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'disks',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        2 => array(
            'var' => 'snapshots',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\snapshot',
                ),
        ),
        3 => array(
            'var' => 'previous_journals',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::I64,
            'vtype' => TType::STRUCT,
            'key' => array(
                'type' => TType::I64,
            ),
            'val' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\physical_vcbt_journal',
                ),
        ),
        4 => array(
            'var' => 'images',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\packer_disk_image',
                ),
        ),
        5 => array(
            'var' => 'backup_size',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I64,
                ),
        ),
        6 => array(
            'var' => 'backup_progress',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I64,
                ),
        ),
        7 => array(
            'var' => 'backup_image_offset',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I64,
                ),
        ),
        8 => array(
            'var' => 'cdr_journals',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::I64,
            'vtype' => TType::STRUCT,
            'key' => array(
                'type' => TType::I64,
            ),
            'val' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\physical_vcbt_journal',
                ),
        ),
        9 => array(
            'var' => 'cdr_changed_ranges',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::LST,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::LST,
                'etype' => TType::STRUCT,
                'elem' => array(
                    'type' => TType::STRUCT,
                    'class' => '\saasame\transport\io_changed_range',
                    ),
                ),
        ),
        10 => array(
            'var' => 'completed_blocks',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::LST,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::LST,
                'etype' => TType::STRUCT,
                'elem' => array(
                    'type' => TType::STRUCT,
                    'class' => '\saasame\transport\io_changed_range',
                    ),
                ),
        ),
        11 => array(
            'var' => 'excluded_paths',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        12 => array(
            'var' => 'resync_paths',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var string[]
     */
    public $disks = null;
    /**
     * @var \saasame\transport\snapshot[]
     */
    public $snapshots = null;
    /**
     * @var array
     */
    public $previous_journals = null;
    /**
     * @var array
     */
    public $images = null;
    /**
     * @var array
     */
    public $backup_size = null;
    /**
     * @var array
     */
    public $backup_progress = null;
    /**
     * @var array
     */
    public $backup_image_offset = null;
    /**
     * @var array
     */
    public $cdr_journals = null;
    /**
     * @var array
     */
    public $cdr_changed_ranges = null;
    /**
     * @var array
     */
    public $completed_blocks = null;
    /**
     * @var string[]
     */
    public $excluded_paths = null;
    /**
     * @var string[]
     */
    public $resync_paths = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['disks'])) {
                $this->disks = $vals['disks'];
            }
            if (isset($vals['snapshots'])) {
                $this->snapshots = $vals['snapshots'];
            }
            if (isset($vals['previous_journals'])) {
                $this->previous_journals = $vals['previous_journals'];
            }
            if (isset($vals['images'])) {
                $this->images = $vals['images'];
            }
            if (isset($vals['backup_size'])) {
                $this->backup_size = $vals['backup_size'];
            }
            if (isset($vals['backup_progress'])) {
                $this->backup_progress = $vals['backup_progress'];
            }
            if (isset($vals['backup_image_offset'])) {
                $this->backup_image_offset = $vals['backup_image_offset'];
            }
            if (isset($vals['cdr_journals'])) {
                $this->cdr_journals = $vals['cdr_journals'];
            }
            if (isset($vals['cdr_changed_ranges'])) {
                $this->cdr_changed_ranges = $vals['cdr_changed_ranges'];
            }
            if (isset($vals['completed_blocks'])) {
                $this->completed_blocks = $vals['completed_blocks'];
            }
            if (isset($vals['excluded_paths'])) {
                $this->excluded_paths = $vals['excluded_paths'];
            }
            if (isset($vals['resync_paths'])) {
                $this->resync_paths = $vals['resync_paths'];
            }
        }
    }

    public function getName()
    {
        return 'physical_create_packer_job_detail';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::SET) {
                        $this->disks = array();
                        $_size385 = 0;
                        $_etype388 = 0;
                        $xfer += $input->readSetBegin($_etype388, $_size385);
                        for ($_i389 = 0; $_i389 < $_size385; ++$_i389) {
                            $elem390 = null;
                            $xfer += $input->readString($elem390);
                            $this->disks[$elem390] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::LST) {
                        $this->snapshots = array();
                        $_size391 = 0;
                        $_etype394 = 0;
                        $xfer += $input->readListBegin($_etype394, $_size391);
                        for ($_i395 = 0; $_i395 < $_size391; ++$_i395) {
                            $elem396 = null;
                            $elem396 = new \saasame\transport\snapshot();
                            $xfer += $elem396->read($input);
                            $this->snapshots []= $elem396;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::MAP) {
                        $this->previous_journals = array();
                        $_size397 = 0;
                        $_ktype398 = 0;
                        $_vtype399 = 0;
                        $xfer += $input->readMapBegin($_ktype398, $_vtype399, $_size397);
                        for ($_i401 = 0; $_i401 < $_size397; ++$_i401) {
                            $key402 = 0;
                            $val403 = new \saasame\transport\physical_vcbt_journal();
                            $xfer += $input->readI64($key402);
                            $val403 = new \saasame\transport\physical_vcbt_journal();
                            $xfer += $val403->read($input);
                            $this->previous_journals[$key402] = $val403;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::MAP) {
                        $this->images = array();
                        $_size404 = 0;
                        $_ktype405 = 0;
                        $_vtype406 = 0;
                        $xfer += $input->readMapBegin($_ktype405, $_vtype406, $_size404);
                        for ($_i408 = 0; $_i408 < $_size404; ++$_i408) {
                            $key409 = '';
                            $val410 = new \saasame\transport\packer_disk_image();
                            $xfer += $input->readString($key409);
                            $val410 = new \saasame\transport\packer_disk_image();
                            $xfer += $val410->read($input);
                            $this->images[$key409] = $val410;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::MAP) {
                        $this->backup_size = array();
                        $_size411 = 0;
                        $_ktype412 = 0;
                        $_vtype413 = 0;
                        $xfer += $input->readMapBegin($_ktype412, $_vtype413, $_size411);
                        for ($_i415 = 0; $_i415 < $_size411; ++$_i415) {
                            $key416 = '';
                            $val417 = 0;
                            $xfer += $input->readString($key416);
                            $xfer += $input->readI64($val417);
                            $this->backup_size[$key416] = $val417;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::MAP) {
                        $this->backup_progress = array();
                        $_size418 = 0;
                        $_ktype419 = 0;
                        $_vtype420 = 0;
                        $xfer += $input->readMapBegin($_ktype419, $_vtype420, $_size418);
                        for ($_i422 = 0; $_i422 < $_size418; ++$_i422) {
                            $key423 = '';
                            $val424 = 0;
                            $xfer += $input->readString($key423);
                            $xfer += $input->readI64($val424);
                            $this->backup_progress[$key423] = $val424;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::MAP) {
                        $this->backup_image_offset = array();
                        $_size425 = 0;
                        $_ktype426 = 0;
                        $_vtype427 = 0;
                        $xfer += $input->readMapBegin($_ktype426, $_vtype427, $_size425);
                        for ($_i429 = 0; $_i429 < $_size425; ++$_i429) {
                            $key430 = '';
                            $val431 = 0;
                            $xfer += $input->readString($key430);
                            $xfer += $input->readI64($val431);
                            $this->backup_image_offset[$key430] = $val431;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::MAP) {
                        $this->cdr_journals = array();
                        $_size432 = 0;
                        $_ktype433 = 0;
                        $_vtype434 = 0;
                        $xfer += $input->readMapBegin($_ktype433, $_vtype434, $_size432);
                        for ($_i436 = 0; $_i436 < $_size432; ++$_i436) {
                            $key437 = 0;
                            $val438 = new \saasame\transport\physical_vcbt_journal();
                            $xfer += $input->readI64($key437);
                            $val438 = new \saasame\transport\physical_vcbt_journal();
                            $xfer += $val438->read($input);
                            $this->cdr_journals[$key437] = $val438;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::MAP) {
                        $this->cdr_changed_ranges = array();
                        $_size439 = 0;
                        $_ktype440 = 0;
                        $_vtype441 = 0;
                        $xfer += $input->readMapBegin($_ktype440, $_vtype441, $_size439);
                        for ($_i443 = 0; $_i443 < $_size439; ++$_i443) {
                            $key444 = '';
                            $val445 = array();
                            $xfer += $input->readString($key444);
                            $val445 = array();
                            $_size446 = 0;
                            $_etype449 = 0;
                            $xfer += $input->readListBegin($_etype449, $_size446);
                            for ($_i450 = 0; $_i450 < $_size446; ++$_i450) {
                                $elem451 = null;
                                $elem451 = new \saasame\transport\io_changed_range();
                                $xfer += $elem451->read($input);
                                $val445 []= $elem451;
                            }
                            $xfer += $input->readListEnd();
                            $this->cdr_changed_ranges[$key444] = $val445;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::MAP) {
                        $this->completed_blocks = array();
                        $_size452 = 0;
                        $_ktype453 = 0;
                        $_vtype454 = 0;
                        $xfer += $input->readMapBegin($_ktype453, $_vtype454, $_size452);
                        for ($_i456 = 0; $_i456 < $_size452; ++$_i456) {
                            $key457 = '';
                            $val458 = array();
                            $xfer += $input->readString($key457);
                            $val458 = array();
                            $_size459 = 0;
                            $_etype462 = 0;
                            $xfer += $input->readListBegin($_etype462, $_size459);
                            for ($_i463 = 0; $_i463 < $_size459; ++$_i463) {
                                $elem464 = null;
                                $elem464 = new \saasame\transport\io_changed_range();
                                $xfer += $elem464->read($input);
                                $val458 []= $elem464;
                            }
                            $xfer += $input->readListEnd();
                            $this->completed_blocks[$key457] = $val458;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::SET) {
                        $this->excluded_paths = array();
                        $_size465 = 0;
                        $_etype468 = 0;
                        $xfer += $input->readSetBegin($_etype468, $_size465);
                        for ($_i469 = 0; $_i469 < $_size465; ++$_i469) {
                            $elem470 = null;
                            $xfer += $input->readString($elem470);
                            $this->excluded_paths[$elem470] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::SET) {
                        $this->resync_paths = array();
                        $_size471 = 0;
                        $_etype474 = 0;
                        $xfer += $input->readSetBegin($_etype474, $_size471);
                        for ($_i475 = 0; $_i475 < $_size471; ++$_i475) {
                            $elem476 = null;
                            $xfer += $input->readString($elem476);
                            $this->resync_paths[$elem476] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('physical_create_packer_job_detail');
        if ($this->disks !== null) {
            if (!is_array($this->disks)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('disks', TType::SET, 1);
            $output->writeSetBegin(TType::STRING, count($this->disks));
            foreach ($this->disks as $iter477 => $iter478) {
                $xfer += $output->writeString($iter477);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->snapshots !== null) {
            if (!is_array($this->snapshots)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('snapshots', TType::LST, 2);
            $output->writeListBegin(TType::STRUCT, count($this->snapshots));
            foreach ($this->snapshots as $iter479) {
                $xfer += $iter479->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->previous_journals !== null) {
            if (!is_array($this->previous_journals)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('previous_journals', TType::MAP, 3);
            $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->previous_journals));
            foreach ($this->previous_journals as $kiter480 => $viter481) {
                $xfer += $output->writeI64($kiter480);
                $xfer += $viter481->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->images !== null) {
            if (!is_array($this->images)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('images', TType::MAP, 4);
            $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->images));
            foreach ($this->images as $kiter482 => $viter483) {
                $xfer += $output->writeString($kiter482);
                $xfer += $viter483->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->backup_size !== null) {
            if (!is_array($this->backup_size)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('backup_size', TType::MAP, 5);
            $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_size));
            foreach ($this->backup_size as $kiter484 => $viter485) {
                $xfer += $output->writeString($kiter484);
                $xfer += $output->writeI64($viter485);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->backup_progress !== null) {
            if (!is_array($this->backup_progress)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('backup_progress', TType::MAP, 6);
            $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_progress));
            foreach ($this->backup_progress as $kiter486 => $viter487) {
                $xfer += $output->writeString($kiter486);
                $xfer += $output->writeI64($viter487);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->backup_image_offset !== null) {
            if (!is_array($this->backup_image_offset)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('backup_image_offset', TType::MAP, 7);
            $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_image_offset));
            foreach ($this->backup_image_offset as $kiter488 => $viter489) {
                $xfer += $output->writeString($kiter488);
                $xfer += $output->writeI64($viter489);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cdr_journals !== null) {
            if (!is_array($this->cdr_journals)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('cdr_journals', TType::MAP, 8);
            $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->cdr_journals));
            foreach ($this->cdr_journals as $kiter490 => $viter491) {
                $xfer += $output->writeI64($kiter490);
                $xfer += $viter491->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cdr_changed_ranges !== null) {
            if (!is_array($this->cdr_changed_ranges)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('cdr_changed_ranges', TType::MAP, 9);
            $output->writeMapBegin(TType::STRING, TType::LST, count($this->cdr_changed_ranges));
            foreach ($this->cdr_changed_ranges as $kiter492 => $viter493) {
                $xfer += $output->writeString($kiter492);
                $output->writeListBegin(TType::STRUCT, count($viter493));
                foreach ($viter493 as $iter494) {
                    $xfer += $iter494->write($output);
                }
                $output->writeListEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->completed_blocks !== null) {
            if (!is_array($this->completed_blocks)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('completed_blocks', TType::MAP, 10);
            $output->writeMapBegin(TType::STRING, TType::LST, count($this->completed_blocks));
            foreach ($this->completed_blocks as $kiter495 => $viter496) {
                $xfer += $output->writeString($kiter495);
                $output->writeListBegin(TType::STRUCT, count($viter496));
                foreach ($viter496 as $iter497) {
                    $xfer += $iter497->write($output);
                }
                $output->writeListEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->excluded_paths !== null) {
            if (!is_array($this->excluded_paths)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('excluded_paths', TType::SET, 11);
            $output->writeSetBegin(TType::STRING, count($this->excluded_paths));
            foreach ($this->excluded_paths as $iter498 => $iter499) {
                $xfer += $output->writeString($iter498);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->resync_paths !== null) {
            if (!is_array($this->resync_paths)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('resync_paths', TType::SET, 12);
            $output->writeSetBegin(TType::STRING, count($this->resync_paths));
            foreach ($this->resync_paths as $iter500 => $iter501) {
                $xfer += $output->writeString($iter500);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class _create_packer_job_detail
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'p',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\physical_create_packer_job_detail',
        ),
        2 => array(
            'var' => 'v',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\virtual_create_packer_job_detail',
        ),
    );

    /**
     * @var \saasame\transport\physical_create_packer_job_detail
     */
    public $p = null;
    /**
     * @var \saasame\transport\virtual_create_packer_job_detail
     */
    public $v = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['p'])) {
                $this->p = $vals['p'];
            }
            if (isset($vals['v'])) {
                $this->v = $vals['v'];
            }
        }
    }

    public function getName()
    {
        return '_create_packer_job_detail';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->p = new \saasame\transport\physical_create_packer_job_detail();
                        $xfer += $this->p->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->v = new \saasame\transport\virtual_create_packer_job_detail();
                        $xfer += $this->v->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('_create_packer_job_detail');
        if ($this->p !== null) {
            if (!is_object($this->p)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('p', TType::STRUCT, 1);
            $xfer += $this->p->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->v !== null) {
            if (!is_object($this->v)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('v', TType::STRUCT, 2);
            $xfer += $this->v->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class create_packer_job_detail
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'connection_ids',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        3 => array(
            'var' => 'carriers',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::SET,
                'etype' => TType::STRING,
                'elem' => array(
                    'type' => TType::STRING,
                    ),
                ),
        ),
        4 => array(
            'var' => 'detail',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\_create_packer_job_detail',
        ),
        5 => array(
            'var' => 'checksum_verify',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        6 => array(
            'var' => 'timeout',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        7 => array(
            'var' => 'is_encrypted',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        8 => array(
            'var' => 'worker_thread_number',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        9 => array(
            'var' => 'file_system_filter_enable',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        10 => array(
            'var' => 'min_transport_size',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        11 => array(
            'var' => 'full_min_transport_size',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        12 => array(
            'var' => 'is_compressed',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        13 => array(
            'var' => 'is_checksum',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        14 => array(
            'var' => 'priority_carrier',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        15 => array(
            'var' => 'is_only_single_system_disk',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        16 => array(
            'var' => 'is_compressed_by_packer',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var int
     */
    public $type = null;
    /**
     * @var string[]
     */
    public $connection_ids = null;
    /**
     * @var array
     */
    public $carriers = null;
    /**
     * @var \saasame\transport\_create_packer_job_detail
     */
    public $detail = null;
    /**
     * @var bool
     */
    public $checksum_verify = true;
    /**
     * @var int
     */
    public $timeout = 300;
    /**
     * @var bool
     */
    public $is_encrypted = false;
    /**
     * @var int
     */
    public $worker_thread_number = 0;
    /**
     * @var bool
     */
    public $file_system_filter_enable = true;
    /**
     * @var int
     */
    public $min_transport_size = 0;
    /**
     * @var int
     */
    public $full_min_transport_size = 0;
    /**
     * @var bool
     */
    public $is_compressed = true;
    /**
     * @var bool
     */
    public $is_checksum = false;
    /**
     * @var array
     */
    public $priority_carrier = null;
    /**
     * @var bool
     */
    public $is_only_single_system_disk = false;
    /**
     * @var bool
     */
    public $is_compressed_by_packer = false;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['type'])) {
                $this->type = $vals['type'];
            }
            if (isset($vals['connection_ids'])) {
                $this->connection_ids = $vals['connection_ids'];
            }
            if (isset($vals['carriers'])) {
                $this->carriers = $vals['carriers'];
            }
            if (isset($vals['detail'])) {
                $this->detail = $vals['detail'];
            }
            if (isset($vals['checksum_verify'])) {
                $this->checksum_verify = $vals['checksum_verify'];
            }
            if (isset($vals['timeout'])) {
                $this->timeout = $vals['timeout'];
            }
            if (isset($vals['is_encrypted'])) {
                $this->is_encrypted = $vals['is_encrypted'];
            }
            if (isset($vals['worker_thread_number'])) {
                $this->worker_thread_number = $vals['worker_thread_number'];
            }
            if (isset($vals['file_system_filter_enable'])) {
                $this->file_system_filter_enable = $vals['file_system_filter_enable'];
            }
            if (isset($vals['min_transport_size'])) {
                $this->min_transport_size = $vals['min_transport_size'];
            }
            if (isset($vals['full_min_transport_size'])) {
                $this->full_min_transport_size = $vals['full_min_transport_size'];
            }
            if (isset($vals['is_compressed'])) {
                $this->is_compressed = $vals['is_compressed'];
            }
            if (isset($vals['is_checksum'])) {
                $this->is_checksum = $vals['is_checksum'];
            }
            if (isset($vals['priority_carrier'])) {
                $this->priority_carrier = $vals['priority_carrier'];
            }
            if (isset($vals['is_only_single_system_disk'])) {
                $this->is_only_single_system_disk = $vals['is_only_single_system_disk'];
            }
            if (isset($vals['is_compressed_by_packer'])) {
                $this->is_compressed_by_packer = $vals['is_compressed_by_packer'];
            }
        }
    }

    public function getName()
    {
        return 'create_packer_job_detail';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::SET) {
                        $this->connection_ids = array();
                        $_size502 = 0;
                        $_etype505 = 0;
                        $xfer += $input->readSetBegin($_etype505, $_size502);
                        for ($_i506 = 0; $_i506 < $_size502; ++$_i506) {
                            $elem507 = null;
                            $xfer += $input->readString($elem507);
                            $this->connection_ids[$elem507] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::MAP) {
                        $this->carriers = array();
                        $_size508 = 0;
                        $_ktype509 = 0;
                        $_vtype510 = 0;
                        $xfer += $input->readMapBegin($_ktype509, $_vtype510, $_size508);
                        for ($_i512 = 0; $_i512 < $_size508; ++$_i512) {
                            $key513 = '';
                            $val514 = array();
                            $xfer += $input->readString($key513);
                            $val514 = array();
                            $_size515 = 0;
                            $_etype518 = 0;
                            $xfer += $input->readSetBegin($_etype518, $_size515);
                            for ($_i519 = 0; $_i519 < $_size515; ++$_i519) {
                                $elem520 = null;
                                $xfer += $input->readString($elem520);
                                $val514[$elem520] = true;
                            }
                            $xfer += $input->readSetEnd();
                            $this->carriers[$key513] = $val514;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRUCT) {
                        $this->detail = new \saasame\transport\_create_packer_job_detail();
                        $xfer += $this->detail->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->checksum_verify);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->timeout);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_encrypted);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->worker_thread_number);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->file_system_filter_enable);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->min_transport_size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->full_min_transport_size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_compressed);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_checksum);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::MAP) {
                        $this->priority_carrier = array();
                        $_size521 = 0;
                        $_ktype522 = 0;
                        $_vtype523 = 0;
                        $xfer += $input->readMapBegin($_ktype522, $_vtype523, $_size521);
                        for ($_i525 = 0; $_i525 < $_size521; ++$_i525) {
                            $key526 = '';
                            $val527 = '';
                            $xfer += $input->readString($key526);
                            $xfer += $input->readString($val527);
                            $this->priority_carrier[$key526] = $val527;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_only_single_system_disk);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_compressed_by_packer);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('create_packer_job_detail');
        if ($this->type !== null) {
            $xfer += $output->writeFieldBegin('type', TType::I32, 1);
            $xfer += $output->writeI32($this->type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->connection_ids !== null) {
            if (!is_array($this->connection_ids)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('connection_ids', TType::SET, 2);
            $output->writeSetBegin(TType::STRING, count($this->connection_ids));
            foreach ($this->connection_ids as $iter528 => $iter529) {
                $xfer += $output->writeString($iter528);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->carriers !== null) {
            if (!is_array($this->carriers)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('carriers', TType::MAP, 3);
            $output->writeMapBegin(TType::STRING, TType::SET, count($this->carriers));
            foreach ($this->carriers as $kiter530 => $viter531) {
                $xfer += $output->writeString($kiter530);
                $output->writeSetBegin(TType::STRING, count($viter531));
                foreach ($viter531 as $iter532 => $iter533) {
                    $xfer += $output->writeString($iter532);
                }
                $output->writeSetEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->detail !== null) {
            if (!is_object($this->detail)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('detail', TType::STRUCT, 4);
            $xfer += $this->detail->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->checksum_verify !== null) {
            $xfer += $output->writeFieldBegin('checksum_verify', TType::BOOL, 5);
            $xfer += $output->writeBool($this->checksum_verify);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->timeout !== null) {
            $xfer += $output->writeFieldBegin('timeout', TType::I32, 6);
            $xfer += $output->writeI32($this->timeout);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_encrypted !== null) {
            $xfer += $output->writeFieldBegin('is_encrypted', TType::BOOL, 7);
            $xfer += $output->writeBool($this->is_encrypted);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->worker_thread_number !== null) {
            $xfer += $output->writeFieldBegin('worker_thread_number', TType::I32, 8);
            $xfer += $output->writeI32($this->worker_thread_number);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->file_system_filter_enable !== null) {
            $xfer += $output->writeFieldBegin('file_system_filter_enable', TType::BOOL, 9);
            $xfer += $output->writeBool($this->file_system_filter_enable);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->min_transport_size !== null) {
            $xfer += $output->writeFieldBegin('min_transport_size', TType::I32, 10);
            $xfer += $output->writeI32($this->min_transport_size);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->full_min_transport_size !== null) {
            $xfer += $output->writeFieldBegin('full_min_transport_size', TType::I32, 11);
            $xfer += $output->writeI32($this->full_min_transport_size);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_compressed !== null) {
            $xfer += $output->writeFieldBegin('is_compressed', TType::BOOL, 12);
            $xfer += $output->writeBool($this->is_compressed);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_checksum !== null) {
            $xfer += $output->writeFieldBegin('is_checksum', TType::BOOL, 13);
            $xfer += $output->writeBool($this->is_checksum);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->priority_carrier !== null) {
            if (!is_array($this->priority_carrier)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('priority_carrier', TType::MAP, 14);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->priority_carrier));
            foreach ($this->priority_carrier as $kiter534 => $viter535) {
                $xfer += $output->writeString($kiter534);
                $xfer += $output->writeString($viter535);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_only_single_system_disk !== null) {
            $xfer += $output->writeFieldBegin('is_only_single_system_disk', TType::BOOL, 15);
            $xfer += $output->writeBool($this->is_only_single_system_disk);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_compressed_by_packer !== null) {
            $xfer += $output->writeFieldBegin('is_compressed_by_packer', TType::BOOL, 16);
            $xfer += $output->writeBool($this->is_compressed_by_packer);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class virtual_packer_job_detail
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'original_size',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I64,
                ),
        ),
        2 => array(
            'var' => 'backup_size',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I64,
                ),
        ),
        3 => array(
            'var' => 'backup_progress',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I64,
                ),
        ),
        4 => array(
            'var' => 'backup_image_offset',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I64,
                ),
        ),
        5 => array(
            'var' => 'change_ids',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        6 => array(
            'var' => 'guest_os_type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        7 => array(
            'var' => 'completed_blocks',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::LST,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::LST,
                'etype' => TType::STRUCT,
                'elem' => array(
                    'type' => TType::STRUCT,
                    'class' => '\saasame\transport\io_changed_range',
                    ),
                ),
        ),
        8 => array(
            'var' => 'disk_infos',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\virtual_disk_info_ex',
                ),
        ),
    );

    /**
     * @var array
     */
    public $original_size = null;
    /**
     * @var array
     */
    public $backup_size = null;
    /**
     * @var array
     */
    public $backup_progress = null;
    /**
     * @var array
     */
    public $backup_image_offset = null;
    /**
     * @var array
     */
    public $change_ids = null;
    /**
     * @var int
     */
    public $guest_os_type =     0;
    /**
     * @var array
     */
    public $completed_blocks = null;
    /**
     * @var \saasame\transport\virtual_disk_info_ex[]
     */
    public $disk_infos = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['original_size'])) {
                $this->original_size = $vals['original_size'];
            }
            if (isset($vals['backup_size'])) {
                $this->backup_size = $vals['backup_size'];
            }
            if (isset($vals['backup_progress'])) {
                $this->backup_progress = $vals['backup_progress'];
            }
            if (isset($vals['backup_image_offset'])) {
                $this->backup_image_offset = $vals['backup_image_offset'];
            }
            if (isset($vals['change_ids'])) {
                $this->change_ids = $vals['change_ids'];
            }
            if (isset($vals['guest_os_type'])) {
                $this->guest_os_type = $vals['guest_os_type'];
            }
            if (isset($vals['completed_blocks'])) {
                $this->completed_blocks = $vals['completed_blocks'];
            }
            if (isset($vals['disk_infos'])) {
                $this->disk_infos = $vals['disk_infos'];
            }
        }
    }

    public function getName()
    {
        return 'virtual_packer_job_detail';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::MAP) {
                        $this->original_size = array();
                        $_size536 = 0;
                        $_ktype537 = 0;
                        $_vtype538 = 0;
                        $xfer += $input->readMapBegin($_ktype537, $_vtype538, $_size536);
                        for ($_i540 = 0; $_i540 < $_size536; ++$_i540) {
                            $key541 = '';
                            $val542 = 0;
                            $xfer += $input->readString($key541);
                            $xfer += $input->readI64($val542);
                            $this->original_size[$key541] = $val542;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::MAP) {
                        $this->backup_size = array();
                        $_size543 = 0;
                        $_ktype544 = 0;
                        $_vtype545 = 0;
                        $xfer += $input->readMapBegin($_ktype544, $_vtype545, $_size543);
                        for ($_i547 = 0; $_i547 < $_size543; ++$_i547) {
                            $key548 = '';
                            $val549 = 0;
                            $xfer += $input->readString($key548);
                            $xfer += $input->readI64($val549);
                            $this->backup_size[$key548] = $val549;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::MAP) {
                        $this->backup_progress = array();
                        $_size550 = 0;
                        $_ktype551 = 0;
                        $_vtype552 = 0;
                        $xfer += $input->readMapBegin($_ktype551, $_vtype552, $_size550);
                        for ($_i554 = 0; $_i554 < $_size550; ++$_i554) {
                            $key555 = '';
                            $val556 = 0;
                            $xfer += $input->readString($key555);
                            $xfer += $input->readI64($val556);
                            $this->backup_progress[$key555] = $val556;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::MAP) {
                        $this->backup_image_offset = array();
                        $_size557 = 0;
                        $_ktype558 = 0;
                        $_vtype559 = 0;
                        $xfer += $input->readMapBegin($_ktype558, $_vtype559, $_size557);
                        for ($_i561 = 0; $_i561 < $_size557; ++$_i561) {
                            $key562 = '';
                            $val563 = 0;
                            $xfer += $input->readString($key562);
                            $xfer += $input->readI64($val563);
                            $this->backup_image_offset[$key562] = $val563;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::MAP) {
                        $this->change_ids = array();
                        $_size564 = 0;
                        $_ktype565 = 0;
                        $_vtype566 = 0;
                        $xfer += $input->readMapBegin($_ktype565, $_vtype566, $_size564);
                        for ($_i568 = 0; $_i568 < $_size564; ++$_i568) {
                            $key569 = '';
                            $val570 = '';
                            $xfer += $input->readString($key569);
                            $xfer += $input->readString($val570);
                            $this->change_ids[$key569] = $val570;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->guest_os_type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::MAP) {
                        $this->completed_blocks = array();
                        $_size571 = 0;
                        $_ktype572 = 0;
                        $_vtype573 = 0;
                        $xfer += $input->readMapBegin($_ktype572, $_vtype573, $_size571);
                        for ($_i575 = 0; $_i575 < $_size571; ++$_i575) {
                            $key576 = '';
                            $val577 = array();
                            $xfer += $input->readString($key576);
                            $val577 = array();
                            $_size578 = 0;
                            $_etype581 = 0;
                            $xfer += $input->readListBegin($_etype581, $_size578);
                            for ($_i582 = 0; $_i582 < $_size578; ++$_i582) {
                                $elem583 = null;
                                $elem583 = new \saasame\transport\io_changed_range();
                                $xfer += $elem583->read($input);
                                $val577 []= $elem583;
                            }
                            $xfer += $input->readListEnd();
                            $this->completed_blocks[$key576] = $val577;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::LST) {
                        $this->disk_infos = array();
                        $_size584 = 0;
                        $_etype587 = 0;
                        $xfer += $input->readListBegin($_etype587, $_size584);
                        for ($_i588 = 0; $_i588 < $_size584; ++$_i588) {
                            $elem589 = null;
                            $elem589 = new \saasame\transport\virtual_disk_info_ex();
                            $xfer += $elem589->read($input);
                            $this->disk_infos []= $elem589;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('virtual_packer_job_detail');
        if ($this->original_size !== null) {
            if (!is_array($this->original_size)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('original_size', TType::MAP, 1);
            $output->writeMapBegin(TType::STRING, TType::I64, count($this->original_size));
            foreach ($this->original_size as $kiter590 => $viter591) {
                $xfer += $output->writeString($kiter590);
                $xfer += $output->writeI64($viter591);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->backup_size !== null) {
            if (!is_array($this->backup_size)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('backup_size', TType::MAP, 2);
            $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_size));
            foreach ($this->backup_size as $kiter592 => $viter593) {
                $xfer += $output->writeString($kiter592);
                $xfer += $output->writeI64($viter593);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->backup_progress !== null) {
            if (!is_array($this->backup_progress)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('backup_progress', TType::MAP, 3);
            $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_progress));
            foreach ($this->backup_progress as $kiter594 => $viter595) {
                $xfer += $output->writeString($kiter594);
                $xfer += $output->writeI64($viter595);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->backup_image_offset !== null) {
            if (!is_array($this->backup_image_offset)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('backup_image_offset', TType::MAP, 4);
            $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_image_offset));
            foreach ($this->backup_image_offset as $kiter596 => $viter597) {
                $xfer += $output->writeString($kiter596);
                $xfer += $output->writeI64($viter597);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->change_ids !== null) {
            if (!is_array($this->change_ids)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('change_ids', TType::MAP, 5);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->change_ids));
            foreach ($this->change_ids as $kiter598 => $viter599) {
                $xfer += $output->writeString($kiter598);
                $xfer += $output->writeString($viter599);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->guest_os_type !== null) {
            $xfer += $output->writeFieldBegin('guest_os_type', TType::I32, 6);
            $xfer += $output->writeI32($this->guest_os_type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->completed_blocks !== null) {
            if (!is_array($this->completed_blocks)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('completed_blocks', TType::MAP, 7);
            $output->writeMapBegin(TType::STRING, TType::LST, count($this->completed_blocks));
            foreach ($this->completed_blocks as $kiter600 => $viter601) {
                $xfer += $output->writeString($kiter600);
                $output->writeListBegin(TType::STRUCT, count($viter601));
                foreach ($viter601 as $iter602) {
                    $xfer += $iter602->write($output);
                }
                $output->writeListEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->disk_infos !== null) {
            if (!is_array($this->disk_infos)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('disk_infos', TType::LST, 8);
            $output->writeListBegin(TType::STRUCT, count($this->disk_infos));
            foreach ($this->disk_infos as $iter603) {
                $xfer += $iter603->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class physical_packer_job_detail
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'original_size',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I64,
                ),
        ),
        2 => array(
            'var' => 'backup_size',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I64,
                ),
        ),
        3 => array(
            'var' => 'backup_progress',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I64,
                ),
        ),
        4 => array(
            'var' => 'backup_image_offset',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I64,
                ),
        ),
        5 => array(
            'var' => 'vcbt_journals',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::I64,
            'vtype' => TType::STRUCT,
            'key' => array(
                'type' => TType::I64,
            ),
            'val' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\physical_vcbt_journal',
                ),
        ),
        6 => array(
            'var' => 'guest_os_type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        7 => array(
            'var' => 'cdr_changed_ranges',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::LST,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::LST,
                'etype' => TType::STRUCT,
                'elem' => array(
                    'type' => TType::STRUCT,
                    'class' => '\saasame\transport\io_changed_range',
                    ),
                ),
        ),
        8 => array(
            'var' => 'completed_blocks',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::LST,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::LST,
                'etype' => TType::STRUCT,
                'elem' => array(
                    'type' => TType::STRUCT,
                    'class' => '\saasame\transport\io_changed_range',
                    ),
                ),
        ),
    );

    /**
     * @var array
     */
    public $original_size = null;
    /**
     * @var array
     */
    public $backup_size = null;
    /**
     * @var array
     */
    public $backup_progress = null;
    /**
     * @var array
     */
    public $backup_image_offset = null;
    /**
     * @var array
     */
    public $vcbt_journals = null;
    /**
     * @var int
     */
    public $guest_os_type =     1;
    /**
     * @var array
     */
    public $cdr_changed_ranges = null;
    /**
     * @var array
     */
    public $completed_blocks = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['original_size'])) {
                $this->original_size = $vals['original_size'];
            }
            if (isset($vals['backup_size'])) {
                $this->backup_size = $vals['backup_size'];
            }
            if (isset($vals['backup_progress'])) {
                $this->backup_progress = $vals['backup_progress'];
            }
            if (isset($vals['backup_image_offset'])) {
                $this->backup_image_offset = $vals['backup_image_offset'];
            }
            if (isset($vals['vcbt_journals'])) {
                $this->vcbt_journals = $vals['vcbt_journals'];
            }
            if (isset($vals['guest_os_type'])) {
                $this->guest_os_type = $vals['guest_os_type'];
            }
            if (isset($vals['cdr_changed_ranges'])) {
                $this->cdr_changed_ranges = $vals['cdr_changed_ranges'];
            }
            if (isset($vals['completed_blocks'])) {
                $this->completed_blocks = $vals['completed_blocks'];
            }
        }
    }

    public function getName()
    {
        return 'physical_packer_job_detail';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::MAP) {
                        $this->original_size = array();
                        $_size604 = 0;
                        $_ktype605 = 0;
                        $_vtype606 = 0;
                        $xfer += $input->readMapBegin($_ktype605, $_vtype606, $_size604);
                        for ($_i608 = 0; $_i608 < $_size604; ++$_i608) {
                            $key609 = '';
                            $val610 = 0;
                            $xfer += $input->readString($key609);
                            $xfer += $input->readI64($val610);
                            $this->original_size[$key609] = $val610;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::MAP) {
                        $this->backup_size = array();
                        $_size611 = 0;
                        $_ktype612 = 0;
                        $_vtype613 = 0;
                        $xfer += $input->readMapBegin($_ktype612, $_vtype613, $_size611);
                        for ($_i615 = 0; $_i615 < $_size611; ++$_i615) {
                            $key616 = '';
                            $val617 = 0;
                            $xfer += $input->readString($key616);
                            $xfer += $input->readI64($val617);
                            $this->backup_size[$key616] = $val617;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::MAP) {
                        $this->backup_progress = array();
                        $_size618 = 0;
                        $_ktype619 = 0;
                        $_vtype620 = 0;
                        $xfer += $input->readMapBegin($_ktype619, $_vtype620, $_size618);
                        for ($_i622 = 0; $_i622 < $_size618; ++$_i622) {
                            $key623 = '';
                            $val624 = 0;
                            $xfer += $input->readString($key623);
                            $xfer += $input->readI64($val624);
                            $this->backup_progress[$key623] = $val624;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::MAP) {
                        $this->backup_image_offset = array();
                        $_size625 = 0;
                        $_ktype626 = 0;
                        $_vtype627 = 0;
                        $xfer += $input->readMapBegin($_ktype626, $_vtype627, $_size625);
                        for ($_i629 = 0; $_i629 < $_size625; ++$_i629) {
                            $key630 = '';
                            $val631 = 0;
                            $xfer += $input->readString($key630);
                            $xfer += $input->readI64($val631);
                            $this->backup_image_offset[$key630] = $val631;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::MAP) {
                        $this->vcbt_journals = array();
                        $_size632 = 0;
                        $_ktype633 = 0;
                        $_vtype634 = 0;
                        $xfer += $input->readMapBegin($_ktype633, $_vtype634, $_size632);
                        for ($_i636 = 0; $_i636 < $_size632; ++$_i636) {
                            $key637 = 0;
                            $val638 = new \saasame\transport\physical_vcbt_journal();
                            $xfer += $input->readI64($key637);
                            $val638 = new \saasame\transport\physical_vcbt_journal();
                            $xfer += $val638->read($input);
                            $this->vcbt_journals[$key637] = $val638;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->guest_os_type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::MAP) {
                        $this->cdr_changed_ranges = array();
                        $_size639 = 0;
                        $_ktype640 = 0;
                        $_vtype641 = 0;
                        $xfer += $input->readMapBegin($_ktype640, $_vtype641, $_size639);
                        for ($_i643 = 0; $_i643 < $_size639; ++$_i643) {
                            $key644 = '';
                            $val645 = array();
                            $xfer += $input->readString($key644);
                            $val645 = array();
                            $_size646 = 0;
                            $_etype649 = 0;
                            $xfer += $input->readListBegin($_etype649, $_size646);
                            for ($_i650 = 0; $_i650 < $_size646; ++$_i650) {
                                $elem651 = null;
                                $elem651 = new \saasame\transport\io_changed_range();
                                $xfer += $elem651->read($input);
                                $val645 []= $elem651;
                            }
                            $xfer += $input->readListEnd();
                            $this->cdr_changed_ranges[$key644] = $val645;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::MAP) {
                        $this->completed_blocks = array();
                        $_size652 = 0;
                        $_ktype653 = 0;
                        $_vtype654 = 0;
                        $xfer += $input->readMapBegin($_ktype653, $_vtype654, $_size652);
                        for ($_i656 = 0; $_i656 < $_size652; ++$_i656) {
                            $key657 = '';
                            $val658 = array();
                            $xfer += $input->readString($key657);
                            $val658 = array();
                            $_size659 = 0;
                            $_etype662 = 0;
                            $xfer += $input->readListBegin($_etype662, $_size659);
                            for ($_i663 = 0; $_i663 < $_size659; ++$_i663) {
                                $elem664 = null;
                                $elem664 = new \saasame\transport\io_changed_range();
                                $xfer += $elem664->read($input);
                                $val658 []= $elem664;
                            }
                            $xfer += $input->readListEnd();
                            $this->completed_blocks[$key657] = $val658;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('physical_packer_job_detail');
        if ($this->original_size !== null) {
            if (!is_array($this->original_size)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('original_size', TType::MAP, 1);
            $output->writeMapBegin(TType::STRING, TType::I64, count($this->original_size));
            foreach ($this->original_size as $kiter665 => $viter666) {
                $xfer += $output->writeString($kiter665);
                $xfer += $output->writeI64($viter666);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->backup_size !== null) {
            if (!is_array($this->backup_size)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('backup_size', TType::MAP, 2);
            $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_size));
            foreach ($this->backup_size as $kiter667 => $viter668) {
                $xfer += $output->writeString($kiter667);
                $xfer += $output->writeI64($viter668);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->backup_progress !== null) {
            if (!is_array($this->backup_progress)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('backup_progress', TType::MAP, 3);
            $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_progress));
            foreach ($this->backup_progress as $kiter669 => $viter670) {
                $xfer += $output->writeString($kiter669);
                $xfer += $output->writeI64($viter670);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->backup_image_offset !== null) {
            if (!is_array($this->backup_image_offset)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('backup_image_offset', TType::MAP, 4);
            $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_image_offset));
            foreach ($this->backup_image_offset as $kiter671 => $viter672) {
                $xfer += $output->writeString($kiter671);
                $xfer += $output->writeI64($viter672);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->vcbt_journals !== null) {
            if (!is_array($this->vcbt_journals)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('vcbt_journals', TType::MAP, 5);
            $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->vcbt_journals));
            foreach ($this->vcbt_journals as $kiter673 => $viter674) {
                $xfer += $output->writeI64($kiter673);
                $xfer += $viter674->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->guest_os_type !== null) {
            $xfer += $output->writeFieldBegin('guest_os_type', TType::I32, 6);
            $xfer += $output->writeI32($this->guest_os_type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cdr_changed_ranges !== null) {
            if (!is_array($this->cdr_changed_ranges)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('cdr_changed_ranges', TType::MAP, 7);
            $output->writeMapBegin(TType::STRING, TType::LST, count($this->cdr_changed_ranges));
            foreach ($this->cdr_changed_ranges as $kiter675 => $viter676) {
                $xfer += $output->writeString($kiter675);
                $output->writeListBegin(TType::STRUCT, count($viter676));
                foreach ($viter676 as $iter677) {
                    $xfer += $iter677->write($output);
                }
                $output->writeListEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->completed_blocks !== null) {
            if (!is_array($this->completed_blocks)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('completed_blocks', TType::MAP, 8);
            $output->writeMapBegin(TType::STRING, TType::LST, count($this->completed_blocks));
            foreach ($this->completed_blocks as $kiter678 => $viter679) {
                $xfer += $output->writeString($kiter678);
                $output->writeListBegin(TType::STRUCT, count($viter679));
                foreach ($viter679 as $iter680) {
                    $xfer += $iter680->write($output);
                }
                $output->writeListEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class _packer_job_detail
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'p',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\physical_packer_job_detail',
        ),
        2 => array(
            'var' => 'v',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\virtual_packer_job_detail',
        ),
    );

    /**
     * @var \saasame\transport\physical_packer_job_detail
     */
    public $p = null;
    /**
     * @var \saasame\transport\virtual_packer_job_detail
     */
    public $v = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['p'])) {
                $this->p = $vals['p'];
            }
            if (isset($vals['v'])) {
                $this->v = $vals['v'];
            }
        }
    }

    public function getName()
    {
        return '_packer_job_detail';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->p = new \saasame\transport\physical_packer_job_detail();
                        $xfer += $this->p->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->v = new \saasame\transport\virtual_packer_job_detail();
                        $xfer += $this->v->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('_packer_job_detail');
        if ($this->p !== null) {
            if (!is_object($this->p)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('p', TType::STRUCT, 1);
            $xfer += $this->p->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->v !== null) {
            if (!is_object($this->v)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('v', TType::STRUCT, 2);
            $xfer += $this->v->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class packer_job_detail
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'state',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'created_time',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'updated_time',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'histories',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\job_history',
                ),
        ),
        7 => array(
            'var' => 'detail',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\_packer_job_detail',
        ),
        8 => array(
            'var' => 'is_error',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        9 => array(
            'var' => 'boot_disk',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        10 => array(
            'var' => 'system_disks',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        11 => array(
            'var' => 'completed_blocks',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::LST,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::LST,
                'etype' => TType::STRUCT,
                'elem' => array(
                    'type' => TType::STRUCT,
                    'class' => '\saasame\transport\io_changed_range',
                    ),
                ),
        ),
    );

    /**
     * @var string
     */
    public $id = "";
    /**
     * @var int
     */
    public $type = null;
    /**
     * @var int
     */
    public $state =     1;
    /**
     * @var string
     */
    public $created_time = "";
    /**
     * @var string
     */
    public $updated_time = "";
    /**
     * @var \saasame\transport\job_history[]
     */
    public $histories = null;
    /**
     * @var \saasame\transport\_packer_job_detail
     */
    public $detail = null;
    /**
     * @var bool
     */
    public $is_error = false;
    /**
     * @var string
     */
    public $boot_disk = "";
    /**
     * @var string[]
     */
    public $system_disks = null;
    /**
     * @var array
     */
    public $completed_blocks = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['type'])) {
                $this->type = $vals['type'];
            }
            if (isset($vals['state'])) {
                $this->state = $vals['state'];
            }
            if (isset($vals['created_time'])) {
                $this->created_time = $vals['created_time'];
            }
            if (isset($vals['updated_time'])) {
                $this->updated_time = $vals['updated_time'];
            }
            if (isset($vals['histories'])) {
                $this->histories = $vals['histories'];
            }
            if (isset($vals['detail'])) {
                $this->detail = $vals['detail'];
            }
            if (isset($vals['is_error'])) {
                $this->is_error = $vals['is_error'];
            }
            if (isset($vals['boot_disk'])) {
                $this->boot_disk = $vals['boot_disk'];
            }
            if (isset($vals['system_disks'])) {
                $this->system_disks = $vals['system_disks'];
            }
            if (isset($vals['completed_blocks'])) {
                $this->completed_blocks = $vals['completed_blocks'];
            }
        }
    }

    public function getName()
    {
        return 'packer_job_detail';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->state);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->created_time);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->updated_time);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::LST) {
                        $this->histories = array();
                        $_size681 = 0;
                        $_etype684 = 0;
                        $xfer += $input->readListBegin($_etype684, $_size681);
                        for ($_i685 = 0; $_i685 < $_size681; ++$_i685) {
                            $elem686 = null;
                            $elem686 = new \saasame\transport\job_history();
                            $xfer += $elem686->read($input);
                            $this->histories []= $elem686;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRUCT) {
                        $this->detail = new \saasame\transport\_packer_job_detail();
                        $xfer += $this->detail->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_error);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->boot_disk);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::LST) {
                        $this->system_disks = array();
                        $_size687 = 0;
                        $_etype690 = 0;
                        $xfer += $input->readListBegin($_etype690, $_size687);
                        for ($_i691 = 0; $_i691 < $_size687; ++$_i691) {
                            $elem692 = null;
                            $xfer += $input->readString($elem692);
                            $this->system_disks []= $elem692;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::MAP) {
                        $this->completed_blocks = array();
                        $_size693 = 0;
                        $_ktype694 = 0;
                        $_vtype695 = 0;
                        $xfer += $input->readMapBegin($_ktype694, $_vtype695, $_size693);
                        for ($_i697 = 0; $_i697 < $_size693; ++$_i697) {
                            $key698 = '';
                            $val699 = array();
                            $xfer += $input->readString($key698);
                            $val699 = array();
                            $_size700 = 0;
                            $_etype703 = 0;
                            $xfer += $input->readListBegin($_etype703, $_size700);
                            for ($_i704 = 0; $_i704 < $_size700; ++$_i704) {
                                $elem705 = null;
                                $elem705 = new \saasame\transport\io_changed_range();
                                $xfer += $elem705->read($input);
                                $val699 []= $elem705;
                            }
                            $xfer += $input->readListEnd();
                            $this->completed_blocks[$key698] = $val699;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('packer_job_detail');
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->type !== null) {
            $xfer += $output->writeFieldBegin('type', TType::I32, 2);
            $xfer += $output->writeI32($this->type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->state !== null) {
            $xfer += $output->writeFieldBegin('state', TType::I32, 3);
            $xfer += $output->writeI32($this->state);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->created_time !== null) {
            $xfer += $output->writeFieldBegin('created_time', TType::STRING, 4);
            $xfer += $output->writeString($this->created_time);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->updated_time !== null) {
            $xfer += $output->writeFieldBegin('updated_time', TType::STRING, 5);
            $xfer += $output->writeString($this->updated_time);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->histories !== null) {
            if (!is_array($this->histories)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('histories', TType::LST, 6);
            $output->writeListBegin(TType::STRUCT, count($this->histories));
            foreach ($this->histories as $iter706) {
                $xfer += $iter706->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->detail !== null) {
            if (!is_object($this->detail)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('detail', TType::STRUCT, 7);
            $xfer += $this->detail->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_error !== null) {
            $xfer += $output->writeFieldBegin('is_error', TType::BOOL, 8);
            $xfer += $output->writeBool($this->is_error);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->boot_disk !== null) {
            $xfer += $output->writeFieldBegin('boot_disk', TType::STRING, 9);
            $xfer += $output->writeString($this->boot_disk);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->system_disks !== null) {
            if (!is_array($this->system_disks)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('system_disks', TType::LST, 10);
            $output->writeListBegin(TType::STRING, count($this->system_disks));
            foreach ($this->system_disks as $iter707) {
                $xfer += $output->writeString($iter707);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->completed_blocks !== null) {
            if (!is_array($this->completed_blocks)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('completed_blocks', TType::MAP, 11);
            $output->writeMapBegin(TType::STRING, TType::LST, count($this->completed_blocks));
            foreach ($this->completed_blocks as $kiter708 => $viter709) {
                $xfer += $output->writeString($kiter708);
                $output->writeListBegin(TType::STRUCT, count($viter709));
                foreach ($viter709 as $iter710) {
                    $xfer += $iter710->write($output);
                }
                $output->writeListEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class replica_job_detail
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'replica_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'host',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'state',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'is_error',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        7 => array(
            'var' => 'created_time',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'updated_time',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'virtual_machine_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        10 => array(
            'var' => 'disks',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        11 => array(
            'var' => 'connection_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'original_size',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I64,
                ),
        ),
        13 => array(
            'var' => 'backup_progress',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I64,
                ),
        ),
        14 => array(
            'var' => 'snapshot_mapping',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        15 => array(
            'var' => 'backup_size',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I64,
                ),
        ),
        16 => array(
            'var' => 'backup_image_offset',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I64,
                ),
        ),
        17 => array(
            'var' => 'cbt_info',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        18 => array(
            'var' => 'histories',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\job_history',
                ),
        ),
        19 => array(
            'var' => 'snapshot_time',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        20 => array(
            'var' => 'snapshot_info',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        21 => array(
            'var' => 'boot_disk',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        22 => array(
            'var' => 'system_disks',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        23 => array(
            'var' => 'is_pending_rerun',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        24 => array(
            'var' => 'is_cdr',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        25 => array(
            'var' => 'virtual_disk_infos',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\virtual_disk_info_ex',
                ),
        ),
        26 => array(
            'var' => 'excluded_paths',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var string
     */
    public $replica_id = "";
    /**
     * @var string
     */
    public $host = "";
    /**
     * @var string
     */
    public $id = "";
    /**
     * @var int
     */
    public $type = null;
    /**
     * @var int
     */
    public $state =     1;
    /**
     * @var bool
     */
    public $is_error = false;
    /**
     * @var string
     */
    public $created_time = "";
    /**
     * @var string
     */
    public $updated_time = "";
    /**
     * @var string
     */
    public $virtual_machine_id = "";
    /**
     * @var string[]
     */
    public $disks = null;
    /**
     * @var string
     */
    public $connection_id = null;
    /**
     * @var array
     */
    public $original_size = null;
    /**
     * @var array
     */
    public $backup_progress = null;
    /**
     * @var array
     */
    public $snapshot_mapping = null;
    /**
     * @var array
     */
    public $backup_size = null;
    /**
     * @var array
     */
    public $backup_image_offset = null;
    /**
     * @var string
     */
    public $cbt_info = "";
    /**
     * @var \saasame\transport\job_history[]
     */
    public $histories = null;
    /**
     * @var string
     */
    public $snapshot_time = "";
    /**
     * @var string
     */
    public $snapshot_info = "";
    /**
     * @var string
     */
    public $boot_disk = "";
    /**
     * @var string[]
     */
    public $system_disks = null;
    /**
     * @var bool
     */
    public $is_pending_rerun = false;
    /**
     * @var bool
     */
    public $is_cdr = false;
    /**
     * @var \saasame\transport\virtual_disk_info_ex[]
     */
    public $virtual_disk_infos = null;
    /**
     * @var string[]
     */
    public $excluded_paths = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['replica_id'])) {
                $this->replica_id = $vals['replica_id'];
            }
            if (isset($vals['host'])) {
                $this->host = $vals['host'];
            }
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['type'])) {
                $this->type = $vals['type'];
            }
            if (isset($vals['state'])) {
                $this->state = $vals['state'];
            }
            if (isset($vals['is_error'])) {
                $this->is_error = $vals['is_error'];
            }
            if (isset($vals['created_time'])) {
                $this->created_time = $vals['created_time'];
            }
            if (isset($vals['updated_time'])) {
                $this->updated_time = $vals['updated_time'];
            }
            if (isset($vals['virtual_machine_id'])) {
                $this->virtual_machine_id = $vals['virtual_machine_id'];
            }
            if (isset($vals['disks'])) {
                $this->disks = $vals['disks'];
            }
            if (isset($vals['connection_id'])) {
                $this->connection_id = $vals['connection_id'];
            }
            if (isset($vals['original_size'])) {
                $this->original_size = $vals['original_size'];
            }
            if (isset($vals['backup_progress'])) {
                $this->backup_progress = $vals['backup_progress'];
            }
            if (isset($vals['snapshot_mapping'])) {
                $this->snapshot_mapping = $vals['snapshot_mapping'];
            }
            if (isset($vals['backup_size'])) {
                $this->backup_size = $vals['backup_size'];
            }
            if (isset($vals['backup_image_offset'])) {
                $this->backup_image_offset = $vals['backup_image_offset'];
            }
            if (isset($vals['cbt_info'])) {
                $this->cbt_info = $vals['cbt_info'];
            }
            if (isset($vals['histories'])) {
                $this->histories = $vals['histories'];
            }
            if (isset($vals['snapshot_time'])) {
                $this->snapshot_time = $vals['snapshot_time'];
            }
            if (isset($vals['snapshot_info'])) {
                $this->snapshot_info = $vals['snapshot_info'];
            }
            if (isset($vals['boot_disk'])) {
                $this->boot_disk = $vals['boot_disk'];
            }
            if (isset($vals['system_disks'])) {
                $this->system_disks = $vals['system_disks'];
            }
            if (isset($vals['is_pending_rerun'])) {
                $this->is_pending_rerun = $vals['is_pending_rerun'];
            }
            if (isset($vals['is_cdr'])) {
                $this->is_cdr = $vals['is_cdr'];
            }
            if (isset($vals['virtual_disk_infos'])) {
                $this->virtual_disk_infos = $vals['virtual_disk_infos'];
            }
            if (isset($vals['excluded_paths'])) {
                $this->excluded_paths = $vals['excluded_paths'];
            }
        }
    }

    public function getName()
    {
        return 'replica_job_detail';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->replica_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->host);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->state);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_error);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->created_time);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->updated_time);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->virtual_machine_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::SET) {
                        $this->disks = array();
                        $_size711 = 0;
                        $_etype714 = 0;
                        $xfer += $input->readSetBegin($_etype714, $_size711);
                        for ($_i715 = 0; $_i715 < $_size711; ++$_i715) {
                            $elem716 = null;
                            $xfer += $input->readString($elem716);
                            $this->disks[$elem716] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->connection_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::MAP) {
                        $this->original_size = array();
                        $_size717 = 0;
                        $_ktype718 = 0;
                        $_vtype719 = 0;
                        $xfer += $input->readMapBegin($_ktype718, $_vtype719, $_size717);
                        for ($_i721 = 0; $_i721 < $_size717; ++$_i721) {
                            $key722 = '';
                            $val723 = 0;
                            $xfer += $input->readString($key722);
                            $xfer += $input->readI64($val723);
                            $this->original_size[$key722] = $val723;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::MAP) {
                        $this->backup_progress = array();
                        $_size724 = 0;
                        $_ktype725 = 0;
                        $_vtype726 = 0;
                        $xfer += $input->readMapBegin($_ktype725, $_vtype726, $_size724);
                        for ($_i728 = 0; $_i728 < $_size724; ++$_i728) {
                            $key729 = '';
                            $val730 = 0;
                            $xfer += $input->readString($key729);
                            $xfer += $input->readI64($val730);
                            $this->backup_progress[$key729] = $val730;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::MAP) {
                        $this->snapshot_mapping = array();
                        $_size731 = 0;
                        $_ktype732 = 0;
                        $_vtype733 = 0;
                        $xfer += $input->readMapBegin($_ktype732, $_vtype733, $_size731);
                        for ($_i735 = 0; $_i735 < $_size731; ++$_i735) {
                            $key736 = '';
                            $val737 = '';
                            $xfer += $input->readString($key736);
                            $xfer += $input->readString($val737);
                            $this->snapshot_mapping[$key736] = $val737;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::MAP) {
                        $this->backup_size = array();
                        $_size738 = 0;
                        $_ktype739 = 0;
                        $_vtype740 = 0;
                        $xfer += $input->readMapBegin($_ktype739, $_vtype740, $_size738);
                        for ($_i742 = 0; $_i742 < $_size738; ++$_i742) {
                            $key743 = '';
                            $val744 = 0;
                            $xfer += $input->readString($key743);
                            $xfer += $input->readI64($val744);
                            $this->backup_size[$key743] = $val744;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::MAP) {
                        $this->backup_image_offset = array();
                        $_size745 = 0;
                        $_ktype746 = 0;
                        $_vtype747 = 0;
                        $xfer += $input->readMapBegin($_ktype746, $_vtype747, $_size745);
                        for ($_i749 = 0; $_i749 < $_size745; ++$_i749) {
                            $key750 = '';
                            $val751 = 0;
                            $xfer += $input->readString($key750);
                            $xfer += $input->readI64($val751);
                            $this->backup_image_offset[$key750] = $val751;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cbt_info);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::LST) {
                        $this->histories = array();
                        $_size752 = 0;
                        $_etype755 = 0;
                        $xfer += $input->readListBegin($_etype755, $_size752);
                        for ($_i756 = 0; $_i756 < $_size752; ++$_i756) {
                            $elem757 = null;
                            $elem757 = new \saasame\transport\job_history();
                            $xfer += $elem757->read($input);
                            $this->histories []= $elem757;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->snapshot_time);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->snapshot_info);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->boot_disk);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 22:
                    if ($ftype == TType::LST) {
                        $this->system_disks = array();
                        $_size758 = 0;
                        $_etype761 = 0;
                        $xfer += $input->readListBegin($_etype761, $_size758);
                        for ($_i762 = 0; $_i762 < $_size758; ++$_i762) {
                            $elem763 = null;
                            $xfer += $input->readString($elem763);
                            $this->system_disks []= $elem763;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 23:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_pending_rerun);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 24:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_cdr);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 25:
                    if ($ftype == TType::LST) {
                        $this->virtual_disk_infos = array();
                        $_size764 = 0;
                        $_etype767 = 0;
                        $xfer += $input->readListBegin($_etype767, $_size764);
                        for ($_i768 = 0; $_i768 < $_size764; ++$_i768) {
                            $elem769 = null;
                            $elem769 = new \saasame\transport\virtual_disk_info_ex();
                            $xfer += $elem769->read($input);
                            $this->virtual_disk_infos []= $elem769;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 26:
                    if ($ftype == TType::SET) {
                        $this->excluded_paths = array();
                        $_size770 = 0;
                        $_etype773 = 0;
                        $xfer += $input->readSetBegin($_etype773, $_size770);
                        for ($_i774 = 0; $_i774 < $_size770; ++$_i774) {
                            $elem775 = null;
                            $xfer += $input->readString($elem775);
                            $this->excluded_paths[$elem775] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('replica_job_detail');
        if ($this->replica_id !== null) {
            $xfer += $output->writeFieldBegin('replica_id', TType::STRING, 1);
            $xfer += $output->writeString($this->replica_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->host !== null) {
            $xfer += $output->writeFieldBegin('host', TType::STRING, 2);
            $xfer += $output->writeString($this->host);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::STRING, 3);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->type !== null) {
            $xfer += $output->writeFieldBegin('type', TType::I32, 4);
            $xfer += $output->writeI32($this->type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->state !== null) {
            $xfer += $output->writeFieldBegin('state', TType::I32, 5);
            $xfer += $output->writeI32($this->state);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_error !== null) {
            $xfer += $output->writeFieldBegin('is_error', TType::BOOL, 6);
            $xfer += $output->writeBool($this->is_error);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->created_time !== null) {
            $xfer += $output->writeFieldBegin('created_time', TType::STRING, 7);
            $xfer += $output->writeString($this->created_time);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->updated_time !== null) {
            $xfer += $output->writeFieldBegin('updated_time', TType::STRING, 8);
            $xfer += $output->writeString($this->updated_time);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->virtual_machine_id !== null) {
            $xfer += $output->writeFieldBegin('virtual_machine_id', TType::STRING, 9);
            $xfer += $output->writeString($this->virtual_machine_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->disks !== null) {
            if (!is_array($this->disks)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('disks', TType::SET, 10);
            $output->writeSetBegin(TType::STRING, count($this->disks));
            foreach ($this->disks as $iter776 => $iter777) {
                $xfer += $output->writeString($iter776);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->connection_id !== null) {
            $xfer += $output->writeFieldBegin('connection_id', TType::STRING, 11);
            $xfer += $output->writeString($this->connection_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->original_size !== null) {
            if (!is_array($this->original_size)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('original_size', TType::MAP, 12);
            $output->writeMapBegin(TType::STRING, TType::I64, count($this->original_size));
            foreach ($this->original_size as $kiter778 => $viter779) {
                $xfer += $output->writeString($kiter778);
                $xfer += $output->writeI64($viter779);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->backup_progress !== null) {
            if (!is_array($this->backup_progress)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('backup_progress', TType::MAP, 13);
            $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_progress));
            foreach ($this->backup_progress as $kiter780 => $viter781) {
                $xfer += $output->writeString($kiter780);
                $xfer += $output->writeI64($viter781);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->snapshot_mapping !== null) {
            if (!is_array($this->snapshot_mapping)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('snapshot_mapping', TType::MAP, 14);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->snapshot_mapping));
            foreach ($this->snapshot_mapping as $kiter782 => $viter783) {
                $xfer += $output->writeString($kiter782);
                $xfer += $output->writeString($viter783);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->backup_size !== null) {
            if (!is_array($this->backup_size)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('backup_size', TType::MAP, 15);
            $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_size));
            foreach ($this->backup_size as $kiter784 => $viter785) {
                $xfer += $output->writeString($kiter784);
                $xfer += $output->writeI64($viter785);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->backup_image_offset !== null) {
            if (!is_array($this->backup_image_offset)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('backup_image_offset', TType::MAP, 16);
            $output->writeMapBegin(TType::STRING, TType::I64, count($this->backup_image_offset));
            foreach ($this->backup_image_offset as $kiter786 => $viter787) {
                $xfer += $output->writeString($kiter786);
                $xfer += $output->writeI64($viter787);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cbt_info !== null) {
            $xfer += $output->writeFieldBegin('cbt_info', TType::STRING, 17);
            $xfer += $output->writeString($this->cbt_info);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->histories !== null) {
            if (!is_array($this->histories)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('histories', TType::LST, 18);
            $output->writeListBegin(TType::STRUCT, count($this->histories));
            foreach ($this->histories as $iter788) {
                $xfer += $iter788->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->snapshot_time !== null) {
            $xfer += $output->writeFieldBegin('snapshot_time', TType::STRING, 19);
            $xfer += $output->writeString($this->snapshot_time);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->snapshot_info !== null) {
            $xfer += $output->writeFieldBegin('snapshot_info', TType::STRING, 20);
            $xfer += $output->writeString($this->snapshot_info);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->boot_disk !== null) {
            $xfer += $output->writeFieldBegin('boot_disk', TType::STRING, 21);
            $xfer += $output->writeString($this->boot_disk);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->system_disks !== null) {
            if (!is_array($this->system_disks)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('system_disks', TType::LST, 22);
            $output->writeListBegin(TType::STRING, count($this->system_disks));
            foreach ($this->system_disks as $iter789) {
                $xfer += $output->writeString($iter789);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_pending_rerun !== null) {
            $xfer += $output->writeFieldBegin('is_pending_rerun', TType::BOOL, 23);
            $xfer += $output->writeBool($this->is_pending_rerun);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_cdr !== null) {
            $xfer += $output->writeFieldBegin('is_cdr', TType::BOOL, 24);
            $xfer += $output->writeBool($this->is_cdr);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->virtual_disk_infos !== null) {
            if (!is_array($this->virtual_disk_infos)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('virtual_disk_infos', TType::LST, 25);
            $output->writeListBegin(TType::STRUCT, count($this->virtual_disk_infos));
            foreach ($this->virtual_disk_infos as $iter790) {
                $xfer += $iter790->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->excluded_paths !== null) {
            if (!is_array($this->excluded_paths)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('excluded_paths', TType::SET, 26);
            $output->writeSetBegin(TType::STRING, count($this->excluded_paths));
            foreach ($this->excluded_paths as $iter791 => $iter792) {
                $xfer += $output->writeString($iter791);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class service_info
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'version',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'path',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $id = null;
    /**
     * @var string
     */
    public $version = null;
    /**
     * @var string
     */
    public $path = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['version'])) {
                $this->version = $vals['version'];
            }
            if (isset($vals['path'])) {
                $this->path = $vals['path'];
            }
        }
    }

    public function getName()
    {
        return 'service_info';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->version);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->path);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('service_info');
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->version !== null) {
            $xfer += $output->writeFieldBegin('version', TType::STRING, 2);
            $xfer += $output->writeString($this->version);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->path !== null) {
            $xfer += $output->writeFieldBegin('path', TType::STRING, 3);
            $xfer += $output->writeString($this->path);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class vmware_snapshot
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'datetime',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $id = "";
    /**
     * @var string
     */
    public $name = "";
    /**
     * @var string
     */
    public $datetime = "";

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['datetime'])) {
                $this->datetime = $vals['datetime'];
            }
        }
    }

    public function getName()
    {
        return 'vmware_snapshot';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->datetime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('vmware_snapshot');
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->datetime !== null) {
            $xfer += $output->writeFieldBegin('datetime', TType::STRING, 3);
            $xfer += $output->writeString($this->datetime);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class take_snapshots_parameters
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'disks',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        2 => array(
            'var' => 'pre_script',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'post_script',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'excluded_paths',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var string[]
     */
    public $disks = null;
    /**
     * @var string
     */
    public $pre_script = null;
    /**
     * @var string
     */
    public $post_script = null;
    /**
     * @var string[]
     */
    public $excluded_paths = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['disks'])) {
                $this->disks = $vals['disks'];
            }
            if (isset($vals['pre_script'])) {
                $this->pre_script = $vals['pre_script'];
            }
            if (isset($vals['post_script'])) {
                $this->post_script = $vals['post_script'];
            }
            if (isset($vals['excluded_paths'])) {
                $this->excluded_paths = $vals['excluded_paths'];
            }
        }
    }

    public function getName()
    {
        return 'take_snapshots_parameters';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::SET) {
                        $this->disks = array();
                        $_size793 = 0;
                        $_etype796 = 0;
                        $xfer += $input->readSetBegin($_etype796, $_size793);
                        for ($_i797 = 0; $_i797 < $_size793; ++$_i797) {
                            $elem798 = null;
                            $xfer += $input->readString($elem798);
                            $this->disks[$elem798] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->pre_script);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->post_script);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::SET) {
                        $this->excluded_paths = array();
                        $_size799 = 0;
                        $_etype802 = 0;
                        $xfer += $input->readSetBegin($_etype802, $_size799);
                        for ($_i803 = 0; $_i803 < $_size799; ++$_i803) {
                            $elem804 = null;
                            $xfer += $input->readString($elem804);
                            $this->excluded_paths[$elem804] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('take_snapshots_parameters');
        if ($this->disks !== null) {
            if (!is_array($this->disks)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('disks', TType::SET, 1);
            $output->writeSetBegin(TType::STRING, count($this->disks));
            foreach ($this->disks as $iter805 => $iter806) {
                $xfer += $output->writeString($iter805);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pre_script !== null) {
            $xfer += $output->writeFieldBegin('pre_script', TType::STRING, 2);
            $xfer += $output->writeString($this->pre_script);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->post_script !== null) {
            $xfer += $output->writeFieldBegin('post_script', TType::STRING, 3);
            $xfer += $output->writeString($this->post_script);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->excluded_paths !== null) {
            if (!is_array($this->excluded_paths)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('excluded_paths', TType::SET, 4);
            $output->writeSetBegin(TType::STRING, count($this->excluded_paths));
            foreach ($this->excluded_paths as $iter807 => $iter808) {
                $xfer += $output->writeString($iter807);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class local_folder
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'path',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $path = "";

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['path'])) {
                $this->path = $vals['path'];
            }
        }
    }

    public function getName()
    {
        return 'local_folder';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->path);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('local_folder');
        if ($this->path !== null) {
            $xfer += $output->writeFieldBegin('path', TType::STRING, 1);
            $xfer += $output->writeString($this->path);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class network_folder
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'path',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'username',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'password',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'port',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'proxy_host',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'proxy_port',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        7 => array(
            'var' => 'proxy_username',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'proxy_password',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 's3_region',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        10 => array(
            'var' => 'timeout',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var string
     */
    public $path = "";
    /**
     * @var string
     */
    public $username = "";
    /**
     * @var string
     */
    public $password = "";
    /**
     * @var int
     */
    public $port = 0;
    /**
     * @var string
     */
    public $proxy_host = "";
    /**
     * @var int
     */
    public $proxy_port = 0;
    /**
     * @var string
     */
    public $proxy_username = "";
    /**
     * @var string
     */
    public $proxy_password = "";
    /**
     * @var int
     */
    public $s3_region =     0;
    /**
     * @var int
     */
    public $timeout = 300;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['path'])) {
                $this->path = $vals['path'];
            }
            if (isset($vals['username'])) {
                $this->username = $vals['username'];
            }
            if (isset($vals['password'])) {
                $this->password = $vals['password'];
            }
            if (isset($vals['port'])) {
                $this->port = $vals['port'];
            }
            if (isset($vals['proxy_host'])) {
                $this->proxy_host = $vals['proxy_host'];
            }
            if (isset($vals['proxy_port'])) {
                $this->proxy_port = $vals['proxy_port'];
            }
            if (isset($vals['proxy_username'])) {
                $this->proxy_username = $vals['proxy_username'];
            }
            if (isset($vals['proxy_password'])) {
                $this->proxy_password = $vals['proxy_password'];
            }
            if (isset($vals['s3_region'])) {
                $this->s3_region = $vals['s3_region'];
            }
            if (isset($vals['timeout'])) {
                $this->timeout = $vals['timeout'];
            }
        }
    }

    public function getName()
    {
        return 'network_folder';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->path);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->username);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->password);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->port);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->proxy_host);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->proxy_port);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->proxy_username);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->proxy_password);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->s3_region);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->timeout);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('network_folder');
        if ($this->path !== null) {
            $xfer += $output->writeFieldBegin('path', TType::STRING, 1);
            $xfer += $output->writeString($this->path);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->username !== null) {
            $xfer += $output->writeFieldBegin('username', TType::STRING, 2);
            $xfer += $output->writeString($this->username);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->password !== null) {
            $xfer += $output->writeFieldBegin('password', TType::STRING, 3);
            $xfer += $output->writeString($this->password);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->port !== null) {
            $xfer += $output->writeFieldBegin('port', TType::I32, 4);
            $xfer += $output->writeI32($this->port);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->proxy_host !== null) {
            $xfer += $output->writeFieldBegin('proxy_host', TType::STRING, 5);
            $xfer += $output->writeString($this->proxy_host);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->proxy_port !== null) {
            $xfer += $output->writeFieldBegin('proxy_port', TType::I32, 6);
            $xfer += $output->writeI32($this->proxy_port);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->proxy_username !== null) {
            $xfer += $output->writeFieldBegin('proxy_username', TType::STRING, 7);
            $xfer += $output->writeString($this->proxy_username);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->proxy_password !== null) {
            $xfer += $output->writeFieldBegin('proxy_password', TType::STRING, 8);
            $xfer += $output->writeString($this->proxy_password);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->s3_region !== null) {
            $xfer += $output->writeFieldBegin('s3_region', TType::I32, 9);
            $xfer += $output->writeI32($this->s3_region);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->timeout !== null) {
            $xfer += $output->writeFieldBegin('timeout', TType::I32, 10);
            $xfer += $output->writeI32($this->timeout);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class _detail
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'local',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\local_folder',
        ),
        2 => array(
            'var' => 'remote',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\network_folder',
        ),
    );

    /**
     * @var \saasame\transport\local_folder
     */
    public $local = null;
    /**
     * @var \saasame\transport\network_folder
     */
    public $remote = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['local'])) {
                $this->local = $vals['local'];
            }
            if (isset($vals['remote'])) {
                $this->remote = $vals['remote'];
            }
        }
    }

    public function getName()
    {
        return '_detail';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->local = new \saasame\transport\local_folder();
                        $xfer += $this->local->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->remote = new \saasame\transport\network_folder();
                        $xfer += $this->remote->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('_detail');
        if ($this->local !== null) {
            if (!is_object($this->local)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('local', TType::STRUCT, 1);
            $xfer += $this->local->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->remote !== null) {
            if (!is_object($this->remote)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('remote', TType::STRUCT, 2);
            $xfer += $this->remote->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class connection
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'options',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        4 => array(
            'var' => 'compressed',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        5 => array(
            'var' => 'checksum',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        6 => array(
            'var' => 'encrypted',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        7 => array(
            'var' => 'detail',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\_detail',
        ),
    );

    /**
     * @var int
     */
    public $type =     0;
    /**
     * @var string
     */
    public $id = "";
    /**
     * @var array
     */
    public $options = null;
    /**
     * @var bool
     */
    public $compressed = true;
    /**
     * @var bool
     */
    public $checksum = false;
    /**
     * @var bool
     */
    public $encrypted = false;
    /**
     * @var \saasame\transport\_detail
     */
    public $detail = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['type'])) {
                $this->type = $vals['type'];
            }
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['options'])) {
                $this->options = $vals['options'];
            }
            if (isset($vals['compressed'])) {
                $this->compressed = $vals['compressed'];
            }
            if (isset($vals['checksum'])) {
                $this->checksum = $vals['checksum'];
            }
            if (isset($vals['encrypted'])) {
                $this->encrypted = $vals['encrypted'];
            }
            if (isset($vals['detail'])) {
                $this->detail = $vals['detail'];
            }
        }
    }

    public function getName()
    {
        return 'connection';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::MAP) {
                        $this->options = array();
                        $_size809 = 0;
                        $_ktype810 = 0;
                        $_vtype811 = 0;
                        $xfer += $input->readMapBegin($_ktype810, $_vtype811, $_size809);
                        for ($_i813 = 0; $_i813 < $_size809; ++$_i813) {
                            $key814 = '';
                            $val815 = '';
                            $xfer += $input->readString($key814);
                            $xfer += $input->readString($val815);
                            $this->options[$key814] = $val815;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->compressed);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->checksum);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->encrypted);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRUCT) {
                        $this->detail = new \saasame\transport\_detail();
                        $xfer += $this->detail->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('connection');
        if ($this->type !== null) {
            $xfer += $output->writeFieldBegin('type', TType::I32, 1);
            $xfer += $output->writeI32($this->type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::STRING, 2);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->options !== null) {
            if (!is_array($this->options)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('options', TType::MAP, 3);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->options));
            foreach ($this->options as $kiter816 => $viter817) {
                $xfer += $output->writeString($kiter816);
                $xfer += $output->writeString($viter817);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->compressed !== null) {
            $xfer += $output->writeFieldBegin('compressed', TType::BOOL, 4);
            $xfer += $output->writeBool($this->compressed);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->checksum !== null) {
            $xfer += $output->writeFieldBegin('checksum', TType::BOOL, 5);
            $xfer += $output->writeBool($this->checksum);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->encrypted !== null) {
            $xfer += $output->writeFieldBegin('encrypted', TType::BOOL, 6);
            $xfer += $output->writeBool($this->encrypted);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->detail !== null) {
            if (!is_object($this->detail)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('detail', TType::STRUCT, 7);
            $xfer += $this->detail->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class image_map_info
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'image',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'base_image',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'connection_ids',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var string
     */
    public $image = "";
    /**
     * @var string
     */
    public $base_image = "";
    /**
     * @var string[]
     */
    public $connection_ids = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['image'])) {
                $this->image = $vals['image'];
            }
            if (isset($vals['base_image'])) {
                $this->base_image = $vals['base_image'];
            }
            if (isset($vals['connection_ids'])) {
                $this->connection_ids = $vals['connection_ids'];
            }
        }
    }

    public function getName()
    {
        return 'image_map_info';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->image);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->base_image);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::SET) {
                        $this->connection_ids = array();
                        $_size818 = 0;
                        $_etype821 = 0;
                        $xfer += $input->readSetBegin($_etype821, $_size818);
                        for ($_i822 = 0; $_i822 < $_size818; ++$_i822) {
                            $elem823 = null;
                            $xfer += $input->readString($elem823);
                            $this->connection_ids[$elem823] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('image_map_info');
        if ($this->image !== null) {
            $xfer += $output->writeFieldBegin('image', TType::STRING, 1);
            $xfer += $output->writeString($this->image);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->base_image !== null) {
            $xfer += $output->writeFieldBegin('base_image', TType::STRING, 2);
            $xfer += $output->writeString($this->base_image);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->connection_ids !== null) {
            if (!is_array($this->connection_ids)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('connection_ids', TType::SET, 3);
            $output->writeSetBegin(TType::STRING, count($this->connection_ids));
            foreach ($this->connection_ids as $iter824 => $iter825) {
                $xfer += $output->writeString($iter824);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class create_image_info
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'base',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'parent',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'connection_ids',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        5 => array(
            'var' => 'size',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        6 => array(
            'var' => 'block_size',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        7 => array(
            'var' => 'checksum_verify',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        8 => array(
            'var' => 'comment',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'version',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        10 => array(
            'var' => 'compressed',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        11 => array(
            'var' => 'checksum',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        12 => array(
            'var' => 'cdr',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        13 => array(
            'var' => 'mode',
            'isRequired' => false,
            'type' => TType::BYTE,
        ),
    );

    /**
     * @var string
     */
    public $name = "";
    /**
     * @var string
     */
    public $base = "";
    /**
     * @var string
     */
    public $parent = "";
    /**
     * @var string[]
     */
    public $connection_ids = null;
    /**
     * @var int
     */
    public $size = 0;
    /**
     * @var int
     */
    public $block_size = 0;
    /**
     * @var bool
     */
    public $checksum_verify = true;
    /**
     * @var string
     */
    public $comment = "";
    /**
     * @var int
     */
    public $version =     0;
    /**
     * @var bool
     */
    public $compressed = true;
    /**
     * @var bool
     */
    public $checksum = false;
    /**
     * @var bool
     */
    public $cdr = false;
    /**
     * @var int
     */
    public $mode = 2;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['base'])) {
                $this->base = $vals['base'];
            }
            if (isset($vals['parent'])) {
                $this->parent = $vals['parent'];
            }
            if (isset($vals['connection_ids'])) {
                $this->connection_ids = $vals['connection_ids'];
            }
            if (isset($vals['size'])) {
                $this->size = $vals['size'];
            }
            if (isset($vals['block_size'])) {
                $this->block_size = $vals['block_size'];
            }
            if (isset($vals['checksum_verify'])) {
                $this->checksum_verify = $vals['checksum_verify'];
            }
            if (isset($vals['comment'])) {
                $this->comment = $vals['comment'];
            }
            if (isset($vals['version'])) {
                $this->version = $vals['version'];
            }
            if (isset($vals['compressed'])) {
                $this->compressed = $vals['compressed'];
            }
            if (isset($vals['checksum'])) {
                $this->checksum = $vals['checksum'];
            }
            if (isset($vals['cdr'])) {
                $this->cdr = $vals['cdr'];
            }
            if (isset($vals['mode'])) {
                $this->mode = $vals['mode'];
            }
        }
    }

    public function getName()
    {
        return 'create_image_info';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->base);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->parent);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::SET) {
                        $this->connection_ids = array();
                        $_size826 = 0;
                        $_etype829 = 0;
                        $xfer += $input->readSetBegin($_etype829, $_size826);
                        for ($_i830 = 0; $_i830 < $_size826; ++$_i830) {
                            $elem831 = null;
                            $xfer += $input->readString($elem831);
                            $this->connection_ids[$elem831] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->block_size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->checksum_verify);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->comment);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->version);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->compressed);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->checksum);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->cdr);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::BYTE) {
                        $xfer += $input->readByte($this->mode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('create_image_info');
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->base !== null) {
            $xfer += $output->writeFieldBegin('base', TType::STRING, 2);
            $xfer += $output->writeString($this->base);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->parent !== null) {
            $xfer += $output->writeFieldBegin('parent', TType::STRING, 3);
            $xfer += $output->writeString($this->parent);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->connection_ids !== null) {
            if (!is_array($this->connection_ids)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('connection_ids', TType::SET, 4);
            $output->writeSetBegin(TType::STRING, count($this->connection_ids));
            foreach ($this->connection_ids as $iter832 => $iter833) {
                $xfer += $output->writeString($iter832);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->size !== null) {
            $xfer += $output->writeFieldBegin('size', TType::I64, 5);
            $xfer += $output->writeI64($this->size);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->block_size !== null) {
            $xfer += $output->writeFieldBegin('block_size', TType::I32, 6);
            $xfer += $output->writeI32($this->block_size);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->checksum_verify !== null) {
            $xfer += $output->writeFieldBegin('checksum_verify', TType::BOOL, 7);
            $xfer += $output->writeBool($this->checksum_verify);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->comment !== null) {
            $xfer += $output->writeFieldBegin('comment', TType::STRING, 8);
            $xfer += $output->writeString($this->comment);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->version !== null) {
            $xfer += $output->writeFieldBegin('version', TType::I32, 9);
            $xfer += $output->writeI32($this->version);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->compressed !== null) {
            $xfer += $output->writeFieldBegin('compressed', TType::BOOL, 10);
            $xfer += $output->writeBool($this->compressed);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->checksum !== null) {
            $xfer += $output->writeFieldBegin('checksum', TType::BOOL, 11);
            $xfer += $output->writeBool($this->checksum);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cdr !== null) {
            $xfer += $output->writeFieldBegin('cdr', TType::BOOL, 12);
            $xfer += $output->writeBool($this->cdr);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->mode !== null) {
            $xfer += $output->writeFieldBegin('mode', TType::BYTE, 13);
            $xfer += $output->writeByte($this->mode);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class loader_job_detail
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'replica_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'state',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'created_time',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'updated_time',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'progress',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I64,
                ),
        ),
        7 => array(
            'var' => 'histories',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\job_history',
                ),
        ),
        8 => array(
            'var' => 'connection_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'data',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I64,
                ),
        ),
        10 => array(
            'var' => 'snapshot_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'duplicated_data',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I64,
                ),
        ),
        12 => array(
            'var' => 'transport_data',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I64,
                ),
        ),
    );

    /**
     * @var string
     */
    public $replica_id = "";
    /**
     * @var string
     */
    public $id = "";
    /**
     * @var int
     */
    public $state =     1;
    /**
     * @var string
     */
    public $created_time = "";
    /**
     * @var string
     */
    public $updated_time = "";
    /**
     * @var array
     */
    public $progress = null;
    /**
     * @var \saasame\transport\job_history[]
     */
    public $histories = null;
    /**
     * @var string
     */
    public $connection_id = null;
    /**
     * @var array
     */
    public $data = null;
    /**
     * @var string
     */
    public $snapshot_id = "";
    /**
     * @var array
     */
    public $duplicated_data = null;
    /**
     * @var array
     */
    public $transport_data = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['replica_id'])) {
                $this->replica_id = $vals['replica_id'];
            }
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['state'])) {
                $this->state = $vals['state'];
            }
            if (isset($vals['created_time'])) {
                $this->created_time = $vals['created_time'];
            }
            if (isset($vals['updated_time'])) {
                $this->updated_time = $vals['updated_time'];
            }
            if (isset($vals['progress'])) {
                $this->progress = $vals['progress'];
            }
            if (isset($vals['histories'])) {
                $this->histories = $vals['histories'];
            }
            if (isset($vals['connection_id'])) {
                $this->connection_id = $vals['connection_id'];
            }
            if (isset($vals['data'])) {
                $this->data = $vals['data'];
            }
            if (isset($vals['snapshot_id'])) {
                $this->snapshot_id = $vals['snapshot_id'];
            }
            if (isset($vals['duplicated_data'])) {
                $this->duplicated_data = $vals['duplicated_data'];
            }
            if (isset($vals['transport_data'])) {
                $this->transport_data = $vals['transport_data'];
            }
        }
    }

    public function getName()
    {
        return 'loader_job_detail';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->replica_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->state);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->created_time);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->updated_time);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::MAP) {
                        $this->progress = array();
                        $_size834 = 0;
                        $_ktype835 = 0;
                        $_vtype836 = 0;
                        $xfer += $input->readMapBegin($_ktype835, $_vtype836, $_size834);
                        for ($_i838 = 0; $_i838 < $_size834; ++$_i838) {
                            $key839 = '';
                            $val840 = 0;
                            $xfer += $input->readString($key839);
                            $xfer += $input->readI64($val840);
                            $this->progress[$key839] = $val840;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::LST) {
                        $this->histories = array();
                        $_size841 = 0;
                        $_etype844 = 0;
                        $xfer += $input->readListBegin($_etype844, $_size841);
                        for ($_i845 = 0; $_i845 < $_size841; ++$_i845) {
                            $elem846 = null;
                            $elem846 = new \saasame\transport\job_history();
                            $xfer += $elem846->read($input);
                            $this->histories []= $elem846;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->connection_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::MAP) {
                        $this->data = array();
                        $_size847 = 0;
                        $_ktype848 = 0;
                        $_vtype849 = 0;
                        $xfer += $input->readMapBegin($_ktype848, $_vtype849, $_size847);
                        for ($_i851 = 0; $_i851 < $_size847; ++$_i851) {
                            $key852 = '';
                            $val853 = 0;
                            $xfer += $input->readString($key852);
                            $xfer += $input->readI64($val853);
                            $this->data[$key852] = $val853;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->snapshot_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::MAP) {
                        $this->duplicated_data = array();
                        $_size854 = 0;
                        $_ktype855 = 0;
                        $_vtype856 = 0;
                        $xfer += $input->readMapBegin($_ktype855, $_vtype856, $_size854);
                        for ($_i858 = 0; $_i858 < $_size854; ++$_i858) {
                            $key859 = '';
                            $val860 = 0;
                            $xfer += $input->readString($key859);
                            $xfer += $input->readI64($val860);
                            $this->duplicated_data[$key859] = $val860;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::MAP) {
                        $this->transport_data = array();
                        $_size861 = 0;
                        $_ktype862 = 0;
                        $_vtype863 = 0;
                        $xfer += $input->readMapBegin($_ktype862, $_vtype863, $_size861);
                        for ($_i865 = 0; $_i865 < $_size861; ++$_i865) {
                            $key866 = '';
                            $val867 = 0;
                            $xfer += $input->readString($key866);
                            $xfer += $input->readI64($val867);
                            $this->transport_data[$key866] = $val867;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('loader_job_detail');
        if ($this->replica_id !== null) {
            $xfer += $output->writeFieldBegin('replica_id', TType::STRING, 1);
            $xfer += $output->writeString($this->replica_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::STRING, 2);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->state !== null) {
            $xfer += $output->writeFieldBegin('state', TType::I32, 3);
            $xfer += $output->writeI32($this->state);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->created_time !== null) {
            $xfer += $output->writeFieldBegin('created_time', TType::STRING, 4);
            $xfer += $output->writeString($this->created_time);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->updated_time !== null) {
            $xfer += $output->writeFieldBegin('updated_time', TType::STRING, 5);
            $xfer += $output->writeString($this->updated_time);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->progress !== null) {
            if (!is_array($this->progress)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('progress', TType::MAP, 6);
            $output->writeMapBegin(TType::STRING, TType::I64, count($this->progress));
            foreach ($this->progress as $kiter868 => $viter869) {
                $xfer += $output->writeString($kiter868);
                $xfer += $output->writeI64($viter869);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->histories !== null) {
            if (!is_array($this->histories)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('histories', TType::LST, 7);
            $output->writeListBegin(TType::STRUCT, count($this->histories));
            foreach ($this->histories as $iter870) {
                $xfer += $iter870->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->connection_id !== null) {
            $xfer += $output->writeFieldBegin('connection_id', TType::STRING, 8);
            $xfer += $output->writeString($this->connection_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->data !== null) {
            if (!is_array($this->data)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('data', TType::MAP, 9);
            $output->writeMapBegin(TType::STRING, TType::I64, count($this->data));
            foreach ($this->data as $kiter871 => $viter872) {
                $xfer += $output->writeString($kiter871);
                $xfer += $output->writeI64($viter872);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->snapshot_id !== null) {
            $xfer += $output->writeFieldBegin('snapshot_id', TType::STRING, 10);
            $xfer += $output->writeString($this->snapshot_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->duplicated_data !== null) {
            if (!is_array($this->duplicated_data)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('duplicated_data', TType::MAP, 11);
            $output->writeMapBegin(TType::STRING, TType::I64, count($this->duplicated_data));
            foreach ($this->duplicated_data as $kiter873 => $viter874) {
                $xfer += $output->writeString($kiter873);
                $xfer += $output->writeI64($viter874);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->transport_data !== null) {
            if (!is_array($this->transport_data)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('transport_data', TType::MAP, 12);
            $output->writeMapBegin(TType::STRING, TType::I64, count($this->transport_data));
            foreach ($this->transport_data as $kiter875 => $viter876) {
                $xfer += $output->writeString($kiter875);
                $xfer += $output->writeI64($viter876);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class upload_progress
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'size',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        2 => array(
            'var' => 'progress',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        3 => array(
            'var' => 'vhd_size',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        4 => array(
            'var' => 'upload_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'completed',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var int
     */
    public $size = 0;
    /**
     * @var int
     */
    public $progress = 0;
    /**
     * @var int
     */
    public $vhd_size = 0;
    /**
     * @var string
     */
    public $upload_id = "";
    /**
     * @var bool
     */
    public $completed = false;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['size'])) {
                $this->size = $vals['size'];
            }
            if (isset($vals['progress'])) {
                $this->progress = $vals['progress'];
            }
            if (isset($vals['vhd_size'])) {
                $this->vhd_size = $vals['vhd_size'];
            }
            if (isset($vals['upload_id'])) {
                $this->upload_id = $vals['upload_id'];
            }
            if (isset($vals['completed'])) {
                $this->completed = $vals['completed'];
            }
        }
    }

    public function getName()
    {
        return 'upload_progress';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->progress);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->vhd_size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->upload_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->completed);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('upload_progress');
        if ($this->size !== null) {
            $xfer += $output->writeFieldBegin('size', TType::I64, 1);
            $xfer += $output->writeI64($this->size);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->progress !== null) {
            $xfer += $output->writeFieldBegin('progress', TType::I64, 2);
            $xfer += $output->writeI64($this->progress);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->vhd_size !== null) {
            $xfer += $output->writeFieldBegin('vhd_size', TType::I64, 3);
            $xfer += $output->writeI64($this->vhd_size);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->upload_id !== null) {
            $xfer += $output->writeFieldBegin('upload_id', TType::STRING, 4);
            $xfer += $output->writeString($this->upload_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->completed !== null) {
            $xfer += $output->writeFieldBegin('completed', TType::BOOL, 5);
            $xfer += $output->writeBool($this->completed);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class launcher_job_detail
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'replica_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'state',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'created_time',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'updated_time',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'boot_disk',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'histories',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\job_history',
                ),
        ),
        8 => array(
            'var' => 'is_error',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        9 => array(
            'var' => 'is_windows_update',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        10 => array(
            'var' => 'platform',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'architecture',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'size',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        13 => array(
            'var' => 'progress',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        14 => array(
            'var' => 'vhd_size',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        15 => array(
            'var' => 'upload_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        16 => array(
            'var' => 'host_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        17 => array(
            'var' => 'vhd_upload_progress',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\upload_progress',
                ),
        ),
        18 => array(
            'var' => 'virtual_machine_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $replica_id = "";
    /**
     * @var string
     */
    public $id = "";
    /**
     * @var int
     */
    public $state =     1;
    /**
     * @var string
     */
    public $created_time = "";
    /**
     * @var string
     */
    public $updated_time = "";
    /**
     * @var string
     */
    public $boot_disk = "";
    /**
     * @var \saasame\transport\job_history[]
     */
    public $histories = null;
    /**
     * @var bool
     */
    public $is_error = false;
    /**
     * @var bool
     */
    public $is_windows_update = false;
    /**
     * @var string
     */
    public $platform = "";
    /**
     * @var string
     */
    public $architecture = "";
    /**
     * @var int
     */
    public $size = 0;
    /**
     * @var int
     */
    public $progress = 0;
    /**
     * @var int
     */
    public $vhd_size = 0;
    /**
     * @var string
     */
    public $upload_id = "";
    /**
     * @var string
     */
    public $host_name = "";
    /**
     * @var array
     */
    public $vhd_upload_progress = null;
    /**
     * @var string
     */
    public $virtual_machine_id = "";

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['replica_id'])) {
                $this->replica_id = $vals['replica_id'];
            }
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['state'])) {
                $this->state = $vals['state'];
            }
            if (isset($vals['created_time'])) {
                $this->created_time = $vals['created_time'];
            }
            if (isset($vals['updated_time'])) {
                $this->updated_time = $vals['updated_time'];
            }
            if (isset($vals['boot_disk'])) {
                $this->boot_disk = $vals['boot_disk'];
            }
            if (isset($vals['histories'])) {
                $this->histories = $vals['histories'];
            }
            if (isset($vals['is_error'])) {
                $this->is_error = $vals['is_error'];
            }
            if (isset($vals['is_windows_update'])) {
                $this->is_windows_update = $vals['is_windows_update'];
            }
            if (isset($vals['platform'])) {
                $this->platform = $vals['platform'];
            }
            if (isset($vals['architecture'])) {
                $this->architecture = $vals['architecture'];
            }
            if (isset($vals['size'])) {
                $this->size = $vals['size'];
            }
            if (isset($vals['progress'])) {
                $this->progress = $vals['progress'];
            }
            if (isset($vals['vhd_size'])) {
                $this->vhd_size = $vals['vhd_size'];
            }
            if (isset($vals['upload_id'])) {
                $this->upload_id = $vals['upload_id'];
            }
            if (isset($vals['host_name'])) {
                $this->host_name = $vals['host_name'];
            }
            if (isset($vals['vhd_upload_progress'])) {
                $this->vhd_upload_progress = $vals['vhd_upload_progress'];
            }
            if (isset($vals['virtual_machine_id'])) {
                $this->virtual_machine_id = $vals['virtual_machine_id'];
            }
        }
    }

    public function getName()
    {
        return 'launcher_job_detail';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->replica_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->state);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->created_time);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->updated_time);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->boot_disk);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::LST) {
                        $this->histories = array();
                        $_size877 = 0;
                        $_etype880 = 0;
                        $xfer += $input->readListBegin($_etype880, $_size877);
                        for ($_i881 = 0; $_i881 < $_size877; ++$_i881) {
                            $elem882 = null;
                            $elem882 = new \saasame\transport\job_history();
                            $xfer += $elem882->read($input);
                            $this->histories []= $elem882;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_error);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_windows_update);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->platform);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->architecture);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->progress);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->vhd_size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->upload_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->host_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::MAP) {
                        $this->vhd_upload_progress = array();
                        $_size883 = 0;
                        $_ktype884 = 0;
                        $_vtype885 = 0;
                        $xfer += $input->readMapBegin($_ktype884, $_vtype885, $_size883);
                        for ($_i887 = 0; $_i887 < $_size883; ++$_i887) {
                            $key888 = '';
                            $val889 = new \saasame\transport\upload_progress();
                            $xfer += $input->readString($key888);
                            $val889 = new \saasame\transport\upload_progress();
                            $xfer += $val889->read($input);
                            $this->vhd_upload_progress[$key888] = $val889;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->virtual_machine_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('launcher_job_detail');
        if ($this->replica_id !== null) {
            $xfer += $output->writeFieldBegin('replica_id', TType::STRING, 1);
            $xfer += $output->writeString($this->replica_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::STRING, 2);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->state !== null) {
            $xfer += $output->writeFieldBegin('state', TType::I32, 3);
            $xfer += $output->writeI32($this->state);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->created_time !== null) {
            $xfer += $output->writeFieldBegin('created_time', TType::STRING, 4);
            $xfer += $output->writeString($this->created_time);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->updated_time !== null) {
            $xfer += $output->writeFieldBegin('updated_time', TType::STRING, 5);
            $xfer += $output->writeString($this->updated_time);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->boot_disk !== null) {
            $xfer += $output->writeFieldBegin('boot_disk', TType::STRING, 6);
            $xfer += $output->writeString($this->boot_disk);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->histories !== null) {
            if (!is_array($this->histories)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('histories', TType::LST, 7);
            $output->writeListBegin(TType::STRUCT, count($this->histories));
            foreach ($this->histories as $iter890) {
                $xfer += $iter890->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_error !== null) {
            $xfer += $output->writeFieldBegin('is_error', TType::BOOL, 8);
            $xfer += $output->writeBool($this->is_error);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_windows_update !== null) {
            $xfer += $output->writeFieldBegin('is_windows_update', TType::BOOL, 9);
            $xfer += $output->writeBool($this->is_windows_update);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->platform !== null) {
            $xfer += $output->writeFieldBegin('platform', TType::STRING, 10);
            $xfer += $output->writeString($this->platform);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->architecture !== null) {
            $xfer += $output->writeFieldBegin('architecture', TType::STRING, 11);
            $xfer += $output->writeString($this->architecture);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->size !== null) {
            $xfer += $output->writeFieldBegin('size', TType::I64, 12);
            $xfer += $output->writeI64($this->size);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->progress !== null) {
            $xfer += $output->writeFieldBegin('progress', TType::I64, 13);
            $xfer += $output->writeI64($this->progress);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->vhd_size !== null) {
            $xfer += $output->writeFieldBegin('vhd_size', TType::I64, 14);
            $xfer += $output->writeI64($this->vhd_size);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->upload_id !== null) {
            $xfer += $output->writeFieldBegin('upload_id', TType::STRING, 15);
            $xfer += $output->writeString($this->upload_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->host_name !== null) {
            $xfer += $output->writeFieldBegin('host_name', TType::STRING, 16);
            $xfer += $output->writeString($this->host_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->vhd_upload_progress !== null) {
            if (!is_array($this->vhd_upload_progress)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('vhd_upload_progress', TType::MAP, 17);
            $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->vhd_upload_progress));
            foreach ($this->vhd_upload_progress as $kiter891 => $viter892) {
                $xfer += $output->writeString($kiter891);
                $xfer += $viter892->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->virtual_machine_id !== null) {
            $xfer += $output->writeFieldBegin('virtual_machine_id', TType::STRING, 18);
            $xfer += $output->writeString($this->virtual_machine_id);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class job_detail
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'scheduler',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\replica_job_detail',
        ),
        2 => array(
            'var' => 'launcher',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\launcher_job_detail',
        ),
        3 => array(
            'var' => 'loader',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\loader_job_detail',
        ),
    );

    /**
     * @var \saasame\transport\replica_job_detail
     */
    public $scheduler = null;
    /**
     * @var \saasame\transport\launcher_job_detail
     */
    public $launcher = null;
    /**
     * @var \saasame\transport\loader_job_detail
     */
    public $loader = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['scheduler'])) {
                $this->scheduler = $vals['scheduler'];
            }
            if (isset($vals['launcher'])) {
                $this->launcher = $vals['launcher'];
            }
            if (isset($vals['loader'])) {
                $this->loader = $vals['loader'];
            }
        }
    }

    public function getName()
    {
        return 'job_detail';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->scheduler = new \saasame\transport\replica_job_detail();
                        $xfer += $this->scheduler->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->launcher = new \saasame\transport\launcher_job_detail();
                        $xfer += $this->launcher->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->loader = new \saasame\transport\loader_job_detail();
                        $xfer += $this->loader->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('job_detail');
        if ($this->scheduler !== null) {
            if (!is_object($this->scheduler)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('scheduler', TType::STRUCT, 1);
            $xfer += $this->scheduler->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->launcher !== null) {
            if (!is_object($this->launcher)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('launcher', TType::STRUCT, 2);
            $xfer += $this->launcher->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->loader !== null) {
            if (!is_object($this->loader)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('loader', TType::STRUCT, 3);
            $xfer += $this->loader->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class replica_job_create_detail
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'host',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'addr',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        3 => array(
            'var' => 'username',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'password',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'virtual_machine_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'disks',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        8 => array(
            'var' => 'targets',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        9 => array(
            'var' => 'carriers',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::SET,
                'etype' => TType::STRING,
                'elem' => array(
                    'type' => TType::STRING,
                    ),
                ),
        ),
        10 => array(
            'var' => 'full_replicas',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        11 => array(
            'var' => 'disk_ids',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        12 => array(
            'var' => 'cbt_info',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        13 => array(
            'var' => 'snapshot_info',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        14 => array(
            'var' => 'checksum_verify',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        15 => array(
            'var' => 'always_retry',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        16 => array(
            'var' => 'timeout',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        17 => array(
            'var' => 'is_encrypted',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        18 => array(
            'var' => 'is_paused',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        19 => array(
            'var' => 'worker_thread_number',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        20 => array(
            'var' => 'block_mode_enable',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        21 => array(
            'var' => 'file_system_filter_enable',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        22 => array(
            'var' => 'min_transport_size',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        23 => array(
            'var' => 'full_min_transport_size',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        24 => array(
            'var' => 'is_full_replica',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        25 => array(
            'var' => 'buffer_size',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        26 => array(
            'var' => 'is_compressed',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        27 => array(
            'var' => 'is_checksum',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        28 => array(
            'var' => 'time',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        29 => array(
            'var' => 'priority_carrier',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        30 => array(
            'var' => 'is_only_single_system_disk',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        31 => array(
            'var' => 'is_continuous_data_replication',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        32 => array(
            'var' => 'pre_snapshot_script',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        33 => array(
            'var' => 'post_snapshot_script',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        34 => array(
            'var' => 'is_compressed_by_packer',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        35 => array(
            'var' => 'excluded_paths',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        36 => array(
            'var' => 'previous_excluded_paths',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var string
     */
    public $host = "";
    /**
     * @var string[]
     */
    public $addr = null;
    /**
     * @var string
     */
    public $username = "";
    /**
     * @var string
     */
    public $password = "";
    /**
     * @var int
     */
    public $type = null;
    /**
     * @var string
     */
    public $virtual_machine_id = "";
    /**
     * @var string[]
     */
    public $disks = null;
    /**
     * @var array
     */
    public $targets = null;
    /**
     * @var array
     */
    public $carriers = null;
    /**
     * @var string[]
     */
    public $full_replicas = null;
    /**
     * @var array
     */
    public $disk_ids = null;
    /**
     * @var string
     */
    public $cbt_info = "";
    /**
     * @var string
     */
    public $snapshot_info = "";
    /**
     * @var bool
     */
    public $checksum_verify = true;
    /**
     * @var bool
     */
    public $always_retry = false;
    /**
     * @var int
     */
    public $timeout = 300;
    /**
     * @var bool
     */
    public $is_encrypted = false;
    /**
     * @var bool
     */
    public $is_paused = false;
    /**
     * @var int
     */
    public $worker_thread_number = 0;
    /**
     * @var bool
     */
    public $block_mode_enable = false;
    /**
     * @var bool
     */
    public $file_system_filter_enable = true;
    /**
     * @var int
     */
    public $min_transport_size = 0;
    /**
     * @var int
     */
    public $full_min_transport_size = 0;
    /**
     * @var bool
     */
    public $is_full_replica = false;
    /**
     * @var int
     */
    public $buffer_size = 0;
    /**
     * @var bool
     */
    public $is_compressed = true;
    /**
     * @var bool
     */
    public $is_checksum = false;
    /**
     * @var string
     */
    public $time = "";
    /**
     * @var array
     */
    public $priority_carrier = null;
    /**
     * @var bool
     */
    public $is_only_single_system_disk = false;
    /**
     * @var bool
     */
    public $is_continuous_data_replication = false;
    /**
     * @var string
     */
    public $pre_snapshot_script = null;
    /**
     * @var string
     */
    public $post_snapshot_script = null;
    /**
     * @var bool
     */
    public $is_compressed_by_packer = false;
    /**
     * @var string[]
     */
    public $excluded_paths = null;
    /**
     * @var string[]
     */
    public $previous_excluded_paths = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['host'])) {
                $this->host = $vals['host'];
            }
            if (isset($vals['addr'])) {
                $this->addr = $vals['addr'];
            }
            if (isset($vals['username'])) {
                $this->username = $vals['username'];
            }
            if (isset($vals['password'])) {
                $this->password = $vals['password'];
            }
            if (isset($vals['type'])) {
                $this->type = $vals['type'];
            }
            if (isset($vals['virtual_machine_id'])) {
                $this->virtual_machine_id = $vals['virtual_machine_id'];
            }
            if (isset($vals['disks'])) {
                $this->disks = $vals['disks'];
            }
            if (isset($vals['targets'])) {
                $this->targets = $vals['targets'];
            }
            if (isset($vals['carriers'])) {
                $this->carriers = $vals['carriers'];
            }
            if (isset($vals['full_replicas'])) {
                $this->full_replicas = $vals['full_replicas'];
            }
            if (isset($vals['disk_ids'])) {
                $this->disk_ids = $vals['disk_ids'];
            }
            if (isset($vals['cbt_info'])) {
                $this->cbt_info = $vals['cbt_info'];
            }
            if (isset($vals['snapshot_info'])) {
                $this->snapshot_info = $vals['snapshot_info'];
            }
            if (isset($vals['checksum_verify'])) {
                $this->checksum_verify = $vals['checksum_verify'];
            }
            if (isset($vals['always_retry'])) {
                $this->always_retry = $vals['always_retry'];
            }
            if (isset($vals['timeout'])) {
                $this->timeout = $vals['timeout'];
            }
            if (isset($vals['is_encrypted'])) {
                $this->is_encrypted = $vals['is_encrypted'];
            }
            if (isset($vals['is_paused'])) {
                $this->is_paused = $vals['is_paused'];
            }
            if (isset($vals['worker_thread_number'])) {
                $this->worker_thread_number = $vals['worker_thread_number'];
            }
            if (isset($vals['block_mode_enable'])) {
                $this->block_mode_enable = $vals['block_mode_enable'];
            }
            if (isset($vals['file_system_filter_enable'])) {
                $this->file_system_filter_enable = $vals['file_system_filter_enable'];
            }
            if (isset($vals['min_transport_size'])) {
                $this->min_transport_size = $vals['min_transport_size'];
            }
            if (isset($vals['full_min_transport_size'])) {
                $this->full_min_transport_size = $vals['full_min_transport_size'];
            }
            if (isset($vals['is_full_replica'])) {
                $this->is_full_replica = $vals['is_full_replica'];
            }
            if (isset($vals['buffer_size'])) {
                $this->buffer_size = $vals['buffer_size'];
            }
            if (isset($vals['is_compressed'])) {
                $this->is_compressed = $vals['is_compressed'];
            }
            if (isset($vals['is_checksum'])) {
                $this->is_checksum = $vals['is_checksum'];
            }
            if (isset($vals['time'])) {
                $this->time = $vals['time'];
            }
            if (isset($vals['priority_carrier'])) {
                $this->priority_carrier = $vals['priority_carrier'];
            }
            if (isset($vals['is_only_single_system_disk'])) {
                $this->is_only_single_system_disk = $vals['is_only_single_system_disk'];
            }
            if (isset($vals['is_continuous_data_replication'])) {
                $this->is_continuous_data_replication = $vals['is_continuous_data_replication'];
            }
            if (isset($vals['pre_snapshot_script'])) {
                $this->pre_snapshot_script = $vals['pre_snapshot_script'];
            }
            if (isset($vals['post_snapshot_script'])) {
                $this->post_snapshot_script = $vals['post_snapshot_script'];
            }
            if (isset($vals['is_compressed_by_packer'])) {
                $this->is_compressed_by_packer = $vals['is_compressed_by_packer'];
            }
            if (isset($vals['excluded_paths'])) {
                $this->excluded_paths = $vals['excluded_paths'];
            }
            if (isset($vals['previous_excluded_paths'])) {
                $this->previous_excluded_paths = $vals['previous_excluded_paths'];
            }
        }
    }

    public function getName()
    {
        return 'replica_job_create_detail';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->host);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::SET) {
                        $this->addr = array();
                        $_size893 = 0;
                        $_etype896 = 0;
                        $xfer += $input->readSetBegin($_etype896, $_size893);
                        for ($_i897 = 0; $_i897 < $_size893; ++$_i897) {
                            $elem898 = null;
                            $xfer += $input->readString($elem898);
                            $this->addr[$elem898] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->username);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->password);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->virtual_machine_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::SET) {
                        $this->disks = array();
                        $_size899 = 0;
                        $_etype902 = 0;
                        $xfer += $input->readSetBegin($_etype902, $_size899);
                        for ($_i903 = 0; $_i903 < $_size899; ++$_i903) {
                            $elem904 = null;
                            $xfer += $input->readString($elem904);
                            $this->disks[$elem904] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::MAP) {
                        $this->targets = array();
                        $_size905 = 0;
                        $_ktype906 = 0;
                        $_vtype907 = 0;
                        $xfer += $input->readMapBegin($_ktype906, $_vtype907, $_size905);
                        for ($_i909 = 0; $_i909 < $_size905; ++$_i909) {
                            $key910 = '';
                            $val911 = '';
                            $xfer += $input->readString($key910);
                            $xfer += $input->readString($val911);
                            $this->targets[$key910] = $val911;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::MAP) {
                        $this->carriers = array();
                        $_size912 = 0;
                        $_ktype913 = 0;
                        $_vtype914 = 0;
                        $xfer += $input->readMapBegin($_ktype913, $_vtype914, $_size912);
                        for ($_i916 = 0; $_i916 < $_size912; ++$_i916) {
                            $key917 = '';
                            $val918 = array();
                            $xfer += $input->readString($key917);
                            $val918 = array();
                            $_size919 = 0;
                            $_etype922 = 0;
                            $xfer += $input->readSetBegin($_etype922, $_size919);
                            for ($_i923 = 0; $_i923 < $_size919; ++$_i923) {
                                $elem924 = null;
                                $xfer += $input->readString($elem924);
                                $val918[$elem924] = true;
                            }
                            $xfer += $input->readSetEnd();
                            $this->carriers[$key917] = $val918;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::SET) {
                        $this->full_replicas = array();
                        $_size925 = 0;
                        $_etype928 = 0;
                        $xfer += $input->readSetBegin($_etype928, $_size925);
                        for ($_i929 = 0; $_i929 < $_size925; ++$_i929) {
                            $elem930 = null;
                            $xfer += $input->readString($elem930);
                            $this->full_replicas[$elem930] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::MAP) {
                        $this->disk_ids = array();
                        $_size931 = 0;
                        $_ktype932 = 0;
                        $_vtype933 = 0;
                        $xfer += $input->readMapBegin($_ktype932, $_vtype933, $_size931);
                        for ($_i935 = 0; $_i935 < $_size931; ++$_i935) {
                            $key936 = '';
                            $val937 = '';
                            $xfer += $input->readString($key936);
                            $xfer += $input->readString($val937);
                            $this->disk_ids[$key936] = $val937;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cbt_info);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->snapshot_info);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->checksum_verify);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->always_retry);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->timeout);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_encrypted);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_paused);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->worker_thread_number);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->block_mode_enable);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->file_system_filter_enable);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 22:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->min_transport_size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 23:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->full_min_transport_size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 24:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_full_replica);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 25:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->buffer_size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 26:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_compressed);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 27:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_checksum);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 28:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->time);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 29:
                    if ($ftype == TType::MAP) {
                        $this->priority_carrier = array();
                        $_size938 = 0;
                        $_ktype939 = 0;
                        $_vtype940 = 0;
                        $xfer += $input->readMapBegin($_ktype939, $_vtype940, $_size938);
                        for ($_i942 = 0; $_i942 < $_size938; ++$_i942) {
                            $key943 = '';
                            $val944 = '';
                            $xfer += $input->readString($key943);
                            $xfer += $input->readString($val944);
                            $this->priority_carrier[$key943] = $val944;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 30:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_only_single_system_disk);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 31:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_continuous_data_replication);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 32:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->pre_snapshot_script);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 33:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->post_snapshot_script);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 34:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_compressed_by_packer);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 35:
                    if ($ftype == TType::SET) {
                        $this->excluded_paths = array();
                        $_size945 = 0;
                        $_etype948 = 0;
                        $xfer += $input->readSetBegin($_etype948, $_size945);
                        for ($_i949 = 0; $_i949 < $_size945; ++$_i949) {
                            $elem950 = null;
                            $xfer += $input->readString($elem950);
                            $this->excluded_paths[$elem950] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 36:
                    if ($ftype == TType::SET) {
                        $this->previous_excluded_paths = array();
                        $_size951 = 0;
                        $_etype954 = 0;
                        $xfer += $input->readSetBegin($_etype954, $_size951);
                        for ($_i955 = 0; $_i955 < $_size951; ++$_i955) {
                            $elem956 = null;
                            $xfer += $input->readString($elem956);
                            $this->previous_excluded_paths[$elem956] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('replica_job_create_detail');
        if ($this->host !== null) {
            $xfer += $output->writeFieldBegin('host', TType::STRING, 1);
            $xfer += $output->writeString($this->host);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->addr !== null) {
            if (!is_array($this->addr)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('addr', TType::SET, 2);
            $output->writeSetBegin(TType::STRING, count($this->addr));
            foreach ($this->addr as $iter957 => $iter958) {
                $xfer += $output->writeString($iter957);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->username !== null) {
            $xfer += $output->writeFieldBegin('username', TType::STRING, 3);
            $xfer += $output->writeString($this->username);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->password !== null) {
            $xfer += $output->writeFieldBegin('password', TType::STRING, 4);
            $xfer += $output->writeString($this->password);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->type !== null) {
            $xfer += $output->writeFieldBegin('type', TType::I32, 5);
            $xfer += $output->writeI32($this->type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->virtual_machine_id !== null) {
            $xfer += $output->writeFieldBegin('virtual_machine_id', TType::STRING, 6);
            $xfer += $output->writeString($this->virtual_machine_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->disks !== null) {
            if (!is_array($this->disks)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('disks', TType::SET, 7);
            $output->writeSetBegin(TType::STRING, count($this->disks));
            foreach ($this->disks as $iter959 => $iter960) {
                $xfer += $output->writeString($iter959);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->targets !== null) {
            if (!is_array($this->targets)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('targets', TType::MAP, 8);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->targets));
            foreach ($this->targets as $kiter961 => $viter962) {
                $xfer += $output->writeString($kiter961);
                $xfer += $output->writeString($viter962);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->carriers !== null) {
            if (!is_array($this->carriers)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('carriers', TType::MAP, 9);
            $output->writeMapBegin(TType::STRING, TType::SET, count($this->carriers));
            foreach ($this->carriers as $kiter963 => $viter964) {
                $xfer += $output->writeString($kiter963);
                $output->writeSetBegin(TType::STRING, count($viter964));
                foreach ($viter964 as $iter965 => $iter966) {
                    $xfer += $output->writeString($iter965);
                }
                $output->writeSetEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->full_replicas !== null) {
            if (!is_array($this->full_replicas)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('full_replicas', TType::SET, 10);
            $output->writeSetBegin(TType::STRING, count($this->full_replicas));
            foreach ($this->full_replicas as $iter967 => $iter968) {
                $xfer += $output->writeString($iter967);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->disk_ids !== null) {
            if (!is_array($this->disk_ids)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('disk_ids', TType::MAP, 11);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->disk_ids));
            foreach ($this->disk_ids as $kiter969 => $viter970) {
                $xfer += $output->writeString($kiter969);
                $xfer += $output->writeString($viter970);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cbt_info !== null) {
            $xfer += $output->writeFieldBegin('cbt_info', TType::STRING, 12);
            $xfer += $output->writeString($this->cbt_info);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->snapshot_info !== null) {
            $xfer += $output->writeFieldBegin('snapshot_info', TType::STRING, 13);
            $xfer += $output->writeString($this->snapshot_info);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->checksum_verify !== null) {
            $xfer += $output->writeFieldBegin('checksum_verify', TType::BOOL, 14);
            $xfer += $output->writeBool($this->checksum_verify);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->always_retry !== null) {
            $xfer += $output->writeFieldBegin('always_retry', TType::BOOL, 15);
            $xfer += $output->writeBool($this->always_retry);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->timeout !== null) {
            $xfer += $output->writeFieldBegin('timeout', TType::I32, 16);
            $xfer += $output->writeI32($this->timeout);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_encrypted !== null) {
            $xfer += $output->writeFieldBegin('is_encrypted', TType::BOOL, 17);
            $xfer += $output->writeBool($this->is_encrypted);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_paused !== null) {
            $xfer += $output->writeFieldBegin('is_paused', TType::BOOL, 18);
            $xfer += $output->writeBool($this->is_paused);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->worker_thread_number !== null) {
            $xfer += $output->writeFieldBegin('worker_thread_number', TType::I32, 19);
            $xfer += $output->writeI32($this->worker_thread_number);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->block_mode_enable !== null) {
            $xfer += $output->writeFieldBegin('block_mode_enable', TType::BOOL, 20);
            $xfer += $output->writeBool($this->block_mode_enable);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->file_system_filter_enable !== null) {
            $xfer += $output->writeFieldBegin('file_system_filter_enable', TType::BOOL, 21);
            $xfer += $output->writeBool($this->file_system_filter_enable);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->min_transport_size !== null) {
            $xfer += $output->writeFieldBegin('min_transport_size', TType::I32, 22);
            $xfer += $output->writeI32($this->min_transport_size);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->full_min_transport_size !== null) {
            $xfer += $output->writeFieldBegin('full_min_transport_size', TType::I32, 23);
            $xfer += $output->writeI32($this->full_min_transport_size);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_full_replica !== null) {
            $xfer += $output->writeFieldBegin('is_full_replica', TType::BOOL, 24);
            $xfer += $output->writeBool($this->is_full_replica);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->buffer_size !== null) {
            $xfer += $output->writeFieldBegin('buffer_size', TType::I32, 25);
            $xfer += $output->writeI32($this->buffer_size);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_compressed !== null) {
            $xfer += $output->writeFieldBegin('is_compressed', TType::BOOL, 26);
            $xfer += $output->writeBool($this->is_compressed);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_checksum !== null) {
            $xfer += $output->writeFieldBegin('is_checksum', TType::BOOL, 27);
            $xfer += $output->writeBool($this->is_checksum);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->time !== null) {
            $xfer += $output->writeFieldBegin('time', TType::STRING, 28);
            $xfer += $output->writeString($this->time);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->priority_carrier !== null) {
            if (!is_array($this->priority_carrier)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('priority_carrier', TType::MAP, 29);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->priority_carrier));
            foreach ($this->priority_carrier as $kiter971 => $viter972) {
                $xfer += $output->writeString($kiter971);
                $xfer += $output->writeString($viter972);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_only_single_system_disk !== null) {
            $xfer += $output->writeFieldBegin('is_only_single_system_disk', TType::BOOL, 30);
            $xfer += $output->writeBool($this->is_only_single_system_disk);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_continuous_data_replication !== null) {
            $xfer += $output->writeFieldBegin('is_continuous_data_replication', TType::BOOL, 31);
            $xfer += $output->writeBool($this->is_continuous_data_replication);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pre_snapshot_script !== null) {
            $xfer += $output->writeFieldBegin('pre_snapshot_script', TType::STRING, 32);
            $xfer += $output->writeString($this->pre_snapshot_script);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->post_snapshot_script !== null) {
            $xfer += $output->writeFieldBegin('post_snapshot_script', TType::STRING, 33);
            $xfer += $output->writeString($this->post_snapshot_script);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_compressed_by_packer !== null) {
            $xfer += $output->writeFieldBegin('is_compressed_by_packer', TType::BOOL, 34);
            $xfer += $output->writeBool($this->is_compressed_by_packer);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->excluded_paths !== null) {
            if (!is_array($this->excluded_paths)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('excluded_paths', TType::SET, 35);
            $output->writeSetBegin(TType::STRING, count($this->excluded_paths));
            foreach ($this->excluded_paths as $iter973 => $iter974) {
                $xfer += $output->writeString($iter973);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->previous_excluded_paths !== null) {
            if (!is_array($this->previous_excluded_paths)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('previous_excluded_paths', TType::SET, 36);
            $output->writeSetBegin(TType::STRING, count($this->previous_excluded_paths));
            foreach ($this->previous_excluded_paths as $iter975 => $iter976) {
                $xfer += $output->writeString($iter975);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class vmware_connection_info
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'host',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'username',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'password',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'esx',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'datastore',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'folder_path',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $host = "";
    /**
     * @var string
     */
    public $username = "";
    /**
     * @var string
     */
    public $password = "";
    /**
     * @var string
     */
    public $esx = "";
    /**
     * @var string
     */
    public $datastore = "";
    /**
     * @var string
     */
    public $folder_path = "";

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['host'])) {
                $this->host = $vals['host'];
            }
            if (isset($vals['username'])) {
                $this->username = $vals['username'];
            }
            if (isset($vals['password'])) {
                $this->password = $vals['password'];
            }
            if (isset($vals['esx'])) {
                $this->esx = $vals['esx'];
            }
            if (isset($vals['datastore'])) {
                $this->datastore = $vals['datastore'];
            }
            if (isset($vals['folder_path'])) {
                $this->folder_path = $vals['folder_path'];
            }
        }
    }

    public function getName()
    {
        return 'vmware_connection_info';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->host);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->username);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->password);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->esx);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->datastore);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->folder_path);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('vmware_connection_info');
        if ($this->host !== null) {
            $xfer += $output->writeFieldBegin('host', TType::STRING, 1);
            $xfer += $output->writeString($this->host);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->username !== null) {
            $xfer += $output->writeFieldBegin('username', TType::STRING, 2);
            $xfer += $output->writeString($this->username);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->password !== null) {
            $xfer += $output->writeFieldBegin('password', TType::STRING, 3);
            $xfer += $output->writeString($this->password);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->esx !== null) {
            $xfer += $output->writeFieldBegin('esx', TType::STRING, 4);
            $xfer += $output->writeString($this->esx);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->datastore !== null) {
            $xfer += $output->writeFieldBegin('datastore', TType::STRING, 5);
            $xfer += $output->writeString($this->datastore);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->folder_path !== null) {
            $xfer += $output->writeFieldBegin('folder_path', TType::STRING, 6);
            $xfer += $output->writeString($this->folder_path);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class vmware_options
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'connection',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\vmware_connection_info',
        ),
        2 => array(
            'var' => 'virtual_machine_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'virtual_machine_snapshot',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'number_of_cpus',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'number_of_memory_in_mb',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'vm_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'network_connections',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        8 => array(
            'var' => 'network_adapters',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        9 => array(
            'var' => 'scsi_adapters',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::LST,
            'key' => array(
                'type' => TType::I32,
            ),
            'val' => array(
                'type' => TType::LST,
                'etype' => TType::STRING,
                'elem' => array(
                    'type' => TType::STRING,
                    ),
                ),
        ),
        10 => array(
            'var' => 'guest_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'firmware',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        12 => array(
            'var' => 'install_vm_tools',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        13 => array(
            'var' => 'mac_addresses',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var \saasame\transport\vmware_connection_info
     */
    public $connection = null;
    /**
     * @var string
     */
    public $virtual_machine_id = "";
    /**
     * @var string
     */
    public $virtual_machine_snapshot = "";
    /**
     * @var int
     */
    public $number_of_cpus = 1;
    /**
     * @var int
     */
    public $number_of_memory_in_mb = 1024;
    /**
     * @var string
     */
    public $vm_name = null;
    /**
     * @var string[]
     */
    public $network_connections = null;
    /**
     * @var string[]
     */
    public $network_adapters = null;
    /**
     * @var array
     */
    public $scsi_adapters = null;
    /**
     * @var string
     */
    public $guest_id = null;
    /**
     * @var int
     */
    public $firmware =     0;
    /**
     * @var bool
     */
    public $install_vm_tools = true;
    /**
     * @var string[]
     */
    public $mac_addresses = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['connection'])) {
                $this->connection = $vals['connection'];
            }
            if (isset($vals['virtual_machine_id'])) {
                $this->virtual_machine_id = $vals['virtual_machine_id'];
            }
            if (isset($vals['virtual_machine_snapshot'])) {
                $this->virtual_machine_snapshot = $vals['virtual_machine_snapshot'];
            }
            if (isset($vals['number_of_cpus'])) {
                $this->number_of_cpus = $vals['number_of_cpus'];
            }
            if (isset($vals['number_of_memory_in_mb'])) {
                $this->number_of_memory_in_mb = $vals['number_of_memory_in_mb'];
            }
            if (isset($vals['vm_name'])) {
                $this->vm_name = $vals['vm_name'];
            }
            if (isset($vals['network_connections'])) {
                $this->network_connections = $vals['network_connections'];
            }
            if (isset($vals['network_adapters'])) {
                $this->network_adapters = $vals['network_adapters'];
            }
            if (isset($vals['scsi_adapters'])) {
                $this->scsi_adapters = $vals['scsi_adapters'];
            }
            if (isset($vals['guest_id'])) {
                $this->guest_id = $vals['guest_id'];
            }
            if (isset($vals['firmware'])) {
                $this->firmware = $vals['firmware'];
            }
            if (isset($vals['install_vm_tools'])) {
                $this->install_vm_tools = $vals['install_vm_tools'];
            }
            if (isset($vals['mac_addresses'])) {
                $this->mac_addresses = $vals['mac_addresses'];
            }
        }
    }

    public function getName()
    {
        return 'vmware_options';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->connection = new \saasame\transport\vmware_connection_info();
                        $xfer += $this->connection->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->virtual_machine_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->virtual_machine_snapshot);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->number_of_cpus);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->number_of_memory_in_mb);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->vm_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::LST) {
                        $this->network_connections = array();
                        $_size977 = 0;
                        $_etype980 = 0;
                        $xfer += $input->readListBegin($_etype980, $_size977);
                        for ($_i981 = 0; $_i981 < $_size977; ++$_i981) {
                            $elem982 = null;
                            $xfer += $input->readString($elem982);
                            $this->network_connections []= $elem982;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::LST) {
                        $this->network_adapters = array();
                        $_size983 = 0;
                        $_etype986 = 0;
                        $xfer += $input->readListBegin($_etype986, $_size983);
                        for ($_i987 = 0; $_i987 < $_size983; ++$_i987) {
                            $elem988 = null;
                            $xfer += $input->readString($elem988);
                            $this->network_adapters []= $elem988;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::MAP) {
                        $this->scsi_adapters = array();
                        $_size989 = 0;
                        $_ktype990 = 0;
                        $_vtype991 = 0;
                        $xfer += $input->readMapBegin($_ktype990, $_vtype991, $_size989);
                        for ($_i993 = 0; $_i993 < $_size989; ++$_i993) {
                            $key994 = 0;
                            $val995 = array();
                            $xfer += $input->readI32($key994);
                            $val995 = array();
                            $_size996 = 0;
                            $_etype999 = 0;
                            $xfer += $input->readListBegin($_etype999, $_size996);
                            for ($_i1000 = 0; $_i1000 < $_size996; ++$_i1000) {
                                $elem1001 = null;
                                $xfer += $input->readString($elem1001);
                                $val995 []= $elem1001;
                            }
                            $xfer += $input->readListEnd();
                            $this->scsi_adapters[$key994] = $val995;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->guest_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->firmware);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->install_vm_tools);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::LST) {
                        $this->mac_addresses = array();
                        $_size1002 = 0;
                        $_etype1005 = 0;
                        $xfer += $input->readListBegin($_etype1005, $_size1002);
                        for ($_i1006 = 0; $_i1006 < $_size1002; ++$_i1006) {
                            $elem1007 = null;
                            $xfer += $input->readString($elem1007);
                            $this->mac_addresses []= $elem1007;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('vmware_options');
        if ($this->connection !== null) {
            if (!is_object($this->connection)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('connection', TType::STRUCT, 1);
            $xfer += $this->connection->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->virtual_machine_id !== null) {
            $xfer += $output->writeFieldBegin('virtual_machine_id', TType::STRING, 2);
            $xfer += $output->writeString($this->virtual_machine_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->virtual_machine_snapshot !== null) {
            $xfer += $output->writeFieldBegin('virtual_machine_snapshot', TType::STRING, 3);
            $xfer += $output->writeString($this->virtual_machine_snapshot);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->number_of_cpus !== null) {
            $xfer += $output->writeFieldBegin('number_of_cpus', TType::I32, 4);
            $xfer += $output->writeI32($this->number_of_cpus);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->number_of_memory_in_mb !== null) {
            $xfer += $output->writeFieldBegin('number_of_memory_in_mb', TType::I32, 5);
            $xfer += $output->writeI32($this->number_of_memory_in_mb);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->vm_name !== null) {
            $xfer += $output->writeFieldBegin('vm_name', TType::STRING, 6);
            $xfer += $output->writeString($this->vm_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->network_connections !== null) {
            if (!is_array($this->network_connections)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('network_connections', TType::LST, 7);
            $output->writeListBegin(TType::STRING, count($this->network_connections));
            foreach ($this->network_connections as $iter1008) {
                $xfer += $output->writeString($iter1008);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->network_adapters !== null) {
            if (!is_array($this->network_adapters)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('network_adapters', TType::LST, 8);
            $output->writeListBegin(TType::STRING, count($this->network_adapters));
            foreach ($this->network_adapters as $iter1009) {
                $xfer += $output->writeString($iter1009);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->scsi_adapters !== null) {
            if (!is_array($this->scsi_adapters)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('scsi_adapters', TType::MAP, 9);
            $output->writeMapBegin(TType::I32, TType::LST, count($this->scsi_adapters));
            foreach ($this->scsi_adapters as $kiter1010 => $viter1011) {
                $xfer += $output->writeI32($kiter1010);
                $output->writeListBegin(TType::STRING, count($viter1011));
                foreach ($viter1011 as $iter1012) {
                    $xfer += $output->writeString($iter1012);
                }
                $output->writeListEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->guest_id !== null) {
            $xfer += $output->writeFieldBegin('guest_id', TType::STRING, 10);
            $xfer += $output->writeString($this->guest_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->firmware !== null) {
            $xfer += $output->writeFieldBegin('firmware', TType::I32, 11);
            $xfer += $output->writeI32($this->firmware);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->install_vm_tools !== null) {
            $xfer += $output->writeFieldBegin('install_vm_tools', TType::BOOL, 12);
            $xfer += $output->writeBool($this->install_vm_tools);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->mac_addresses !== null) {
            if (!is_array($this->mac_addresses)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('mac_addresses', TType::LST, 13);
            $output->writeListBegin(TType::STRING, count($this->mac_addresses));
            foreach ($this->mac_addresses as $iter1013) {
                $xfer += $output->writeString($iter1013);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class aliyun_options
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'access_key',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'secret_key',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'objectname',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'bucketname',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'region',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'max_size',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        7 => array(
            'var' => 'file_system_filter_enable',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        8 => array(
            'var' => 'number_of_upload_threads',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        9 => array(
            'var' => 'disks_object_name_mapping',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var string
     */
    public $access_key = "";
    /**
     * @var string
     */
    public $secret_key = "";
    /**
     * @var string
     */
    public $objectname = "";
    /**
     * @var string
     */
    public $bucketname = "";
    /**
     * @var string
     */
    public $region = "";
    /**
     * @var int
     */
    public $max_size = 500;
    /**
     * @var bool
     */
    public $file_system_filter_enable = true;
    /**
     * @var int
     */
    public $number_of_upload_threads = 0;
    /**
     * @var array
     */
    public $disks_object_name_mapping = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['access_key'])) {
                $this->access_key = $vals['access_key'];
            }
            if (isset($vals['secret_key'])) {
                $this->secret_key = $vals['secret_key'];
            }
            if (isset($vals['objectname'])) {
                $this->objectname = $vals['objectname'];
            }
            if (isset($vals['bucketname'])) {
                $this->bucketname = $vals['bucketname'];
            }
            if (isset($vals['region'])) {
                $this->region = $vals['region'];
            }
            if (isset($vals['max_size'])) {
                $this->max_size = $vals['max_size'];
            }
            if (isset($vals['file_system_filter_enable'])) {
                $this->file_system_filter_enable = $vals['file_system_filter_enable'];
            }
            if (isset($vals['number_of_upload_threads'])) {
                $this->number_of_upload_threads = $vals['number_of_upload_threads'];
            }
            if (isset($vals['disks_object_name_mapping'])) {
                $this->disks_object_name_mapping = $vals['disks_object_name_mapping'];
            }
        }
    }

    public function getName()
    {
        return 'aliyun_options';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->access_key);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->secret_key);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->objectname);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->bucketname);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->region);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->max_size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->file_system_filter_enable);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->number_of_upload_threads);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::MAP) {
                        $this->disks_object_name_mapping = array();
                        $_size1014 = 0;
                        $_ktype1015 = 0;
                        $_vtype1016 = 0;
                        $xfer += $input->readMapBegin($_ktype1015, $_vtype1016, $_size1014);
                        for ($_i1018 = 0; $_i1018 < $_size1014; ++$_i1018) {
                            $key1019 = '';
                            $val1020 = '';
                            $xfer += $input->readString($key1019);
                            $xfer += $input->readString($val1020);
                            $this->disks_object_name_mapping[$key1019] = $val1020;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('aliyun_options');
        if ($this->access_key !== null) {
            $xfer += $output->writeFieldBegin('access_key', TType::STRING, 1);
            $xfer += $output->writeString($this->access_key);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->secret_key !== null) {
            $xfer += $output->writeFieldBegin('secret_key', TType::STRING, 2);
            $xfer += $output->writeString($this->secret_key);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->objectname !== null) {
            $xfer += $output->writeFieldBegin('objectname', TType::STRING, 3);
            $xfer += $output->writeString($this->objectname);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->bucketname !== null) {
            $xfer += $output->writeFieldBegin('bucketname', TType::STRING, 4);
            $xfer += $output->writeString($this->bucketname);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->region !== null) {
            $xfer += $output->writeFieldBegin('region', TType::STRING, 5);
            $xfer += $output->writeString($this->region);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->max_size !== null) {
            $xfer += $output->writeFieldBegin('max_size', TType::I32, 6);
            $xfer += $output->writeI32($this->max_size);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->file_system_filter_enable !== null) {
            $xfer += $output->writeFieldBegin('file_system_filter_enable', TType::BOOL, 7);
            $xfer += $output->writeBool($this->file_system_filter_enable);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->number_of_upload_threads !== null) {
            $xfer += $output->writeFieldBegin('number_of_upload_threads', TType::I16, 8);
            $xfer += $output->writeI16($this->number_of_upload_threads);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->disks_object_name_mapping !== null) {
            if (!is_array($this->disks_object_name_mapping)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('disks_object_name_mapping', TType::MAP, 9);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->disks_object_name_mapping));
            foreach ($this->disks_object_name_mapping as $kiter1021 => $viter1022) {
                $xfer += $output->writeString($kiter1021);
                $xfer += $output->writeString($viter1022);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class tencent_options
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'access_key',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'secret_key',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'objectname',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'bucketname',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'region',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'max_size',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        7 => array(
            'var' => 'file_system_filter_enable',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        8 => array(
            'var' => 'number_of_upload_threads',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        9 => array(
            'var' => 'disks_object_name_mapping',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var string
     */
    public $access_key = "";
    /**
     * @var string
     */
    public $secret_key = "";
    /**
     * @var string
     */
    public $objectname = "";
    /**
     * @var string
     */
    public $bucketname = "";
    /**
     * @var string
     */
    public $region = "";
    /**
     * @var int
     */
    public $max_size = 500;
    /**
     * @var bool
     */
    public $file_system_filter_enable = true;
    /**
     * @var int
     */
    public $number_of_upload_threads = 0;
    /**
     * @var array
     */
    public $disks_object_name_mapping = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['access_key'])) {
                $this->access_key = $vals['access_key'];
            }
            if (isset($vals['secret_key'])) {
                $this->secret_key = $vals['secret_key'];
            }
            if (isset($vals['objectname'])) {
                $this->objectname = $vals['objectname'];
            }
            if (isset($vals['bucketname'])) {
                $this->bucketname = $vals['bucketname'];
            }
            if (isset($vals['region'])) {
                $this->region = $vals['region'];
            }
            if (isset($vals['max_size'])) {
                $this->max_size = $vals['max_size'];
            }
            if (isset($vals['file_system_filter_enable'])) {
                $this->file_system_filter_enable = $vals['file_system_filter_enable'];
            }
            if (isset($vals['number_of_upload_threads'])) {
                $this->number_of_upload_threads = $vals['number_of_upload_threads'];
            }
            if (isset($vals['disks_object_name_mapping'])) {
                $this->disks_object_name_mapping = $vals['disks_object_name_mapping'];
            }
        }
    }

    public function getName()
    {
        return 'tencent_options';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->access_key);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->secret_key);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->objectname);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->bucketname);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->region);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->max_size);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->file_system_filter_enable);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->number_of_upload_threads);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::MAP) {
                        $this->disks_object_name_mapping = array();
                        $_size1023 = 0;
                        $_ktype1024 = 0;
                        $_vtype1025 = 0;
                        $xfer += $input->readMapBegin($_ktype1024, $_vtype1025, $_size1023);
                        for ($_i1027 = 0; $_i1027 < $_size1023; ++$_i1027) {
                            $key1028 = '';
                            $val1029 = '';
                            $xfer += $input->readString($key1028);
                            $xfer += $input->readString($val1029);
                            $this->disks_object_name_mapping[$key1028] = $val1029;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('tencent_options');
        if ($this->access_key !== null) {
            $xfer += $output->writeFieldBegin('access_key', TType::STRING, 1);
            $xfer += $output->writeString($this->access_key);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->secret_key !== null) {
            $xfer += $output->writeFieldBegin('secret_key', TType::STRING, 2);
            $xfer += $output->writeString($this->secret_key);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->objectname !== null) {
            $xfer += $output->writeFieldBegin('objectname', TType::STRING, 3);
            $xfer += $output->writeString($this->objectname);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->bucketname !== null) {
            $xfer += $output->writeFieldBegin('bucketname', TType::STRING, 4);
            $xfer += $output->writeString($this->bucketname);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->region !== null) {
            $xfer += $output->writeFieldBegin('region', TType::STRING, 5);
            $xfer += $output->writeString($this->region);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->max_size !== null) {
            $xfer += $output->writeFieldBegin('max_size', TType::I32, 6);
            $xfer += $output->writeI32($this->max_size);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->file_system_filter_enable !== null) {
            $xfer += $output->writeFieldBegin('file_system_filter_enable', TType::BOOL, 7);
            $xfer += $output->writeBool($this->file_system_filter_enable);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->number_of_upload_threads !== null) {
            $xfer += $output->writeFieldBegin('number_of_upload_threads', TType::I16, 8);
            $xfer += $output->writeI16($this->number_of_upload_threads);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->disks_object_name_mapping !== null) {
            if (!is_array($this->disks_object_name_mapping)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('disks_object_name_mapping', TType::MAP, 9);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->disks_object_name_mapping));
            foreach ($this->disks_object_name_mapping as $kiter1030 => $viter1031) {
                $xfer += $output->writeString($kiter1030);
                $xfer += $output->writeString($viter1031);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class extra_options
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'aliyun',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\aliyun_options',
        ),
        2 => array(
            'var' => 'tencent',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\tencent_options',
        ),
    );

    /**
     * @var \saasame\transport\aliyun_options
     */
    public $aliyun = null;
    /**
     * @var \saasame\transport\tencent_options
     */
    public $tencent = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['aliyun'])) {
                $this->aliyun = $vals['aliyun'];
            }
            if (isset($vals['tencent'])) {
                $this->tencent = $vals['tencent'];
            }
        }
    }

    public function getName()
    {
        return 'extra_options';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->aliyun = new \saasame\transport\aliyun_options();
                        $xfer += $this->aliyun->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->tencent = new \saasame\transport\tencent_options();
                        $xfer += $this->tencent->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('extra_options');
        if ($this->aliyun !== null) {
            if (!is_object($this->aliyun)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('aliyun', TType::STRUCT, 1);
            $xfer += $this->aliyun->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->tencent !== null) {
            if (!is_object($this->tencent)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('tencent', TType::STRUCT, 2);
            $xfer += $this->tencent->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class vhd_snapshot
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'datetime',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $id = "";
    /**
     * @var string
     */
    public $datetime = "";
    /**
     * @var string
     */
    public $name = "";

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['datetime'])) {
                $this->datetime = $vals['datetime'];
            }
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
        }
    }

    public function getName()
    {
        return 'vhd_snapshot';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->datetime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('vhd_snapshot');
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->datetime !== null) {
            $xfer += $output->writeFieldBegin('datetime', TType::STRING, 2);
            $xfer += $output->writeString($this->datetime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class cascading
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'level',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'machine_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'connection_info',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\connection',
        ),
        4 => array(
            'var' => 'branches',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\cascading',
                ),
        ),
    );

    /**
     * @var int
     */
    public $level = 0;
    /**
     * @var string
     */
    public $machine_id = "";
    /**
     * @var \saasame\transport\connection
     */
    public $connection_info = null;
    /**
     * @var array
     */
    public $branches = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['level'])) {
                $this->level = $vals['level'];
            }
            if (isset($vals['machine_id'])) {
                $this->machine_id = $vals['machine_id'];
            }
            if (isset($vals['connection_info'])) {
                $this->connection_info = $vals['connection_info'];
            }
            if (isset($vals['branches'])) {
                $this->branches = $vals['branches'];
            }
        }
    }

    public function getName()
    {
        return 'cascading';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->level);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->machine_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->connection_info = new \saasame\transport\connection();
                        $xfer += $this->connection_info->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::MAP) {
                        $this->branches = array();
                        $_size1032 = 0;
                        $_ktype1033 = 0;
                        $_vtype1034 = 0;
                        $xfer += $input->readMapBegin($_ktype1033, $_vtype1034, $_size1032);
                        for ($_i1036 = 0; $_i1036 < $_size1032; ++$_i1036) {
                            $key1037 = '';
                            $val1038 = new \saasame\transport\cascading();
                            $xfer += $input->readString($key1037);
                            $val1038 = new \saasame\transport\cascading();
                            $xfer += $val1038->read($input);
                            $this->branches[$key1037] = $val1038;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('cascading');
        if ($this->level !== null) {
            $xfer += $output->writeFieldBegin('level', TType::I32, 1);
            $xfer += $output->writeI32($this->level);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->machine_id !== null) {
            $xfer += $output->writeFieldBegin('machine_id', TType::STRING, 2);
            $xfer += $output->writeString($this->machine_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->connection_info !== null) {
            if (!is_object($this->connection_info)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('connection_info', TType::STRUCT, 3);
            $xfer += $this->connection_info->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->branches !== null) {
            if (!is_array($this->branches)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('branches', TType::MAP, 4);
            $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->branches));
            foreach ($this->branches as $kiter1039 => $viter1040) {
                $xfer += $output->writeString($kiter1039);
                $xfer += $viter1040->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class loader_job_create_detail
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'replica_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'disks_lun_mapping',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        3 => array(
            'var' => 'snapshots',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        4 => array(
            'var' => 'disks_snapshot_mapping',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::MAP,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::MAP,
                'ktype' => TType::STRING,
                'vtype' => TType::STRING,
                'key' => array(
                    'type' => TType::STRING,
                ),
                'val' => array(
                    'type' => TType::STRING,
                    ),
                ),
        ),
        5 => array(
            'var' => 'connection_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'block_mode_enable',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        7 => array(
            'var' => 'purge_data',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        8 => array(
            'var' => 'remap',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        9 => array(
            'var' => 'detect_type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        10 => array(
            'var' => 'worker_thread_number',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        11 => array(
            'var' => 'host_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'export_disk_type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        13 => array(
            'var' => 'export_path',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        14 => array(
            'var' => 'disks_size_mapping',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::I64,
                ),
        ),
        15 => array(
            'var' => 'keep_alive',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        16 => array(
            'var' => 'time',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        17 => array(
            'var' => 'is_continuous_data_replication',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        18 => array(
            'var' => 'azure_storage_connection_string',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        19 => array(
            'var' => 'vmware_connection',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\vmware_connection_info',
        ),
        20 => array(
            'var' => 'thin_provisioned',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        21 => array(
            'var' => 'is_paused',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        22 => array(
            'var' => 'cascadings',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\cascading',
        ),
        23 => array(
            'var' => 'post_snapshot_script',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        24 => array(
            'var' => 'disks_order',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var string
     */
    public $replica_id = "";
    /**
     * @var array
     */
    public $disks_lun_mapping = null;
    /**
     * @var string[]
     */
    public $snapshots = null;
    /**
     * @var array
     */
    public $disks_snapshot_mapping = null;
    /**
     * @var string
     */
    public $connection_id = null;
    /**
     * @var bool
     */
    public $block_mode_enable = false;
    /**
     * @var bool
     */
    public $purge_data = true;
    /**
     * @var bool
     */
    public $remap = false;
    /**
     * @var int
     */
    public $detect_type =     0;
    /**
     * @var int
     */
    public $worker_thread_number = 0;
    /**
     * @var string
     */
    public $host_name = "";
    /**
     * @var int
     */
    public $export_disk_type =     0;
    /**
     * @var string
     */
    public $export_path = "";
    /**
     * @var array
     */
    public $disks_size_mapping = null;
    /**
     * @var bool
     */
    public $keep_alive = true;
    /**
     * @var string
     */
    public $time = "";
    /**
     * @var bool
     */
    public $is_continuous_data_replication = false;
    /**
     * @var string
     */
    public $azure_storage_connection_string = "";
    /**
     * @var \saasame\transport\vmware_connection_info
     */
    public $vmware_connection = null;
    /**
     * @var bool
     */
    public $thin_provisioned = true;
    /**
     * @var bool
     */
    public $is_paused = false;
    /**
     * @var \saasame\transport\cascading
     */
    public $cascadings = null;
    /**
     * @var string
     */
    public $post_snapshot_script = null;
    /**
     * @var string[]
     */
    public $disks_order = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['replica_id'])) {
                $this->replica_id = $vals['replica_id'];
            }
            if (isset($vals['disks_lun_mapping'])) {
                $this->disks_lun_mapping = $vals['disks_lun_mapping'];
            }
            if (isset($vals['snapshots'])) {
                $this->snapshots = $vals['snapshots'];
            }
            if (isset($vals['disks_snapshot_mapping'])) {
                $this->disks_snapshot_mapping = $vals['disks_snapshot_mapping'];
            }
            if (isset($vals['connection_id'])) {
                $this->connection_id = $vals['connection_id'];
            }
            if (isset($vals['block_mode_enable'])) {
                $this->block_mode_enable = $vals['block_mode_enable'];
            }
            if (isset($vals['purge_data'])) {
                $this->purge_data = $vals['purge_data'];
            }
            if (isset($vals['remap'])) {
                $this->remap = $vals['remap'];
            }
            if (isset($vals['detect_type'])) {
                $this->detect_type = $vals['detect_type'];
            }
            if (isset($vals['worker_thread_number'])) {
                $this->worker_thread_number = $vals['worker_thread_number'];
            }
            if (isset($vals['host_name'])) {
                $this->host_name = $vals['host_name'];
            }
            if (isset($vals['export_disk_type'])) {
                $this->export_disk_type = $vals['export_disk_type'];
            }
            if (isset($vals['export_path'])) {
                $this->export_path = $vals['export_path'];
            }
            if (isset($vals['disks_size_mapping'])) {
                $this->disks_size_mapping = $vals['disks_size_mapping'];
            }
            if (isset($vals['keep_alive'])) {
                $this->keep_alive = $vals['keep_alive'];
            }
            if (isset($vals['time'])) {
                $this->time = $vals['time'];
            }
            if (isset($vals['is_continuous_data_replication'])) {
                $this->is_continuous_data_replication = $vals['is_continuous_data_replication'];
            }
            if (isset($vals['azure_storage_connection_string'])) {
                $this->azure_storage_connection_string = $vals['azure_storage_connection_string'];
            }
            if (isset($vals['vmware_connection'])) {
                $this->vmware_connection = $vals['vmware_connection'];
            }
            if (isset($vals['thin_provisioned'])) {
                $this->thin_provisioned = $vals['thin_provisioned'];
            }
            if (isset($vals['is_paused'])) {
                $this->is_paused = $vals['is_paused'];
            }
            if (isset($vals['cascadings'])) {
                $this->cascadings = $vals['cascadings'];
            }
            if (isset($vals['post_snapshot_script'])) {
                $this->post_snapshot_script = $vals['post_snapshot_script'];
            }
            if (isset($vals['disks_order'])) {
                $this->disks_order = $vals['disks_order'];
            }
        }
    }

    public function getName()
    {
        return 'loader_job_create_detail';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->replica_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::MAP) {
                        $this->disks_lun_mapping = array();
                        $_size1041 = 0;
                        $_ktype1042 = 0;
                        $_vtype1043 = 0;
                        $xfer += $input->readMapBegin($_ktype1042, $_vtype1043, $_size1041);
                        for ($_i1045 = 0; $_i1045 < $_size1041; ++$_i1045) {
                            $key1046 = '';
                            $val1047 = '';
                            $xfer += $input->readString($key1046);
                            $xfer += $input->readString($val1047);
                            $this->disks_lun_mapping[$key1046] = $val1047;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->snapshots = array();
                        $_size1048 = 0;
                        $_etype1051 = 0;
                        $xfer += $input->readListBegin($_etype1051, $_size1048);
                        for ($_i1052 = 0; $_i1052 < $_size1048; ++$_i1052) {
                            $elem1053 = null;
                            $xfer += $input->readString($elem1053);
                            $this->snapshots []= $elem1053;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::MAP) {
                        $this->disks_snapshot_mapping = array();
                        $_size1054 = 0;
                        $_ktype1055 = 0;
                        $_vtype1056 = 0;
                        $xfer += $input->readMapBegin($_ktype1055, $_vtype1056, $_size1054);
                        for ($_i1058 = 0; $_i1058 < $_size1054; ++$_i1058) {
                            $key1059 = '';
                            $val1060 = array();
                            $xfer += $input->readString($key1059);
                            $val1060 = array();
                            $_size1061 = 0;
                            $_ktype1062 = 0;
                            $_vtype1063 = 0;
                            $xfer += $input->readMapBegin($_ktype1062, $_vtype1063, $_size1061);
                            for ($_i1065 = 0; $_i1065 < $_size1061; ++$_i1065) {
                                $key1066 = '';
                                $val1067 = '';
                                $xfer += $input->readString($key1066);
                                $xfer += $input->readString($val1067);
                                $val1060[$key1066] = $val1067;
                            }
                            $xfer += $input->readMapEnd();
                            $this->disks_snapshot_mapping[$key1059] = $val1060;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->connection_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->block_mode_enable);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->purge_data);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->remap);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->detect_type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->worker_thread_number);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->host_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->export_disk_type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->export_path);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::MAP) {
                        $this->disks_size_mapping = array();
                        $_size1068 = 0;
                        $_ktype1069 = 0;
                        $_vtype1070 = 0;
                        $xfer += $input->readMapBegin($_ktype1069, $_vtype1070, $_size1068);
                        for ($_i1072 = 0; $_i1072 < $_size1068; ++$_i1072) {
                            $key1073 = '';
                            $val1074 = 0;
                            $xfer += $input->readString($key1073);
                            $xfer += $input->readI64($val1074);
                            $this->disks_size_mapping[$key1073] = $val1074;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->keep_alive);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->time);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_continuous_data_replication);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->azure_storage_connection_string);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == TType::STRUCT) {
                        $this->vmware_connection = new \saasame\transport\vmware_connection_info();
                        $xfer += $this->vmware_connection->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->thin_provisioned);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_paused);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 22:
                    if ($ftype == TType::STRUCT) {
                        $this->cascadings = new \saasame\transport\cascading();
                        $xfer += $this->cascadings->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 23:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->post_snapshot_script);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 24:
                    if ($ftype == TType::LST) {
                        $this->disks_order = array();
                        $_size1075 = 0;
                        $_etype1078 = 0;
                        $xfer += $input->readListBegin($_etype1078, $_size1075);
                        for ($_i1079 = 0; $_i1079 < $_size1075; ++$_i1079) {
                            $elem1080 = null;
                            $xfer += $input->readString($elem1080);
                            $this->disks_order []= $elem1080;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('loader_job_create_detail');
        if ($this->replica_id !== null) {
            $xfer += $output->writeFieldBegin('replica_id', TType::STRING, 1);
            $xfer += $output->writeString($this->replica_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->disks_lun_mapping !== null) {
            if (!is_array($this->disks_lun_mapping)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('disks_lun_mapping', TType::MAP, 2);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->disks_lun_mapping));
            foreach ($this->disks_lun_mapping as $kiter1081 => $viter1082) {
                $xfer += $output->writeString($kiter1081);
                $xfer += $output->writeString($viter1082);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->snapshots !== null) {
            if (!is_array($this->snapshots)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('snapshots', TType::LST, 3);
            $output->writeListBegin(TType::STRING, count($this->snapshots));
            foreach ($this->snapshots as $iter1083) {
                $xfer += $output->writeString($iter1083);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->disks_snapshot_mapping !== null) {
            if (!is_array($this->disks_snapshot_mapping)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('disks_snapshot_mapping', TType::MAP, 4);
            $output->writeMapBegin(TType::STRING, TType::MAP, count($this->disks_snapshot_mapping));
            foreach ($this->disks_snapshot_mapping as $kiter1084 => $viter1085) {
                $xfer += $output->writeString($kiter1084);
                $output->writeMapBegin(TType::STRING, TType::STRING, count($viter1085));
                foreach ($viter1085 as $kiter1086 => $viter1087) {
                    $xfer += $output->writeString($kiter1086);
                    $xfer += $output->writeString($viter1087);
                }
                $output->writeMapEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->connection_id !== null) {
            $xfer += $output->writeFieldBegin('connection_id', TType::STRING, 5);
            $xfer += $output->writeString($this->connection_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->block_mode_enable !== null) {
            $xfer += $output->writeFieldBegin('block_mode_enable', TType::BOOL, 6);
            $xfer += $output->writeBool($this->block_mode_enable);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->purge_data !== null) {
            $xfer += $output->writeFieldBegin('purge_data', TType::BOOL, 7);
            $xfer += $output->writeBool($this->purge_data);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->remap !== null) {
            $xfer += $output->writeFieldBegin('remap', TType::BOOL, 8);
            $xfer += $output->writeBool($this->remap);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->detect_type !== null) {
            $xfer += $output->writeFieldBegin('detect_type', TType::I32, 9);
            $xfer += $output->writeI32($this->detect_type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->worker_thread_number !== null) {
            $xfer += $output->writeFieldBegin('worker_thread_number', TType::I32, 10);
            $xfer += $output->writeI32($this->worker_thread_number);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->host_name !== null) {
            $xfer += $output->writeFieldBegin('host_name', TType::STRING, 11);
            $xfer += $output->writeString($this->host_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->export_disk_type !== null) {
            $xfer += $output->writeFieldBegin('export_disk_type', TType::I32, 12);
            $xfer += $output->writeI32($this->export_disk_type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->export_path !== null) {
            $xfer += $output->writeFieldBegin('export_path', TType::STRING, 13);
            $xfer += $output->writeString($this->export_path);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->disks_size_mapping !== null) {
            if (!is_array($this->disks_size_mapping)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('disks_size_mapping', TType::MAP, 14);
            $output->writeMapBegin(TType::STRING, TType::I64, count($this->disks_size_mapping));
            foreach ($this->disks_size_mapping as $kiter1088 => $viter1089) {
                $xfer += $output->writeString($kiter1088);
                $xfer += $output->writeI64($viter1089);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->keep_alive !== null) {
            $xfer += $output->writeFieldBegin('keep_alive', TType::BOOL, 15);
            $xfer += $output->writeBool($this->keep_alive);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->time !== null) {
            $xfer += $output->writeFieldBegin('time', TType::STRING, 16);
            $xfer += $output->writeString($this->time);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_continuous_data_replication !== null) {
            $xfer += $output->writeFieldBegin('is_continuous_data_replication', TType::BOOL, 17);
            $xfer += $output->writeBool($this->is_continuous_data_replication);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->azure_storage_connection_string !== null) {
            $xfer += $output->writeFieldBegin('azure_storage_connection_string', TType::STRING, 18);
            $xfer += $output->writeString($this->azure_storage_connection_string);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->vmware_connection !== null) {
            if (!is_object($this->vmware_connection)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('vmware_connection', TType::STRUCT, 19);
            $xfer += $this->vmware_connection->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->thin_provisioned !== null) {
            $xfer += $output->writeFieldBegin('thin_provisioned', TType::BOOL, 20);
            $xfer += $output->writeBool($this->thin_provisioned);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_paused !== null) {
            $xfer += $output->writeFieldBegin('is_paused', TType::BOOL, 21);
            $xfer += $output->writeBool($this->is_paused);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cascadings !== null) {
            if (!is_object($this->cascadings)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('cascadings', TType::STRUCT, 22);
            $xfer += $this->cascadings->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->post_snapshot_script !== null) {
            $xfer += $output->writeFieldBegin('post_snapshot_script', TType::STRING, 23);
            $xfer += $output->writeString($this->post_snapshot_script);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->disks_order !== null) {
            if (!is_array($this->disks_order)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('disks_order', TType::LST, 24);
            $output->writeListBegin(TType::STRING, count($this->disks_order));
            foreach ($this->disks_order as $iter1090) {
                $xfer += $output->writeString($iter1090);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class launcher_job_create_detail
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'replica_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'disks_lun_mapping',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        3 => array(
            'var' => 'is_sysvol_authoritative_restore',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        4 => array(
            'var' => 'is_enable_debug',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        5 => array(
            'var' => 'is_disable_machine_password_change',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        6 => array(
            'var' => 'is_force_normal_boot',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        7 => array(
            'var' => 'network_infos',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\network_info',
                ),
        ),
        8 => array(
            'var' => 'config',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'gpt_to_mbr',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        10 => array(
            'var' => 'detect_type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        11 => array(
            'var' => 'skip_system_injection',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        12 => array(
            'var' => 'reboot_winpe',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        13 => array(
            'var' => 'callbacks',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        14 => array(
            'var' => 'callback_timeout',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        15 => array(
            'var' => 'host_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        16 => array(
            'var' => 'export_disk_type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        17 => array(
            'var' => 'export_path',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        18 => array(
            'var' => 'target_type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        19 => array(
            'var' => 'os_type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        20 => array(
            'var' => 'is_update_ex',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        21 => array(
            'var' => 'options_type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        22 => array(
            'var' => 'options',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\extra_options',
        ),
        23 => array(
            'var' => 'pre_scripts',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        24 => array(
            'var' => 'post_scripts',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        25 => array(
            'var' => 'vmware',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\saasame\transport\vmware_options',
        ),
        26 => array(
            'var' => 'mode',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        27 => array(
            'var' => 'azure_storage_connection_string',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $replica_id = "";
    /**
     * @var array
     */
    public $disks_lun_mapping = null;
    /**
     * @var bool
     */
    public $is_sysvol_authoritative_restore = false;
    /**
     * @var bool
     */
    public $is_enable_debug = false;
    /**
     * @var bool
     */
    public $is_disable_machine_password_change = false;
    /**
     * @var bool
     */
    public $is_force_normal_boot = false;
    /**
     * @var \saasame\transport\network_info[]
     */
    public $network_infos = null;
    /**
     * @var string
     */
    public $config = null;
    /**
     * @var bool
     */
    public $gpt_to_mbr = true;
    /**
     * @var int
     */
    public $detect_type =     0;
    /**
     * @var bool
     */
    public $skip_system_injection = false;
    /**
     * @var bool
     */
    public $reboot_winpe = false;
    /**
     * @var string[]
     */
    public $callbacks = null;
    /**
     * @var int
     */
    public $callback_timeout = 30;
    /**
     * @var string
     */
    public $host_name = "";
    /**
     * @var int
     */
    public $export_disk_type =     0;
    /**
     * @var string
     */
    public $export_path = "";
    /**
     * @var int
     */
    public $target_type =     -1;
    /**
     * @var int
     */
    public $os_type =     1;
    /**
     * @var bool
     */
    public $is_update_ex = false;
    /**
     * @var int
     */
    public $options_type =     0;
    /**
     * @var \saasame\transport\extra_options
     */
    public $options = null;
    /**
     * @var string[]
     */
    public $pre_scripts = null;
    /**
     * @var string[]
     */
    public $post_scripts = null;
    /**
     * @var \saasame\transport\vmware_options
     */
    public $vmware = null;
    /**
     * @var int
     */
    public $mode =     0;
    /**
     * @var string
     */
    public $azure_storage_connection_string = "";

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['replica_id'])) {
                $this->replica_id = $vals['replica_id'];
            }
            if (isset($vals['disks_lun_mapping'])) {
                $this->disks_lun_mapping = $vals['disks_lun_mapping'];
            }
            if (isset($vals['is_sysvol_authoritative_restore'])) {
                $this->is_sysvol_authoritative_restore = $vals['is_sysvol_authoritative_restore'];
            }
            if (isset($vals['is_enable_debug'])) {
                $this->is_enable_debug = $vals['is_enable_debug'];
            }
            if (isset($vals['is_disable_machine_password_change'])) {
                $this->is_disable_machine_password_change = $vals['is_disable_machine_password_change'];
            }
            if (isset($vals['is_force_normal_boot'])) {
                $this->is_force_normal_boot = $vals['is_force_normal_boot'];
            }
            if (isset($vals['network_infos'])) {
                $this->network_infos = $vals['network_infos'];
            }
            if (isset($vals['config'])) {
                $this->config = $vals['config'];
            }
            if (isset($vals['gpt_to_mbr'])) {
                $this->gpt_to_mbr = $vals['gpt_to_mbr'];
            }
            if (isset($vals['detect_type'])) {
                $this->detect_type = $vals['detect_type'];
            }
            if (isset($vals['skip_system_injection'])) {
                $this->skip_system_injection = $vals['skip_system_injection'];
            }
            if (isset($vals['reboot_winpe'])) {
                $this->reboot_winpe = $vals['reboot_winpe'];
            }
            if (isset($vals['callbacks'])) {
                $this->callbacks = $vals['callbacks'];
            }
            if (isset($vals['callback_timeout'])) {
                $this->callback_timeout = $vals['callback_timeout'];
            }
            if (isset($vals['host_name'])) {
                $this->host_name = $vals['host_name'];
            }
            if (isset($vals['export_disk_type'])) {
                $this->export_disk_type = $vals['export_disk_type'];
            }
            if (isset($vals['export_path'])) {
                $this->export_path = $vals['export_path'];
            }
            if (isset($vals['target_type'])) {
                $this->target_type = $vals['target_type'];
            }
            if (isset($vals['os_type'])) {
                $this->os_type = $vals['os_type'];
            }
            if (isset($vals['is_update_ex'])) {
                $this->is_update_ex = $vals['is_update_ex'];
            }
            if (isset($vals['options_type'])) {
                $this->options_type = $vals['options_type'];
            }
            if (isset($vals['options'])) {
                $this->options = $vals['options'];
            }
            if (isset($vals['pre_scripts'])) {
                $this->pre_scripts = $vals['pre_scripts'];
            }
            if (isset($vals['post_scripts'])) {
                $this->post_scripts = $vals['post_scripts'];
            }
            if (isset($vals['vmware'])) {
                $this->vmware = $vals['vmware'];
            }
            if (isset($vals['mode'])) {
                $this->mode = $vals['mode'];
            }
            if (isset($vals['azure_storage_connection_string'])) {
                $this->azure_storage_connection_string = $vals['azure_storage_connection_string'];
            }
        }
    }

    public function getName()
    {
        return 'launcher_job_create_detail';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->replica_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::MAP) {
                        $this->disks_lun_mapping = array();
                        $_size1091 = 0;
                        $_ktype1092 = 0;
                        $_vtype1093 = 0;
                        $xfer += $input->readMapBegin($_ktype1092, $_vtype1093, $_size1091);
                        for ($_i1095 = 0; $_i1095 < $_size1091; ++$_i1095) {
                            $key1096 = '';
                            $val1097 = '';
                            $xfer += $input->readString($key1096);
                            $xfer += $input->readString($val1097);
                            $this->disks_lun_mapping[$key1096] = $val1097;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_sysvol_authoritative_restore);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_enable_debug);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_disable_machine_password_change);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_force_normal_boot);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::SET) {
                        $this->network_infos = array();
                        $_size1098 = 0;
                        $_etype1101 = 0;
                        $xfer += $input->readSetBegin($_etype1101, $_size1098);
                        for ($_i1102 = 0; $_i1102 < $_size1098; ++$_i1102) {
                            $elem1103 = null;
                            $elem1103 = new \saasame\transport\network_info();
                            $xfer += $elem1103->read($input);
                            $this->network_infos[] = $elem1103;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->config);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->gpt_to_mbr);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->detect_type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->skip_system_injection);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->reboot_winpe);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::SET) {
                        $this->callbacks = array();
                        $_size1104 = 0;
                        $_etype1107 = 0;
                        $xfer += $input->readSetBegin($_etype1107, $_size1104);
                        for ($_i1108 = 0; $_i1108 < $_size1104; ++$_i1108) {
                            $elem1109 = null;
                            $xfer += $input->readString($elem1109);
                            $this->callbacks[$elem1109] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->callback_timeout);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->host_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->export_disk_type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->export_path);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->target_type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->os_type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_update_ex);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->options_type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 22:
                    if ($ftype == TType::STRUCT) {
                        $this->options = new \saasame\transport\extra_options();
                        $xfer += $this->options->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 23:
                    if ($ftype == TType::SET) {
                        $this->pre_scripts = array();
                        $_size1110 = 0;
                        $_etype1113 = 0;
                        $xfer += $input->readSetBegin($_etype1113, $_size1110);
                        for ($_i1114 = 0; $_i1114 < $_size1110; ++$_i1114) {
                            $elem1115 = null;
                            $xfer += $input->readString($elem1115);
                            $this->pre_scripts[$elem1115] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 24:
                    if ($ftype == TType::SET) {
                        $this->post_scripts = array();
                        $_size1116 = 0;
                        $_etype1119 = 0;
                        $xfer += $input->readSetBegin($_etype1119, $_size1116);
                        for ($_i1120 = 0; $_i1120 < $_size1116; ++$_i1120) {
                            $elem1121 = null;
                            $xfer += $input->readString($elem1121);
                            $this->post_scripts[$elem1121] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 25:
                    if ($ftype == TType::STRUCT) {
                        $this->vmware = new \saasame\transport\vmware_options();
                        $xfer += $this->vmware->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 26:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->mode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 27:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->azure_storage_connection_string);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('launcher_job_create_detail');
        if ($this->replica_id !== null) {
            $xfer += $output->writeFieldBegin('replica_id', TType::STRING, 1);
            $xfer += $output->writeString($this->replica_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->disks_lun_mapping !== null) {
            if (!is_array($this->disks_lun_mapping)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('disks_lun_mapping', TType::MAP, 2);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->disks_lun_mapping));
            foreach ($this->disks_lun_mapping as $kiter1122 => $viter1123) {
                $xfer += $output->writeString($kiter1122);
                $xfer += $output->writeString($viter1123);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_sysvol_authoritative_restore !== null) {
            $xfer += $output->writeFieldBegin('is_sysvol_authoritative_restore', TType::BOOL, 3);
            $xfer += $output->writeBool($this->is_sysvol_authoritative_restore);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_enable_debug !== null) {
            $xfer += $output->writeFieldBegin('is_enable_debug', TType::BOOL, 4);
            $xfer += $output->writeBool($this->is_enable_debug);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_disable_machine_password_change !== null) {
            $xfer += $output->writeFieldBegin('is_disable_machine_password_change', TType::BOOL, 5);
            $xfer += $output->writeBool($this->is_disable_machine_password_change);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_force_normal_boot !== null) {
            $xfer += $output->writeFieldBegin('is_force_normal_boot', TType::BOOL, 6);
            $xfer += $output->writeBool($this->is_force_normal_boot);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->network_infos !== null) {
            if (!is_array($this->network_infos)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('network_infos', TType::SET, 7);
            $output->writeSetBegin(TType::STRUCT, count($this->network_infos));
            foreach ($this->network_infos as $iter1124 => $iter1125) {
                $xfer += $iter1125->write($output);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->config !== null) {
            $xfer += $output->writeFieldBegin('config', TType::STRING, 8);
            $xfer += $output->writeString($this->config);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->gpt_to_mbr !== null) {
            $xfer += $output->writeFieldBegin('gpt_to_mbr', TType::BOOL, 9);
            $xfer += $output->writeBool($this->gpt_to_mbr);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->detect_type !== null) {
            $xfer += $output->writeFieldBegin('detect_type', TType::I32, 10);
            $xfer += $output->writeI32($this->detect_type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->skip_system_injection !== null) {
            $xfer += $output->writeFieldBegin('skip_system_injection', TType::BOOL, 11);
            $xfer += $output->writeBool($this->skip_system_injection);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->reboot_winpe !== null) {
            $xfer += $output->writeFieldBegin('reboot_winpe', TType::BOOL, 12);
            $xfer += $output->writeBool($this->reboot_winpe);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->callbacks !== null) {
            if (!is_array($this->callbacks)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('callbacks', TType::SET, 13);
            $output->writeSetBegin(TType::STRING, count($this->callbacks));
            foreach ($this->callbacks as $iter1126 => $iter1127) {
                $xfer += $output->writeString($iter1126);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->callback_timeout !== null) {
            $xfer += $output->writeFieldBegin('callback_timeout', TType::I32, 14);
            $xfer += $output->writeI32($this->callback_timeout);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->host_name !== null) {
            $xfer += $output->writeFieldBegin('host_name', TType::STRING, 15);
            $xfer += $output->writeString($this->host_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->export_disk_type !== null) {
            $xfer += $output->writeFieldBegin('export_disk_type', TType::I32, 16);
            $xfer += $output->writeI32($this->export_disk_type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->export_path !== null) {
            $xfer += $output->writeFieldBegin('export_path', TType::STRING, 17);
            $xfer += $output->writeString($this->export_path);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->target_type !== null) {
            $xfer += $output->writeFieldBegin('target_type', TType::I32, 18);
            $xfer += $output->writeI32($this->target_type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->os_type !== null) {
            $xfer += $output->writeFieldBegin('os_type', TType::I32, 19);
            $xfer += $output->writeI32($this->os_type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_update_ex !== null) {
            $xfer += $output->writeFieldBegin('is_update_ex', TType::BOOL, 20);
            $xfer += $output->writeBool($this->is_update_ex);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->options_type !== null) {
            $xfer += $output->writeFieldBegin('options_type', TType::I32, 21);
            $xfer += $output->writeI32($this->options_type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->options !== null) {
            if (!is_object($this->options)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('options', TType::STRUCT, 22);
            $xfer += $this->options->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pre_scripts !== null) {
            if (!is_array($this->pre_scripts)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('pre_scripts', TType::SET, 23);
            $output->writeSetBegin(TType::STRING, count($this->pre_scripts));
            foreach ($this->pre_scripts as $iter1128 => $iter1129) {
                $xfer += $output->writeString($iter1128);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->post_scripts !== null) {
            if (!is_array($this->post_scripts)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('post_scripts', TType::SET, 24);
            $output->writeSetBegin(TType::STRING, count($this->post_scripts));
            foreach ($this->post_scripts as $iter1130 => $iter1131) {
                $xfer += $output->writeString($iter1130);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->vmware !== null) {
            if (!is_object($this->vmware)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('vmware', TType::STRUCT, 25);
            $xfer += $this->vmware->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->mode !== null) {
            $xfer += $output->writeFieldBegin('mode', TType::I32, 26);
            $xfer += $output->writeI32($this->mode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->azure_storage_connection_string !== null) {
            $xfer += $output->writeFieldBegin('azure_storage_connection_string', TType::STRING, 27);
            $xfer += $output->writeString($this->azure_storage_connection_string);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class register_service_info
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'mgmt_addr',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'username',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'password',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'service_types',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        5 => array(
            'var' => 'version',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'path',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $mgmt_addr = "";
    /**
     * @var string
     */
    public $username = "";
    /**
     * @var string
     */
    public $password = "";
    /**
     * @var string[]
     */
    public $service_types = null;
    /**
     * @var string
     */
    public $version = "";
    /**
     * @var string
     */
    public $path = "";

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['mgmt_addr'])) {
                $this->mgmt_addr = $vals['mgmt_addr'];
            }
            if (isset($vals['username'])) {
                $this->username = $vals['username'];
            }
            if (isset($vals['password'])) {
                $this->password = $vals['password'];
            }
            if (isset($vals['service_types'])) {
                $this->service_types = $vals['service_types'];
            }
            if (isset($vals['version'])) {
                $this->version = $vals['version'];
            }
            if (isset($vals['path'])) {
                $this->path = $vals['path'];
            }
        }
    }

    public function getName()
    {
        return 'register_service_info';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->mgmt_addr);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->username);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->password);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::SET) {
                        $this->service_types = array();
                        $_size1132 = 0;
                        $_etype1135 = 0;
                        $xfer += $input->readSetBegin($_etype1135, $_size1132);
                        for ($_i1136 = 0; $_i1136 < $_size1132; ++$_i1136) {
                            $elem1137 = null;
                            $xfer += $input->readString($elem1137);
                            $this->service_types[$elem1137] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->version);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->path);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('register_service_info');
        if ($this->mgmt_addr !== null) {
            $xfer += $output->writeFieldBegin('mgmt_addr', TType::STRING, 1);
            $xfer += $output->writeString($this->mgmt_addr);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->username !== null) {
            $xfer += $output->writeFieldBegin('username', TType::STRING, 2);
            $xfer += $output->writeString($this->username);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->password !== null) {
            $xfer += $output->writeFieldBegin('password', TType::STRING, 3);
            $xfer += $output->writeString($this->password);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->service_types !== null) {
            if (!is_array($this->service_types)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('service_types', TType::SET, 4);
            $output->writeSetBegin(TType::STRING, count($this->service_types));
            foreach ($this->service_types as $iter1138 => $iter1139) {
                $xfer += $output->writeString($iter1138);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->version !== null) {
            $xfer += $output->writeFieldBegin('version', TType::STRING, 5);
            $xfer += $output->writeString($this->version);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->path !== null) {
            $xfer += $output->writeFieldBegin('path', TType::STRING, 6);
            $xfer += $output->writeString($this->path);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class register_physical_packer_info
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'mgmt_addr',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'username',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'password',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'packer_addr',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'version',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'path',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $mgmt_addr = "";
    /**
     * @var string
     */
    public $username = "";
    /**
     * @var string
     */
    public $password = "";
    /**
     * @var string
     */
    public $packer_addr = "";
    /**
     * @var string
     */
    public $version = "";
    /**
     * @var string
     */
    public $path = "";

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['mgmt_addr'])) {
                $this->mgmt_addr = $vals['mgmt_addr'];
            }
            if (isset($vals['username'])) {
                $this->username = $vals['username'];
            }
            if (isset($vals['password'])) {
                $this->password = $vals['password'];
            }
            if (isset($vals['packer_addr'])) {
                $this->packer_addr = $vals['packer_addr'];
            }
            if (isset($vals['version'])) {
                $this->version = $vals['version'];
            }
            if (isset($vals['path'])) {
                $this->path = $vals['path'];
            }
        }
    }

    public function getName()
    {
        return 'register_physical_packer_info';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->mgmt_addr);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->username);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->password);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->packer_addr);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->version);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->path);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('register_physical_packer_info');
        if ($this->mgmt_addr !== null) {
            $xfer += $output->writeFieldBegin('mgmt_addr', TType::STRING, 1);
            $xfer += $output->writeString($this->mgmt_addr);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->username !== null) {
            $xfer += $output->writeFieldBegin('username', TType::STRING, 2);
            $xfer += $output->writeString($this->username);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->password !== null) {
            $xfer += $output->writeFieldBegin('password', TType::STRING, 3);
            $xfer += $output->writeString($this->password);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->packer_addr !== null) {
            $xfer += $output->writeFieldBegin('packer_addr', TType::STRING, 4);
            $xfer += $output->writeString($this->packer_addr);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->version !== null) {
            $xfer += $output->writeFieldBegin('version', TType::STRING, 5);
            $xfer += $output->writeString($this->version);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->path !== null) {
            $xfer += $output->writeFieldBegin('path', TType::STRING, 6);
            $xfer += $output->writeString($this->path);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class command_empty extends TException
{
    static public $isValidate = false;

    static public $_TSPEC = array(
    );


    public function __construct()
    {
    }

    public function getName()
    {
        return 'command_empty';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('command_empty');
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class invalid_session extends TException
{
    static public $isValidate = false;

    static public $_TSPEC = array(
    );


    public function __construct()
    {
    }

    public function getName()
    {
        return 'invalid_session';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('invalid_session');
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class transport_message
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        2 => array(
            'var' => 'message',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var int
     */
    public $id = 0;
    /**
     * @var string
     */
    public $message = "";

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['message'])) {
                $this->message = $vals['message'];
            }
        }
    }

    public function getName()
    {
        return 'transport_message';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->message);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('transport_message');
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::I64, 1);
            $xfer += $output->writeI64($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->message !== null) {
            $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
            $xfer += $output->writeString($this->message);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class register_return
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'message',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'session',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $message = "";
    /**
     * @var string
     */
    public $session = "";

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['message'])) {
                $this->message = $vals['message'];
            }
            if (isset($vals['session'])) {
                $this->session = $vals['session'];
            }
        }
    }

    public function getName()
    {
        return 'register_return';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->message);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->session);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('register_return');
        if ($this->message !== null) {
            $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
            $xfer += $output->writeString($this->message);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->session !== null) {
            $xfer += $output->writeFieldBegin('session', TType::STRING, 2);
            $xfer += $output->writeString($this->session);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class license_info
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'key',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'activated',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'count',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'expired_date',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'consumed',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'is_active',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        7 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'email',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'status',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $key = "";
    /**
     * @var string
     */
    public $activated = "";
    /**
     * @var int
     */
    public $count = 0;
    /**
     * @var string
     */
    public $expired_date = "";
    /**
     * @var int
     */
    public $consumed = 0;
    /**
     * @var bool
     */
    public $is_active = false;
    /**
     * @var string
     */
    public $name = "";
    /**
     * @var string
     */
    public $email = "";
    /**
     * @var string
     */
    public $status = "";

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['key'])) {
                $this->key = $vals['key'];
            }
            if (isset($vals['activated'])) {
                $this->activated = $vals['activated'];
            }
            if (isset($vals['count'])) {
                $this->count = $vals['count'];
            }
            if (isset($vals['expired_date'])) {
                $this->expired_date = $vals['expired_date'];
            }
            if (isset($vals['consumed'])) {
                $this->consumed = $vals['consumed'];
            }
            if (isset($vals['is_active'])) {
                $this->is_active = $vals['is_active'];
            }
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['email'])) {
                $this->email = $vals['email'];
            }
            if (isset($vals['status'])) {
                $this->status = $vals['status'];
            }
        }
    }

    public function getName()
    {
        return 'license_info';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->key);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->activated);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->count);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->expired_date);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->consumed);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_active);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->email);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->status);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('license_info');
        if ($this->key !== null) {
            $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
            $xfer += $output->writeString($this->key);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->activated !== null) {
            $xfer += $output->writeFieldBegin('activated', TType::STRING, 2);
            $xfer += $output->writeString($this->activated);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->count !== null) {
            $xfer += $output->writeFieldBegin('count', TType::I32, 3);
            $xfer += $output->writeI32($this->count);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->expired_date !== null) {
            $xfer += $output->writeFieldBegin('expired_date', TType::STRING, 4);
            $xfer += $output->writeString($this->expired_date);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->consumed !== null) {
            $xfer += $output->writeFieldBegin('consumed', TType::I32, 5);
            $xfer += $output->writeI32($this->consumed);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_active !== null) {
            $xfer += $output->writeFieldBegin('is_active', TType::BOOL, 6);
            $xfer += $output->writeBool($this->is_active);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 7);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->email !== null) {
            $xfer += $output->writeFieldBegin('email', TType::STRING, 8);
            $xfer += $output->writeString($this->email);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->status !== null) {
            $xfer += $output->writeFieldBegin('status', TType::STRING, 9);
            $xfer += $output->writeString($this->status);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class workload_history
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'machine_id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'type',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'histories',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::I32,
            'elem' => array(
                'type' => TType::I32,
                ),
        ),
    );

    /**
     * @var string
     */
    public $machine_id = "";
    /**
     * @var string
     */
    public $name = "";
    /**
     * @var string
     */
    public $type = "";
    /**
     * @var int[]
     */
    public $histories = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['machine_id'])) {
                $this->machine_id = $vals['machine_id'];
            }
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['type'])) {
                $this->type = $vals['type'];
            }
            if (isset($vals['histories'])) {
                $this->histories = $vals['histories'];
            }
        }
    }

    public function getName()
    {
        return 'workload_history';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->machine_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->histories = array();
                        $_size1140 = 0;
                        $_etype1143 = 0;
                        $xfer += $input->readListBegin($_etype1143, $_size1140);
                        for ($_i1144 = 0; $_i1144 < $_size1140; ++$_i1144) {
                            $elem1145 = null;
                            $xfer += $input->readI32($elem1145);
                            $this->histories []= $elem1145;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('workload_history');
        if ($this->machine_id !== null) {
            $xfer += $output->writeFieldBegin('machine_id', TType::STRING, 1);
            $xfer += $output->writeString($this->machine_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->type !== null) {
            $xfer += $output->writeFieldBegin('type', TType::STRING, 3);
            $xfer += $output->writeString($this->type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->histories !== null) {
            if (!is_array($this->histories)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('histories', TType::LST, 4);
            $output->writeListBegin(TType::I32, count($this->histories));
            foreach ($this->histories as $iter1146) {
                $xfer += $output->writeI32($iter1146);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class license_infos
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'licenses',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\license_info',
                ),
        ),
        2 => array(
            'var' => 'histories',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\workload_history',
                ),
        ),
    );

    /**
     * @var \saasame\transport\license_info[]
     */
    public $licenses = null;
    /**
     * @var \saasame\transport\workload_history[]
     */
    public $histories = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['licenses'])) {
                $this->licenses = $vals['licenses'];
            }
            if (isset($vals['histories'])) {
                $this->histories = $vals['histories'];
            }
        }
    }

    public function getName()
    {
        return 'license_infos';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::LST) {
                        $this->licenses = array();
                        $_size1147 = 0;
                        $_etype1150 = 0;
                        $xfer += $input->readListBegin($_etype1150, $_size1147);
                        for ($_i1151 = 0; $_i1151 < $_size1147; ++$_i1151) {
                            $elem1152 = null;
                            $elem1152 = new \saasame\transport\license_info();
                            $xfer += $elem1152->read($input);
                            $this->licenses []= $elem1152;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::LST) {
                        $this->histories = array();
                        $_size1153 = 0;
                        $_etype1156 = 0;
                        $xfer += $input->readListBegin($_etype1156, $_size1153);
                        for ($_i1157 = 0; $_i1157 < $_size1153; ++$_i1157) {
                            $elem1158 = null;
                            $elem1158 = new \saasame\transport\workload_history();
                            $xfer += $elem1158->read($input);
                            $this->histories []= $elem1158;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('license_infos');
        if ($this->licenses !== null) {
            if (!is_array($this->licenses)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('licenses', TType::LST, 1);
            $output->writeListBegin(TType::STRUCT, count($this->licenses));
            foreach ($this->licenses as $iter1159) {
                $xfer += $iter1159->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->histories !== null) {
            if (!is_array($this->histories)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('histories', TType::LST, 2);
            $output->writeListBegin(TType::STRUCT, count($this->histories));
            foreach ($this->histories as $iter1160) {
                $xfer += $iter1160->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
class running_task
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'triggers',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\saasame\transport\job_trigger',
                ),
        ),
        3 => array(
            'var' => 'mgmt_addr',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'mgmt_port',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'is_ssl',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        6 => array(
            'var' => 'parameters',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $id = null;
    /**
     * @var \saasame\transport\job_trigger[]
     */
    public $triggers = null;
    /**
     * @var string
     */
    public $mgmt_addr = null;
    /**
     * @var int
     */
    public $mgmt_port = 80;
    /**
     * @var bool
     */
    public $is_ssl = false;
    /**
     * @var string
     */
    public $parameters = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['triggers'])) {
                $this->triggers = $vals['triggers'];
            }
            if (isset($vals['mgmt_addr'])) {
                $this->mgmt_addr = $vals['mgmt_addr'];
            }
            if (isset($vals['mgmt_port'])) {
                $this->mgmt_port = $vals['mgmt_port'];
            }
            if (isset($vals['is_ssl'])) {
                $this->is_ssl = $vals['is_ssl'];
            }
            if (isset($vals['parameters'])) {
                $this->parameters = $vals['parameters'];
            }
        }
    }

    public function getName()
    {
        return 'running_task';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::LST) {
                        $this->triggers = array();
                        $_size1161 = 0;
                        $_etype1164 = 0;
                        $xfer += $input->readListBegin($_etype1164, $_size1161);
                        for ($_i1165 = 0; $_i1165 < $_size1161; ++$_i1165) {
                            $elem1166 = null;
                            $elem1166 = new \saasame\transport\job_trigger();
                            $xfer += $elem1166->read($input);
                            $this->triggers []= $elem1166;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->mgmt_addr);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->mgmt_port);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_ssl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->parameters);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('running_task');
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->triggers !== null) {
            if (!is_array($this->triggers)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('triggers', TType::LST, 2);
            $output->writeListBegin(TType::STRUCT, count($this->triggers));
            foreach ($this->triggers as $iter1167) {
                $xfer += $iter1167->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->mgmt_addr !== null) {
            $xfer += $output->writeFieldBegin('mgmt_addr', TType::STRING, 3);
            $xfer += $output->writeString($this->mgmt_addr);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->mgmt_port !== null) {
            $xfer += $output->writeFieldBegin('mgmt_port', TType::I32, 4);
            $xfer += $output->writeI32($this->mgmt_port);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_ssl !== null) {
            $xfer += $output->writeFieldBegin('is_ssl', TType::BOOL, 5);
            $xfer += $output->writeBool($this->is_ssl);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->parameters !== null) {
            $xfer += $output->writeFieldBegin('parameters', TType::STRING, 6);
            $xfer += $output->writeString($this->parameters);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
final class Constant extends \Thrift\Type\TConstant
{
    static protected $CONFIG_PATH;
    static protected $SCHEDULER_SERVICE;
    static protected $PHYSICAL_PACKER_SERVICE;
    static protected $VIRTUAL_PACKER_SERVICE;
    static protected $CARRIER_SERVICE;
    static protected $LOADER_SERVICE;
    static protected $LAUNCHER_SERVICE;
    static protected $LINUX_LAUNCHER_SERVICE;
    static protected $TRANSPORTER_SERVICE;
    static protected $TRANSPORTER_SERVICE_DISPLAY_NAME;
    static protected $TRANSPORTER_SERVICE_DESCRIPTION;
    static protected $SCHEDULER_SERVICE_DISPLAY_NAME;
    static protected $SCHEDULER_SERVICE_DESCRIPTION;
    static protected $PHYSICAL_PACKER_SERVICE_DISPLAY_NAME;
    static protected $PHYSICAL_PACKER_SERVICE_DESCRIPTION;
    static protected $VIRTUAL_PACKER_SERVICE_DISPLAY_NAME;
    static protected $VIRTUAL_PACKER_SERVICE_DESCRIPTION;
    static protected $CARRIER_SERVICE_DISPLAY_NAME;
    static protected $CARRIER_SERVICE_DESCRIPTION;
    static protected $LOADER_SERVICE_DISPLAY_NAME;
    static protected $LOADER_SERVICE_DESCRIPTION;
    static protected $LAUNCHER_SERVICE_DISPLAY_NAME;
    static protected $LAUNCHER_SERVICE_DESCRIPTION;
    static protected $SCHEDULER_SERVICE_PORT;
    static protected $PHYSICAL_PACKER_SERVICE_PORT;
    static protected $VIRTUAL_PACKER_SERVICE_PORT;
    static protected $CARRIER_SERVICE_PORT;
    static protected $LOADER_SERVICE_PORT;
    static protected $LAUNCHER_SERVICE_PORT;
    static protected $LAUNCHER_EMULATOR_PORT;
    static protected $TRANSPORT_SERVICE_PORT;
    static protected $TRANSPORT_SERVICE_HTTP_PORT;
    static protected $CARRIER_SERVICE_HTTP_PORT;
    static protected $CARRIER_SERVICE_SSL_PORT;
    static protected $MANAGEMENT_SERVICE_PORT;
    static protected $MANAGEMENT_SERVICE_PATH;
    static protected $CARRIER_SERVICE_PATH;
    static protected $TRANSPORTER_SERVICE_PATH;

    protected static function init_CONFIG_PATH()
    {
        return "Software\\SaaSame\\Transport";
    }

    protected static function init_SCHEDULER_SERVICE()
    {
        return "{6FC9C4B0-B61E-4745-A6AA-1D5F0A2DA08B}";
    }

    protected static function init_PHYSICAL_PACKER_SERVICE()
    {
        return "{6FC9C4B1-B61E-4745-A6AA-1D5F0A2DA08B}";
    }

    protected static function init_VIRTUAL_PACKER_SERVICE()
    {
        return "{6FC9C4B2-B61E-4745-A6AA-1D5F0A2DA08B}";
    }

    protected static function init_CARRIER_SERVICE()
    {
        return "{6FC9C4B3-B61E-4745-A6AA-1D5F0A2DA08B}";
    }

    protected static function init_LOADER_SERVICE()
    {
        return "{6FC9C4B4-B61E-4745-A6AA-1D5F0A2DA08B}";
    }

    protected static function init_LAUNCHER_SERVICE()
    {
        return "{6FC9C4B5-B61E-4745-A6AA-1D5F0A2DA08B}";
    }

    protected static function init_LINUX_LAUNCHER_SERVICE()
    {
        return "{6FC9C4B6-B61E-4745-A6AA-1D5F0A2DA08B}";
    }

    protected static function init_TRANSPORTER_SERVICE()
    {
        return "{6FC9C4B7-B61E-4745-A6AA-1D5F0A2DA08B}";
    }

    protected static function init_TRANSPORTER_SERVICE_DISPLAY_NAME()
    {
        return "SaaSame Transporter Service";
    }

    protected static function init_TRANSPORTER_SERVICE_DESCRIPTION()
    {
        return "SaaSame Transporter Service";
    }

    protected static function init_SCHEDULER_SERVICE_DISPLAY_NAME()
    {
        return "SaaSame Scheduler Service";
    }

    protected static function init_SCHEDULER_SERVICE_DESCRIPTION()
    {
        return "SaaSame Scheduler Service";
    }

    protected static function init_PHYSICAL_PACKER_SERVICE_DISPLAY_NAME()
    {
        return "SaaSame Host Packer Service";
    }

    protected static function init_PHYSICAL_PACKER_SERVICE_DESCRIPTION()
    {
        return "SaaSame Host Packer Service";
    }

    protected static function init_VIRTUAL_PACKER_SERVICE_DISPLAY_NAME()
    {
        return "SaaSame Virtual Packer Service";
    }

    protected static function init_VIRTUAL_PACKER_SERVICE_DESCRIPTION()
    {
        return "SaaSame Virtual Packer Service";
    }

    protected static function init_CARRIER_SERVICE_DISPLAY_NAME()
    {
        return "SaaSame Carrier Service";
    }

    protected static function init_CARRIER_SERVICE_DESCRIPTION()
    {
        return "SaaSame Carrier Service";
    }

    protected static function init_LOADER_SERVICE_DISPLAY_NAME()
    {
        return "SaaSame Loader Service";
    }

    protected static function init_LOADER_SERVICE_DESCRIPTION()
    {
        return "SaaSame Loader Service";
    }

    protected static function init_LAUNCHER_SERVICE_DISPLAY_NAME()
    {
        return "SaaSame Launcher Service";
    }

    protected static function init_LAUNCHER_SERVICE_DESCRIPTION()
    {
        return "SaaSame Launcher Service";
    }

    protected static function init_SCHEDULER_SERVICE_PORT()
    {
        return 18888;
    }

    protected static function init_PHYSICAL_PACKER_SERVICE_PORT()
    {
        return 18889;
    }

    protected static function init_VIRTUAL_PACKER_SERVICE_PORT()
    {
        return 18890;
    }

    protected static function init_CARRIER_SERVICE_PORT()
    {
        return 18891;
    }

    protected static function init_LOADER_SERVICE_PORT()
    {
        return 18892;
    }

    protected static function init_LAUNCHER_SERVICE_PORT()
    {
        return 18893;
    }

    protected static function init_LAUNCHER_EMULATOR_PORT()
    {
        return 18894;
    }

    protected static function init_TRANSPORT_SERVICE_PORT()
    {
        return 18895;
    }

    protected static function init_TRANSPORT_SERVICE_HTTP_PORT()
    {
        return 18896;
    }

    protected static function init_CARRIER_SERVICE_HTTP_PORT()
    {
        return 18897;
    }

    protected static function init_CARRIER_SERVICE_SSL_PORT()
    {
        return 28891;
    }

    protected static function init_MANAGEMENT_SERVICE_PORT()
    {
        return 443;
    }

    protected static function init_MANAGEMENT_SERVICE_PATH()
    {
        return "/mgmt/default.php";
    }

    protected static function init_CARRIER_SERVICE_PATH()
    {
        return "/carrier";
    }

    protected static function init_TRANSPORTER_SERVICE_PATH()
    {
        return "/transporter";
    }
}

